{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "variables": {
        "rpCosmoDbVirtualNetworkRules": [
            {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'rp-vnet', 'rp-subnet')]"
            },
            {
                "id": "[resourceId(parameters('gatewayResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', 'gateway-vnet', 'gateway-subnet')]"
            },
            {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'aks-net', 'ClusterSubnet-001')]"
            }
        ]
    },
    "parameters": {
        "acrResourceId": {
            "type": "string"
        },
        "adminApiCaBundle": {
            "type": "string"
        },
        "adminApiClientCertCommonName": {
            "type": "string"
        },
        "armApiCaBundle": {
            "type": "string",
            "defaultValue": ""
        },
        "armApiClientCertCommonName": {
            "type": "string",
            "defaultValue": ""
        },
        "armClientId": {
            "type": "string",
            "defaultValue": ""
        },
        "azureCloudName": {
            "type": "string"
        },
        "azureSecPackQualysUrl": {
            "type": "string"
        },
        "azureSecPackVSATenantId": {
            "type": "string"
        },
        "clusterDefaultInstallerPullspec": {
            "type": "string",
            "defaultValue": ""
        },
        "clusterMdmAccount": {
            "type": "string"
        },
        "clusterMdsdAccount": {
            "type": "string"
        },
        "clusterMdsdConfigVersion": {
            "type": "string"
        },
        "clusterMdsdNamespace": {
            "type": "string"
        },
        "clusterParentDomainName": {
            "type": "string"
        },
        "clustersAdoptByHive": {
            "type": "string",
            "defaultValue": ""
        },
        "clustersInstallViaHive": {
            "type": "string",
            "defaultValue": ""
        },
        "cosmosDB": {
            "type": "object",
            "defaultValue": {
                "gatewayProvisionedThroughput": 400,
                "portalProvisionedThroughput": 400,
                "standardProvisionedThroughput": 1000
            }
        },
        "databaseAccountName": {
            "type": "string"
        },
        "disableCosmosDBFirewall": {
            "type": "bool",
            "defaultValue": false
        },
        "fluentbitImage": {
            "type": "string"
        },
        "fpClientId": {
            "type": "string"
        },
        "fpServicePrincipalId": {
            "type": "string"
        },
        "gatewayDomains": {
            "type": "string",
            "defaultValue": ""
        },
        "gatewayResourceGroupName": {
            "type": "string"
        },
        "gatewayServicePrincipalId": {
            "type": "string"
        },
        "ipRules": {
            "type": "array"
        },
        "keyvaultDNSSuffix": {
            "type": "string"
        },
        "keyvaultPrefix": {
            "type": "string"
        },
        "mdmFrontendUrl": {
            "type": "string"
        },
        "mdsdEnvironment": {
            "type": "string"
        },
        "nonZonalRegions": {
            "type": "array",
            "defaultValue": [
                "eastasia",
                "centralindia",
                "centraluseuap",
                "koreacentral",
                "southcentralus",
                "canadacentral",
                "germanywestcentral",
                "norwayeast",
                "switzerlandnorth",
                "brazilsouth",
                "southafricanorth",
                "northcentralus",
                "uaenorth",
                "westus"
            ]
        },
        "oidcStorageAccountName": {
            "type": "string"
        },
        "portalAccessGroupIds": {
            "type": "string"
        },
        "portalClientId": {
            "type": "string"
        },
        "portalElevatedGroupIds": {
            "type": "string"
        },
        "rpFeatures": {
            "type": "string",
            "defaultValue": ""
        },
        "rpImage": {
            "type": "string"
        },
        "rpMdmAccount": {
            "type": "string"
        },
        "rpMdsdAccount": {
            "type": "string"
        },
        "rpMdsdConfigVersion": {
            "type": "string"
        },
        "rpMdsdNamespace": {
            "type": "string"
        },
        "rpParentDomainName": {
            "type": "string"
        },
        "rpServicePrincipalId": {
            "type": "string"
        },
        "rpVmssCapacity": {
            "type": "int",
            "defaultValue": 3
        },
        "sshPublicKey": {
            "type": "string"
        },
        "subscriptionResourceGroupName": {
            "type": "string"
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3"
        },
        "vmssCleanupEnabled": {
            "type": "bool",
            "defaultValue": true
        },
        "vmssName": {
            "type": "string"
        }
    },
    "resources": [
        {
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "zones": "[if(contains(parameters('nonZonalRegions'),toLower(replace(resourceGroup().location, ' ', ''))),'',pickZones('Microsoft.Network', 'publicIPAddresses', resourceGroup().location, 3))]",
            "name": "rp-pip",
            "type": "Microsoft.Network/publicIPAddresses",
            "location": "[resourceGroup().location]",
            "apiVersion": "2020-08-01"
        },
        {
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "zones": "[if(contains(parameters('nonZonalRegions'),toLower(replace(resourceGroup().location, ' ', ''))),'',pickZones('Microsoft.Network', 'publicIPAddresses', resourceGroup().location, 3))]",
            "name": "portal-pip",
            "type": "Microsoft.Network/publicIPAddresses",
            "location": "[resourceGroup().location]",
            "apiVersion": "2020-08-01"
        },
        {
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'rp-pip')]",
                                "tags": null
                            }
                        },
                        "name": "rp-frontend"
                    },
                    {
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'portal-pip')]",
                                "tags": null
                            }
                        },
                        "name": "portal-frontend"
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "rp-backend"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', 'rp-lb', 'rp-frontend')]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'rp-probe')]"
                            },
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "frontendPort": 443,
                            "backendPort": 443
                        },
                        "name": "rp-lbrule"
                    },
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', 'rp-lb', 'portal-frontend')]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'portal-probe-https')]"
                            },
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "frontendPort": 443,
                            "backendPort": 444
                        },
                        "name": "portal-lbrule"
                    },
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', 'rp-lb', 'portal-frontend')]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'portal-probe-ssh')]"
                            },
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "frontendPort": 22,
                            "backendPort": 2222
                        },
                        "name": "portal-lbrule-ssh"
                    }
                ],
                "probes": [
                    {
                        "properties": {
                            "protocol": "Https",
                            "port": 443,
                            "numberOfProbes": 2,
                            "requestPath": "/healthz/ready"
                        },
                        "name": "rp-probe"
                    },
                    {
                        "properties": {
                            "protocol": "Https",
                            "port": 444,
                            "numberOfProbes": 2,
                            "requestPath": "/healthz/ready"
                        },
                        "name": "portal-probe-https"
                    },
                    {
                        "properties": {
                            "protocol": "Tcp",
                            "port": 2222,
                            "numberOfProbes": 2
                        },
                        "name": "portal-probe-ssh"
                    }
                ]
            },
            "name": "rp-lb",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[resourceGroup().location]",
            "apiVersion": "2020-08-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'portal-pip')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', 'rp-pip')]"
            ]
        },
        {
            "sku": {
                "name": "[parameters('vmSize')]",
                "tier": "Standard",
                "capacity": "[parameters('rpVmssCapacity')]"
            },
            "properties": {
                "upgradePolicy": {
                    "mode": "Automatic",
                    "rollingUpgradePolicy": {
                        "maxBatchInstancePercent": 34,
                        "maxUnhealthyInstancePercent": 34,
                        "maxUnhealthyUpgradedInstancePercent": 34,
                        "pauseTimeBetweenBatches": "PT10M"
                    },
                    "automaticOSUpgradePolicy": {
                        "enableAutomaticOSUpgrade": true
                    }
                },
                "virtualMachineProfile": {
                    "osProfile": {
                        "computerNamePrefix": "[concat('rp-', parameters('vmssName'), '-')]",
                        "adminUsername": "cloud-user",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "/home/cloud-user/.ssh/authorized_keys",
                                        "keyData": "[parameters('sshPublicKey')]"
                                    }
                                ]
                            }
                        }
                    },
                    "storageProfile": {
                        "imageReference": {
                            "publisher": "MicrosoftCBLMariner",
                            "offer": "cbl-mariner",
                            "sku": "cbl-mariner-2-gen2",
                            "version": "latest"
                        },
                        "osDisk": {
                            "createOption": "FromImage",
                            "diskSizeGB": 1024,
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            }
                        }
                    },
                    "networkProfile": {
                        "healthProbe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'rp-probe')]"
                        },
                        "networkInterfaceConfigurations": [
                            {
                                "name": "rp-vmss-nic",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "rp-vmss-ipconfig",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'rp-vnet', 'rp-subnet')]"
                                                },
                                                "primary": true,
                                                "publicIPAddressConfiguration": {
                                                    "name": "rp-vmss-pip"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": true
                        }
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "rp-vmss-cse",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Extensions",
                                    "type": "CustomScript",
                                    "typeHandlerVersion": "2.0",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {},
                                    "protectedSettings": {
                                        "script": "[base64(concat(base64ToString('c2V0IC1leAoK'),'ACRRESOURCEID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('acrResourceId')),''')\n','ADMINAPICLIENTCERTCOMMONNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('adminApiClientCertCommonName')),''')\n','ARMAPICLIENTCERTCOMMONNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('armApiClientCertCommonName')),''')\n','ARMCLIENTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('armClientId')),''')\n','AZURECLOUDNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('azureCloudName')),''')\n','AZURESECPACKQUALYSURL=$(base64 -d \u003c\u003c\u003c''',base64(parameters('azureSecPackQualysUrl')),''')\n','AZURESECPACKVSATENANTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('azureSecPackVSATenantId')),''')\n','CLUSTERMDMACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdmAccount')),''')\n','CLUSTERMDSDACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdsdAccount')),''')\n','CLUSTERMDSDCONFIGVERSION=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdsdConfigVersion')),''')\n','CLUSTERMDSDNAMESPACE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdsdNamespace')),''')\n','CLUSTERPARENTDOMAINNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterParentDomainName')),''')\n','DATABASEACCOUNTNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('databaseAccountName')),''')\n','FLUENTBITIMAGE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('fluentbitImage')),''')\n','FPCLIENTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('fpClientId')),''')\n','FPSERVICEPRINCIPALID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('fpServicePrincipalId')),''')\n','GATEWAYDOMAINS=$(base64 -d \u003c\u003c\u003c''',base64(parameters('gatewayDomains')),''')\n','GATEWAYRESOURCEGROUPNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('gatewayResourceGroupName')),''')\n','GATEWAYSERVICEPRINCIPALID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('gatewayServicePrincipalId')),''')\n','KEYVAULTDNSSUFFIX=$(base64 -d \u003c\u003c\u003c''',base64(parameters('keyvaultDNSSuffix')),''')\n','KEYVAULTPREFIX=$(base64 -d \u003c\u003c\u003c''',base64(parameters('keyvaultPrefix')),''')\n','MDMFRONTENDURL=$(base64 -d \u003c\u003c\u003c''',base64(parameters('mdmFrontendUrl')),''')\n','MDSDENVIRONMENT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('mdsdEnvironment')),''')\n','PORTALACCESSGROUPIDS=$(base64 -d \u003c\u003c\u003c''',base64(parameters('portalAccessGroupIds')),''')\n','PORTALCLIENTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('portalClientId')),''')\n','PORTALELEVATEDGROUPIDS=$(base64 -d \u003c\u003c\u003c''',base64(parameters('portalElevatedGroupIds')),''')\n','RPFEATURES=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpFeatures')),''')\n','RPIMAGE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpImage')),''')\n','RPMDMACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdmAccount')),''')\n','RPMDSDACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdsdAccount')),''')\n','RPMDSDCONFIGVERSION=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdsdConfigVersion')),''')\n','RPMDSDNAMESPACE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdsdNamespace')),''')\n','RPPARENTDOMAINNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpParentDomainName')),''')\n','OIDCSTORAGEACCOUNTNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('oidcStorageAccountName')),''')\n','CLUSTERSINSTALLVIAHIVE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clustersInstallViaHive')),''')\n','CLUSTERSADOPTBYHIVE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clustersAdoptByHive')),''')\n','CLUSTERDEFAULTINSTALLERPULLSPEC=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterDefaultInstallerPullspec')),''')\n','ADMINAPICABUNDLE=''',parameters('adminApiCaBundle'),'''\n','ARMAPICABUNDLE=''',parameters('armApiCaBundle'),'''\n','MDMIMAGE=''/distroless/genevamdm:2.2024.626.1539-d1a6e7-20240715t0935@sha256:372fbc981bbfdf2b9a9d0ffdca2c51ed389b291a3bcff0401e9afb0c01605823''\n','LOCATION=$(base64 -d \u003c\u003c\u003c''',base64(resourceGroup().location),''')\n','SUBSCRIPTIONID=$(base64 -d \u003c\u003c\u003c''',base64(subscription().subscriptionId),''')\n','RESOURCEGROUPNAME=$(base64 -d \u003c\u003c\u003c''',base64(resourceGroup().name),''')\n','\n',base64ToString('')))]"
                                    }
                                }
                            },
                            {
                                "name": "AzureMonitorLinuxAgent",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Monitor",
                                    "type": "AzureMonitorLinuxAgent",
                                    "typeHandlerVersion": "1.0",
                                    "autoUpgradeMinorVersion": true,
                                    "enableAutomaticUpgrade": true,
                                    "settings": {
                                        "GCS_AUTO_CONFIG": true
                                    }
                                }
                            }
                        ]
                    }
                },
                "overprovision": false
            },
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat('aro-rp-', resourceGroup().location))]": {}
                }
            },
            "name": "[concat('rp-vmss-', parameters('vmssName'))]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2024-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, parameters('rpServicePrincipalId'), 'RP / Reader'))]",
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {
                "severity": 2,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT15M",
                "targetResourceType": "Microsoft.Network/loadBalancers",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "LessThan",
                            "threshold": 30,
                            "AdditionalProperties": null,
                            "name": "HealthProbeCheck",
                            "metricName": "DipAvailability",
                            "metricNamespace": "microsoft.network/loadBalancers",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-availability-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {
                "severity": 3,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
                ],
                "evaluationFrequency": "PT15M",
                "windowSize": "PT6H",
                "targetResourceType": "Microsoft.Network/loadBalancers",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "LessThan",
                            "threshold": 67,
                            "AdditionalProperties": null,
                            "name": "HealthProbeCheck",
                            "metricName": "DipAvailability",
                            "metricNamespace": "microsoft.network/loadBalancers",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-degraded-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {
                "severity": 2,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT5M",
                "targetResourceType": "Microsoft.Network/loadBalancers",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "LessThan",
                            "threshold": 33,
                            "AdditionalProperties": null,
                            "name": "HealthProbeCheck",
                            "metricName": "VipAvailability",
                            "metricNamespace": "microsoft.network/loadBalancers",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-vnet-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {},
            "name": "[concat(resourceGroup().location, '.', parameters('clusterParentDomainName'))]",
            "type": "Microsoft.Network/dnsZones",
            "location": "global",
            "apiVersion": "2018-05-01"
        },
        {
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', 'rp-pe-vnet-001')]"
                }
            },
            "name": "rp-vnet/peering-rp-pe-vnet-001",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]"
        },
        {
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', 'rp-vnet')]"
                }
            },
            "name": "rp-pe-vnet-001/peering-rp-vnet",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]"
        },
        {
            "apiVersion": "2023-04-15",
            "kind": "GlobalDocumentDB",
            "location": "[resourceGroup().location]",
            "name": "[parameters('databaseAccountName')]",
            "properties": {
                "backupPolicy": {
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 720
                    },
                    "type": "Periodic"
                },
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Strong"
                },
                "databaseAccountOfferType": "Standard",
                "disableKeyBasedMetadataWriteAccess": true,
                "ipRules": "[if(parameters('disableCosmosDBFirewall'), createArray(), concat(parameters('ipRules'),createArray(createObject('ipAddressOrRange', '104.42.195.92'),createObject('ipAddressOrRange','40.76.54.131'),createObject('ipAddressOrRange','52.176.6.30'),createObject('ipAddressOrRange','52.169.50.45'),createObject('ipAddressOrRange','52.187.184.26'))))]",
                "isVirtualNetworkFilterEnabled": "[not(parameters('disableCosmosDBFirewall'))]",
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]"
                    }
                ],
                "minimalTlsVersion": "Tls12",
                "virtualNetworkRules": "[if(parameters('disableCosmosDBFirewall'), createArray(), variables('rpCosmoDbVirtualNetworkRules'))]"
            },
            "tags": {
                "defaultExperience": "Core (SQL)"
            },
            "type": "Microsoft.DocumentDB/databaseAccounts"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO')]",
            "properties": {
                "options": {
                    "throughput": "[parameters('cosmosDB').standardProvisionedThroughput]"
                },
                "resource": {
                    "id": "['ARO']"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/AsyncOperations')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": 604800,
                    "id": "AsyncOperations",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/OpenShiftVersions')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": -1,
                    "id": "OpenShiftVersions",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/PlatformWorkloadIdentityRoleSets')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": -1,
                    "id": "PlatformWorkloadIdentityRoleSets",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/ClusterManagerConfigurations')]",
            "properties": {
                "options": {},
                "resource": {
                    "id": "ClusterManagerConfigurations",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/partitionKey"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Billing')]",
            "properties": {
                "options": {},
                "resource": {
                    "id": "Billing",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Gateway')]",
            "properties": {
                "options": {
                    "throughput": "[parameters('cosmosDB').gatewayProvisionedThroughput]"
                },
                "resource": {
                    "defaultTtl": -1,
                    "id": "Gateway",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Monitors')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": -1,
                    "id": "Monitors",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/OpenShiftClusters')]",
            "properties": {
                "options": {},
                "resource": {
                    "id": "OpenShiftClusters",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/partitionKey"
                        ]
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": [
                            {
                                "paths": [
                                    "/key"
                                ]
                            },
                            {
                                "paths": [
                                    "/clusterResourceGroupIdKey"
                                ]
                            },
                            {
                                "paths": [
                                    "/clientIdKey"
                                ]
                            }
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Portal')]",
            "properties": {
                "options": {
                    "throughput": "[parameters('cosmosDB').portalProvisionedThroughput]"
                },
                "resource": {
                    "defaultTtl": -1,
                    "id": "Portal",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Subscriptions')]",
            "properties": {
                "options": {},
                "resource": {
                    "id": "Subscriptions",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Subscriptions')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Subscriptions/renewLease')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 60;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "renewLease",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Subscriptions')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Subscriptions/retryLater')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 600;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "retryLater",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Billing')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Billing/setCreationBillingTimeStamp')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tvar now = Math.floor(date.getTime() / 1000);\n\t\t\t\tvar billingBody = body[\"billing\"];\n\t\t\t\tif (!billingBody[\"creationTime\"]) {\n\t\t\t\t\tbillingBody[\"creationTime\"] = now;\n\t\t\t\t}\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "setCreationBillingTimeStamp",
                    "triggerOperation": "Create",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Billing')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Billing/setDeletionBillingTimeStamp')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tvar now = Math.floor(date.getTime() / 1000);\n\t\t\t\tvar billingBody = body[\"billing\"];\n\t\t\t\tif (!billingBody[\"creationTime\"]) {\n\t\t\t\t\tbillingBody[\"creationTime\"] = now;\n\t\t\t\t}\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "setDeletionBillingTimeStamp",
                    "triggerOperation": "Replace",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'OpenShiftClusters')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/OpenShiftClusters/renewLease')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 60;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "renewLease",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Monitors')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Monitors/renewLease')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 60;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "renewLease",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "properties": {
                "severity": 3,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT1H",
                "targetResourceType": "Microsoft.DocumentDB/databaseAccounts",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "GreaterThan",
                            "threshold": 10,
                            "AdditionalProperties": null,
                            "name": "ThrottledRequestCheck",
                            "metricName": "TotalRequests",
                            "metricNamespace": "Microsoft.DocumentDB/databaseAccounts",
                            "timeAggregation": "Count",
                            "dimensions": [
                                {
                                    "name": "StatusCode",
                                    "operator": "Include",
                                    "values": [
                                        "429"
                                    ]
                                }
                            ],
                            "criterionType": "StaticThresholdCriterion"
                        },
                        {
                            "operator": "GreaterThan",
                            "threshold": 90,
                            "AdditionalProperties": null,
                            "name": "RUConsumptionCheck",
                            "metricName": "NormalizedRUConsumption",
                            "metricNamespace": "Microsoft.DocumentDB/databaseAccounts",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-cosmosdb-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[concat(parameters('databaseAccountName'), '/', guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('rpServicePrincipalId'), 'DocumentDB Data Contributor'))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts/dbs', parameters('databaseAccountName'), 'ARO')]",
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), '00000000-0000-0000-0000-000000000002')]",
                "principalId": "[parameters('rpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[concat(parameters('databaseAccountName'), '/', guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('gatewayServicePrincipalId'), 'DocumentDB Data Contributor'))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts/dbs', parameters('databaseAccountName'), 'ARO')]",
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), '00000000-0000-0000-0000-000000000002')]",
                "principalId": "[parameters('gatewayServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[guid(resourceGroup().id, parameters('rpServicePrincipalId'), 'RP / Reader')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "properties": {
                "scope": "[resourceGroup().id]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                "principalId": "[parameters('rpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview"
        },
        {
            "name": "[guid(resourceGroup().id, 'FP / Network Contributor')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "properties": {
                "scope": "[resourceGroup().id]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('fpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview"
        },
        {
            "name": "[concat(parameters('databaseAccountName'), '/Microsoft.Authorization/', guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('rpServicePrincipalId'), 'RP / DocumentDB Account Contributor'))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/providers/roleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                "principalId": "[parameters('rpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[concat(resourceGroup().location, '.', parameters('clusterParentDomainName'), '/Microsoft.Authorization/', guid(resourceId('Microsoft.Network/dnsZones', concat(resourceGroup().location, '.', parameters('clusterParentDomainName'))), 'FP / DNS Zone Contributor'))]",
            "type": "Microsoft.Network/dnsZones/providers/roleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.Network/dnsZones', concat(resourceGroup().location, '.', parameters('clusterParentDomainName')))]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                "principalId": "[parameters('fpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.Network/dnsZones', concat(resourceGroup().location, '.', parameters('clusterParentDomainName')))]"
            ]
        }
    ]
}
