{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "variables": {
        "rpCosmoDbVirtualNetworkRules": [
            {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'rp-vnet', 'rp-subnet')]"
            },
            {
                "id": "[resourceId(parameters('gatewayResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', 'gateway-vnet', 'gateway-subnet')]"
            },
            {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'aks-net', 'ClusterSubnet-001')]"
            }
        ]
    },
    "parameters": {
        "acrResourceId": {
            "type": "string"
        },
        "adminApiCaBundle": {
            "type": "string",
            "defaultValue": ""
        },
        "adminApiClientCertCommonName": {
            "type": "string"
        },
        "armApiCaBundle": {
            "type": "string",
            "defaultValue": ""
        },
        "armApiClientCertCommonName": {
            "type": "string",
            "defaultValue": ""
        },
        "armClientId": {
            "type": "string",
            "defaultValue": ""
        },
        "aroLogLevel": {
            "type": "string",
            "defaultValue": "info"
        },
        "azureCloudName": {
            "type": "string"
        },
        "azureSecPackQualysUrl": {
            "type": "string"
        },
        "azureSecPackVSATenantId": {
            "type": "string"
        },
        "clusterDefaultInstallerPullspec": {
            "type": "string",
            "defaultValue": ""
        },
        "clusterMdmAccount": {
            "type": "string"
        },
        "clusterMdsdAccount": {
            "type": "string"
        },
        "clusterMdsdConfigVersion": {
            "type": "string"
        },
        "clusterMdsdNamespace": {
            "type": "string"
        },
        "clusterParentDomainName": {
            "type": "string"
        },
        "clustersAdoptByHive": {
            "type": "string",
            "defaultValue": ""
        },
        "clustersInstallViaHive": {
            "type": "string",
            "defaultValue": ""
        },
        "cosmosDB": {
            "type": "object",
            "defaultValue": {
                "gatewayProvisionedThroughput": 400,
                "portalProvisionedThroughput": 400,
                "standardProvisionedThroughput": 1000
            }
        },
        "databaseAccountName": {
            "type": "string"
        },
        "disableCosmosDBFirewall": {
            "type": "bool",
            "defaultValue": false
        },
        "fluentbitImage": {
            "type": "string"
        },
        "fpClientId": {
            "type": "string"
        },
        "fpServicePrincipalId": {
            "type": "string"
        },
        "fpTenantId": {
            "type": "string"
        },
        "gatewayDomains": {
            "type": "string",
            "defaultValue": ""
        },
        "gatewayResourceGroupName": {
            "type": "string"
        },
        "gatewayServicePrincipalId": {
            "type": "string"
        },
        "globalDevopsServicePrincipalId": {
            "type": "string",
            "defaultValue": ""
        },
        "ipRules": {
            "type": "array"
        },
        "keyvaultDNSSuffix": {
            "type": "string"
        },
        "keyvaultPrefix": {
            "type": "string"
        },
        "mdmFrontendUrl": {
            "type": "string"
        },
        "mdsdEnvironment": {
            "type": "string"
        },
        "miseValidAppIDs": {
            "type": "array"
        },
        "miseValidAudiences": {
            "type": "array"
        },
        "msiRpEndpoint": {
            "type": "string"
        },
        "nonZonalRegions": {
            "type": "array",
            "defaultValue": [
                "eastasia",
                "centralindia",
                "centraluseuap",
                "koreacentral",
                "southcentralus",
                "canadacentral",
                "germanywestcentral",
                "norwayeast",
                "switzerlandnorth",
                "brazilsouth",
                "southafricanorth",
                "northcentralus",
                "uaenorth",
                "westus",
                "japanwest",
                "uaecentral"
            ]
        },
        "oidcStorageAccountName": {
            "type": "string"
        },
        "otelAuditQueueSize": {
            "type": "string"
        },
        "portalAccessGroupIds": {
            "type": "string"
        },
        "portalClientId": {
            "type": "string"
        },
        "portalElevatedGroupIds": {
            "type": "string"
        },
        "rpFeatures": {
            "type": "string",
            "defaultValue": ""
        },
        "rpImage": {
            "type": "string"
        },
        "rpMdmAccount": {
            "type": "string"
        },
        "rpMdsdAccount": {
            "type": "string"
        },
        "rpMdsdConfigVersion": {
            "type": "string"
        },
        "rpMdsdNamespace": {
            "type": "string"
        },
        "rpParentDomainName": {
            "type": "string"
        },
        "rpServicePrincipalId": {
            "type": "string"
        },
        "rpVmssCapacity": {
            "type": "int",
            "defaultValue": 3
        },
        "sshPublicKey": {
            "type": "string"
        },
        "subscriptionResourceGroupName": {
            "type": "string"
        },
        "tokenContributorRoleID": {
            "type": "string"
        },
        "tokenContributorRoleName": {
            "type": "string"
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3"
        },
        "vmssCleanupEnabled": {
            "type": "bool",
            "defaultValue": true
        },
        "vmssName": {
            "type": "string"
        }
    },
    "resources": [
        {
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]",
            "name": "rp-pip",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "type": "Microsoft.Network/publicIPAddresses",
            "zones": "[if(contains(parameters('nonZonalRegions'),toLower(replace(resourceGroup().location, ' ', ''))),'',pickZones('Microsoft.Network', 'publicIPAddresses', resourceGroup().location, 3))]"
        },
        {
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]",
            "name": "portal-pip",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            },
            "type": "Microsoft.Network/publicIPAddresses",
            "zones": "[if(contains(parameters('nonZonalRegions'),toLower(replace(resourceGroup().location, ' ', ''))),'',pickZones('Microsoft.Network', 'publicIPAddresses', resourceGroup().location, 3))]"
        },
        {
            "apiVersion": "2020-08-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'portal-pip')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', 'rp-pip')]"
            ],
            "location": "[resourceGroup().location]",
            "name": "rp-lb",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "rp-backend"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "rp-frontend",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'rp-pip')]"
                            }
                        }
                    },
                    {
                        "name": "portal-frontend",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'portal-pip')]"
                            }
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "rp-lbrule",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                            },
                            "backendPort": 443,
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', 'rp-lb', 'rp-frontend')]"
                            },
                            "frontendPort": 443,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'rp-probe')]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "portal-lbrule",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                            },
                            "backendPort": 444,
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', 'rp-lb', 'portal-frontend')]"
                            },
                            "frontendPort": 443,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'portal-probe-https')]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "portal-lbrule-ssh",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                            },
                            "backendPort": 2222,
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', 'rp-lb', 'portal-frontend')]"
                            },
                            "frontendPort": 22,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'portal-probe-ssh')]"
                            },
                            "protocol": "Tcp"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "rp-probe",
                        "properties": {
                            "numberOfProbes": 2,
                            "port": 443,
                            "protocol": "Https",
                            "requestPath": "/healthz/ready"
                        }
                    },
                    {
                        "name": "portal-probe-https",
                        "properties": {
                            "numberOfProbes": 2,
                            "port": 444,
                            "protocol": "Https",
                            "requestPath": "/healthz/ready"
                        }
                    },
                    {
                        "name": "portal-probe-ssh",
                        "properties": {
                            "numberOfProbes": 2,
                            "port": 2222,
                            "protocol": "Tcp"
                        }
                    }
                ]
            },
            "sku": {
                "name": "Standard"
            },
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "sku": {
                "name": "[parameters('vmSize')]",
                "tier": "Standard",
                "capacity": "[parameters('rpVmssCapacity')]"
            },
            "properties": {
                "upgradePolicy": {
                    "mode": "Automatic",
                    "rollingUpgradePolicy": {
                        "maxBatchInstancePercent": 34,
                        "maxUnhealthyInstancePercent": 34,
                        "maxUnhealthyUpgradedInstancePercent": 34,
                        "pauseTimeBetweenBatches": "PT10M"
                    },
                    "automaticOSUpgradePolicy": {
                        "enableAutomaticOSUpgrade": true
                    }
                },
                "automaticRepairsPolicy": {
                    "enabled": true
                },
                "virtualMachineProfile": {
                    "osProfile": {
                        "computerNamePrefix": "[concat('rp-', parameters('vmssName'), '-')]",
                        "adminUsername": "cloud-user",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "path": "/home/cloud-user/.ssh/authorized_keys",
                                        "keyData": "[parameters('sshPublicKey')]"
                                    }
                                ]
                            }
                        }
                    },
                    "storageProfile": {
                        "imageReference": {
                            "sharedGalleryImageId": "/sharedGalleries/CblMariner.1P/images/cbl-mariner-2-gen2/versions/latest"
                        },
                        "osDisk": {
                            "createOption": "FromImage",
                            "diskSizeGB": 1024,
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            }
                        }
                    },
                    "networkProfile": {
                        "healthProbe": {
                            "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'rp-lb', 'rp-probe')]"
                        },
                        "networkInterfaceConfigurations": [
                            {
                                "name": "rp-vmss-nic",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "rp-vmss-ipconfig",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'rp-vnet', 'rp-subnet')]"
                                                },
                                                "primary": true,
                                                "publicIPAddressConfiguration": {
                                                    "name": "rp-vmss-pip"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'rp-lb', 'rp-backend')]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "securityProfile": {
                        "securityType": "TrustedLaunch"
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": true
                        }
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "rp-vmss-cse",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Extensions",
                                    "type": "CustomScript",
                                    "typeHandlerVersion": "2.0",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {},
                                    "protectedSettings": {
                                        "script": "[base64(concat(base64ToString('c2V0IC1leAoK'),'ACRRESOURCEID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('acrResourceId')),''')\n','ADMINAPICLIENTCERTCOMMONNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('adminApiClientCertCommonName')),''')\n','ARMAPICLIENTCERTCOMMONNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('armApiClientCertCommonName')),''')\n','ARMCLIENTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('armClientId')),''')\n','AZURECLOUDNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('azureCloudName')),''')\n','AZURESECPACKQUALYSURL=$(base64 -d \u003c\u003c\u003c''',base64(parameters('azureSecPackQualysUrl')),''')\n','AZURESECPACKVSATENANTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('azureSecPackVSATenantId')),''')\n','CLUSTERMDMACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdmAccount')),''')\n','CLUSTERMDSDACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdsdAccount')),''')\n','CLUSTERMDSDCONFIGVERSION=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdsdConfigVersion')),''')\n','CLUSTERMDSDNAMESPACE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterMdsdNamespace')),''')\n','CLUSTERPARENTDOMAINNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterParentDomainName')),''')\n','DATABASEACCOUNTNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('databaseAccountName')),''')\n','FLUENTBITIMAGE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('fluentbitImage')),''')\n','FPCLIENTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('fpClientId')),''')\n','FPTENANTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('fpTenantId')),''')\n','FPSERVICEPRINCIPALID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('fpServicePrincipalId')),''')\n','GATEWAYDOMAINS=$(base64 -d \u003c\u003c\u003c''',base64(parameters('gatewayDomains')),''')\n','GATEWAYRESOURCEGROUPNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('gatewayResourceGroupName')),''')\n','GATEWAYSERVICEPRINCIPALID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('gatewayServicePrincipalId')),''')\n','KEYVAULTDNSSUFFIX=$(base64 -d \u003c\u003c\u003c''',base64(parameters('keyvaultDNSSuffix')),''')\n','KEYVAULTPREFIX=$(base64 -d \u003c\u003c\u003c''',base64(parameters('keyvaultPrefix')),''')\n','MDMFRONTENDURL=$(base64 -d \u003c\u003c\u003c''',base64(parameters('mdmFrontendUrl')),''')\n','MDSDENVIRONMENT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('mdsdEnvironment')),''')\n','MSIRPENDPOINT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('msiRpEndpoint')),''')\n','PORTALACCESSGROUPIDS=$(base64 -d \u003c\u003c\u003c''',base64(parameters('portalAccessGroupIds')),''')\n','PORTALCLIENTID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('portalClientId')),''')\n','PORTALELEVATEDGROUPIDS=$(base64 -d \u003c\u003c\u003c''',base64(parameters('portalElevatedGroupIds')),''')\n','RPFEATURES=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpFeatures')),''')\n','RPIMAGE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpImage')),''')\n','RPMDMACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdmAccount')),''')\n','RPMDSDACCOUNT=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdsdAccount')),''')\n','RPMDSDCONFIGVERSION=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdsdConfigVersion')),''')\n','RPMDSDNAMESPACE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpMdsdNamespace')),''')\n','RPPARENTDOMAINNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('rpParentDomainName')),''')\n','OIDCSTORAGEACCOUNTNAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('oidcStorageAccountName')),''')\n','OTELAUDITQUEUESIZE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('otelAuditQueueSize')),''')\n','TOKENCONTRIBUTORROLEID=$(base64 -d \u003c\u003c\u003c''',base64(parameters('tokenContributorRoleID')),''')\n','TOKENCONTRIBUTORROLENAME=$(base64 -d \u003c\u003c\u003c''',base64(parameters('tokenContributorRoleName')),''')\n','AROLOGLEVEL=$(base64 -d \u003c\u003c\u003c''',base64(parameters('aroLogLevel')),''')\n','CLUSTERSINSTALLVIAHIVE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clustersInstallViaHive')),''')\n','CLUSTERSADOPTBYHIVE=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clustersAdoptByHive')),''')\n','CLUSTERDEFAULTINSTALLERPULLSPEC=$(base64 -d \u003c\u003c\u003c''',base64(parameters('clusterDefaultInstallerPullspec')),''')\n','MISEVALIDAUDIENCES=$(base64 -d \u003c\u003c\u003c''',base64(string(parameters('miseValidAudiences'))),''')\n','MISEVALIDAPPIDS=$(base64 -d \u003c\u003c\u003c''',base64(string(parameters('miseValidAppIDs'))),''')\n','ADMINAPICABUNDLE=''',parameters('adminApiCaBundle'),'''\n','ARMAPICABUNDLE=''',parameters('armApiCaBundle'),'''\n','MDMIMAGE=''/distroless/genevamdm:2.2025.404.1254-77220c-20250406t1133@sha256:8e89bfec19c81398afa0ec51a97d748cc6b7b85cf9440dd1c7ea75b24302fe55''\n','OTELIMAGE=''mcr.microsoft.com/oss/otel/opentelemetry-collector-contrib:0.95.0-linux-amd64''\n','MISEIMAGE=''/mise:1.0.03103.537-mise-cbl-mariner2.0-distroless''\n','LOCATION=$(base64 -d \u003c\u003c\u003c''',base64(resourceGroup().location),''')\n','SUBSCRIPTIONID=$(base64 -d \u003c\u003c\u003c''',base64(subscription().subscriptionId),''')\n','RESOURCEGROUPNAME=$(base64 -d \u003c\u003c\u003c''',base64(resourceGroup().name),''')\n','\n',base64ToString('IyEvYmluL2Jhc2gKIyBJbnRlcm5hbCBGdW5jdGlvbnMgYW5kIENvbnN0YW50cwoKIyBlbXB0eV9zdHIgLSBjb25zdGFudDsgdXNlZCBieSBmdW5jdGlvbnMgZm9yIG9wdGlvbmFsIG5hbWVyZWYgc3RyaW5nIGFyZ3VlbWVudHMKIyBlbXB0eV9zdHI9IiIKIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CmRlY2xhcmUgLXIgZW1wdHlfc3RyPSIiCgojIHJvbGVfZ2F0ZXdheSAtIGNvbnN0YW50OyBJcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBWTVNTIGlzIGJlaW5nIGJvb3RzdHJhcHBlZAojIHRoaXMgc2hvdWxkIGJlIHJlZmVyZW5jZWQgYnkgc2NyaXB0cyBzb3VyY2luZyB0aGlzIGZpbGUKIyByb2xlX2dhdGV3YXk9ImdhdGV3YXkiCmRlY2xhcmUgLXIgcm9sZV9nYXRld2F5PSJnYXRld2F5IgojIHJvbGVfcnAgLSBjb25zdGFudDsgSXMgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggVk1TUyBpcyBiZWluZyBib290c3RyYXBwZWQKIyB0aGlzIHNob3VsZCBiZSByZWZlcmVuY2VkIGJ5IHNjcmlwdHMgc291cmNpbmcgdGhpcyBmaWxlCiMgcm9sZV9ycD0icnAiCmRlY2xhcmUgLXIgcm9sZV9ycD0icnAiCiMgcm9sZV9kZXZwcm94eSAtIGNvbnN0YW50OyBJcyB1c2VkIHRvIGRldGVybWluZSB3aGljaCBWTVNTIGlzIGJlaW5nIGJvb3RzdHJhcHBlZAojIHJvbGVfZGV2cHJveHk9ImRldnByb3h5IgpkZWNsYXJlIC1yIHJvbGVfZGV2cHJveHk9ImRldnByb3h5IgojIHVzX2dvdl9jbG91ZCAtIGNvbnN0YW50OyBJcyB0aGUgbmFtZSBvZiBBWlVSRUNMT1VETkFNRSBmb3IgVVMgZ292ZXJubWVudCBjbG91ZAojIHVzX2dvdl9jbG91ZD0iQXp1cmVVU0dvdmVybm1lbnQiCmRlY2xhcmUgLXIgdXNfZ292X2Nsb3VkPSJBenVyZVVTR292ZXJubWVudCIKCiMgbG9nIGlzIGEgd3JhcHBlciBmb3IgZWNobyB0aGF0IGluY2x1ZGVzIHRoZSBmdW5jdGlvbiBuYW1lCiMgQXJncwojIDEpIG1zZyAtIHN0cmluZwojIDIpIHN0YWNrX2xldmVsIC0gaW50OyBvcHRpb25hbCwgZGVmYXVsdHMgdG8gdGhlIGZ1bmN0aW9uIGF0IHRoZSBib3R0b20gb2YgdGhlIGNhbGwgc3RhY2sKbG9nKCkgewogICAgbG9jYWwgLXIgbXNnPSIkezE6LSJsb2cgbWVzc2FnZSBpcyBlbXB0eSJ9IgogICAgbG9jYWwgLXIgc3RhY2tfbGV2ZWw9IiR7MjotMX0iCiAgICBlY2hvICIke0ZVTkNOQU1FWyR7c3RhY2tfbGV2ZWx9XX06ICR7bXNnfSIKfQoKIyBhYm9ydCBpcyBhIHdyYXBwZXIgZm9yIGxvZyB0aGF0IGV4aXRzIHdpdGggYW4gZXJyb3IgY29kZQphYm9ydCgpIHsKICAgIGxvY2FsIC1yaSBvcmlnaW5fc3RhY2tsZXZlbD0yCiAgICBsb2cgIiR7MX0iICIkb3JpZ2luX3N0YWNrbGV2ZWwiCiAgICBsb2cgIkV4aXRpbmciCiAgICBleGl0IDEKfQoKIyB3cml0ZV9maWxlCiMgQXJncwojIDEpIGZpbGVuYW1lIC0gc3RyaW5nCiMgMikgZmlsZV9jb250ZW50cyAtIHN0cmluZwojIDMpIGNsb2JiZXIgLSBib29sZWFuOyBvcHRpb25hbCAtIGRlZmF1bHRzIHRvIGZhbHNlCndyaXRlX2ZpbGUoKSB7CiAgICBsb2NhbCAtbiBmaWxlbmFtZT0iJDEiCiAgICBsb2NhbCAtbiBmaWxlX2NvbnRlbnRzPSIkMiIKICAgIGxvY2FsIC1yIGNsb2JiZXI9IiR7MzotZmFsc2V9IgoKICAgIGlmICRjbG9iYmVyOyB0aGVuCiAgICAgICAgbG9nICJPdmVyd3JpdGluZyBmaWxlICRmaWxlbmFtZSIKICAgICAgICBlY2hvICIkZmlsZV9jb250ZW50cyIgPiAiJGZpbGVuYW1lIgogICAgZWxzZQogICAgICAgIGxvZyAiQXBwZW5kaW5nIHRvICRmaWxlbmFtZSIKICAgICAgICBlY2hvICIkZmlsZV9jb250ZW50cyIgPj4gIiRmaWxlbmFtZSIKICAgIGZpCn0KCiMgcmV0cnkgQWRkaW5nIHJldHJ5IGxvZ2ljIHRvIHl1bSBjb21tYW5kcyBpbiBvcmRlciB0byBhdm9pZCBzdGFsbGluZyBvdXQgb24gcmVzb3VyY2UgbG9ja3MKIyBhcmdzOgojIDEpIGNtZF9yZXRyeSAtIG5hbWVyZWYsIGFycmF5OyBDb21tYW5kIGFuZCBhcmd1ZW1lbnQocykgdG8gcmV0cnkKIyAyKSB3YWl0X3RpbWUgLSBuYW1lcmVmLCBpbnRlZ2VyOyBUaW1lIHRvIHdhaXQgYmVmb3JlIHJldHJ5aW5nIGNvbW1hbmQKIyAzKSByZXRyaWVzIC0gaW50ZWdlciwgb3B0aW9uYWw7IEFtbW91bnQgb2YgdGltZXMgdG8gcmV0cnkgY29tbWFuZCwgZGVmYXVsdHMgdG8gNQpyZXRyeSgpIHsKICAgIGxvY2FsIC1uIGNtZF9yZXRyeT0iJDEiCiAgICBsb2NhbCAtbiB3YWl0X3RpbWU9IiQyIgogICAgbG9jYWwgLXJpIHJldHJpZXM9IiR7MzotNX0iCgogICAgCiAgICBmb3IgYXR0ZW1wdCBpbiAkKHNlcSAxICRyZXRyaWVzKTsgZG8KICAgICAgICBsb2cgImF0dGVtcHQgIyR7YXR0ZW1wdH0gLSAke0ZVTkNOQU1FWzJdfSIKICAgICAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwNjgKICAgICAgICAke2NtZF9yZXRyeVtAXX0gJgoKICAgICAgICB3YWl0IC1mICQhICYmIHJldHVybiAwCiAgICAgICAgc2xlZXAgIiR3YWl0X3RpbWUiCiAgICBkb25lCgogICAgYWJvcnQgIiR7Y21kX3JldHJ5WypdfSBmYWlsZWQgYWZ0ZXIgIyRyZXRyaWVzIGF0dGVtcHRzIgp9CgojIHZlcmlmeV9yb2xlCiMgYXJnczoKIyAxKSB0ZXN0X3JvbGUgLSBuYW1lcmVmOyByb2xlIGJlaW5nIHZlcmlmaWVkCnZlcmlmeV9yb2xlKCkgewogICAgbG9jYWwgLW4gdGVzdF9yb2xlPSIkMSIKCiAgICBhbGxvd2VkX3JvbGVzX2dsb2I9Iigkcm9sZV9ycHwkcm9sZV9nYXRld2F5fCRyb2xlX2RldnByb3h5KSIKICAgIGlmIFtbICIkdGVzdF9yb2xlIiA9fiAkYWxsb3dlZF9yb2xlc19nbG9iIF1dOyB0aGVuCiAgICAgICAgbG9nICJWZXJpZmllZCByb2xlIFwiJHRlc3Rfcm9sZVwiIgogICAgZWxzZQogICAgICAgIGFib3J0ICJmYWlsZWQgdG8gdmVyaWZ5IHJvbGUsIHJvbGUgXCIke3Rlc3Rfcm9sZX1cIiBub3QgaW4gXCIke2FsbG93ZWRfcm9sZXNfZ2xvYn1cIiIKICAgIGZpCn0KCiMgZ2V0X2tleXZhdWx0X3N1ZmZpeAojIGFyZ3M6CiMgMSkgcmwgLSBuYW1lcmVmLCBzdHJpbmc7IHJvbGUgdG8gZ2V0IHNob3J0IHJvbGUgZm9yCiMgMikga3Zfc3VmZml4IC0gbmFtZXJlZiwgc3RyaW5nOyBzaG9ydCByb2xlIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhpcyBuYW1lcmVmCiMgMykgc2VjX3ByZWZpeCAtIG5hbWVyZWYsIHN0cmluZzsga2V5dmF1bHQgY2VydGlmaWNhdGUgcHJlZml4IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhpcyBuYW1lcmVmCmdldF9rZXl2YXVsdF9zdWZmaXgoKSB7CiAgICBsb2NhbCAtbiBybD0iJDEiCiAgICBsb2NhbCAtbiBrdl9zdWZmaXg9IiQyIgogICAgbG9jYWwgLW4gc2VjX3ByZWZpeD0iJDMiCgogICAgbG9jYWwgLXIga2V5dmF1bHRfc3VmZml4X3JwPSJzdmMiCiAgICBsb2NhbCAtciBrZXl2YXVsdF9wcmVmaXhfZ2F0ZXdheT0iZ3d5IgoKICAgIGNhc2UgIiRybCIgaW4KICAgICAgICAiJHJvbGVfZ2F0ZXdheSIpCiAgICAgICAgICAgIGt2X3N1ZmZpeD0iJGtleXZhdWx0X3ByZWZpeF9nYXRld2F5IgogICAgICAgICAgICBzZWNfcHJlZml4PSIka2V5dmF1bHRfcHJlZml4X2dhdGV3YXkiCiAgICAgICAgICAgIDs7CiAgICAgICAgIiRyb2xlX3JwIikKICAgICAgICAgICAga3Zfc3VmZml4PSIka2V5dmF1bHRfc3VmZml4X3JwIgogICAgICAgICAgICBzZWNfcHJlZml4PSIkcm9sZV9ycCIKICAgICAgICAgICAgOzsKICAgICAgICAqKQogICAgICAgICAgICBhYm9ydCAidW5rb3duIHJvbGUgJHJsIgogICAgICAgICAgICA7OwogICAgZXNhYwp9CgojIHJlYm9vdF92bSByZXN0b3JlcyBjYWxscyBzaHV0ZG93biAtciBpbiBhIHN1YnNoZWxsCiMgUmVib290cyBzaG91bGQgc2NoZWR1bGVkIGFmdGVyIGFsbCBWTSBleHRlbnNpb25zIGhhdmUgaGFkIHRpbWUgdG8gY29tcGxldGUKIyBSZWZlcmVuY2U6IGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS92aXJ0dWFsLW1hY2hpbmVzL2V4dGVuc2lvbnMvY3VzdG9tLXNjcmlwdC1saW51eCN0aXBzCnJlYm9vdF92bSgpIHsKICAgIGxvZyAic3RhcnRpbmciCgogICAgKHNodXRkb3duIC1yIG5vdyAmKQp9CiMhL2Jpbi9iYXNoCiMgUmVwb3NpdG9yeSBhbmQgcGFja2FnZSBtYW5hZ2VtZW50IHJlbGF0ZWQgZnVuY3Rpb25zCgpjb25maWd1cmVfcmVwb19tYXJpbmVyX2V4dGVuZGVkKCkgewogICAgbG9jYWwgLXIgZXh0ZW5kZWRfcmVwb19jb25maWc9Imh0dHBzOi8vcGFja2FnZXMubWljcm9zb2Z0LmNvbS9jYmwtbWFyaW5lci8yLjAvcHJvZC9leHRlbmRlZC94ODZfNjQvY29uZmlnLnJlcG8iCiAgICBjdXJsIC1zU0wgIiRleHRlbmRlZF9yZXBvX2NvbmZpZyIgLW8gL2V0Yy95dW0ucmVwb3MuZC9tYXJpbmVyLWV4dGVuZGVkLnJlcG8KCiAgICBsb2NhbCAtciByZXBvX25hbWU9ImNibC1tYXJpbmVyMi4wcHJvZGV4dGVuZGVkeDg2XzY0IgoKICAgIGxvY2FsIC1yYSBjbWQ9KAogICAgICAgIGRuZgogICAgICAgIHVwZGF0ZQogICAgICAgIC15CiAgICAgICAgLS1lbmFibGVyZXBvPSIkcmVwb19uYW1lIgogICAgKQoKICAgIGxvZyAiRW5hYmxpbmcgcmVwbyAkcmVwb19uYW1lIgogICAgcmV0cnkgY21kICIkMSIgIiR7MjotfSIKfQoKIyBjb25maWd1cmVfcnBtX3JlcG9zCiMgTmV3IHJlcG9zaXRvcmllcyBzaG91bGQgYmUgYWRkZWQgaW4gdGhlaXIgb3duIGZ1bmN0aW9ucywgYW5kIGNhbGxlZCBoZXJlCiMgYXJnczoKIyAxKSB3YWl0X3RpbWUgLSBuYW1lcmVmLCBpbnRlZ2VyOyBUaW1lIHRvIHdhaXQgYmVmb3JlIHJldHJ5aW5nIGNvbW1hbmQKIyAyKSByZXRyaWVzIC0gaW50ZWdlciwgb3B0aW9uYWw7IEFtb3VudCBvZiB0aW1lcyB0byByZXRyeSBjb21tYW5kLCBkZWZhdWx0cyB0byA1CmNvbmZpZ3VyZV9ycG1fcmVwb3MoKSB7CiAgICBsb2cgInN0YXJ0aW5nIgoKICAgIGNvbmZpZ3VyZV9yZXBvX21hcmluZXJfZXh0ZW5kZWQgIiQxIiAiJHsyOi0xfSIKfQoKIyBkbmZfaW5zdGFsbF9wa2dzCiMgYXJnczoKIyAxKSBwa2dzIC0gbmFtZXJlZiwgc3RyaW5nIGFycmF5OyBQYWNrYWdlcyB0byBiZSBpbnN0YWxsZWQKIyAyKSB3YWl0X3RpbWUgLSBuYW1lcmVmLCBpbnRlZ2VyOyBUaW1lIHRvIHdhaXQgYmVmb3JlIHJldHJ5aW5nIGNvbW1hbmQKIyAzKSByZXRyaWVzIC0gaW50ZWdlciwgb3B0aW9uYWw7IEFtb3VudCBvZiB0aW1lcyB0byByZXRyeSBjb21tYW5kLCBkZWZhdWx0cyB0byA1CmRuZl9pbnN0YWxsX3BrZ3MoKSB7CiAgICBsb2NhbCAtbiBwa2dzPSIkMSIKICAgIGxvZyAic3RhcnRpbmciCgogICAgbG9jYWwgLWEgY21kPSgKICAgICAgICBkbmYKICAgICAgICAteQogICAgICAgIGluc3RhbGwKICAgICkKICAgIAogICAgIyBSZWZlcmVuY2U6IGh0dHBzOi8vd3d3LnNoZWxsY2hlY2submV0L3dpa2kvU0MyMjA2CiAgICAjIGFwcGVuZCBwa2dzIGFycmF5IHRvIGNtZAogICAgbWFwZmlsZSAtTyAkKCggJHsjY21kW0BdfSArIDEgKSkgLWQgJyAnIGNtZCA8PDwgIiR7cGtnc1tAXX0iCiAgICBsb2NhbCAtciBjbWQKCiAgICBsb2cgIkF0dGVtcHRpbmcgdG8gaW5zdGFsbCBwYWNrYWdlczogJHtwa2dzWypdfSIKICAgIHJldHJ5IGNtZCAiJDIiICIkezM6LX0iCn0KCgojIGRuZl91cGRhdGVfcGtncwojIGFyZ3M6CiMgMSkgZXhjbHVkZXMgLSBuYW1lcmVmLCBzdHJpbmcgYXJyYXksIG9wdGlvbmFsOyBQYWNrYWdlcyB0byBleGNsdWRlIGZyb20gdXBkYXRpbmcKIyAgICAgICBFYWNoIGluZGV4IG11c3QgYmUgcHJlZml4ZWQgd2l0aCAteCAKIyAyKSB3YWl0X3RpbWUgLSBuYW1lcmVmLCBpbnRlZ2VyOyBUaW1lIHRvIHdhaXQgYmVmb3JlIHJldHJ5aW5nIGNvbW1hbmQKIyAzKSByZXRyaWVzIC0gaW50ZWdlciwgb3B0aW9uYWw7IEFtbW91bnQgb2YgdGltZXMgdG8gcmV0cnkgY29tbWFuZCwgZGVmYXVsdHMgdG8gNQpkbmZfdXBkYXRlX3BrZ3MoKSB7CiAgICBsb2NhbCAtbiBleGNsdWRlcz0iJHsxOi1lbXB0eV9zdHJ9IgogICAgbG9nICJzdGFydGluZyIKCiAgICBsb2NhbCAtYSBjbWQ9KAogICAgICAgIGRuZgogICAgICAgIC15CiAgICAgICAgIyBSZXBsYWNlZCB3aXRoIGV4Y2x1ZGVzCiAgICAgICAgIiIKICAgICAgICB1cGRhdGUKICAgICAgICAtLWFsbG93ZXJhc2luZwogICAgKQoKICAgIGlmIFsgLW4gIiR7ZXhjbHVkZXN9IiBdOyB0aGVuCiAgICAgICAgIyBSZWZlcmVuY2UgaHR0cHM6Ly93d3cuc2hlbGxjaGVjay5uZXQvd2lraS9TQzIyMDYKICAgICAgICBtYXBmaWxlIC1PIDIgY21kIDw8PCAiJHtleGNsdWRlc1tAXX0iCiAgICBlbHNlCiAgICAgICAgIyBSZW1vdmUgZW1wdHkgc3RyaW5nIGlmIHdlIGFyZW4ndCByZXBsYWNpbmcgdGhlbSwgcHJvYmFibHkgZG9lc24ndCBtYXR0ZXIsIGJ1dCB3aHkgbm90IGJlIHNhZmUKICAgICAgICB1bnNldCAiY21kWzJdIgogICAgZmkKICAgIGxvY2FsIC1yIGNtZAoKICAgIGxvZyAiVXBkYXRpbmcgYWxsIHBhY2thZ2VzIGV4Y2x1ZGluZyBcIiR7ZXhjbHVkZXNbKl06LX1cIiIKICAgIHJldHJ5IGNtZCAiJDIiICIkezM6LX0iCn0KCiMgcnBtX2ltcG9ydF9rZXlzCiMgYXJnczoKIyAxKSBrZXlzIC0gbmFtZXJlZiwgc3RyaW5nIGFycmF5OyBycG0ga2V5cyB0byBiZSBpbXBvcnRlZAojIDIpIHdhaXRfdGltZSAtIG5hbWVyZWYsIGludGVnZXI7IFRpbWUgdG8gd2FpdCBiZWZvcmUgcmV0cnlpbmcgY29tbWFuZApycG1faW1wb3J0X2tleXMoKSB7CiAgICBsb2NhbCAtbiBrZXlzPSIkMSIKICAgIGxvZyAic3RhcnRpbmciCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDY4CiAgICBmb3Iga2V5IGluICR7a2V5c1tAXX07IGRvCiAgICAgICAgaWYgWyAkeyNrZXlzW0BdfSAtZXEgMCBdOyB0aGVuCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKCiAgICAgICAgbG9jYWwgLWEgY21kPSgKICAgICAgICAgICAgcnBtCiAgICAgICAgICAgIC0taW1wb3J0CiAgICAgICAgICAgIC12CiAgICAgICAgICAgICIka2V5IgogICAgICAgICkKCiAgICAgICAgbG9nICJJbXBvcnRpbmcgcnBtIHJlcG9zaXRvcnkga2V5ICRrZXkiCiAgICAgICAgcmV0cnkgY21kICIkMiIgIiR7MzotfSIgJiYgdW5zZXQga2V5CiAgICBkb25lCn0KCiMgdXRpbC1jb21tb24uc2ggZG9lcyBub3QgZXhpc3Qgd2hlbiBkZXBsb3llZCB0byBWTVNTIHZpYSBWTVNTIGV4dGVuc2lvbnMKIyBQcm92aWRlcyBzaGVsbGNoZWNrIGRlZmluaXRpb25zCnV0aWxfY29tbW9uPSJ1dGlsLWNvbW1vbi5zaCIKaWYgWyAtZiAiJHV0aWxfY29tbW9uIiBdOyB0aGVuCiAgICAjIHNoZWxsY2hlY2sgc291cmNlPXV0aWwtY29tbW9uLnNoCiAgICBzb3VyY2UgIiR1dGlsX2NvbW1vbiIKZmkKIyEvYmluL2Jhc2gKIyBBUk8gc2VydmljZSBzZXR1cCBmdW5jdGlvbnMKCiMgZW5hYmxlX3NlcnZpY2VzIGVuYWJsZXMgdGhlIHN5c3RlbWQgc2VydmljZXMgdGhhdCBhcmUgcGFzc2VkIGluCiMgYXJnczoKIyAxKSBzZXJ2aWNlcyAtIGFycmF5OyBzZXJ2aWNlcyB0byBiZSBlbmFibGVkCmVuYWJsZV9zZXJ2aWNlcygpIHsKICAgIGxvY2FsIC1uIHN2Y3M9IiQxIgogICAgbG9nICJzdGFydGluZyIKCiAgICBzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZAoKICAgIGxvZyAiZW5hYmxpbmcgc2VydmljZXMgJHtzdmNzWypdfSIKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjA2OAogICAgZm9yIHN2YyBpbiAke3N2Y3NbQF19OyBkbwogICAgICAgIGxvZyAiRW5hYmxpbmcgYW5kIHN0YXJ0aW5nICRzdmMgbm93IgogICAgICAgIHN5c3RlbWN0bCBlbmFibGUgXAogICAgICAgICAgICAgICAgICAtLW5vdyBcCiAgICAgICAgICAgICAgICAgICIkc3ZjIgogICAgZG9uZQp9CgojIGNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19nYXRld2F5CiMgYXJnczoKIyAxKSBpbWFnZSAtIG5hbWVyZWYsIHN0cmluZzsgY29udGFpbmVyIGltYWdlCiMgMikgcm9sZSAtIG5hbWVyZWYsIHN0cmluZzsgVk1TUyByb2xlCiMgMykgY29uZl9maWxlIC0gbmFtZXJlZiwgc3RyaW5nOyBhcm8gZ2F0ZXdheSBlbnZpcm9ubWVudCBmaWxlCiMgNCkgaXBhZGRyZXNzIC0gbmFtZXJlZiwgc3RyaW5nOyBzdGF0aWMgaXAgb2YgcG9kbWFuIG5ldHdvcmsgdG8gYmUgYXR0YWNoZWQKY29uZmlndXJlX3NlcnZpY2VfYXJvX2dhdGV3YXkoKSB7CiAgICBsb2NhbCAtbiBpbWFnZT0iJDEiCiAgICBsb2NhbCAtbiByb2xlPSIkMiIKICAgIGxvY2FsIC1uIGNvbmZfZmlsZT0iJDMiCiAgICBsb2NhbCAtbiBpcGFkZHJlc3M9IiQ0IgogICAgbG9nICJzdGFydGluZyIKICAgIGxvZyAiQ29uZmlndXJpbmcgYXJvLWdhdGV3YXkgc2VydmljZSIKCiAgICBsb2NhbCAtciBhcm9fZ2F0ZXdheV9jb25mX2ZpbGVuYW1lPScvZXRjL3N5c2NvbmZpZy9hcm8tZ2F0ZXdheScKICAgIGxvY2FsIC1yIGFkZF9jb25mX2ZpbGU9IlBPRE1BTl9ORVRXT1JLPSdwb2RtYW4nCklQQUREUkVTUz0nJGlwYWRkcmVzcycKUk9MRT0nJHtyb2xlLCx9JyIKCiAgICB3cml0ZV9maWxlIGFyb19nYXRld2F5X2NvbmZfZmlsZW5hbWUgY29uZl9maWxlIHRydWUKICAgIHdyaXRlX2ZpbGUgYXJvX2dhdGV3YXlfY29uZl9maWxlbmFtZSBhZGRfY29uZl9maWxlIGZhbHNlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBhcm9fZ2F0ZXdheV9zZXJ2aWNlX2ZpbGVuYW1lPScvZXRjL3N5c3RlbWQvc3lzdGVtL2Fyby1nYXRld2F5LnNlcnZpY2UnCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAjIGJlbG93IHZhcmlhYmxlIGlzIGluIHNpbmdsZSBxdW90ZXMKICAgICMgYXMgaXQgaXMgdG8gYmUgZXhwYW5kZWQgYXQgc3lzdGVtZCBzdGFydCB0aW1lIChieSBzeXN0ZW1kLCBub3QgdGhpcyBzY3JpcHQpCiAgICBsb2NhbCAtciBhcm9fZ2F0ZXdheV9zZXJ2aWNlX2ZpbGU9J1tVbml0XQpBZnRlcj1uZXR3b3JrLW9ubGluZS50YXJnZXQKV2FudHM9bmV0d29yay1vbmxpbmUudGFyZ2V0CgpbU2VydmljZV0KRW52aXJvbm1lbnRGaWxlPS9ldGMvc3lzY29uZmlnL2Fyby1nYXRld2F5CkV4ZWNTdGFydFByZT0tL3Vzci9iaW4vcG9kbWFuIHJtIC1mICVOCkV4ZWNTdGFydD0vdXNyL2Jpbi9wb2RtYW4gcnVuIFwKICAtLWhvc3RuYW1lICVIIFwKICAtLW5hbWUgJU4gXAogIC0tcm0gXAogIC0tY2FwLWRyb3AgbmV0X3JhdyBcCiAgLWUgQUNSX1JFU09VUkNFX0lEIFwKICAtZSBEQVRBQkFTRV9BQ0NPVU5UX05BTUUgXAogIC1lIEdBVEVXQVlfRE9NQUlOUyBcCiAgLWUgR0FURVdBWV9GRUFUVVJFUyBcCiAgLWUgTURNX0FDQ09VTlQgXAogIC1lIE1ETV9OQU1FU1BBQ0UgXAogIC1lIEFST19MT0dfTEVWRUwgXAogIC1tIDJnIFwKICAtLW5ldHdvcms9JHtQT0RNQU5fTkVUV09SS30gXAogIC0taXAgJHtJUEFERFJFU1N9IFwKICAtcCA4MDo4MDgwIFwKICAtcCA4MDgxOjgwODEgXAogIC1wIDQ0Mzo4NDQzIFwKICAtdiAvcnVuL3N5c3RlbWQvam91cm5hbDovcnVuL3N5c3RlbWQvam91cm5hbCBcCiAgLXYgL3Zhci9ldHc6L3Zhci9ldHc6eiBcCiAgJHtSUElNQUdFfSBcCiAgJHtST0xFfQpFeGVjU3RvcD0vdXNyL2Jpbi9wb2RtYW4gc3RvcCAtdCAzNjAwICVOClRpbWVvdXRTdG9wU2VjPTM2MDAKUmVzdGFydD1hbHdheXMKUmVzdGFydFNlYz0xClN0YXJ0TGltaXRJbnRlcnZhbD0wCgpbSW5zdGFsbF0KV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQKICAgICcKCiAgICB3cml0ZV9maWxlIGFyb19nYXRld2F5X3NlcnZpY2VfZmlsZW5hbWUgYXJvX2dhdGV3YXlfc2VydmljZV9maWxlIHRydWUKfQoKIyBjb25maWd1cmVfc2VydmljZV9hcm9fcnAKIyBhcmdzOgojIDEpIGltYWdlIC0gbmFtZXJlZiwgc3RyaW5nOyBSUCBjb250YWluZXIgaW1hZ2UKIyAyKSByb2xlIC0gbmFtZXJlZiwgc3RyaW5nOyBWTVNTIHJvbGUKIyAzKSBjb25mX2ZpbGUgLSBuYW1lcmVmLCBzdHJpbmc7IGFybyBycCBlbnZpcm9ubWVudCBmaWxlCiMgNCkgaXBhZGRyZXNzIC0gbmFtZXJlZiwgc3RyaW5nOyBzdGF0aWMgaXAgb2YgcG9kbWFuIG5ldHdvcmsgdG8gYmUgYXR0YWNoZWQKY29uZmlndXJlX3NlcnZpY2VfYXJvX3JwKCkgewogICAgbG9jYWwgLW4gaW1hZ2U9IiQxIgogICAgbG9jYWwgLW4gcm9sZT0iJDIiCiAgICBsb2NhbCAtbiBjb25mX2ZpbGU9IiQzIgogICAgbG9jYWwgLW4gaXBhZGRyZXNzPSIkNCIKICAgIGxvZyAic3RhcnRpbmciCiAgICBsb2cgIkNvbmZpZ3VyaW5nIGFyby1ycCBzZXJ2aWNlIgoKICAgIGxvY2FsIC1yIGFyb19ycF9jb25mX2ZpbGVuYW1lPScvZXRjL3N5c2NvbmZpZy9hcm8tcnAnCiAgICBsb2NhbCAtciBhZGRfY29uZl9maWxlPSJQT0RNQU5fTkVUV09SSz0ncG9kbWFuJwpJUEFERFJFU1M9JyRpcGFkZHJlc3MnClJPTEU9JyR7cm9sZSwsfSciCgogICAgd3JpdGVfZmlsZSBhcm9fcnBfY29uZl9maWxlbmFtZSBjb25mX2ZpbGUgdHJ1ZQogICAgd3JpdGVfZmlsZSBhcm9fcnBfY29uZl9maWxlbmFtZSBhZGRfY29uZl9maWxlIGZhbHNlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBhcm9fcnBfc2VydmljZV9maWxlbmFtZT0nL2V0Yy9zeXN0ZW1kL3N5c3RlbS9hcm8tcnAuc2VydmljZScKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgIyBiZWxvdyB2YXJpYWJsZSBpcyBpbiBzaW5nbGUgcXVvdGVzCiAgICAjIGFzIGl0IGlzIHRvIGJlIGV4cGFuZGVkIGF0IHN5c3RlbWQgc3RhcnQgdGltZSAoYnkgc3lzdGVtZCwgbm90IHRoaXMgc2NyaXB0KQogICAgbG9jYWwgLXIgYXJvX3JwX3NlcnZpY2VfZmlsZT0nW1VuaXRdCkFmdGVyPW5ldHdvcmstb25saW5lLnRhcmdldApXYW50cz1uZXR3b3JrLW9ubGluZS50YXJnZXQKCltTZXJ2aWNlXQpFbnZpcm9ubWVudEZpbGU9L2V0Yy9zeXNjb25maWcvYXJvLXJwCkV4ZWNTdGFydFByZT0tL3Vzci9iaW4vcG9kbWFuIHJtIC1mICVOCkV4ZWNTdGFydD0vdXNyL2Jpbi9wb2RtYW4gcnVuIFwKICAtLWhvc3RuYW1lICVIIFwKICAtLW5hbWUgJU4gXAogIC0tcm0gXAogIC0tY2FwLWRyb3AgbmV0X3JhdyBcCiAgLWUgQUNSX1JFU09VUkNFX0lEIFwKICAtZSBBRE1JTl9BUElfQ0xJRU5UX0NFUlRfQ09NTU9OX05BTUUgXAogIC1lIEFSTV9BUElfQ0xJRU5UX0NFUlRfQ09NTU9OX05BTUUgXAogIC1lIEFaVVJFX0FSTV9DTElFTlRfSUQgXAogIC1lIEFaVVJFX0ZQX0NMSUVOVF9JRCBcCiAgLWUgQ0xVU1RFUl9NRE1fQUNDT1VOVCBcCiAgLWUgQ0xVU1RFUl9NRE1fTkFNRVNQQUNFIFwKICAtZSBDTFVTVEVSX01EU0RfQUNDT1VOVCBcCiAgLWUgQ0xVU1RFUl9NRFNEX0NPTkZJR19WRVJTSU9OIFwKICAtZSBDTFVTVEVSX01EU0RfTkFNRVNQQUNFIFwKICAtZSBEQVRBQkFTRV9BQ0NPVU5UX05BTUUgXAogIC1lIERPTUFJTl9OQU1FIFwKICAtZSBHQVRFV0FZX0RPTUFJTlMgXAogIC1lIEdBVEVXQVlfUkVTT1VSQ0VHUk9VUCBcCiAgLWUgS0VZVkFVTFRfUFJFRklYIFwKICAtZSBNRE1fQUNDT1VOVCBcCiAgLWUgTURNX05BTUVTUEFDRSBcCiAgLWUgTURTRF9FTlZJUk9OTUVOVCBcCiAgLWUgUlBfRkVBVFVSRVMgXAogIC1lIEFST19JTlNUQUxMX1ZJQV9ISVZFIFwKICAtZSBBUk9fSElWRV9ERUZBVUxUX0lOU1RBTExFUl9QVUxMU1BFQyBcCiAgLWUgQVJPX0FET1BUX0JZX0hJVkUgXAogIC1lIE9JRENfQUZEX0VORFBPSU5UIFwKICAtZSBPSURDX1NUT1JBR0VfQUNDT1VOVF9OQU1FIFwKICAtZSBNU0lfUlBfRU5EUE9JTlQgXAogIC1lIE9URUxfQVVESVRfUVVFVUVfU0laRSBcCiAgLWUgTUlTRV9BRERSRVNTIFwKICAtZSBBUk9fTE9HX0xFVkVMIFwKICAtbSAyZyBcCiAgLS1uZXR3b3JrPSR7UE9ETUFOX05FVFdPUkt9IFwKICAtLWlwICR7SVBBRERSRVNTfSBcCiAgLXAgNDQzOjg0NDMgXAogIC12IC9ldGMvYXJvLXJwOi9ldGMvYXJvLXJwIFwKICAtdiAvcnVuL3N5c3RlbWQvam91cm5hbDovcnVuL3N5c3RlbWQvam91cm5hbCBcCiAgLXYgL3Zhci9ldHc6L3Zhci9ldHc6eiBcCiAgLXYgL3Zhci9ydW4vbWRzZC9hc2E6L3Zhci9ydW4vbWRzZC9hc2E6eiBcCiAgJHtSUElNQUdFfSBcCiAgJHtST0xFfQpFeGVjU3RvcD0vdXNyL2Jpbi9wb2RtYW4gc3RvcCAtdCAzNjAwICVOClRpbWVvdXRTdG9wU2VjPTM2MDAKUmVzdGFydD1hbHdheXMKUmVzdGFydFNlYz0xClN0YXJ0TGltaXRJbnRlcnZhbD0wCgpbSW5zdGFsbF0KV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQnCgogICAgd3JpdGVfZmlsZSBhcm9fcnBfc2VydmljZV9maWxlbmFtZSBhcm9fcnBfc2VydmljZV9maWxlIHRydWUKfQoKIyBjb25maWd1cmVfc2VydmljZV9hcm9fbW9uaXRvcgojIGFyZ3M6CiMgMSkgaW1hZ2UgLSBuYW1lcmVmLCBzdHJpbmc7IFJQIGNvbnRhaW5lciBpbWFnZQojIDIpIGlwYWRkcmVzcyAtIG5hbWVyZWYsIHN0cmluZzsgc3RhdGljIGlwIG9mIHBvZG1hbiBuZXR3b3JrIHRvIGJlIGF0dGFjaGVkCmNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19tb25pdG9yKCkgewogICAgbG9jYWwgLW4gaW1hZ2U9IiQxIgogICAgbG9jYWwgLW4gaXBhZGRyZXNzPSIkMiIKICAgIGxvZyAic3RhcnRpbmciCiAgICBsb2cgIkNvbmZpZ3VyaW5nIGFyby1tb25pdG9yIHNlcnZpY2UiCgogICAgIyBET01BSU5fTkFNRSwgQ0xVU1RFUl9NRFNEX0FDQ09VTlQsIENMVVNURVJfTURTRF9DT05GSUdfVkVSU0lPTiwgR0FURVdBWV9ET01BSU5TLCBHQVRFV0FZX1JFU09VUkNFR1JPVVAsIE1EU0RfRU5WSVJPTk1FTlQgQ0xVU1RFUl9NRFNEX05BTUVTUEFDRQogICAgIyBhcmUgbm90IHVzZWQsIGJ1dCBjYW4ndCBlYXNpbHkgYmUgcmVmYWN0b3JlZCBvdXQuIFNob3VsZCBiZSByZXZpc2l0ZWQgaW4gdGhlIGZ1dHVyZS4KICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgYXJvX21vbml0b3Jfc2VydmljZV9jb25mX2ZpbGVuYW1lPScvZXRjL3N5c2NvbmZpZy9hcm8tbW9uaXRvcicKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgYXJvX21vbml0b3Jfc2VydmljZV9jb25mX2ZpbGU9IkFaVVJFX0ZQX0NMSUVOVF9JRD0nJEZQQ0xJRU5USUQnCkRPTUFJTl9OQU1FPSckTE9DQVRJT04uJENMVVNURVJQQVJFTlRET01BSU5OQU1FJwpDTFVTVEVSX01EU0RfQUNDT1VOVD0nJENMVVNURVJNRFNEQUNDT1VOVCcKQ0xVU1RFUl9NRFNEX0NPTkZJR19WRVJTSU9OPSckQ0xVU1RFUk1EU0RDT05GSUdWRVJTSU9OJwpHQVRFV0FZX0RPTUFJTlM9JyRHQVRFV0FZRE9NQUlOUycKR0FURVdBWV9SRVNPVVJDRUdST1VQPSckR0FURVdBWVJFU09VUkNFR1JPVVBOQU1FJwpNRFNEX0VOVklST05NRU5UPSckTURTREVOVklST05NRU5UJwpDTFVTVEVSX01EU0RfTkFNRVNQQUNFPSckQ0xVU1RFUk1EU0ROQU1FU1BBQ0UnCkNMVVNURVJfTURNX0FDQ09VTlQ9JyRDTFVTVEVSTURNQUNDT1VOVCcKQ0xVU1RFUl9NRE1fTkFNRVNQQUNFPUJCTQpEQVRBQkFTRV9BQ0NPVU5UX05BTUU9JyREQVRBQkFTRUFDQ09VTlROQU1FJwpLRVlWQVVMVF9QUkVGSVg9JyRLRVlWQVVMVFBSRUZJWCcKTURNX0FDQ09VTlQ9JyRSUE1ETUFDQ09VTlQnCk1ETV9OQU1FU1BBQ0U9QkJNClJQSU1BR0U9JyRpbWFnZScKUE9ETUFOX05FVFdPUks9J3BvZG1hbicKSVBBRERSRVNTPSckaXBhZGRyZXNzJwpBUk9fSU5TVEFMTF9WSUFfSElWRT0nJENMVVNURVJTSU5TVEFMTFZJQUhJVkUnCkFST19ISVZFX0RFRkFVTFRfSU5TVEFMTEVSX1BVTExTUEVDPSckQ0xVU1RFUkRFRkFVTFRJTlNUQUxMRVJQVUxMU1BFQycKQVJPX0FET1BUX0JZX0hJVkU9JyRDTFVTVEVSU0FET1BUQllISVZFJyIKCiAgICB3cml0ZV9maWxlIGFyb19tb25pdG9yX3NlcnZpY2VfY29uZl9maWxlbmFtZSBhcm9fbW9uaXRvcl9zZXJ2aWNlX2NvbmZfZmlsZSB0cnVlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBhcm9fbW9uaXRvcl9zZXJ2aWNlX2ZpbGVuYW1lPScvZXRjL3N5c3RlbWQvc3lzdGVtL2Fyby1tb25pdG9yLnNlcnZpY2UnCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgICMgYmVsb3cgdmFyaWFibGUgaXMgaW4gc2luZ2xlIHF1b3RlcwogICAgIyBhcyBpdCBpcyB0byBiZSBleHBhbmRlZCBhdCBzeXN0ZW1kIHN0YXJ0IHRpbWUgKGJ5IHN5c3RlbWQsIG5vdCB0aGlzIHNjcmlwdCkKICAgIGxvY2FsIC1yIGFyb19tb25pdG9yX3NlcnZpY2VfZmlsZT0nW1VuaXRdCkFmdGVyPW5ldHdvcmstb25saW5lLnRhcmdldApXYW50cz1uZXR3b3JrLW9ubGluZS50YXJnZXQKCltTZXJ2aWNlXQpFbnZpcm9ubWVudEZpbGU9L2V0Yy9zeXNjb25maWcvYXJvLW1vbml0b3IKRXhlY1N0YXJ0UHJlPS0vdXNyL2Jpbi9wb2RtYW4gcm0gLWYgJU4KRXhlY1N0YXJ0PS91c3IvYmluL3BvZG1hbiBydW4gXAogIC0taG9zdG5hbWUgJUggXAogIC0tbmFtZSAlTiBcCiAgLS1ybSBcCiAgLS1jYXAtZHJvcCBuZXRfcmF3IFwKICAtLW5ldHdvcms9JHtQT0RNQU5fTkVUV09SS30gXAogIC0taXAgJHtJUEFERFJFU1N9IFwKICAtZSBBWlVSRV9GUF9DTElFTlRfSUQgXAogIC1lIERPTUFJTl9OQU1FIFwKICAtZSBDTFVTVEVSX01EU0RfQUNDT1VOVCBcCiAgLWUgQ0xVU1RFUl9NRFNEX0NPTkZJR19WRVJTSU9OIFwKICAtZSBHQVRFV0FZX0RPTUFJTlMgXAogIC1lIEdBVEVXQVlfUkVTT1VSQ0VHUk9VUCBcCiAgLWUgTURTRF9FTlZJUk9OTUVOVCBcCiAgLWUgQ0xVU1RFUl9NRFNEX05BTUVTUEFDRSBcCiAgLWUgQ0xVU1RFUl9NRE1fQUNDT1VOVCBcCiAgLWUgQ0xVU1RFUl9NRE1fTkFNRVNQQUNFIFwKICAtZSBEQVRBQkFTRV9BQ0NPVU5UX05BTUUgXAogIC1lIEtFWVZBVUxUX1BSRUZJWCBcCiAgLWUgTURNX0FDQ09VTlQgXAogIC1lIE1ETV9OQU1FU1BBQ0UgXAogIC1lIEFST19JTlNUQUxMX1ZJQV9ISVZFIFwKICAtZSBBUk9fSElWRV9ERUZBVUxUX0lOU1RBTExFUl9QVUxMU1BFQyBcCiAgLWUgQVJPX0FET1BUX0JZX0hJVkUgXAogIC1lIEFST19MT0dfTEVWRUwgXAogIC1tIDIuNWcgXAogIC12IC9ydW4vc3lzdGVtZC9qb3VybmFsOi9ydW4vc3lzdGVtZC9qb3VybmFsIFwKICAtdiAvdmFyL2V0dzovdmFyL2V0dzp6IFwKICAke1JQSU1BR0V9IFwKICBtb25pdG9yClJlc3RhcnQ9YWx3YXlzClJlc3RhcnRTZWM9MQpTdGFydExpbWl0SW50ZXJ2YWw9MAoKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0JwoKICAgIHdyaXRlX2ZpbGUgYXJvX21vbml0b3Jfc2VydmljZV9maWxlbmFtZSBhcm9fbW9uaXRvcl9zZXJ2aWNlX2ZpbGUgdHJ1ZQp9CgojIGNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19wb3J0YWwKIyBhcmdzOgojIDEpIGltYWdlIC0gbmFtZXJlZiwgc3RyaW5nOyBSUCBjb250YWluZXIgaW1hZ2UKIyAyKSBpcGFkZHJlc3MgLSBuYW1lcmVmLCBzdHJpbmc7IHN0YXRpYyBpcCBvZiBwb2RtYW4gbmV0d29yayB0byBiZSBhdHRhY2hlZApjb25maWd1cmVfc2VydmljZV9hcm9fcG9ydGFsKCkgewogICAgbG9jYWwgLW4gaW1hZ2U9IiQxIgogICAgbG9jYWwgLW4gaXBhZGRyZXNzPSIkMiIKICAgIGxvZyAic3RhcnRpbmciCiAgICBsb2cgIkNvbmZpZ3VyaW5nIGFybyBwb3J0YWwgc2VydmljZSIKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGFyb19wb3J0YWxfc2VydmljZV9jb25mX2ZpbGVuYW1lPScvZXRjL3N5c2NvbmZpZy9hcm8tcG9ydGFsJwogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBhcm9fcG9ydGFsX3NlcnZpY2VfY29uZl9maWxlPSJBWlVSRV9QT1JUQUxfQUNDRVNTX0dST1VQX0lEUz0nJFBPUlRBTEFDQ0VTU0dST1VQSURTJwpBWlVSRV9QT1JUQUxfQ0xJRU5UX0lEPSckUE9SVEFMQ0xJRU5USUQnCkFaVVJFX1BPUlRBTF9FTEVWQVRFRF9HUk9VUF9JRFM9JyRQT1JUQUxFTEVWQVRFREdST1VQSURTJwpEQVRBQkFTRV9BQ0NPVU5UX05BTUU9JyREQVRBQkFTRUFDQ09VTlROQU1FJwpLRVlWQVVMVF9QUkVGSVg9JyRLRVlWQVVMVFBSRUZJWCcKTURNX0FDQ09VTlQ9JyRSUE1ETUFDQ09VTlQnCk1ETV9OQU1FU1BBQ0U9UG9ydGFsClBPUlRBTF9IT1NUTkFNRT0nJExPQ0FUSU9OLmFkbWluLiRSUFBBUkVOVERPTUFJTk5BTUUnCk9URUxfQVVESVRfUVVFVUVfU0laRT0nJE9URUxBVURJVFFVRVVFU0laRScKUlBJTUFHRT0nJGltYWdlJwpQT0RNQU5fTkVUV09SSz0ncG9kbWFuJwpJUEFERFJFU1M9JyRpcGFkZHJlc3MnIgoKICAgIHdyaXRlX2ZpbGUgYXJvX3BvcnRhbF9zZXJ2aWNlX2NvbmZfZmlsZW5hbWUgYXJvX3BvcnRhbF9zZXJ2aWNlX2NvbmZfZmlsZSB0cnVlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBhcm9fcG9ydGFsX3NlcnZpY2VfZmlsZW5hbWU9Jy9ldGMvc3lzdGVtZC9zeXN0ZW0vYXJvLXBvcnRhbC5zZXJ2aWNlJwogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAjIGJlbG93IHZhcmlhYmxlIGlzIGluIHNpbmdsZSBxdW90ZXMKICAgICMgYXMgaXQgaXMgdG8gYmUgZXhwYW5kZWQgYXQgc3lzdGVtZCBzdGFydCB0aW1lIChieSBzeXN0ZW1kLCBub3QgdGhpcyBzY3JpcHQpCiAgICBsb2NhbCAtciBhcm9fcG9ydGFsX3NlcnZpY2VfZmlsZT0nW1VuaXRdCkFmdGVyPW5ldHdvcmstb25saW5lLnRhcmdldApXYW50cz1uZXR3b3JrLW9ubGluZS50YXJnZXQKU3RhcnRMaW1pdEludGVydmFsPTAKCltTZXJ2aWNlXQpFbnZpcm9ubWVudEZpbGU9L2V0Yy9zeXNjb25maWcvYXJvLXBvcnRhbApFeGVjU3RhcnRQcmU9LS91c3IvYmluL3BvZG1hbiBybSAtZiAlTgpFeGVjU3RhcnQ9L3Vzci9iaW4vcG9kbWFuIHJ1biBcCiAgLS1ob3N0bmFtZSAlSCBcCiAgLS1uYW1lICVOIFwKICAtLXJtIFwKICAtLWNhcC1kcm9wIG5ldF9yYXcgXAogIC0tbmV0d29yaz0ke1BPRE1BTl9ORVRXT1JLfSBcCiAgLS1pcCAke0lQQUREUkVTU30gXAogIC1lIEFaVVJFX1BPUlRBTF9BQ0NFU1NfR1JPVVBfSURTIFwKICAtZSBBWlVSRV9QT1JUQUxfQ0xJRU5UX0lEIFwKICAtZSBBWlVSRV9QT1JUQUxfRUxFVkFURURfR1JPVVBfSURTIFwKICAtZSBEQVRBQkFTRV9BQ0NPVU5UX05BTUUgXAogIC1lIEtFWVZBVUxUX1BSRUZJWCBcCiAgLWUgTURNX0FDQ09VTlQgXAogIC1lIE1ETV9OQU1FU1BBQ0UgXAogIC1lIFBPUlRBTF9IT1NUTkFNRSBcCiAgLWUgT1RFTF9BVURJVF9RVUVVRV9TSVpFIFwKICAtZSBBUk9fTE9HX0xFVkVMIFwKICAtbSAyZyBcCiAgLXAgNDQ0Ojg0NDQgXAogIC1wIDIyMjI6MjIyMiBcCiAgLXYgL3J1bi9zeXN0ZW1kL2pvdXJuYWw6L3J1bi9zeXN0ZW1kL2pvdXJuYWwgXAogIC12IC92YXIvZXR3Oi92YXIvZXR3OnogXAogIC12IC92YXIvcnVuL21kc2QvYXNhOi92YXIvcnVuL21kc2QvYXNhOnogXAogICR7UlBJTUFHRX0gXAogIHBvcnRhbApSZXN0YXJ0PWFsd2F5cwpSZXN0YXJ0U2VjPTEKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldCcKCiAgICB3cml0ZV9maWxlIGFyb19wb3J0YWxfc2VydmljZV9maWxlbmFtZSBhcm9fcG9ydGFsX3NlcnZpY2VfZmlsZSB0cnVlCn0KCiMgY29uZmlndXJlX3NlcnZpY2VfYXJvX21pbW9fYWN0dWF0b3IKIyBhcmdzOgojIDEpIGltYWdlIC0gbmFtZXJlZiwgc3RyaW5nOyBSUCBjb250YWluZXIgaW1hZ2UKIyAyKSBjb25mX2ZpbGUgLSBuYW1lcmVmLCBzdHJpbmc7IGFybyBycCBlbnZpcm9ubWVudCBmaWxlCiMgMykgaXBhZGRyZXNzIC0gbmFtZXJlZiwgc3RyaW5nOyBzdGF0aWMgaXAgb2YgcG9kbWFuIG5ldHdvcmsgdG8gYmUgYXR0YWNoZWQKY29uZmlndXJlX3NlcnZpY2VfYXJvX21pbW9fYWN0dWF0b3IoKSB7CiAgICBsb2NhbCAtbiBpbWFnZT0iJDEiCiAgICBsb2NhbCAtbiBjb25mX2ZpbGU9IiQyIgogICAgbG9jYWwgLW4gaXBhZGRyZXNzPSIkMyIKICAgIGxvZyAic3RhcnRpbmciCiAgICBsb2cgIkNvbmZpZ3VyaW5nIGFyby1taW1vLWFjdHVhdG9yIHNlcnZpY2UiCgogICAgbG9jYWwgLXIgYXJvX21pbW9fYWN0dWF0b3JfY29uZl9maWxlbmFtZT0nL2V0Yy9zeXNjb25maWcvYXJvLW1pbW8tYWN0dWF0b3InCiAgICBsb2NhbCAtciBhZGRfY29uZl9maWxlPSJQT0RNQU5fTkVUV09SSz0ncG9kbWFuJwpJUEFERFJFU1M9JyRpcGFkZHJlc3MnIgoKICAgIHdyaXRlX2ZpbGUgYXJvX21pbW9fYWN0dWF0b3JfY29uZl9maWxlbmFtZSBjb25mX2ZpbGUgdHJ1ZQogICAgd3JpdGVfZmlsZSBhcm9fbWltb19hY3R1YXRvcl9jb25mX2ZpbGVuYW1lIGFkZF9jb25mX2ZpbGUgZmFsc2UKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGFyb19taW1vX2FjdHVhdG9yX3NlcnZpY2VfZmlsZW5hbWU9Jy9ldGMvc3lzdGVtZC9zeXN0ZW0vYXJvLW1pbW8tYWN0dWF0b3Iuc2VydmljZScKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgIyBiZWxvdyB2YXJpYWJsZSBpcyBpbiBzaW5nbGUgcXVvdGVzCiAgICAjIGFzIGl0IGlzIHRvIGJlIGV4cGFuZGVkIGF0IHN5c3RlbWQgc3RhcnQgdGltZSAoYnkgc3lzdGVtZCwgbm90IHRoaXMgc2NyaXB0KQogICAgbG9jYWwgLXIgYXJvX21pbW9fYWN0dWF0b3Jfc2VydmljZV9maWxlPSdbVW5pdF0KQWZ0ZXI9bmV0d29yay1vbmxpbmUudGFyZ2V0CldhbnRzPW5ldHdvcmstb25saW5lLnRhcmdldAoKW1NlcnZpY2VdCkVudmlyb25tZW50RmlsZT0vZXRjL3N5c2NvbmZpZy9hcm8tbWltby1hY3R1YXRvcgpFeGVjU3RhcnRQcmU9LS91c3IvYmluL3BvZG1hbiBybSAtZiAlTgpFeGVjU3RhcnQ9L3Vzci9iaW4vcG9kbWFuIHJ1biBcCiAgLS1ob3N0bmFtZSAlSCBcCiAgLS1uYW1lICVOIFwKICAtLXJtIFwKICAtLWNhcC1kcm9wIG5ldF9yYXcgXAogIC1lIEFDUl9SRVNPVVJDRV9JRCBcCiAgLWUgQURNSU5fQVBJX0NMSUVOVF9DRVJUX0NPTU1PTl9OQU1FIFwKICAtZSBBUk1fQVBJX0NMSUVOVF9DRVJUX0NPTU1PTl9OQU1FIFwKICAtZSBBWlVSRV9BUk1fQ0xJRU5UX0lEIFwKICAtZSBBWlVSRV9GUF9DTElFTlRfSUQgXAogIC1lIENMVVNURVJfTURNX0FDQ09VTlQgXAogIC1lIENMVVNURVJfTURNX05BTUVTUEFDRSBcCiAgLWUgQ0xVU1RFUl9NRFNEX0FDQ09VTlQgXAogIC1lIENMVVNURVJfTURTRF9DT05GSUdfVkVSU0lPTiBcCiAgLWUgQ0xVU1RFUl9NRFNEX05BTUVTUEFDRSBcCiAgLWUgREFUQUJBU0VfQUNDT1VOVF9OQU1FIFwKICAtZSBET01BSU5fTkFNRSBcCiAgLWUgR0FURVdBWV9ET01BSU5TIFwKICAtZSBHQVRFV0FZX1JFU09VUkNFR1JPVVAgXAogIC1lIEtFWVZBVUxUX1BSRUZJWCBcCiAgLWUgTURNX0FDQ09VTlQgXAogIC1lIE1ETV9OQU1FU1BBQ0UgXAogIC1lIE1EU0RfRU5WSVJPTk1FTlQgXAogIC1lIFJQX0ZFQVRVUkVTIFwKICAtZSBBUk9fSU5TVEFMTF9WSUFfSElWRSBcCiAgLWUgQVJPX0hJVkVfREVGQVVMVF9JTlNUQUxMRVJfUFVMTFNQRUMgXAogIC1lIEFST19BRE9QVF9CWV9ISVZFIFwKICAtZSBPSURDX0FGRF9FTkRQT0lOVCBcCiAgLWUgT0lEQ19TVE9SQUdFX0FDQ09VTlRfTkFNRSBcCiAgLWUgTVNJX1JQX0VORFBPSU5UIFwKICAtZSBBUk9fTE9HX0xFVkVMIFwKICAtbSAyZyBcCiAgLS1uZXR3b3JrPSR7UE9ETUFOX05FVFdPUkt9IFwKICAtLWlwICR7SVBBRERSRVNTfSBcCiAgLXAgNDQ1Ojg0NDMgXAogIC12IC9ldGMvYXJvLXJwOi9ldGMvYXJvLXJwIFwKICAtdiAvcnVuL3N5c3RlbWQvam91cm5hbDovcnVuL3N5c3RlbWQvam91cm5hbCBcCiAgLXYgL3Zhci9ldHc6L3Zhci9ldHc6eiBcCiAgJHtSUElNQUdFfSBcCiAgbWltby1hY3R1YXRvcgpFeGVjU3RvcD0vdXNyL2Jpbi9wb2RtYW4gc3RvcCAtdCAzNjAwICVOClRpbWVvdXRTdG9wU2VjPTM2MDAKUmVzdGFydD1hbHdheXMKUmVzdGFydFNlYz0xClN0YXJ0TGltaXRJbnRlcnZhbD0wCgpbSW5zdGFsbF0KV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQnCgogICAgd3JpdGVfZmlsZSBhcm9fbWltb19hY3R1YXRvcl9zZXJ2aWNlX2ZpbGVuYW1lIGFyb19taW1vX2FjdHVhdG9yX3NlcnZpY2VfZmlsZSB0cnVlCn0KCiMgY29uZmlndXJlX3NlcnZpY2VfYXJvX21pc2UKIyBhcmdzOgojIDEpIGltYWdlIC0gbmFtZXJlZiwgc3RyaW5nOyBNSVNFIGNvbnRhaW5lciBpbWFnZQojIDIpIGlwYWRkcmVzcyAtIG5hbWVyZWYsIHN0cmluZzsgc3RhdGljIGlwIG9mIHBvZG1hbiBuZXR3b3JrIHRvIGJlIGF0dGFjaGVkCmNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19taXNlKCkgewogICAgbG9jYWwgLW4gaW1hZ2U9IiQxIgogICAgbG9jYWwgLW4gaXBhZGRyZXNzPSIkMiIKICAgIGxvZyAic3RhcnRpbmciCiAgICBsb2cgIkNvbmZpZ3VyaW5nIGFyby1taXNlIHNlcnZpY2UiCgogICAgTE9HSU5JTlNUQU5DRT0iaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tIgogICAgaWYgW1sgJEFaVVJFQ0xPVUROQU1FID09ICIkdXNfZ292X2Nsb3VkIiBdXTsgdGhlbgogICAgICAgIExPR0lOSU5TVEFOQ0U9Imh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLnVzIgogICAgZmkKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgYXJvX21pc2Vfc2VydmljZV9jb25mX2ZpbGVuYW1lPScvZXRjL3N5c2NvbmZpZy9hcm8tbWlzZScKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgYXJvX21pc2Vfc2VydmljZV9jb25mX2ZpbGU9IkZQQ0xJRU5USUQ9JyRGUENMSUVOVElEJwpGUFRFTkFOVElEPSckRlBURU5BTlRJRCcKTUlTRUlNQUdFPSckaW1hZ2UnCk1JU0VWQUxJREFVRElFTkNFUz0nJE1JU0VWQUxJREFVRElFTkNFUycKTUlTRVZBTElEQVBQSURTPSckTUlTRVZBTElEQVBQSURTJwpMT0dJTklOU1RBTkNFPSckTE9HSU5JTlNUQU5DRScKUE9ETUFOX05FVFdPUks9J3BvZG1hbicKSVBBRERSRVNTPSckaXBhZGRyZXNzJyIKCiAgICB3cml0ZV9maWxlIGFyb19taXNlX3NlcnZpY2VfY29uZl9maWxlbmFtZSBhcm9fbWlzZV9zZXJ2aWNlX2NvbmZfZmlsZSB0cnVlCgogICAgbWtkaXIgLXAgL2FwcC9taXNlCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGFyb19taXNlX2FwcHNldHRpbmdzX2ZpbGVuYW1lPScvYXBwL21pc2UvYXBwc2V0dGluZ3MuanNvbicKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgYXJvX21pc2VfYXBwc2V0dGluZ3NfZmlsZT0iewogICAgXCJWZXJzaW9uXCI6IFwiMVwiLAogICAgXCJIZWFydGJlYXRJbnRlcnZhbE1zXCI6IDUwMDAsCiAgICBcIkF6dXJlQWRcIjogewogICAgICAgIFwiSW5zdGFuY2VcIjogXCIkTE9HSU5JTlNUQU5DRVwiLAogICAgICAgIFwiQ2xpZW50SWRcIjogXCIkRlBDTElFTlRJRFwiLAogICAgICAgIFwiVGVuYW50SWRcIjogXCIkRlBURU5BTlRJRFwiLAogICAgICAgIFwiQXVkaWVuY2VcIjogXCJhcGk6Ly8kRlBDTElFTlRJRFwiLAogICAgICAgIFwiU2hvd1BJSVwiOiBmYWxzZSwKICAgICAgICBcIkluYm91bmRQb2xpY2llc1wiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFwiTGFiZWxcIjogXCJhcm9ycC1hcm0taW5ib3VuZC1wb2xpY3lcIiwKICAgICAgICAgICAgICAgIFwiQXV0aG9yaXR5XCI6IFwiJExPR0lOSU5TVEFOQ0UvJEZQVEVOQU5USUQvXCIKLAogICAgICAgICAgICAgICAgXCJBdXRoZW50aWNhdGlvblNjaGVtZXNcIjogWwogICAgICAgICAgICAgICAgICAgIFwiUG9QXCIKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBcIlZhbGlkQXVkaWVuY2VzXCI6ICRNSVNFVkFMSURBVURJRU5DRVMsCiAgICAgICAgICAgICAgICBcIlNpZ25lZEh0dHBSZXF1ZXN0VmFsaWRhdGlvblBvbGljeVwiOiB7CiAgICAgICAgICAgICAgICAgICAgXCJWYWxpZGF0ZVRzXCI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgXCJWYWxpZGF0ZU1cIjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBcIlZhbGlkYXRlVVwiOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIFwiVmFsaWRhdGVQXCI6IHRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBcIlZhbGlkQXBwbGljYXRpb25JZHNcIjogJE1JU0VWQUxJREFQUElEUwogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBcIkxvZ2dpbmdcIjogewogICAgICAgICAgICBcIkxvZ0xldmVsXCI6IFwiSW5mb3JtYXRpb25cIgogICAgICAgIH0sCiAgICAgICAgXCJNb2R1bGVzXCI6IHsKICAgICAgICAgICAgXCJUclYyXCI6IHsKICAgICAgICAgICAgICAgIFwiTW9kdWxlVHlwZVwiOiBcIlRyVjJNb2R1bGVcIiwKICAgICAgICAgICAgICAgIFwiRW5hYmxlZFwiOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgXCJBbGxvd2VkSG9zdHNcIjogXCIqXCIsCiAgICBcIktlc3RyZWxcIjogewogICAgICAgIFwiRW5kcG9pbnRzXCI6IHsKICAgICAgICAgICAgXCJIdHRwXCI6IHsKICAgICAgICAgICAgICAgIFwiVXJsXCI6IFwiaHR0cDovLyRpcGFkZHJlc3M6NTAwMFwiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgXCJMb2dnaW5nXCI6IHsKICAgICAgICBcIkxvZ0xldmVsXCI6IHsKICAgICAgICAgICAgXCJEZWZhdWx0XCI6IFwiSW5mb3JtYXRpb25cIiwKICAgICAgICAgICAgXCJNaWNyb3NvZnRcIjogXCJJbmZvcm1hdGlvblwiLAogICAgICAgICAgICBcIk1pY3Jvc29mdC5Ib3N0aW5nLkxpZmV0aW1lXCI6IFwiSW5mb3JtYXRpb25cIgogICAgICAgIH0sCiAgICAgICAgXCJDb25zb2xlXCI6IHsKICAgICAgICAgICAgXCJGb3JtYXR0ZXJOYW1lXCI6IFwiU2ltcGxlXCIsCiAgICAgICAgICAgIFwiRm9ybWF0dGVyT3B0aW9uc1wiOiB7CiAgICAgICAgICAgICAgICBcIkluY2x1ZGVTY29wZXNcIjogdHJ1ZSwKICAgICAgICAgICAgICAgIFwiU2luZ2xlTGluZVwiOiB0cnVlLAogICAgICAgICAgICAgICAgXCJUaW1lc3RhbXBGb3JtYXRcIjogXCJISDptbTpzcy5mZmZmIFwiLAogICAgICAgICAgICAgICAgXCJVc2VVdGNUaW1lc3RhbXBcIjogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9IgoKICAgIHdyaXRlX2ZpbGUgYXJvX21pc2VfYXBwc2V0dGluZ3NfZmlsZW5hbWUgYXJvX21pc2VfYXBwc2V0dGluZ3NfZmlsZSB0cnVlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBhcm9fbWlzZV9zZXJ2aWNlX2ZpbGVuYW1lPScvZXRjL3N5c3RlbWQvc3lzdGVtL2Fyby1taXNlLnNlcnZpY2UnCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgICMgYmVsb3cgdmFyaWFibGUgaXMgaW4gc2luZ2xlIHF1b3RlcwogICAgIyBhcyBpdCBpcyB0byBiZSBleHBhbmRlZCBhdCBzeXN0ZW1kIHN0YXJ0IHRpbWUgKGJ5IHN5c3RlbWQsIG5vdCB0aGlzIHNjcmlwdCkKICAgIGxvY2FsIC1yIGFyb19taXNlX3NlcnZpY2VfZmlsZT0nW1VuaXRdCkFmdGVyPW5ldHdvcmstb25saW5lLnRhcmdldApXYW50cz1uZXR3b3JrLW9ubGluZS50YXJnZXQKU3RhcnRMaW1pdEludGVydmFsU2VjPTAKW1NlcnZpY2VdClJlc3RhcnRTZWM9MXMKRW52aXJvbm1lbnRGaWxlPS9ldGMvc3lzY29uZmlnL2Fyby1taXNlCkV4ZWNTdGFydFByZT0tL3Vzci9iaW4vcG9kbWFuIHJtIC1mICVOCkV4ZWNTdGFydD0vdXNyL2Jpbi9wb2RtYW4gcnVuIFwKICAtcCA1MDAwOjUwMDAgXAogIC12IC9hcHAvbWlzZS9hcHBzZXR0aW5ncy5qc29uOi9hcHAvYXBwc2V0dGluZ3MuanNvbjp6IFwKICAtLWhvc3RuYW1lICVIIFwKICAtLW5hbWUgJU4gXAogIC0tbmV0d29yaz0ke1BPRE1BTl9ORVRXT1JLfSBcCiAgLS1pcCAke0lQQUREUkVTU30gXAogIC0tcm0gXAogICR7TUlTRUlNQUdFfQpFeGVjU3RvcD0vdXNyL2Jpbi9wb2RtYW4gc3RvcCAlTgpSZXN0YXJ0PWFsd2F5cwpSZXN0YXJ0U2VjPTMKU3RhcnRMaW1pdEludGVydmFsPTAKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0JwoKICAgIHdyaXRlX2ZpbGUgYXJvX21pc2Vfc2VydmljZV9maWxlbmFtZSBhcm9fbWlzZV9zZXJ2aWNlX2ZpbGUgdHJ1ZQp9CiMgY29uZmlndXJlX3NlcnZpY2VfYXJvX290ZWxfY29sbGVjdG9yCiMgYXJnczoKIyAxKSBpbWFnZSAtIG5hbWVyZWYsIHN0cmluZzsgT1RFTCBjb250YWluZXIgaW1hZ2UKIyAyKSBzdGF0aWNfaXBfYWRkcmVzcyAtIG5hbWVyZWYsIGFycmF5OyBzdGF0aWMgaXBzIG9mIGFsbCBzZXJ2aWNlcwojIDMpIGlwYWRkcmVzcyAtIG5hbWVyZWYsIHN0cmluZzsgc3RhdGljIGlwIG9mIHBvZG1hbiBuZXR3b3JrIHRvIGJlIGF0dGFjaGVkCmNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19vdGVsX2NvbGxlY3RvcigpIHsKICAgIGxvY2FsIC1uIGltYWdlPSIkMSIKICAgIGxvY2FsIC1uIHN0YXRpY19pcF9hZGRyZXNzPSIkMiIKICAgIGxvY2FsIC1uIGlwYWRkcmVzcz0iJDMiCiAgICBsb2cgInN0YXJ0aW5nIgogICAgbG9nICJDb25maWd1cmluZyBhcm8tb3RlbC1jb2xsZWN0b3Igc2VydmljZSIKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGFyb19vdGVsX2NvbGxlY3Rvcl9zZXJ2aWNlX2NvbmZfZmlsZW5hbWU9Jy9ldGMvc3lzY29uZmlnL2Fyby1vdGVsLWNvbGxlY3RvcicKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgYXJvX290ZWxfY29sbGVjdG9yX3NlcnZpY2VfY29uZl9maWxlPSJHT01FTUxJTUlUPTEwMDBNaUIKT1RFTElNQUdFPSckaW1hZ2UnClBPRE1BTl9ORVRXT1JLPSdwb2RtYW4nCklQQUREUkVTUz0nJGlwYWRkcmVzcyciCgogICAgd3JpdGVfZmlsZSBhcm9fb3RlbF9jb2xsZWN0b3Jfc2VydmljZV9jb25mX2ZpbGVuYW1lIGFyb19vdGVsX2NvbGxlY3Rvcl9zZXJ2aWNlX2NvbmZfZmlsZSB0cnVlCgogICAgbWtkaXIgLXAgL2FwcC9vdGVsCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGFyb19vdGVsX2NvbGxlY3Rvcl9hcHBjb25maWdfZmlsZW5hbWU9Jy9hcHAvb3RlbC9jb25maWcueWFtbCcKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgYXJvX290ZWxfY29sbGVjdG9yX2FwcGNvbmZpZ19maWxlPSJyZWNlaXZlcnM6CiAgaHR0cGNoZWNrOgogICAgdGFyZ2V0czoKICAgICMgTUlTRSBFbmRwb2ludHMKICAgICAgLSBlbmRwb2ludDogaHR0cDovLyR7c3RhdGljX2lwX2FkZHJlc3NbIm1pc2UiXX06NTAwMC9oZWFsdGh6CiAgICAgICAgbWV0aG9kOiBHRVQKICAgICAgLSBlbmRwb2ludDogaHR0cDovLyR7c3RhdGljX2lwX2FkZHJlc3NbIm1pc2UiXX06NTAwMC9yZWFkeXoKICAgICAgICBtZXRob2Q6IEdFVAogICAgIyBPVEVMcyBvd24gRW5kcG9pbnRzCiAgICAgIC0gZW5kcG9pbnQ6IGh0dHA6Ly8kaXBhZGRyZXNzOjEzMTMzL2hlYWx0aHoKICAgICAgICBtZXRob2Q6IEdFVAogICAgICAtIGVuZHBvaW50OiBodHRwOi8vJGlwYWRkcmVzczoxMzEzMy9yZWFkeXoKICAgICAgICBtZXRob2Q6IEdFVAogICAgY29sbGVjdGlvbl9pbnRlcnZhbDogMjBzCnByb2Nlc3NvcnM6CiAgYmF0Y2g6CiAgYXR0cmlidXRlcy9pbnNlcnQ6CiAgICBhY3Rpb25zOgogICAgICAtIGtleTogXCJsb2NhdGlvblwiCiAgICAgICAgYWN0aW9uOiBpbnNlcnQKICAgICAgICB2YWx1ZTogXCIkTE9DQVRJT05cIgogICAgICAtIGtleTogXCJob3N0XCIKICAgICAgICBhY3Rpb246IGluc2VydAogICAgICAgIHZhbHVlOiBcIiQoaG9zdG5hbWUpXCIKZXh0ZW5zaW9uczoKICBoZWFsdGhfY2hlY2s6CiAgICBlbmRwb2ludDogJGlwYWRkcmVzczoxMzEzMwpleHBvcnRlcnM6CiAgb3RscDoKICAgIGVuZHBvaW50OiAke3N0YXRpY19pcF9hZGRyZXNzWyJtZG0iXX06NDMxNwogICAgdGxzOgogICAgICBpbnNlY3VyZTogdHJ1ZQpzZXJ2aWNlOgogIGV4dGVuc2lvbnM6IFtoZWFsdGhfY2hlY2tdCiAgcGlwZWxpbmVzOgogICAgbWV0cmljczoKICAgICAgcmVjZWl2ZXJzOiBbaHR0cGNoZWNrXQogICAgICBwcm9jZXNzb3JzOiBbYmF0Y2gsIGF0dHJpYnV0ZXMvaW5zZXJ0XQogICAgICBleHBvcnRlcnM6IFtvdGxwXSIKCiAgICB3cml0ZV9maWxlIGFyb19vdGVsX2NvbGxlY3Rvcl9hcHBjb25maWdfZmlsZW5hbWUgYXJvX290ZWxfY29sbGVjdG9yX2FwcGNvbmZpZ19maWxlIHRydWUKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGFyb19vdGVsX2NvbGxlY3Rvcl9zZXJ2aWNlX2ZpbGVuYW1lPScvZXRjL3N5c3RlbWQvc3lzdGVtL2Fyby1vdGVsLWNvbGxlY3Rvci5zZXJ2aWNlJwogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAjIGJlbG93IHZhcmlhYmxlIGlzIGluIHNpbmdsZSBxdW90ZXMKICAgICMgYXMgaXQgaXMgdG8gYmUgZXhwYW5kZWQgYXQgc3lzdGVtZCBzdGFydCB0aW1lIChieSBzeXN0ZW1kLCBub3QgdGhpcyBzY3JpcHQpCiAgICBsb2NhbCAtciBhcm9fb3RlbF9jb2xsZWN0b3Jfc2VydmljZV9maWxlPSdbVW5pdF0KQWZ0ZXI9bWRtLnNlcnZpY2UKV2FudHM9bWRtLnNlcnZpY2UKU3RhcnRMaW1pdEludGVydmFsU2VjPTAKW1NlcnZpY2VdClJlc3RhcnRTZWM9MXMKRW52aXJvbm1lbnRGaWxlPS9ldGMvc3lzY29uZmlnL2Fyby1vdGVsLWNvbGxlY3RvcgpFeGVjU3RhcnRQcmU9LS91c3IvYmluL3BvZG1hbiBybSAtZiAlTgpFeGVjU3RhcnQ9L3Vzci9iaW4vcG9kbWFuIHJ1biBcCiAgLS1ob3N0bmFtZSAlSCBcCiAgLS1uYW1lICVOIFwKICAtLXJtIFwKICAtLW5ldHdvcms9JHtQT0RNQU5fTkVUV09SS30gXAogIC0taXAgJHtJUEFERFJFU1N9IFwKICAtbSAyZyBcCiAgLXYgL2FwcC9vdGVsL2NvbmZpZy55YW1sOi9ldGMvb3RlbGNvbC1jb250cmliL2NvbmZpZy55YW1sOnogXAogICR7T1RFTElNQUdFfQpFeGVjU3RvcD0vdXNyL2Jpbi9wb2RtYW4gc3RvcCAlTgpSZXN0YXJ0PWFsd2F5cwpSZXN0YXJ0U2VjPTMKU3RhcnRMaW1pdEludGVydmFsPTAKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0JwoKICAgIHdyaXRlX2ZpbGUgYXJvX290ZWxfY29sbGVjdG9yX3NlcnZpY2VfZmlsZW5hbWUgYXJvX290ZWxfY29sbGVjdG9yX3NlcnZpY2VfZmlsZSB0cnVlCn0KCiMgY29uZmlndXJlX3NlcnZpY2VfbWRzZAojIGFyZ3M6CiMgMSkgbW9uaXRvcmluZ19yb2xlIC0gbmFtZXJlZiwgc3RyaW5nOyBjYW4gYmUgImdhdGV3YXkiIG9yICJycCIKIyAyKSBtb25pdG9yX2NvbmZpZ192ZXJzaW9uIC0gbmFtZXJlZiwgc3RyaW5nOyBtZHNkIGNvbmZpZyB2ZXJzaW9uCmNvbmZpZ3VyZV9zZXJ2aWNlX21kc2QoKSB7CiAgICBsb2NhbCAtbiByb2xlPSIkMSIKICAgIGxvY2FsIC1uIG1vbml0b3JfY29uZmlnX3ZlcnNpb249IiQyIgogICAgbG9nICJzdGFydGluZyIKICAgIGxvZyAiY29uZmlndXJpbmcgbWRzZCBzZXJ2aWNlIgoKICAgIHZlcmlmeV9yb2xlIHJvbGUKCiAgICBsb2NhbCAtciBtZHNkX3NlcnZpY2VfZGlyPSIvZXRjL3N5c3RlbWQvc3lzdGVtL21kc2Quc2VydmljZS5kIgogICAgbWtkaXIgLXAgIiRtZHNkX3NlcnZpY2VfZGlyIgoKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgbWRzZF9vdmVycmlkZV9jb25mX2ZpbGVuYW1lPSIkbWRzZF9zZXJ2aWNlX2Rpci9vdmVycmlkZS5jb25mIgogICAgbG9jYWwgLXIgbWRzZF9jZXJ0aWZpY2F0ZV9zYW49IiQob3BlbnNzbCB4NTA5IC1pbiAvdmFyL2xpYi93YWFnZW50L01pY3Jvc29mdC5BenVyZS5LZXlWYXVsdC5TdG9yZS9tZHNkLnBlbSAtbm9vdXQgLXN1YmplY3QgfCBzZWQgLWUgJ3MvLipDTiA9IC8vJykiCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIG1kc2Rfb3ZlcnJpZGVfY29uZl9maWxlPSJbVW5pdF0KQWZ0ZXI9bmV0d29yay1vbmxpbmUudGFyZ2V0IgoKICAgIHdyaXRlX2ZpbGUgbWRzZF9vdmVycmlkZV9jb25mX2ZpbGVuYW1lIG1kc2Rfb3ZlcnJpZGVfY29uZl9maWxlIHRydWUKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGRlZmF1bHRfbWRzZF9maWxlbmFtZT0iL2V0Yy9kZWZhdWx0L21kc2QiCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGRlZmF1bHRfbWRzZF9maWxlPSJNRFNEX1JPTEVfUFJFRklYPS92YXIvcnVuL21kc2QvZGVmYXVsdApNRFNEX09QVElPTlM9XCItQSAtZCAtciBcJE1EU0RfUk9MRV9QUkVGSVhcIgoKZXhwb3J0IE1PTklUT1JJTkdfR0NTX0VOVklST05NRU5UPSckTURTREVOVklST05NRU5UJwpleHBvcnQgTU9OSVRPUklOR19HQ1NfQUNDT1VOVD0nJFJQTURTREFDQ09VTlQnCmV4cG9ydCBNT05JVE9SSU5HX0dDU19SRUdJT049JyRMT0NBVElPTicKZXhwb3J0IE1PTklUT1JJTkdfR0NTX0FVVEhfSURfVFlQRT1BdXRoS2V5VmF1bHQKZXhwb3J0IE1PTklUT1JJTkdfR0NTX0FVVEhfSUQ9JyRtZHNkX2NlcnRpZmljYXRlX3NhbicKZXhwb3J0IE1PTklUT1JJTkdfR0NTX05BTUVTUEFDRT0nJFJQTURTRE5BTUVTUEFDRScKZXhwb3J0IE1PTklUT1JJTkdfQ09ORklHX1ZFUlNJT049JyRtb25pdG9yX2NvbmZpZ192ZXJzaW9uJwpleHBvcnQgTU9OSVRPUklOR19VU0VfR0VORVZBX0NPTkZJR19TRVJWSUNFPXRydWUKCmV4cG9ydCBNT05JVE9SSU5HX1RFTkFOVD0nJExPQ0FUSU9OJwpleHBvcnQgTU9OSVRPUklOR19ST0xFPSckcm9sZScKZXhwb3J0IE1PTklUT1JJTkdfUk9MRV9JTlNUQU5DRT1cIiQoaG9zdG5hbWUpXCIKCmV4cG9ydCBNRFNEX01TR1BBQ0tfU09SVF9DT0xVTU5TPVwiMVwiIgoKICAgIHdyaXRlX2ZpbGUgZGVmYXVsdF9tZHNkX2ZpbGVuYW1lIGRlZmF1bHRfbWRzZF9maWxlIHRydWUKfQoKIyBjb25maWd1cmVfc2VydmljZV9mbHVlbnRiaXQKIyBhcmdzOgojIDEpIGNvbmZfZmlsZSAtIHN0cmluZzsgZmx1ZW5iaXQgY29uZmlndXJhdGlvbiBmaWxlCiMgMikgaW1hZ2UgLSBzdHJpbmc7IGZsdWVudGJpdCBjb250YWluZXIgaW1hZ2UgdG8gcnVuCiMgMykgaXBhZGRyZXNzIC0gbmFtZXJlZiwgc3RyaW5nOyBzdGF0aWMgaXAgb2YgcG9kbWFuIG5ldHdvcmsgdG8gYmUgYXR0YWNoZWQKY29uZmlndXJlX3NlcnZpY2VfZmx1ZW50Yml0KCkgewogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtbiBjb25mX2ZpbGU9IiQxIgogICAgbG9jYWwgLW4gaW1hZ2U9IiQyIgogICAgbG9nICJzdGFydGluZyIKICAgIGxvZyAiQ29uZmlndXJpbmcgZmx1ZW50Yml0IHNlcnZpY2UiCgogICAgbWtkaXIgLXAgL2V0Yy9mbHVlbnRiaXQvCiAgICBta2RpciAtcCAvdmFyL2xpYi9mbHVlbnQKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGNvbmZfZmlsZW5hbWU9Jy9ldGMvZmx1ZW50Yml0L2ZsdWVudGJpdC5jb25mJwogICAgd3JpdGVfZmlsZSBjb25mX2ZpbGVuYW1lIGNvbmZfZmlsZSB0cnVlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBzeXNjb25maWdfZmlsZW5hbWU9Jy9ldGMvc3lzY29uZmlnL2ZsdWVudGJpdCcKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgc3lzY29uZmlnX2ZpbGU9IkZMVUVOVEJJVElNQUdFPSRpbWFnZSIKCiAgICB3cml0ZV9maWxlIHN5c2NvbmZpZ19maWxlbmFtZSBzeXNjb25maWdfZmlsZSB0cnVlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBzZXJ2aWNlX2ZpbGVuYW1lPScvZXRjL3N5c3RlbWQvc3lzdGVtL2ZsdWVudGJpdC5zZXJ2aWNlJwogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAjIGJlbG93IHZhcmlhYmxlIGlzIGluIHNpbmdsZSBxdW90ZXMKICAgICMgYXMgaXQgaXMgdG8gYmUgZXhwYW5kZWQgYXQgc3lzdGVtZCBzdGFydCB0aW1lIChieSBzeXN0ZW1kLCBub3QgdGhpcyBzY3JpcHQpCiAgICBsb2NhbCAtciBzZXJ2aWNlX2ZpbGU9J1tVbml0XQpBZnRlcj1uZXR3b3JrLW9ubGluZS50YXJnZXQKV2FudHM9bmV0d29yay1vbmxpbmUudGFyZ2V0ClN0YXJ0TGltaXRJbnRlcnZhbFNlYz0wCgpbU2VydmljZV0KUmVzdGFydFNlYz0xcwpFbnZpcm9ubWVudEZpbGU9L2V0Yy9zeXNjb25maWcvZmx1ZW50Yml0CkV4ZWNTdGFydFByZT0tL3Vzci9iaW4vcG9kbWFuIHJtIC1mICVOCkV4ZWNTdGFydD0vdXNyL2Jpbi9wb2RtYW4gcnVuIFwKICAtLXNlY3VyaXR5LW9wdCBsYWJlbD1kaXNhYmxlIFwKICAtLWVudHJ5cG9pbnQgL29wdC90ZC1hZ2VudC1iaXQvYmluL3RkLWFnZW50LWJpdCBcCiAgLS1uZXQ9aG9zdCBcCiAgLS1ob3N0bmFtZSAlSCBcCiAgLS1uYW1lICVOIFwKICAtLXJtIFwKICAtLWNhcC1kcm9wIG5ldF9yYXcgXAogIC12IC9ldGMvZmx1ZW50Yml0L2ZsdWVudGJpdC5jb25mOi9ldGMvZmx1ZW50Yml0L2ZsdWVudGJpdC5jb25mIFwKICAtdiAvdmFyL2xpYi9mbHVlbnQ6L3Zhci9saWIvZmx1ZW50OnogXAogIC12IC92YXIvbG9nL2pvdXJuYWw6L3Zhci9sb2cvam91cm5hbDpybyBcCiAgLXYgL2V0Yy9tYWNoaW5lLWlkOi9ldGMvbWFjaGluZS1pZDpybyBcCiAgJHtGTFVFTlRCSVRJTUFHRX0gXAogIC1jIC9ldGMvZmx1ZW50Yml0L2ZsdWVudGJpdC5jb25mCgpFeGVjU3RvcD0vdXNyL2Jpbi9wb2RtYW4gc3RvcCAlTgpSZXN0YXJ0PWFsd2F5cwpSZXN0YXJ0U2VjPTUKU3RhcnRMaW1pdEludGVydmFsPTAKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldCcKCiAgICB3cml0ZV9maWxlIHNlcnZpY2VfZmlsZW5hbWUgc2VydmljZV9maWxlIHRydWUKfQoKIyBjb25maWd1cmVfdGltZXJzX21kbV9tZHNkCiMgYXJnczoKIyAxKSByb2xlIC0gc3RyaW5nOyBjYW4gYmUgImdhdGV3YXkiIG9yICJycCIKY29uZmlndXJlX3RpbWVyc19tZG1fbWRzZCgpIHsKICAgIGxvY2FsIC1uIHJvbGU9IiQxIgogICAgbG9nICJzdGFydGluZyIKCiAgICB2ZXJpZnlfcm9sZSByb2xlCgogICAgbG9jYWwga2V5dmF1bHRfc3VmZml4IHNlY3JldF9wcmVmaXgKICAgIGdldF9rZXl2YXVsdF9zdWZmaXggcm9sZSBrZXl2YXVsdF9zdWZmaXggc2VjcmV0X3ByZWZpeAoKICAgIGZvciB2YXIgaW4gIm1kc2QiICJtZG0iOyBkbwogICAgICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgICAgIGxvY2FsIGRvd25sb2FkX2NyZWRzX3NlcnZpY2VfZmlsZW5hbWU9Ii9ldGMvc3lzdGVtZC9zeXN0ZW0vZG93bmxvYWQtJHZhci1jcmVkZW50aWFscy5zZXJ2aWNlIgogICAgICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgICAgIGxvY2FsIGRvd25sb2FkX2NyZWRzX3NlcnZpY2VfZmlsZT0iW1VuaXRdCkRlc2NyaXB0aW9uPVBlcmlvZGljICR2YXIgY3JlZGVudGlhbHMgcmVmcmVzaAoKW1NlcnZpY2VdClR5cGU9b25lc2hvdApFeGVjU3RhcnQ9L3Vzci9sb2NhbC9iaW4vZG93bmxvYWQtY3JlZGVudGlhbHMuc2ggJHZhciIKCiAgICAgICAgd3JpdGVfZmlsZSBkb3dubG9hZF9jcmVkc19zZXJ2aWNlX2ZpbGVuYW1lIGRvd25sb2FkX2NyZWRzX3NlcnZpY2VfZmlsZSB0cnVlCgogICAgICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgICAgIGxvY2FsIGRvd25sb2FkX2NyZWRzX3RpbWVyX2ZpbGVuYW1lPSIvZXRjL3N5c3RlbWQvc3lzdGVtL2Rvd25sb2FkLSR2YXItY3JlZGVudGlhbHMudGltZXIiCiAgICAgICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAgICAgbG9jYWwgZG93bmxvYWRfY3JlZHNfdGltZXJfZmlsZT0iW1VuaXRdCkRlc2NyaXB0aW9uPVBlcmlvZGljICR2YXIgY3JlZGVudGlhbHMgcmVmcmVzaApBZnRlcj1uZXR3b3JrLW9ubGluZS50YXJnZXQKV2FudHM9bmV0d29yay1vbmxpbmUudGFyZ2V0CgpbVGltZXJdCk9uQm9vdFNlYz0wbWluCk9uQ2FsZW5kYXI9MC8xMjowMDowMApBY2N1cmFjeVNlYz01cwoKW0luc3RhbGxdCldhbnRlZEJ5PXRpbWVycy50YXJnZXQiCgogICAgICAgIHdyaXRlX2ZpbGUgZG93bmxvYWRfY3JlZHNfdGltZXJfZmlsZW5hbWUgZG93bmxvYWRfY3JlZHNfdGltZXJfZmlsZSB0cnVlCiAgICBkb25lCgogICAgbG9jYWwgLXIgZG93bmxvYWRfY3JlZHNfc2NyaXB0X2ZpbGVuYW1lPSIvdXNyL2xvY2FsL2Jpbi9kb3dubG9hZC1jcmVkZW50aWFscy5zaCIKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgZG93bmxvYWRfY3JlZHNfc2NyaXB0X2ZpbGU9IiMhL2Jpbi9iYXNoCnNldCAtZXUKCkNPTVBPTkVOVD1cJDEKZWNobyBcIkRvd25sb2FkIFwkQ09NUE9ORU5UIGNyZWRlbnRpYWxzXCIKClRFTVBfRElSPVwiXCQobWt0ZW1wIC1kKVwiCmV4cG9ydCBBWlVSRV9DT05GSUdfRElSPVwiXCQobWt0ZW1wIC1kKVwiCgplY2hvIFwiTG9nZ2luZyBpbnRvIEF6dXJlLi4uXCIKUkVUUklFUz0zCndoaWxlIFtbIFwkUkVUUklFUyAtZ3QgMCBdXTsgZG8KICAgIGlmIGF6IGxvZ2luIC1pIC0tYWxsb3ctbm8tc3Vic2NyaXB0aW9ucwogICAgdGhlbgogICAgICAgIGVjaG8gXCJheiBsb2dpbiBzdWNjZXNzZnVsXCIKICAgICAgICBicmVhawogICAgZWxzZQogICAgICAgIGVjaG8gXCJheiBsb2dpbiBmYWlsZWQuIFJldHJ5aW5nLi4uXCIKICAgICAgICBsZXQgUkVUUklFUy09MQogICAgICAgIHNsZWVwIDUKICAgIGZpCmRvbmUKCnRyYXAgXCJjbGVhbnVwXCIgRVhJVAoKY2xlYW51cCgpIHsKICBheiBsb2dvdXQKICBbWyBcJFRFTVBfRElSID1+IC90bXAvLisgXV0gJiYgcm0gLXJmIFwkVEVNUF9ESVIKICBbWyBcJEFaVVJFX0NPTkZJR19ESVIgPX4gL3RtcC8uKyBdXSAmJiBybSAtcmYgXCRBWlVSRV9DT05GSUdfRElSCn0KCmlmIFtbIFwkQ09NUE9ORU5UID0gXCJtZG1cIiBdXTsgdGhlbgogIENVUlJFTlRfQ0VSVF9GSUxFPVwiL2V0Yy9tZG0ucGVtXCIKZWxpZiBbWyBcJENPTVBPTkVOVCA9IFwibWRzZFwiIF1dOyB0aGVuCiAgQ1VSUkVOVF9DRVJUX0ZJTEU9XCIvdmFyL2xpYi93YWFnZW50L01pY3Jvc29mdC5BenVyZS5LZXlWYXVsdC5TdG9yZS9tZHNkLnBlbVwiCmVsc2UKICBlY2hvIEludmFsaWQgdXNhZ2UgJiYgZXhpdCAxCmZpCgpTRUNSRVRfTkFNRT1cIiRzZWNyZXRfcHJlZml4LVwke0NPTVBPTkVOVH1cIgpORVdfQ0VSVF9GSUxFPVwiXCRURU1QX0RJUi9cJENPTVBPTkVOVC5wZW1cIgpmb3IgYXR0ZW1wdCBpbiB7MS4uNX07IGRvCiAgYXoga2V5dmF1bHQgXAogICAgc2VjcmV0IFwKICAgIGRvd25sb2FkIFwKICAgIC0tZmlsZSBcIlwkTkVXX0NFUlRfRklMRVwiIFwKICAgIC0taWQgXCJodHRwczovLyRLRVlWQVVMVFBSRUZJWC0ka2V5dmF1bHRfc3VmZml4LiRLRVlWQVVMVEROU1NVRkZJWC9zZWNyZXRzL1wkU0VDUkVUX05BTUVcIiBcCiAgICAmJiBicmVhawogIGlmIFtbIFwkYXR0ZW1wdCAtbHQgNSBdXTsgdGhlbiBzbGVlcCAxMDsgZWxzZSBleGl0IDE7IGZpCmRvbmUKCmlmIFsgLWYgXCRORVdfQ0VSVF9GSUxFIF07IHRoZW4KICBpZiBbWyBcJENPTVBPTkVOVCA9IFwibWRzZFwiIF1dOyB0aGVuCiAgICBjaG93biBzeXNsb2c6c3lzbG9nIFwkTkVXX0NFUlRfRklMRQogIGVsc2UKICAgIHNlZCAtaSAtbmUgJzEsL0VORCBDRVJUSUZJQ0FURS8gcCcgXCRORVdfQ0VSVF9GSUxFCiAgZmkKCiAgbmV3X2NlcnRfc249XCJcJChvcGVuc3NsIHg1MDkgLWluIFwiXCRORVdfQ0VSVF9GSUxFXCIgLW5vb3V0IC1zZXJpYWwgfCBhd2sgLUY9ICd7cHJpbnQgXCQyfScpXCIKICBjdXJyZW50X2NlcnRfc249XCJcJChvcGVuc3NsIHg1MDkgLWluIFwiXCRDVVJSRU5UX0NFUlRfRklMRVwiIC1ub291dCAtc2VyaWFsIHwgYXdrIC1GPSAne3ByaW50IFwkMn0nKVwiCiAgaWYgW1sgISAteiBcJG5ld19jZXJ0X3NuIF1dICYmIFtbIFwkbmV3X2NlcnRfc24gIT0gXCJcJGN1cnJlbnRfY2VydF9zblwiIF1dOyB0aGVuCiAgICBlY2hvIHVwZGF0aW5nIGNlcnRpZmljYXRlIGZvciBcJENPTVBPTkVOVAogICAgY2htb2QgMDYwMCBcJE5FV19DRVJUX0ZJTEUKICAgIG12IFwkTkVXX0NFUlRfRklMRSBcJENVUlJFTlRfQ0VSVF9GSUxFCiAgZmkKZWxzZQogIGVjaG8gRmFpbGVkIHRvIHJlZnJlc2ggY2VydGlmaWNhdGUgZm9yIFwkQ09NUE9ORU5UICYmIGV4aXQgMQpmaSIKCiAgICB3cml0ZV9maWxlIGRvd25sb2FkX2NyZWRzX3NjcmlwdF9maWxlbmFtZSBkb3dubG9hZF9jcmVkc19zY3JpcHRfZmlsZSB0cnVlCgogICAgY2htb2QgdSt4IC91c3IvbG9jYWwvYmluL2Rvd25sb2FkLWNyZWRlbnRpYWxzLnNoCgogICAgJGRvd25sb2FkX2NyZWRzX3NjcmlwdF9maWxlbmFtZSBtZHNkICYKICAgIHdhaXQgIiQhIgoKCiAgICAkZG93bmxvYWRfY3JlZHNfc2NyaXB0X2ZpbGVuYW1lIG1kbSAmCiAgICB3YWl0ICIkISIKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIHdhdGNoX21kbV9jcmVkc19zZXJ2aWNlX2ZpbGVuYW1lPSIvZXRjL3N5c3RlbWQvc3lzdGVtL3dhdGNoLW1kbS1jcmVkZW50aWFscy5zZXJ2aWNlIgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciB3YXRjaF9tZG1fY3JlZHNfc2VydmljZV9maWxlPSJbVW5pdF0KRGVzY3JpcHRpb249V2F0Y2ggZm9yIGNoYW5nZXMgaW4gbWRtLnBlbSBhbmQgcmVzdGFydHMgdGhlIG1kbSBzZXJ2aWNlCgpbU2VydmljZV0KVHlwZT1vbmVzaG90CkV4ZWNTdGFydD0vdXNyL2Jpbi9zeXN0ZW1jdGwgcmVzdGFydCBtZG0uc2VydmljZQoKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0IgoKICAgIHdyaXRlX2ZpbGUgd2F0Y2hfbWRtX2NyZWRzX3NlcnZpY2VfZmlsZW5hbWUgd2F0Y2hfbWRtX2NyZWRzX3NlcnZpY2VfZmlsZSB0cnVlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciB3YXRjaF9tZG1fY3JlZHNfcGF0aF9maWxlbmFtZT0nL3Vzci9saWIvc3lzdGVtZC9zeXN0ZW0vd2F0Y2gtbWRtLWNyZWRlbnRpYWxzLnBhdGgnCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIHdhdGNoX21kbV9jcmVkc19wYXRoX2ZpbGU9J1tQYXRoXQpQYXRoTW9kaWZpZWQ9L2V0Yy9tZG0ucGVtCgpbSW5zdGFsbF0KV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQnCgogICAgd3JpdGVfZmlsZSB3YXRjaF9tZG1fY3JlZHNfcGF0aF9maWxlbmFtZSB3YXRjaF9tZG1fY3JlZHNfcGF0aF9maWxlIHRydWUKCiAgICBsb2NhbCAtciB3YXRjaF9tZG1fY3JlZHM9J3dhdGNoLW1kbS1jcmVkZW50aWFscy5wYXRoJwogICAgc3lzdGVtY3RsIGVuYWJsZSAtLW5vdyAiJHdhdGNoX21kbV9jcmVkcyIgfHwgYWJvcnQgImZhaWxlZCB0byBlbmFibGUgYW5kIHN0YXJ0ICR3YXRjaF9tZG1fY3JlZHMiCn0KCiMgY29uZmlndXJlX3NlcnZpY2VfbWRtCiMgYXJnczoKIyAxKSByb2xlIC0gbmFtZXJlZiwgc3RyaW5nOyBjYW4gYmUgImdhdGV3YXkiIG9yICJycCIKIyAyKSBpbWFnZSAtIG5hbWVyZWYsIHN0cmluZzsgbWRtIGNvbnRhaW5lciBpbWFnZSB0byBydW4KIyAzKSBpcGFkZHJlc3MgLSBuYW1lcmVmLCBzdHJpbmc7IHN0YXRpYyBpcCBvZiBwb2RtYW4gbmV0d29yayB0byBiZSBhdHRhY2hlZApjb25maWd1cmVfc2VydmljZV9tZG0oKSB7CiAgICBsb2NhbCAtbiByb2xlPSIkMSIKICAgIGxvY2FsIC1uIGltYWdlPSIkMiIKICAgIGxvY2FsIC1uIGlwYWRkcmVzcz0iJDMiCiAgICBsb2cgInN0YXJ0aW5nIgogICAgbG9nICJDb25maWd1cmluZyBtZG0gc2VydmljZSIKCiAgICB2ZXJpZnlfcm9sZSByb2xlCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBzeXNjb25maWdfbWRtX2ZpbGVuYW1lPSIvZXRjL3N5c2NvbmZpZy9tZG0iCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIHN5c2NvbmZpZ19tZG1fZmlsZT0iTURNRlJPTlRFTkRVUkw9JyRNRE1GUk9OVEVORFVSTCcKTURNSU1BR0U9JyRpbWFnZScKTURNU09VUkNFRU5WSVJPTk1FTlQ9JyRMT0NBVElPTicKTURNU09VUkNFUk9MRT0nJHJvbGUnCk1ETVNPVVJDRVJPTEVJTlNUQU5DRT1cIiQoaG9zdG5hbWUpXCIKTURNX0lOUFVUPXN0YXRzZF9sb2NhbCxvdGxwX2dycGMKTURNX05BTUVTUEFDRT0nT1RFTCcKTURNX0FDQ09VTlQ9J0F6dXJlUmVkSGF0T3BlblNoaWZ0UlAnClBPRE1BTl9ORVRXT1JLPSdwb2RtYW4nCklQQUREUkVTUz0nJGlwYWRkcmVzcyciCgogICAgd3JpdGVfZmlsZSBzeXNjb25maWdfbWRtX2ZpbGVuYW1lIHN5c2NvbmZpZ19tZG1fZmlsZSB0cnVlCgogICAgbWtkaXIgLXAgL3Zhci9ldHcKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgbWRtX3NlcnZpY2VfZmlsZW5hbWU9Ii9ldGMvc3lzdGVtZC9zeXN0ZW0vbWRtLnNlcnZpY2UiCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgICMgYmVsb3cgdmFyaWFibGUgaXMgaW4gc2luZ2xlIHF1b3RlcwogICAgIyBhcyBpdCBpcyB0byBiZSBleHBhbmRlZCBhdCBzeXN0ZW1kIHN0YXJ0IHRpbWUgKGJ5IHN5c3RlbWQsIG5vdCB0aGlzIHNjcmlwdCkKICAgIGxvY2FsIC1yIG1kbV9zZXJ2aWNlX2ZpbGU9J1tVbml0XQpBZnRlcj1uZXR3b3JrLW9ubGluZS50YXJnZXQKV2FudHM9bmV0d29yay1vbmxpbmUudGFyZ2V0CgpbU2VydmljZV0KRW52aXJvbm1lbnRGaWxlPS9ldGMvc3lzY29uZmlnL21kbQpFeGVjU3RhcnRQcmU9LS91c3IvYmluL3BvZG1hbiBybSAtZiAlTgpFeGVjU3RhcnQ9L3Vzci9iaW4vcG9kbWFuIHJ1biBcCiAgLS1lbnRyeXBvaW50IC91c3Ivc2Jpbi9NZXRyaWNzRXh0ZW5zaW9uIFwKICAtLWhvc3RuYW1lICVIIFwKICAtLW5hbWUgJU4gXAogIC0tcm0gXAogIC0tY2FwLWRyb3AgbmV0X3JhdyBcCiAgLS1uZXR3b3JrPSR7UE9ETUFOX05FVFdPUkt9IFwKICAtLWlwICR7SVBBRERSRVNTfSBcCiAgLW0gMmcgXAogIC12IC9ldGMvbWRtLnBlbTovZXRjL21kbS5wZW0gXAogIC12IC92YXIvZXR3Oi92YXIvZXR3OnogXAogICR7TURNSU1BR0V9IFwKICAtSW5wdXQgJHtNRE1fSU5QVVR9IFwKICAtTWV0cmljTmFtZXNwYWNlICR7TURNX05BTUVTUEFDRX0gXAogIC1Nb25pdG9yaW5nQWNjb3VudCAke01ETV9BQ0NPVU5UfSBcCiAgLUNlcnRGaWxlIC9ldGMvbWRtLnBlbSBcCiAgLUZyb250RW5kVXJsICR7TURNRlJPTlRFTkRVUkx9IFwKICAtTG9nZ2VyIENvbnNvbGUgXAogIC1Mb2dMZXZlbCBXYXJuaW5nIFwKICAtUHJpdmF0ZUtleUZpbGUgL2V0Yy9tZG0ucGVtIFwKICAtU291cmNlRW52aXJvbm1lbnQgJHtNRE1TT1VSQ0VFTlZJUk9OTUVOVH0gXAogIC1Tb3VyY2VSb2xlICR7TURNU09VUkNFUk9MRX0gXAogIC1Tb3VyY2VSb2xlSW5zdGFuY2UgJHtNRE1TT1VSQ0VST0xFSU5TVEFOQ0V9CkV4ZWNTdG9wPS91c3IvYmluL3BvZG1hbiBzdG9wICVOClJlc3RhcnQ9YWx3YXlzClJlc3RhcnRTZWM9MQpTdGFydExpbWl0SW50ZXJ2YWw9MAoKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0JwoKICAgIHdyaXRlX2ZpbGUgbWRtX3NlcnZpY2VfZmlsZW5hbWUgbWRtX3NlcnZpY2VfZmlsZSB0cnVlCn0KCiMgY29uZmlndXJlX3Ztc3NfYXJvX3NlcnZpY2UKIyBhcmdzOgojIDEpIHIgLSBuYW1lcmVmLCBzdHJpbmc7IHJvbGUgb2YgVk1TUwojIDIpIGltYWdlcyAtIG5hbWVyZWYsIGFzc29jaWF0aXZlIGFycmF5OyBBUk8gY29udGFpbmVyIGltYWdlcwojIDMpIGNvbmZpZ3MgLSBuYW1lcmVmLCBhc3NvY2lhdGl2ZSBhcnJheTsgY29uZmlndXJhdGlvbiBmaWxlcyBhbmQgdmVyc2lvbnMuIFRoZSB2YWx1ZXMgc2hvdWxkIGJlIGEgcmVmZXJlbmNlIHRvIHZhcmlhYmxlcywgbm90IGRlcmVmZXJlbmNlZC4KIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgYmVjYXVzZSB0aGUgdmFsdWUgaXMgdXNlZCB3aGVuIGNyZWF0aW5nIG5hbWVyZWYgdmFyaWFibGVzIGJ5IGhlbHBlciBmdW5jdGlvbnMuCmNvbmZpZ3VyZV92bXNzX2Fyb19zZXJ2aWNlcygpIHsKICAgIGxvY2FsIC1uIHI9IiQxIgogICAgbG9jYWwgLW4gaW1hZ2VzPSIkMiIKICAgIGxvY2FsIC1uIGNvbmZpZ3M9IiQzIgogICAgbG9nICJzdGFydGluZyIKICAgIHZlcmlmeV9yb2xlICIkMSIKCiAgICBpZiBbICIkciIgPT0gIiRyb2xlX2dhdGV3YXkiIF07IHRoZW4KICAgICAgICBjb25maWd1cmVfc2VydmljZV9hcm9fZ2F0ZXdheSAiJHtpbWFnZXNbInJwIl19IiAiJDEiICIke2NvbmZpZ3NbImdhdGV3YXlfY29uZmlnIl19IiAiJHtjb25maWdzWyJzdGF0aWNfaXBfYWRkcmVzcyJdfVsiZ2F0ZXdheSJdIgogICAgICAgIGNvbmZpZ3VyZV9jZXJ0c19nYXRld2F5CiAgICBlbGlmIFsgIiRyIiA9PSAiJHJvbGVfcnAiIF07IHRoZW4KICAgICAgICBjb25maWd1cmVfc2VydmljZV9hcm9fcnAgIiR7aW1hZ2VzWyJycCJdfSIgIiQxIiAiJHtjb25maWdzWyJycF9jb25maWciXX0iICIke2NvbmZpZ3NbInN0YXRpY19pcF9hZGRyZXNzIl19WyJycCJdIgogICAgICAgIGNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19taW1vX2FjdHVhdG9yICIke2ltYWdlc1sicnAiXX0iICIke2NvbmZpZ3NbInJwX2NvbmZpZyJdfSIgIiR7Y29uZmlnc1sic3RhdGljX2lwX2FkZHJlc3MiXX1bIm1pbW9fYWN0dWF0b3IiXSIKICAgICAgICBjb25maWd1cmVfc2VydmljZV9hcm9fbW9uaXRvciAiJHtpbWFnZXNbInJwIl19IiAiJHtjb25maWdzWyJzdGF0aWNfaXBfYWRkcmVzcyJdfVsibW9uaXRvciJdIgogICAgICAgIGNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19wb3J0YWwgIiR7aW1hZ2VzWyJycCJdfSIgIiR7Y29uZmlnc1sic3RhdGljX2lwX2FkZHJlc3MiXX1bInBvcnRhbCJdIgogICAgICAgIGNvbmZpZ3VyZV9zZXJ2aWNlX2Fyb19taXNlICIke2ltYWdlc1sibWlzZSJdfSIgIiR7Y29uZmlnc1sic3RhdGljX2lwX2FkZHJlc3MiXX1bIm1pc2UiXSIKICAgICAgICBjb25maWd1cmVfc2VydmljZV9hcm9fb3RlbF9jb2xsZWN0b3IgIiR7aW1hZ2VzWyJvdGVsIl19IiAiJHtjb25maWdzWyJzdGF0aWNfaXBfYWRkcmVzcyJdfSIgIiR7Y29uZmlnc1sic3RhdGljX2lwX2FkZHJlc3MiXX1bIm90ZWxfY29sbGVjdG9yIl0iCiAgICAgICAgY29uZmlndXJlX2NlcnRzX3JwCiAgICBmaQoKICAgIGNvbmZpZ3VyZV9zZXJ2aWNlX2ZsdWVudGJpdCAiJHtjb25maWdzWyJmbHVlbnRiaXQiXX0iICIke2ltYWdlc1siZmx1ZW50Yml0Il19IgogICAgY29uZmlndXJlX3RpbWVyc19tZG1fbWRzZCAiJDEiCiAgICBjb25maWd1cmVfc2VydmljZV9tZG0gIiQxIiAiJHtpbWFnZXNbIm1kbSJdfSIgIiR7Y29uZmlnc1sic3RhdGljX2lwX2FkZHJlc3MiXX1bIm1kbSJdIgogICAgY29uZmlndXJlX3NlcnZpY2VfbWRzZCAiJDEiICIke2NvbmZpZ3NbIm1kc2QiXX0iCiAgICBydW5fYXpzZWNkX2NvbmZpZ19zY2FuCn0KCiMgdXRpbC1jb21tb24uc2ggZG9lcyBub3QgZXhpc3Qgd2hlbiBkZXBsb3llZCB0byBWTVNTIHZpYSBWTVNTIGV4dGVuc2lvbnMKIyBQcm92aWRlcyBzaGVsbGNoZWNrIGRlZmluaXRpb25zCnV0aWxfY29tbW9uPSJ1dGlsLWNvbW1vbi5zaCIKaWYgWyAtZiAiJHV0aWxfY29tbW9uIiBdOyB0aGVuCiAgICAjIHNoZWxsY2hlY2sgc291cmNlPXV0aWwtY29tbW9uLnNoCiAgICBzb3VyY2UgIiR1dGlsX2NvbW1vbiIKZmkKCiMgdXRpbC1zeXN0ZW0uc2ggZG9lcyBub3QgZXhpc3Qgd2hlbiBkZXBsb3llZCB0byBWTVNTIHZpYSBWTVNTIGV4dGVuc2lvbnMKIyBQcm92aWRlcyBzaGVsbGNoZWNrIGRlZmluaXRpb25zCnV0aWxfc3lzdGVtPSJ1dGlsLXN5c3RlbS5zaCIKaWYgWyAtZiAiJHV0aWxfc3lzdGVtIiBdOyB0aGVuCiAgICAjIHNoZWxsY2hlY2sgc291cmNlPXV0aWwtc3lzdGVtLnNoCiAgICBzb3VyY2UgIiR1dGlsX3N5c3RlbSIKZmkKIyEvYmluL2Jhc2gKIyBUaGlzIGZpbGUgaXMgaW50ZW5kZWQgdG8gYmUgc291cmNlZCBieSBib290c3RyYXBwaW5nIHNjcmlwdHMgZm9yIGNvbW1vbmx5IHVzZWQgZnVuY3Rpb25zCgojIGdldF9ib290X2Rldl91dWlkCiMgR2V0IHRoZSBib290IGRldmljZXMgdXVpZAojIGFyZ3M6CiMgMSkgYm9vdF9kZXZfdXVpZCAtIG5hbWVyZWYsIHN0cmluZzsgRW1wdHkgdmFyaWFibGUgZm9yIGJvb3QgZGV2aWNlIHV1aWQgYXNzaWdubWVudAojIFRha2VuIGFuZCByZWZhY3RvcmVkIGZyb20gaHR0cHM6Ly9lbmcubXMvZG9jcy9wcm9kdWN0cy9henVyZS1saW51eC9mZWF0dXJlcy9zZWN1cml0eS9maXBzCmdldF9ib290X2Rldl91dWlkKCkgewogICAgbG9jYWwgLW4gYm9vdF9kZXZfdXVpZD0iJDEiCiAgICAjIFNldCBib290X3V1aWQgdmFyaWFibGUgZm9yIHRoZSBib290IHBhcnRpdGlvbiBpZiBkaWZmZXJlbnQgZnJvbSB0aGUgcm9vdAogICAgYm9vdF9kZXY9IiQoZGYgL2Jvb3QvIHwgdGFpbCAtMSB8IGN1dCAtZCcgJyAtZjEpIgogICAgcm9vdF9kZXY9IiQoZGYgLyB8IHRhaWwgLTEgfCBjdXQgLWQnICcgLWYxKSIKCiAgICBib290X2Rldl91dWlkPSIkcm9vdF9kZXYiCiAgICBpZiBbICIkYm9vdF9kZXYiICE9ICIkcm9vdF9kZXYiIF07IHRoZW4KICAgICAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgICAgICBib290X2Rldl91dWlkPSJib290PVVVSUQ9JChibGtpZCAiJGJvb3RfZGV2IiAtcyBVVUlEIC1vIHZhbHVlKSIKICAgIGZpCn0KCiMgZmlwc192ZXJpZnkKIyBWZXJpZnkgdGhhdCBmaXBzIG1vZGUgaXMgZW5hYmxlZAojIFRha2VuIGFuZCByZWZhY3RvcmVkIGZyb20gaHR0cHM6Ly9lbmcubXMvZG9jcy9wcm9kdWN0cy9henVyZS1saW51eC9mZWF0dXJlcy9zZWN1cml0eS9maXBzCmZpcHNfdmVyaWZ5KCkgewogICAgZmlwc19lbmFibGVkX3Byb2M9IiQoY2F0IC9wcm9jL3N5cy9jcnlwdG8vZmlwc19lbmFibGVkKSIKICAgIGZpcHNfZW5hYmxlZF9zeXNjdGw9IiQoc3lzY3RsIC1uIGNyeXB0by5maXBzX2VuYWJsZWQpIgogICAgaWYgWyAiJGZpcHNfZW5hYmxlZF9wcm9jIiAtbmUgMSBdIHx8IFsgIiRmaXBzX2VuYWJsZWRfc3lzY3RsIiAtbmUgMSBdOyB0aGVuCiAgICAgICAgYWJvcnQgIkZJUFMgbW9kZSBpcyBkaXNhYmxlZCIKICAgIGZpCgogICAgbG9nICJGSVBTIG1vZGUgaXMgZW5hYmxlZCIKfQoKIyBmaXBzX2NvbmZpZ3VyZQojIENvbmZpZ3VyZXMgVk0gdG8gcnVuIHdpdGggZmlwcyBtb2RlIGVuYWJsZWQKIyBUYWtlbiBhbmQgcmVmYWN0b3JlZCBmcm9tIGh0dHBzOi8vZW5nLm1zL2RvY3MvcHJvZHVjdHMvYXp1cmUtbGludXgvZmVhdHVyZXMvc2VjdXJpdHkvZmlwcwojIFRPRE8gcmVtb3ZlIHRoaXMgb25jZSBza3UgY2JsLW1hcmluZXItMi1nZW4yLWZpcHMgaXMgc3VwcG9ydGVkIGJ5IGF1dG9tYXRpYyBPUyB1cGRhdGVzCiMgUmVmZXJlbmNlOiBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvdmlydHVhbC1tYWNoaW5lLXNjYWxlLXNldHMvdmlydHVhbC1tYWNoaW5lLXNjYWxlLXNldHMtYXV0b21hdGljLXVwZ3JhZGUjc3VwcG9ydGVkLW9zLWltYWdlcwpmaXBzX2NvbmZpZ3VyZSgpIHsKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgYm9vdF91dWlkCiAgICBnZXRfYm9vdF9kZXZfdXVpZCBib290X3V1aWQKCiAgICBsb2NhbCBncnViMl9lbnYKICAgIGlmIGdydWIyX2Vudj0iJChncnViMi1lZGl0ZW52IC0gbGlzdCB8IGdyZXAga2VybmVsb3B0cykiOyB0aGVuCiAgICAgICAgZ3J1YjItZWRpdGVudiAtIHNldCAiJGdydWIyX2VudiBmaXBzPTEgJGJvb3RfdXVpZCIKICAgIGVsc2UKICAgICAgICBncnViYnkgLS11cGRhdGUta2VybmVsPUFMTCAtLWFyZ3M9ImZpcHM9MSAkYm9vdF91dWlkIgogICAgZmkKCiAgICAjIGZpcHMgbW9kZSB2ZXJpZmljYXRpb24gd2lsbCBmYWlsIHVudGlsIGFmdGVyIHRoZSB2bSBoYXMgYmVlbiByZWJvb3RlZAogICAgIyBmaXBzX3ZlcmlmeQp9CgojIGNvbmZpZ3VyZV9zc2hkCiMgV2UgbmVlZCB0byBjb25maWd1cmUgUGFzc3dvcmRBdXRoZW50aWNhdGlvbiB0byB5ZXMgaW4gb3JkZXIgZm9yIHRoZSBWTVNTIEFjY2VzcyBKSVQgdG8gd29yawpjb25maWd1cmVfc3NoZCgpIHsKICAgIGxvZyAic3RhcnRpbmciCiAgICBsb2NhbCAtciBzc2hkX2NvbmZpZz0iL2V0Yy9zc2gvc3NoZF9jb25maWciCgogICAgbG9nICJFZGl0aW5nICRzc2hkX2NvbmZpZyB0byBhbGxvdyBwYXNzd29yZCBhdXRoZW50aWNhdGlvbiIKICAgIHNlZCAtaSAncy9QYXNzd29yZEF1dGhlbnRpY2F0aW9uIG5vL1Bhc3N3b3JkQXV0aGVudGljYXRpb24geWVzL2cnICIkc3NoZF9jb25maWciCgogICAgc3lzdGVtY3RsIHJlbG9hZCBzc2hkLnNlcnZpY2UgfHwgYWJvcnQgInNzaGQgZmFpbGVkIHRvIHJlbG9hZCIKfQoKIyBjb25maWd1cmVfbG9ncm90YXRlIGNsb2JiZXJzIC9ldGMvbG9ncm90YXRlLmNvbmYKIyBhcmdzOgojIDEpIGRyb3Bpbl9maWxlcyAtIG5hbWVyZWYsIGFzc29jaWF0aXZlIGFycmF5LCBvcHRpb25hbDsgbG9ncm90YXRlIGZpbGVzIHRvIHdyaXRlIHRvIC9ldGMvbG9ncm90YXRlLmQKIyAgICAgICBLZXkgbmFtZSBkaWN0YXRlcyBmaWxlbmFtZXMgd3JpdHRlbiB0byAvZXRjL2xvZ3JvdGF0ZS5kLgojIEV4YW1wbGU6CiMgICBLZXkgZGljdGF0ZXMgdGhlIGZpbGVuYW1lIHdyaXR0ZW4gaW4gL2V0Yy9sb2dyb3RhdGUuZAojICAgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAojICAgbG9jYWwgLXJBIGxvZ3JvdGF0ZV9kcm9waW5zPSgKIyAgICAgIFsiZ2F0ZXdheSJdPSIkZ2F0ZXdheV9sb2dfZmlsZSIKIyAgICkKY29uZmlndXJlX2xvZ3JvdGF0ZSgpIHsKICAgIGxvY2FsIC1uIGRyb3Bpbl9maWxlcz0iJHsxOi1lbXB0eV9zdHJ9IgogICAgbG9nICJzdGFydGluZyIKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGxvZ3JvdGF0ZV9jb25mX2ZpbGVuYW1lPScvZXRjL2xvZ3JvdGF0ZS5jb25mJwogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBsb2dyb3RhdGVfY29uZl9maWxlPScjIHNlZSAibWFuIGxvZ3JvdGF0ZSIgZm9yIGRldGFpbHMKIyByb3RhdGUgbG9nIGZpbGVzIHdlZWtseQp3ZWVrbHkKCiMga2VlcCAyIHdlZWtzIHdvcnRoIG9mIGJhY2tsb2dzCnJvdGF0ZSAyCgojIGNyZWF0ZSBuZXcgKGVtcHR5KSBsb2cgZmlsZXMgYWZ0ZXIgcm90YXRpbmcgb2xkIG9uZXMKY3JlYXRlCgojIHVzZSBkYXRlIGFzIGEgc3VmZml4IG9mIHRoZSByb3RhdGVkIGZpbGUKZGF0ZWV4dAoKIyB1bmNvbW1lbnQgdGhpcyBpZiB5b3Ugd2FudCB5b3VyIGxvZyBmaWxlcyBjb21wcmVzc2VkCmNvbXByZXNzCgojIFJQTSBwYWNrYWdlcyBkcm9wIGxvZyByb3RhdGlvbiBpbmZvcm1hdGlvbiBpbnRvIHRoaXMgZGlyZWN0b3J5CmluY2x1ZGUgL2V0Yy9sb2dyb3RhdGUuZAoKIyBubyBwYWNrYWdlcyBvd24gd3RtcCBhbmQgYnRtcCAtLSB3ZSB3aWxsIHJvdGF0ZSB0aGVtIGhlcmUKL3Zhci9sb2cvd3RtcCB7CiAgICBtb250aGx5CiAgICBjcmVhdGUgMDY2NCByb290IHV0bXAKICAgICAgICBtaW5zaXplIDFNCiAgICByb3RhdGUgMQp9CgovdmFyL2xvZy9idG1wIHsKICAgIG1pc3NpbmdvawogICAgbW9udGhseQogICAgY3JlYXRlIDA2MDAgcm9vdCB1dG1wCiAgICByb3RhdGUgMQp9JwoKICAgIHdyaXRlX2ZpbGUgbG9ncm90YXRlX2NvbmZfZmlsZW5hbWUgbG9ncm90YXRlX2NvbmZfZmlsZSB0cnVlCgogICAgaWYgWyAtbiAiJHtkcm9waW5fZmlsZXNbKl19IiBdOyB0aGVuCiAgICAgICAgbG9jYWwgLXIgbG9ncm90YXRlX2Q9Ii9ldGMvbG9ncm90YXRlLmQiCiAgICAgICAgbG9nICJXcml0aW5nIGxvZ3JvdGF0ZSBmaWxlcyB0byAkbG9ncm90YXRlX2QiCiAgICAgICAgZm9yIGRyb3Bpbl9uYW1lIGluICIkeyFkcm9waW5fZmlsZXNbQF19IjsgZG8KICAgICAgICAgICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAgICAgICAgIGxvY2FsIC1yIGRyb3Bpbl9maWxlbmFtZT0iJGxvZ3JvdGF0ZV9kLyRkcm9waW5fbmFtZSIKICAgICAgICAgICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAgICAgICAgIGxvY2FsIC1yIGRyb3Bpbl9maWxlPSIke2Ryb3Bpbl9maWxlc1siJGRyb3Bpbl9uYW1lIl19IgogICAgICAgICAgICB3cml0ZV9maWxlIGRyb3Bpbl9maWxlbmFtZSBkcm9waW5fZmlsZSB0cnVlCiAgICAgICAgZG9uZQogICAgZmkKfQoKIyBwdWxsX2NvbnRhaW5lcl9pbWFnZXMKIyBhcmdzOgojIDEpIHB1bGxfaW1hZ2VzIC0gbmFtZXJlZiwgc3RyaW5nIGFycmF5CiMgMikgcmVnaXN0cnlfY29uZiAtIG5hbWVyZWYsIHN0cmluZywgb3B0aW9uYWw7IHBhdGggdG8gZG9ja2VyL3BvZG1hbiBjb25maWd1cmF0aW9uIGZpbGUKcHVsbF9jb250YWluZXJfaW1hZ2VzKCkgewogICAgbG9jYWwgLW4gcHVsbF9pbWFnZXM9IiQxIgogICAgbG9jYWwgLW4gcmVnaXN0cnlfY29uZj0iJHsyOi1lbXB0eV9zdHJ9IgogICAgbG9nICJzdGFydGluZyIKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yaSByZXRyeV90aW1lPTMwCiAgICBjbWQ9KAogICAgICAgIGF6CiAgICAgICAgbG9naW4KICAgICAgICAtaQogICAgICAgIC0tYWxsb3ctbm8tc3Vic2NyaXB0aW9ucwogICAgKQoKICAgIGxvZyAiUnVubmluZyBheiBsb2dpbiB3aXRoIHJldHJpZXMiCiAgICByZXRyeSBjbWQgcmV0cnlfdGltZQoKICAgICMgU3VwcHJlc3MgZW11bGF0aW9uIG91dHB1dCBmb3IgcG9kbWFuIGluc3RlYWQgb2YgZG9ja2VyIGZvciBheiBhY3IgY29tcGF0YWJpbGl0eQogICAgbWtkaXIgLXAgL2V0Yy9jb250YWluZXJzLwogICAgbWtkaXIgLXAgL3Jvb3QvLmRvY2tlcgogICAgdG91Y2ggL2V0Yy9jb250YWluZXJzL25vZG9ja2VyCgogICAgIyBUaGlzIG5hbWUgaXMgdXNlZCBpbiB0aGUgY2FzZSB0aGF0IGF6IGFjciBsb2dpbiBzZWFyY2hlcyBmb3IgdGhpcyBpbiBpdCdzIGVudmlyb25tZW50CiAgICBleHBvcnQgUkVHSVNUUllfQVVUSF9GSUxFPSIvcm9vdC8uZG9ja2VyL2NvbmZpZy5qc29uIgoKICAgIGlmIFsgLW4gIiR7cmVnaXN0cnlfY29uZn0iIF07IHRoZW4KICAgICAgICB3cml0ZV9maWxlIFJFR0lTVFJZX0FVVEhfRklMRSByZWdpc3RyeV9jb25mIHRydWUKICAgIGZpCgogICAgbG9nICJsb2dnaW5nIGludG8gcHJvZCBhY3IiCiAgICBjbWQ9KAogICAgICAgIGF6CiAgICAgICAgYWNyCiAgICAgICAgbG9naW4KICAgICAgICAtLW5hbWUKICAgICAgICAjIFRPRE8gcmVwbGFjZSB0aGlzIHdpdGggdmFyaWFibGUgZXhwYW5zaW9uCiAgICAgICAgIyBSZWZlcmVuY2U6IGh0dHBzOi8vd3d3LnNoZWxsY2hlY2submV0L3dpa2kvU0MyMDAxCiAgICAgICAgIiQoc2VkIC1lICdzfC4qL3x8JyA8PDwiJEFDUlJFU09VUkNFSUQiKSIKICAgICkKCiAgICByZXRyeSBjbWQgcmV0cnlfdGltZQoKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjA2OAogICAgZm9yIGkgaW4gJHtwdWxsX2ltYWdlc1tAXX07IGRvCiAgICAgICAgbG9jYWwgLW4gaW1hZ2U9IiRpIgogICAgICAgIGNtZD0oCiAgICAgICAgICAgIHBvZG1hbgogICAgICAgICAgICBwdWxsCiAgICAgICAgICAgICIkaW1hZ2UiCiAgICAgICAgKQoKICAgICAgICBsb2cgIlB1bGxpbmcgaW1hZ2UgJGltYWdlIHdpdGggcmV0cmllcyBub3ciCiAgICAgICAgcmV0cnkgY21kIHJldHJ5X3RpbWUKICAgIGRvbmUKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGNtZD0oCiAgICAgICAgYXoKICAgICAgICBsb2dvdXQKICAgICkKCiAgICBsb2cgIlJ1bm5pbmcgYXogbG9nb3V0IHdpdGggcmV0cmllcyIKICAgIHJldHJ5IGNtZCByZXRyeV90aW1lCn0KCiMgY29uZmlndXJlX2NlcnRzX2dlbmVyYWwgQ29uZmlndXJlIHN5c3RlbSBjZXJ0aWZpY2F0ZXMgY29tbW9uIHRvIGFsbCBWTVNTIGluc3RhbmNlcwpjb25maWd1cmVfY2VydHNfZ2VuZXJhbCgpIHsKICAgIGxvZyAic3RhcnRpbmciCgogICAgIyBzZXR0aW5nIE1PTklUT1JJTkdfR0NTX0FVVEhfSURfVFlQRT1BdXRoS2V5VmF1bHQgc2VlbXMgdG8gaGF2ZSBjYXVzZWQgbWRzZCBub3QKICAgICMgdG8gaG9ub3VyIFNTTF9DRVJUX0ZJTEUgYW55IG1vcmUsIGhlYXZlbiBvbmx5IGtub3dzIHdoeS4KICAgIGxvY2FsIC1yIHNzbF9jZXJ0c19iYXNlZGlyPSIvdXNyL2xpYi9zc2wvY2VydHMiCiAgICBta2RpciAtcCAiJHNzbF9jZXJ0c19iYXNlZGlyIgogICAgY3NwbGl0IC1mICIkc3NsX2NlcnRzX2Jhc2VkaXIvY2VydC0iIC1iICUwM2QucGVtIC9ldGMvcGtpL3Rscy9jZXJ0cy9jYS1idW5kbGUuY3J0IC9eJC8xICJ7Kn0iIDE+L2Rldi9udWxsCiAgICBjX3JlaGFzaCAiJHNzbF9jZXJ0c19iYXNlZGlyIgp9CgojIGNvbmZpZ3VyZV9jZXJ0c19ycCBDb25maWd1cmUgc3lzdGVtIGNlcnRpZmljYXRlcyBmb3IgUlAgVk1TUwojIGFyZ3M6CmNvbmZpZ3VyZV9jZXJ0c19ycCgpIHsKICAgIGxvZyAic3RhcnRpbmciCgogICAgdmVyaWZ5X3JvbGUgcm9sZV9ycAoKICAgIGxvY2FsIC1yIHJwX2NlcnRzX2Jhc2VkaXI9Ii9ldGMvYXJvLXJwIgogICAgbWtkaXIgLXAgIiRycF9jZXJ0c19iYXNlZGlyIgogICAgYmFzZTY0IC1kIDw8PCIkQURNSU5BUElDQUJVTkRMRSIgPiAiJHJwX2NlcnRzX2Jhc2VkaXIvYWRtaW4tY2EtYnVuZGxlLnBlbSIKICAgIGlmIFtbIC1uICIkQVJNQVBJQ0FCVU5ETEUiIF1dOyB0aGVuCiAgICBiYXNlNjQgLWQgPDw8IiRBUk1BUElDQUJVTkRMRSIgPiAiJHJwX2NlcnRzX2Jhc2VkaXIvYXJtLWNhLWJ1bmRsZS5wZW0iCiAgICBmaQogICAgY2hvd24gLVIgMTAwMDoxMDAwICIkcnBfY2VydHNfYmFzZWRpciIKCiAgICBjb25maWd1cmVfY2VydHNfZ2VuZXJhbAp9CgojIGNvbmZpZ3VyZV9jZXJ0c19nYXRld2F5IENvbmZpZ3VyZSBzeXN0ZW0gY2VydGlmaWNhdGVzIGZvciBHYXRld2F5IFZNU1MgaW5zdGFuY2VzCmNvbmZpZ3VyZV9jZXJ0c19nYXRld2F5KCkgewogICAgbG9nICJzdGFydGluZyIKCiAgICB2ZXJpZnlfcm9sZSByb2xlX2dhdGV3YXkKICAgIGNvbmZpZ3VyZV9jZXJ0c19nZW5lcmFsCn0KCiMgY29uZmlndXJlX2NlcnRzX2RldnByb3h5IENvbmZpZ3VyZSBzeXN0ZW0gY2VydGlmaWNhdGVzIGZvciBkZXZwcm94eSBWTVNTIGluc3RhbmNlcwpjb25maWd1cmVfY2VydHNfZGV2cHJveHkoKSB7CiAgICBsb2cgInN0YXJ0aW5nIgoKICAgIHZlcmlmeV9yb2xlIHJvbGVfZGV2cHJveHkKCiAgICBsb2NhbCAtciBwcm94eV9jZXJ0c19iYXNlZGlyPSIvZXRjL3Byb3h5IgogICAgbWtkaXIgLXAgIiRwcm94eV9jZXJ0c19iYXNlZGlyIgogICAgYmFzZTY0IC1kIDw8PCIkUFJPWFlDRVJUIiA+ICIkcHJveHlfY2VydHNfYmFzZWRpci9wcm94eS5jcnQiCiAgICBiYXNlNjQgLWQgPDw8IiRQUk9YWUtFWSIgPiAiJHByb3h5X2NlcnRzX2Jhc2VkaXIvcHJveHkua2V5IgogICAgYmFzZTY0IC1kIDw8PCIkUFJPWFlDTElFTlRDRVJUIiA+ICIkcHJveHlfY2VydHNfYmFzZWRpci9wcm94eS1jbGllbnQuY3J0IgogICAgY2hvd24gLVIgMTAwMDoxMDAwIC9ldGMvcHJveHkKICAgIGNobW9kIDA2MDAgIiRwcm94eV9jZXJ0c19iYXNlZGlyL3Byb3h5LmtleSIKfQoKY29uZmlndXJlX2F6c2VjZF9zY2FuKCkgewogICAgbG9nICJzdGFydGluZyIKCiAgICAjIHdlIGxlYXZlIGNsaWVudElkIGJsYW5rIGFzIGxvbmcgYXMgb25seSAxIG1hbmFnZWQgaWRlbnRpdHkgYXNzaWduZWQgdG8gdm1zcwogICAgIyBpZiB3ZSBoYXZlIG1vcmUgdGhhbiAxLCB3ZSB3aWxsIG5lZWQgdG8gcG9wdWxhdGUgd2l0aCBjbGllbnRJZCB1c2VkIGZvciBvZmYtbm9kZSBzY2FubmluZwogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBub2Rlc2Nhbl9hZ2VudF9maWxlbmFtZT0iL2V0Yy9kZWZhdWx0L3ZzYS1ub2Rlc2Nhbi1hZ2VudC5jb25maWciCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIG5vZGVzY2FuX2FnZW50X2ZpbGU9InsKICAgIFwiTmljZVwiOiAxOSwKICAgIFwiVGltZW91dFwiOiAxMDgwMCwKICAgIFwiQ2xpZW50SWRcIjogXCJcIiwKICAgIFwiVGVuYW50SWRcIjogJEFaVVJFU0VDUEFDS1ZTQVRFTkFOVElELAogICAgXCJRdWFseXNTdG9yZUJhc2VVcmxcIjogJEFaVVJFU0VDUEFDS1FVQUxZU1VSTCwKICAgIFwiUHJvY2Vzc1RpbWVvdXRcIjogMzAwLAogICAgXCJDb21tYW5kRGVsYXlcIjogMAogIH0iCgogICAgd3JpdGVfZmlsZSBub2Rlc2Nhbl9hZ2VudF9maWxlbmFtZSBub2Rlc2Nhbl9hZ2VudF9maWxlIHRydWUKfQoKIyBydW5fYXpzZWNkX2NvbmZpZ19zY2FuCnJ1bl9henNlY2RfY29uZmlnX3NjYW4oKSB7CiAgICBsb2cgInN0YXJ0aW5nIgoKICAgIGNvbmZpZ3VyZV9henNlY2Rfc2NhbgoKICAgIGxvY2FsIC1hciBjb25maWdzPSgKICAgICAgICAiYmFzZWxpbmUiCiAgICAgICAgImNsYW1hdiIKICAgICAgICAic29mdHdhcmUiCiAgICApCgogICAgbG9nICJTY2FubmluZyBjb25maWd1cmF0aW9uIGZpbGVzIHdpdGggYXpzZWNkICR7Y29uZmlnc1sqXX0iCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwNjgKICAgIGZvciBzY2FuIGluICR7Y29uZmlnc1tAXX07IGRvCiAgICAgICAgbG9nICJTY2FubmluZyBjb25maWcgZmlsZSAkc2NhbiBub3ciCiAgICAgICAgL3Vzci9sb2NhbC9iaW4vYXpzZWNkIGNvbmZpZyAtcyAiJHNjYW4iIC1kIFAxRAogICAgZG9uZQp9CgojIGNyZWF0ZV9yZXF1aXJlZF9kaXJzCmNyZWF0ZV9yZXF1aXJlZF9kaXJzKCkgewogICAgY3JlYXRlX2RpcnM9KAogICAgICAgIC92YXIvbG9nL2pvdXJuYWwKICAgICAgICAvdmFyL2xpYi93YWFnZW50L01pY3Jvc29mdC5BenVyZS5LZXlWYXVsdC5TdG9yZQogICAgICAgICMgRG9lcyBub3QgZXhpc3Qgb24gZGV2UHJveHlWTVNTCiAgICAgICAgL3Zhci9vcHQvbWljcm9zb2Z0L2xpbnV4bW9uYWdlbnQKICAgICkKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwNjgKICAgIGZvciBkIGluICR7Y3JlYXRlX2RpcnNbQF19OyBkbwogICAgICAgIGxvZyAiQ3JlYXRpbmcgZGlyZWN0b3J5ICRkIgogICAgICAgIG1rZGlyIC1wICIkZCIgfHwgYWJvcnQgImZhaWxlZCB0byBjcmVhdGUgZGlyZWN0b3J5ICRkIgogICAgZG9uZQp9CgojIGZpcmV3YWxsZF9jb25maWd1cmVfYmFja2VuZApmaXJld2FsbGRfY29uZmlndXJlX2JhY2tlbmQoKSB7CiAgICBsb2cgInN0YXJ0aW5nIgoKICAgIGxvZyAiQ2hhbmdpbmcgZmlyZXdhbGxkIGJhY2tlbmQgdG8gaXB0YWJsZXMiCiAgICBjb25mX2ZpbGU9Ii9ldGMvZmlyZXdhbGxkL2ZpcmV3YWxsZC5jb25mIgogICAgc2VkIC1pICdzL0ZpcmV3YWxsQmFja2VuZD1uZnRhYmxlcy9GaXJld2FsbEJhY2tlbmQ9aXB0YWJsZXMvZycgIiRjb25mX2ZpbGUiCn0KCiMgZmlyZXdhbGxkX2NvbmZpZ3VyZQojIGFyZ3M6CiMgMSkgcG9ydHMgLSBuYW1lcmVmLCBzdHJpbmcgYXJyYXk7IHBvcnRzIHRvIGJlIGVuYWJsZWQuCiMgICAgICAgUG9ydHMgbXVzdCBiZSBwb3N0Zml4ZWQgd2l0aCAvdGNwIG9yIC91ZHAKZmlyZXdhbGxkX2NvbmZpZ3VyZSgpIHsKICAgIGxvY2FsIC1uIHBvcnRzPSIkMSIKICAgIGxvZyAic3RhcnRpbmciCgogICAgZmlyZXdhbGxkX2NvbmZpZ3VyZV9iYWNrZW5kCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtcmEgc2VydmljZT0oCiAgICAgICAgImZpcmV3YWxsZCIKICAgICkKICAgIGVuYWJsZV9zZXJ2aWNlcyBzZXJ2aWNlCgogICAgbG9nICJFbmFibGluZyBwb3J0cyAke3BvcnRzWypdfSBvbiBkZWZhdWx0IGZpcmV3YWxsZCB6b25lIgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDY4CiAgICBmb3IgcG9ydCBpbiAke3BvcnRzW0BdfTsgZG8KICAgICAgICBsb2cgIkVuYWJsaW5nIHBvcnQgJHBvcnQgbm93IgogICAgICAgIGZpcmV3YWxsLWNtZCAiLS1hZGQtcG9ydD0kcG9ydCIgXAogICAgICAgICAgICAgICAgICAgICAtLXBlcm1hbmVudAogICAgZG9uZQoKICAgIGxvZyAiV3JpdGluZyBydW50aW1lIGNvbmZpZyB0byBwZXJtYW5lbnQgY29uZmlnIgogICAgZmlyZXdhbGwtY21kIC0tcnVudGltZS10by1wZXJtYW5lbnQKfQoKIyB1dGlsLWNvbW1vbi5zaCBkb2VzIG5vdCBleGlzdCB3aGVuIGRlcGxveWVkIHRvIFZNU1MgdmlhIFZNU1MgZXh0ZW5zaW9ucwojIFByb3ZpZGVzIHNoZWxsY2hlY2sgZGVmaW5pdGlvbnMKdXRpbF9jb21tb249InV0aWwtY29tbW9uLnNoIgppZiBbIC1mICIkdXRpbF9jb21tb24iIF07IHRoZW4KICAgICMgc2hlbGxjaGVjayBzb3VyY2U9dXRpbC1jb21tb24uc2gKICAgIHNvdXJjZSAiJHV0aWxfY29tbW9uIgpmaQojIS9iaW4vYmFzaAoKc2V0IC1vIGVycmV4aXQgXAogICAgLW8gcGlwZWZhaWwgXAogICAgLW8gbm91bnNldAoKbWFpbigpIHsKICAgICMgdHJhbnNhY3Rpb24gYXR0ZW1wdCByZXRyeSB0aW1lIGluIHNlY29uZHMKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXJpIHJldHJ5X3dhaXRfdGltZT0zMAogICAgbG9jYWwgLXJpIHBrZ19yZXRyeV9jb3VudD02MAoKICAgIGNyZWF0ZV9yZXF1aXJlZF9kaXJzCiAgICBjb25maWd1cmVfc3NoZAogICAgY29uZmlndXJlX3JwbV9yZXBvcyByZXRyeV93YWl0X3RpbWUgXAogICAgICAgICAgICAgICAgICAgICAgICAiJHBrZ19yZXRyeV9jb3VudCIKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1hciBleGNsdWRlX3BrZ3M9KAogICAgICAgICIteCBXQUxpbnV4QWdlbnQiCiAgICAgICAgIi14IFdBTGludXhBZ2VudC11ZGV2IgogICAgKQoKICAgIGRuZl91cGRhdGVfcGtncyBleGNsdWRlX3BrZ3MgXAogICAgICAgICAgICAgICAgICAgIHJldHJ5X3dhaXRfdGltZSBcCiAgICAgICAgICAgICAgICAgICAgIiRwa2dfcmV0cnlfY291bnQiCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtcmEgaW5zdGFsbF9wa2dzPSgKICAgICAgICBjbGFtYXYKICAgICAgICBhenNlYy1jbGFtYXYKICAgICAgICBhenVyZS1jbGkKICAgICAgICBhenVyZS1tZHNkCiAgICAgICAgYXp1cmUtc2VjdXJpdHkKICAgICAgICBwb2RtYW4KICAgICAgICBwb2RtYW4tZG9ja2VyCiAgICAgICAgb3BlbnNzbC1wZXJsCiAgICAgICAgIyBoYWNrIC0gd2UgYXJlIGluc3RhbGxpbmcgcHl0aG9uMyBvbiBob3N0cyBkdWUgdG8gYW4gaXNzdWUgd2l0aCBBenVyZSBMaW51eCBFeHRlbnNpb25zIGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZS9henVyZS1saW51eC1leHRlbnNpb25zL3B1bGwvMTUwNQogICAgICAgIHB5dGhvbjMKICAgICAgICAjIHJlcXVpcmVkIGZvciBwb2RtYW4gbmV0d29ya2luZwogICAgICAgIGZpcmV3YWxsZAogICAgICAgICMgUmVxdWlyZWQgdG8gZW5hYmxlIGZpcHMKICAgICAgICBncnViYnkKICAgICAgICBkcmFjdXQtZmlwcwogICAgKQoKICAgIGRuZl9pbnN0YWxsX3BrZ3MgaW5zdGFsbF9wa2dzIFwKICAgICAgICAgICAgICAgICAgICAgIHJldHJ5X3dhaXRfdGltZSBcCiAgICAgICAgICAgICAgICAgICAgICAiJHBrZ19yZXRyeV9jb3VudCIKCiAgICBmaXBzX2NvbmZpZ3VyZQoKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjExOQogICAgY29uZmlndXJlX2xvZ3JvdGF0ZQoKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjE1MyBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgbWRtaW1hZ2U9IiR7UlBJTUFHRSUlLyp9LyR7TURNSU1BR0UjKi99IgogICAgbG9jYWwgLXIgcnBpbWFnZT0iJFJQSU1BR0UiCiAgICBsb2NhbCAtciBtaXNlaW1hZ2U9IiR7UlBJTUFHRSUlLyp9LyR7TUlTRUlNQUdFIyovfSIKICAgIGxvY2FsIC1yIG90ZWxpbWFnZT0iJE9URUxJTUFHRSIKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXIgZmx1ZW50Yml0X2ltYWdlPSIkRkxVRU5UQklUSU1BR0UiCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yQSBhcm9faW1hZ2VzPSgKICAgICAgICBbIm1kbSJdPSJtZG1pbWFnZSIKICAgICAgICBbInJwIl09InJwaW1hZ2UiCiAgICAgICAgWyJmbHVlbnRiaXQiXT0iZmx1ZW50Yml0X2ltYWdlIgogICAgICAgIFsibWlzZSJdPSJtaXNlaW1hZ2UiCiAgICAgICAgWyJvdGVsIl09Im90ZWxpbWFnZSIKICAgICkKCiAgICBwdWxsX2NvbnRhaW5lcl9pbWFnZXMgYXJvX2ltYWdlcwoKICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjAzNAogICAgbG9jYWwgLXJhIGVuYWJsZV9wb3J0cz0oCiAgICAgICAgIyBSUCBmcm9udGVuZAogICAgICAgICI0NDMvdGNwIgogICAgICAgICMgUG9ydGFsIHdlYgogICAgICAgICI0NDQvdGNwIgogICAgICAgICMgTUlNTyBBY3R1YXRvciBoZWFsdGh6CiAgICAgICAgIjQ0NS90Y3AiCiAgICAgICAgIyBQb3J0YWwgc3NoCiAgICAgICAgIjIyMjIvdGNwIgogICAgICAgICMgSklUIHNzaAogICAgICAgICIyMi90Y3AiCiAgICApCgogICAgZmlyZXdhbGxkX2NvbmZpZ3VyZSBlbmFibGVfcG9ydHMKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIGZsdWVudGJpdF9jb25mX2ZpbGU9IltJTlBVVF0KCU5hbWUgc3lzdGVtZAoJVGFnIGpvdXJuYWxkCglTeXN0ZW1kX0ZpbHRlciBfQ09NTT1hcm8KCURCIC92YXIvbGliL2ZsdWVudC9qb3VybmFsZGIKCltJTlBVVF0KCU5hbWUgc3lzdGVtZAoJVGFnIGpvdXJuYWxkCglTeXN0ZW1kX0ZpbHRlciBfU1lTVEVNRF9VTklUPWFyby1taXNlLnNlcnZpY2UKCURCIC92YXIvbGliL2ZsdWVudC9qb3VybmFsZGIKCltJTlBVVF0KCU5hbWUgc3lzdGVtZAoJVGFnIGpvdXJuYWxkCglTeXN0ZW1kX0ZpbHRlciBfU1lTVEVNRF9VTklUPWFyby1vdGVsLWNvbGxlY3Rvci5zZXJ2aWNlCglEQiAvdmFyL2xpYi9mbHVlbnQvam91cm5hbGRiCgpbRklMVEVSXQoJTmFtZSBtb2RpZnkKCU1hdGNoIGpvdXJuYWxkCglSZW1vdmVfd2lsZGNhcmQgXwoJUmVtb3ZlIFRJTUVTVEFNUAoKW0ZJTFRFUl0KCU5hbWUgcmV3cml0ZV90YWcKCU1hdGNoIGpvdXJuYWxkCglSdWxlIFwkTE9HS0lORCBhc3luY3FvcyBhc3luY3FvcyB0cnVlCgpbRklMVEVSXQoJTmFtZSBtb2RpZnkKCU1hdGNoIGFzeW5jcW9zCglSZW1vdmUgQ0xJRU5UX1BSSU5DSVBBTF9OQU1FCglSZW1vdmUgRklMRQoJUmVtb3ZlIENPTVBPTkVOVAoKW0ZJTFRFUl0KCU5hbWUgcmV3cml0ZV90YWcKCU1hdGNoIGpvdXJuYWxkCglSdWxlIFwkTE9HS0lORCBpZnhhdWRpdCBpZnhhdWRpdCBmYWxzZQoKW09VVFBVVF0KCU5hbWUgZm9yd2FyZAoJTWF0Y2ggKgoJUG9ydCAyOTIzMCIKCiAgICAjIHZhbHVlcyBhcmUgcmVmZXJlbmNlcyB0byB2YXJpYWJsZXMsIHRoZXkgc2hvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQgaGVyZQogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtckEgYXJvX2NvbmZpZ3M9KAogICAgICAgIFsicnBfY29uZmlnIl09ImFyb19ycF9jb25mX2ZpbGUiCiAgICAgICAgWyJmbHVlbnRiaXQiXT0iZmx1ZW50Yml0X2NvbmZfZmlsZSIKICAgICAgICBbIm1kc2QiXT0ibWRzZF9jb25maWdfdmVyc2lvbiIKICAgICAgICBbInN0YXRpY19pcF9hZGRyZXNzIl09InN0YXRpY19pcF9hZGRyZXNzZXMiCiAgICApCgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICAjIHVzZSBkZWZhdWx0IHBvZG1hbiBuZXR3b3JrIHdpdGggcmFuZ2UgMTAuODguMC4wLzE2CiAgICAjIHN0YXRpYyBJUHMgdXNlZCBmb3IgdW5pcXVlbHkgaWRlbnRpZnlpbmcgc2VydmljZXMgaW4gbW9uaXRvcnMKICAgIGxvY2FsIC1yQSBzdGF0aWNfaXBfYWRkcmVzc2VzPSgKICAgICAgICBbInJwIl09IjEwLjg4LjAuMiIKICAgICAgICBbIm1vbml0b3IiXT0iMTAuODguMC4zIgogICAgICAgIFsicG9ydGFsIl09IjEwLjg4LjAuNCIKICAgICAgICBbIm1pbW9fYWN0dWF0b3IiXT0iMTAuODguMC4xMCIKICAgICAgICBbIm1pc2UiXT0iMTAuODguMC41IgogICAgICAgIFsib3RlbF9jb2xsZWN0b3IiXT0iMTAuODguMC42IgogICAgICAgIFsibWRtIl09IjEwLjg4LjAuOCIKICAgICkKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yIG1kc2RfY29uZmlnX3ZlcnNpb249IiRSUE1EU0RDT05GSUdWRVJTSU9OIgogICAgIyBzaGVsbGNoZWNrIGRpc2FibGU9U0MyMDM0CiAgICBsb2NhbCAtciBhcm9fcnBfY29uZl9maWxlPSJBQ1JfUkVTT1VSQ0VfSUQ9JyRBQ1JSRVNPVVJDRUlEJwpBRE1JTl9BUElfQ0xJRU5UX0NFUlRfQ09NTU9OX05BTUU9JyRBRE1JTkFQSUNMSUVOVENFUlRDT01NT05OQU1FJwpBUk1fQVBJX0NMSUVOVF9DRVJUX0NPTU1PTl9OQU1FPSckQVJNQVBJQ0xJRU5UQ0VSVENPTU1PTk5BTUUnCkFST19MT0dfTEVWRUw9JyRBUk9MT0dMRVZFTCcKQVpVUkVfQVJNX0NMSUVOVF9JRD0nJEFSTUNMSUVOVElEJwpBWlVSRV9GUF9DTElFTlRfSUQ9JyRGUENMSUVOVElEJwpBWlVSRV9GUF9TRVJWSUNFX1BSSU5DSVBBTF9JRD0nJEZQU0VSVklDRVBSSU5DSVBBTElEJwpDTFVTVEVSX01ETV9BQ0NPVU5UPSckQ0xVU1RFUk1ETUFDQ09VTlQnCkNMVVNURVJfTURNX05BTUVTUEFDRT1SUApDTFVTVEVSX01EU0RfQUNDT1VOVD0nJENMVVNURVJNRFNEQUNDT1VOVCcKQ0xVU1RFUl9NRFNEX0NPTkZJR19WRVJTSU9OPSckQ0xVU1RFUk1EU0RDT05GSUdWRVJTSU9OJwpDTFVTVEVSX01EU0RfTkFNRVNQQUNFPSckQ0xVU1RFUk1EU0ROQU1FU1BBQ0UnCkRBVEFCQVNFX0FDQ09VTlRfTkFNRT0nJERBVEFCQVNFQUNDT1VOVE5BTUUnCkRPTUFJTl9OQU1FPSckTE9DQVRJT04uJENMVVNURVJQQVJFTlRET01BSU5OQU1FJwpHQVRFV0FZX0RPTUFJTlM9JyRHQVRFV0FZRE9NQUlOUycKR0FURVdBWV9SRVNPVVJDRUdST1VQPSckR0FURVdBWVJFU09VUkNFR1JPVVBOQU1FJwpLRVlWQVVMVF9QUkVGSVg9JyRLRVlWQVVMVFBSRUZJWCcKTURNX0FDQ09VTlQ9JyRSUE1ETUFDQ09VTlQnCk1ETV9OQU1FU1BBQ0U9JyR7cm9sZV9ycF5efScKTURTRF9FTlZJUk9OTUVOVD0nJE1EU0RFTlZJUk9OTUVOVCcKTUlTRV9BRERSRVNTPSdodHRwOi8vJHtzdGF0aWNfaXBfYWRkcmVzc2VzWyJtaXNlIl19OjUwMDAnClJQX0ZFQVRVUkVTPSckUlBGRUFUVVJFUycKUlBJTUFHRT0nJHJwaW1hZ2UnCkFST19JTlNUQUxMX1ZJQV9ISVZFPSckQ0xVU1RFUlNJTlNUQUxMVklBSElWRScKQVJPX0hJVkVfREVGQVVMVF9JTlNUQUxMRVJfUFVMTFNQRUM9JyRDTFVTVEVSREVGQVVMVElOU1RBTExFUlBVTExTUEVDJwpBUk9fQURPUFRfQllfSElWRT0nJENMVVNURVJTQURPUFRCWUhJVkUnCk9JRENfQUZEX0VORFBPSU5UPSckTE9DQVRJT04ub2ljLiRSUFBBUkVOVERPTUFJTk5BTUUnCk9JRENfU1RPUkFHRV9BQ0NPVU5UX05BTUU9JyRPSURDU1RPUkFHRUFDQ09VTlROQU1FJwpPVEVMX0FVRElUX1FVRVVFX1NJWkU9JyRPVEVMQVVESVRRVUVVRVNJWkUnCk1TSV9SUF9FTkRQT0lOVD0nJE1TSVJQRU5EUE9JTlQnCiIKCiAgICBjb25maWd1cmVfdm1zc19hcm9fc2VydmljZXMgcm9sZV9ycCBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJvX2ltYWdlcyBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJvX2NvbmZpZ3MKCiAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMzQKICAgIGxvY2FsIC1yYSBhcm9fc2VydmljZXM9KAogICAgICAgICJhcm8tbWlzZSIKICAgICAgICAiYXJvLW1vbml0b3IiCiAgICAgICAgImFyby1vdGVsLWNvbGxlY3RvciIKICAgICAgICAiYXJvLXBvcnRhbCIKICAgICAgICAiYXJvLW1pbW8tYWN0dWF0b3IiCiAgICAgICAgImFyby1ycCIKICAgICAgICAiYXpzZWNkIgogICAgICAgICJtZHNkIgogICAgICAgICJtZG0iCiAgICAgICAgImNocm9ueWQiCiAgICAgICAgImZsdWVudGJpdCIKICAgICAgICAiZG93bmxvYWQtbWRzZC1jcmVkZW50aWFscy50aW1lciIKICAgICAgICAiZG93bmxvYWQtbWRtLWNyZWRlbnRpYWxzLnRpbWVyIgogICAgICAgICJmaXJld2FsbGQiCiAgICApCgogICAgZW5hYmxlX3NlcnZpY2VzIGFyb19zZXJ2aWNlcwoKICAgIHJlYm9vdF92bQp9CgojIFRoaXMgdmFyaWFibGUgaXMgdXNlZCBieSBhei1jbGkKIyBJdCdzIGFzc3VtZWQgdGhhdCBpZiB0aGlzIHZhcmlhYmxlIGhhc24ndCBiZWVuIGNhcnJpZWQgb3ZlciwgdGhhdCBvdGhlcnMgYXJlIGFsc28gbm90IHByZXNlbnQsIHNvIHdlIGZhaWwgZWFybHkgYnkgcmV0dXJuaW5nIGFuIGVycm9yCiMgVGhpcyB3YXMgbW9zdGx5IGhlbHBmdWwgd2hlbiB0ZXN0aW5nIG9uIGEgZGV2ZWxvcG1lbnQgVk0sIGJ1dCBpcyBzdGlsbCBhcHBsaWNhYmxlCmV4cG9ydCBBWlVSRV9DTE9VRF9OQU1FPSIke0FaVVJFQ0xPVUROQU1FOj8iRmFpbGVkIHRvIGNhcnJ5IG92ZXIgdmFyaWFibGVzIn0iCgojIHV0aWwuc2ggZG9lcyBub3QgZXhpc3Qgd2hlbiBkZXBsb3llZCB0byBWTVNTIHZpYSBWTVNTIGV4dGVuc2lvbnMKIyBQcm92aWRlcyBzaGVsbGNoZWNrIGRlZmluaXRpb25zCnV0aWw9InV0aWwuc2giCmlmIFsgLWYgIiR1dGlsIiBdOyB0aGVuCiAgICAjIHNoZWxsY2hlY2sgc291cmNlPXV0aWwuc2gKICAgIHNvdXJjZSAiJHV0aWwiCmZpCgptYWluICIkQCIK')))]"
                                    }
                                }
                            },
                            {
                                "name": "AzureMonitorLinuxAgent",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Monitor",
                                    "type": "AzureMonitorLinuxAgent",
                                    "typeHandlerVersion": "1.0",
                                    "autoUpgradeMinorVersion": true,
                                    "enableAutomaticUpgrade": true,
                                    "settings": {
                                        "GCS_AUTO_CONFIG": true
                                    }
                                }
                            }
                        ]
                    }
                },
                "overprovision": false
            },
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat('aro-rp-', resourceGroup().location))]": {}
                }
            },
            "name": "[concat('rp-vmss-', parameters('vmssName'))]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "location": "[resourceGroup().location]",
            "tags": {},
            "apiVersion": "2024-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, parameters('rpServicePrincipalId'), 'RP / Reader'))]",
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {
                "severity": 2,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT15M",
                "targetResourceType": "Microsoft.Network/loadBalancers",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "LessThan",
                            "threshold": 30,
                            "AdditionalProperties": null,
                            "name": "HealthProbeCheck",
                            "metricName": "DipAvailability",
                            "metricNamespace": "microsoft.network/loadBalancers",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-availability-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {
                "severity": 3,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
                ],
                "evaluationFrequency": "PT15M",
                "windowSize": "PT6H",
                "targetResourceType": "Microsoft.Network/loadBalancers",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "LessThan",
                            "threshold": 67,
                            "AdditionalProperties": null,
                            "name": "HealthProbeCheck",
                            "metricName": "DipAvailability",
                            "metricNamespace": "microsoft.network/loadBalancers",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-degraded-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {
                "severity": 2,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT5M",
                "targetResourceType": "Microsoft.Network/loadBalancers",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "LessThan",
                            "threshold": 33,
                            "AdditionalProperties": null,
                            "name": "HealthProbeCheck",
                            "metricName": "VipAvailability",
                            "metricNamespace": "microsoft.network/loadBalancers",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-vnet-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', 'rp-lb')]"
            ]
        },
        {
            "properties": {},
            "name": "[concat(resourceGroup().location, '.', parameters('clusterParentDomainName'))]",
            "type": "Microsoft.Network/dnsZones",
            "location": "global",
            "apiVersion": "2018-05-01"
        },
        {
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]",
            "name": "rp-vnet/peering-rp-pe-vnet-001",
            "properties": {
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "allowVirtualNetworkAccess": true,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', 'rp-pe-vnet-001')]"
                },
                "useRemoteGateways": false
            },
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
        },
        {
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]",
            "name": "rp-pe-vnet-001/peering-rp-vnet",
            "properties": {
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "allowVirtualNetworkAccess": true,
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', 'rp-vnet')]"
                },
                "useRemoteGateways": false
            },
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings"
        },
        {
            "apiVersion": "2023-04-15",
            "kind": "GlobalDocumentDB",
            "location": "[resourceGroup().location]",
            "name": "[parameters('databaseAccountName')]",
            "properties": {
                "backupPolicy": {
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 720
                    },
                    "type": "Periodic"
                },
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Strong"
                },
                "databaseAccountOfferType": "Standard",
                "disableKeyBasedMetadataWriteAccess": true,
                "disableLocalAuth": true,
                "ipRules": "[if(parameters('disableCosmosDBFirewall'), createArray(), concat(parameters('ipRules'),createArray(createObject('ipAddressOrRange', '104.42.195.92'),createObject('ipAddressOrRange','40.76.54.131'),createObject('ipAddressOrRange','52.176.6.30'),createObject('ipAddressOrRange','52.169.50.45'),createObject('ipAddressOrRange','52.187.184.26'))))]",
                "isVirtualNetworkFilterEnabled": "[not(parameters('disableCosmosDBFirewall'))]",
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]"
                    }
                ],
                "minimalTlsVersion": "Tls12",
                "virtualNetworkRules": "[if(parameters('disableCosmosDBFirewall'), createArray(), variables('rpCosmoDbVirtualNetworkRules'))]"
            },
            "tags": {
                "defaultExperience": "Core (SQL)"
            },
            "type": "Microsoft.DocumentDB/databaseAccounts"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO')]",
            "properties": {
                "options": {
                    "throughput": "[parameters('cosmosDB').standardProvisionedThroughput]"
                },
                "resource": {
                    "id": "['ARO']"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/AsyncOperations')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": 604800,
                    "id": "AsyncOperations",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/OpenShiftVersions')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": -1,
                    "id": "OpenShiftVersions",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/PlatformWorkloadIdentityRoleSets')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": -1,
                    "id": "PlatformWorkloadIdentityRoleSets",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Billing')]",
            "properties": {
                "options": {},
                "resource": {
                    "id": "Billing",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Gateway')]",
            "properties": {
                "options": {
                    "throughput": "[parameters('cosmosDB').gatewayProvisionedThroughput]"
                },
                "resource": {
                    "defaultTtl": -1,
                    "id": "Gateway",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Monitors')]",
            "properties": {
                "options": {},
                "resource": {
                    "defaultTtl": -1,
                    "id": "Monitors",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/OpenShiftClusters')]",
            "properties": {
                "options": {},
                "resource": {
                    "id": "OpenShiftClusters",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/partitionKey"
                        ]
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": [
                            {
                                "paths": [
                                    "/key"
                                ]
                            },
                            {
                                "paths": [
                                    "/clusterResourceGroupIdKey"
                                ]
                            },
                            {
                                "paths": [
                                    "/clientIdKey"
                                ]
                            }
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Portal')]",
            "properties": {
                "options": {
                    "throughput": "[parameters('cosmosDB').portalProvisionedThroughput]"
                },
                "resource": {
                    "defaultTtl": -1,
                    "id": "Portal",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Subscriptions')]",
            "properties": {
                "options": {},
                "resource": {
                    "id": "Subscriptions",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/id"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/MaintenanceManifests')]",
            "properties": {
                "options": {
                    "throughput": "[parameters('cosmosDB').gatewayProvisionedThroughput]"
                },
                "resource": {
                    "defaultTtl": -1,
                    "id": "MaintenanceManifests",
                    "partitionKey": {
                        "kind": "Hash",
                        "paths": [
                            "/clusterResourceID"
                        ]
                    }
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Subscriptions')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Subscriptions/renewLease')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 60;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "renewLease",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Subscriptions')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Subscriptions/retryLater')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 600;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "retryLater",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Billing')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Billing/setCreationBillingTimeStamp')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tvar now = Math.floor(date.getTime() / 1000);\n\t\t\t\tvar billingBody = body[\"billing\"];\n\t\t\t\tif (!billingBody[\"creationTime\"]) {\n\t\t\t\t\tbillingBody[\"creationTime\"] = now;\n\t\t\t\t}\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "setCreationBillingTimeStamp",
                    "triggerOperation": "Create",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Billing')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Billing/setDeletionBillingTimeStamp')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tvar now = Math.floor(date.getTime() / 1000);\n\t\t\t\tvar billingBody = body[\"billing\"];\n\t\t\t\tif (!billingBody[\"creationTime\"]) {\n\t\t\t\t\tbillingBody[\"creationTime\"] = now;\n\t\t\t\t}\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "setDeletionBillingTimeStamp",
                    "triggerOperation": "Replace",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'OpenShiftClusters')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/OpenShiftClusters/renewLease')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 60;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "renewLease",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'Monitors')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/Monitors/renewLease')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 60;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "renewLease",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), 'ARO')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), 'ARO', 'MaintenanceManifests')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "[concat(parameters('databaseAccountName'), '/', 'ARO', '/MaintenanceManifests/renewLease')]",
            "properties": {
                "resource": {
                    "body": "function trigger() {\n\t\t\t\tvar request = getContext().getRequest();\n\t\t\t\tvar body = request.getBody();\n\t\t\t\tvar date = new Date();\n\t\t\t\tbody[\"leaseExpires\"] = Math.floor(date.getTime() / 1000) + 60;\n\t\t\t\trequest.setBody(body);\n\t\t\t}",
                    "id": "renewLease",
                    "triggerOperation": "All",
                    "triggerType": "Pre"
                }
            },
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers"
        },
        {
            "properties": {
                "severity": 3,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                ],
                "evaluationFrequency": "PT5M",
                "windowSize": "PT1H",
                "targetResourceType": "Microsoft.DocumentDB/databaseAccounts",
                "criteria": {
                    "allOf": [
                        {
                            "operator": "GreaterThan",
                            "threshold": 10,
                            "AdditionalProperties": null,
                            "name": "ThrottledRequestCheck",
                            "metricName": "TotalRequests",
                            "metricNamespace": "Microsoft.DocumentDB/databaseAccounts",
                            "timeAggregation": "Count",
                            "dimensions": [
                                {
                                    "name": "StatusCode",
                                    "operator": "Include",
                                    "values": [
                                        "429"
                                    ]
                                }
                            ],
                            "criterionType": "StaticThresholdCriterion"
                        },
                        {
                            "operator": "GreaterThan",
                            "threshold": 90,
                            "AdditionalProperties": null,
                            "name": "RUConsumptionCheck",
                            "metricName": "NormalizedRUConsumption",
                            "metricNamespace": "Microsoft.DocumentDB/databaseAccounts",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "AdditionalProperties": null,
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "autoMitigate": true,
                "actions": [
                    {
                        "actionGroupId": "[resourceId(parameters('subscriptionResourceGroupName'), 'Microsoft.Insights/actionGroups', 'rp-health-ag')]",
                        "webHookProperties": null
                    }
                ]
            },
            "name": "[concat('rp-cosmosdb-alert-', resourceGroup().location)]",
            "type": "Microsoft.Insights/metricAlerts",
            "location": "global",
            "apiVersion": "2018-03-01",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[concat(parameters('databaseAccountName'), '/', guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('rpServicePrincipalId'), 'DocumentDB Data Contributor'))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts/dbs', parameters('databaseAccountName'), 'ARO')]",
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), '00000000-0000-0000-0000-000000000002')]",
                "principalId": "[parameters('rpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "condition": "[not(equals(parameters('rpServicePrincipalId'), ''))]",
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[concat(parameters('databaseAccountName'), '/', guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('gatewayServicePrincipalId'), 'DocumentDB Data Contributor'))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts/dbs', parameters('databaseAccountName'), 'ARO')]",
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), '00000000-0000-0000-0000-000000000002')]",
                "principalId": "[parameters('gatewayServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "condition": "[not(equals(parameters('gatewayServicePrincipalId'), ''))]",
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[concat(parameters('databaseAccountName'), '/', guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('globalDevopsServicePrincipalId'), 'DocumentDB Data Contributor'))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts/dbs', parameters('databaseAccountName'), 'ARO')]",
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), '00000000-0000-0000-0000-000000000002')]",
                "principalId": "[parameters('globalDevopsServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "condition": "[not(equals(parameters('globalDevopsServicePrincipalId'), ''))]",
            "apiVersion": "2023-04-15",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[guid(resourceGroup().id, parameters('rpServicePrincipalId'), 'RP / Reader')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "properties": {
                "scope": "[resourceGroup().id]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                "principalId": "[parameters('rpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview"
        },
        {
            "name": "[guid(resourceGroup().id, 'FP / Network Contributor')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "properties": {
                "scope": "[resourceGroup().id]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('fpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview"
        },
        {
            "name": "[concat(parameters('databaseAccountName'), '/Microsoft.Authorization/', guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('rpServicePrincipalId'), 'RP / DocumentDB Account Contributor'))]",
            "type": "Microsoft.DocumentDB/databaseAccounts/providers/roleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                "principalId": "[parameters('rpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
            ]
        },
        {
            "name": "[concat(resourceGroup().location, '.', parameters('clusterParentDomainName'), '/Microsoft.Authorization/', guid(resourceId('Microsoft.Network/dnsZones', concat(resourceGroup().location, '.', parameters('clusterParentDomainName'))), 'FP / DNS Zone Contributor'))]",
            "type": "Microsoft.Network/dnsZones/providers/roleAssignments",
            "properties": {
                "scope": "[resourceId('Microsoft.Network/dnsZones', concat(resourceGroup().location, '.', parameters('clusterParentDomainName')))]",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                "principalId": "[parameters('fpServicePrincipalId')]",
                "principalType": "ServicePrincipal"
            },
            "apiVersion": "2018-09-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.Network/dnsZones', concat(resourceGroup().location, '.', parameters('clusterParentDomainName')))]"
            ]
        }
    ]
}
