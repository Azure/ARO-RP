// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// databases-development.json
// env-development.json
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _databasesDevelopmentJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x4f\xdb\x30\x14\x7d\xef\xaf\x88\xbc\x49\x69\xa5\x36\x71\xd0\x98\x58\xdf\x60\x48\x1b\x42\x8c\x69\xa0\xbd\x54\x7d\x30\xce\x85\x78\x24\xb6\xb1\xaf\x1f\xba\x89\xff\x3e\xb9\x69\xfa\x95\xb4\x80\x04\xdd\x5a\xd5\x3c\x61\x9f\x9c\xfb\x75\x8e\x8d\xf8\xd3\x0a\x82\x20\x20\xef\x2d\xcf\xa0\x60\xa4\x1f\x90\x0c\x51\xdb\x7e\x1c\x97\x3b\x51\xc1\x24\xbb\x83\x02\x24\x46\xec\xb7\x33\x10\x71\x55\x4c\xce\x6c\x7c\x40\x93\xc3\x1e\x4d\x7a\x34\x89\x53\xd0\xb9\x1a\x79\xdc\x35\x14\x3a\x67\x08\xd1\x2f\xab\xe4\x3b\xd2\x2d\x23\x70\x25\x11\x24\xfe\x04\x63\x85\x92\x3e\x50\x12\x51\xff\x53\x01\x34\x33\xac\x00\x04\x63\x49\x3f\x28\xd3\x1a\xef\xa7\x0c\xd9\x0d\xb3\x70\xcc\xb9\x72\x12\xbf\xb1\x02\x16\x00\x63\x10\x8e\xb4\xdf\x25\x16\x8d\x90\x77\x64\x7a\xf8\xd8\xad\x13\xbd\x90\xa1\x35\xc7\x43\x0c\x58\xe5\x0c\x07\x9f\xe3\x60\x8a\x59\xa2\xd2\x46\x69\x30\x28\xc0\xd6\xc2\x2c\x90\x34\x9e\x8e\x11\x22\xf5\xa9\x0c\x66\x2d\x69\x87\xf3\xd9\x87\x9d\x21\xa9\x7d\x38\x57\xea\x94\x47\x69\x14\x4a\x36\xa7\x51\x56\x9d\x19\xe5\xee\x32\xed\xd0\x07\x3c\xa4\xb4\x81\xb7\xb5\x26\x0a\x91\x65\x33\xc9\x80\x2b\xc9\x19\xb6\x9b\x52\x9e\x9b\x5c\xd8\xe9\x06\x61\x1c\x76\x83\xd5\xa5\x75\x86\xa4\xdb\x3c\x9a\x0b\xc1\x8d\xb2\xea\x16\xa3\x53\xc5\x9d\x97\xda\xe9\x49\xbc\x14\xc4\xc6\xf6\x21\x3f\x9d\xec\xd9\x65\xa6\x5c\x71\x86\x13\xf9\x0d\xaa\x31\x7c\x31\xca\xe9\x76\x27\xaa\x0e\x6b\xf1\x99\x16\x73\xb2\x3d\xa0\xc9\xa7\x1e\x3d\xea\xd1\xa4\x51\x66\x6f\xa4\x85\x63\x3b\x92\xfc\x52\x83\x61\xe5\x44\xeb\xc3\x0e\x26\x26\x42\xe1\x11\xe7\x30\x5a\x49\x39\x41\x62\xb6\xa8\xe2\x46\x58\x2c\xd2\xba\x24\xaa\x35\x6c\xce\x62\xfc\xe1\xbd\x90\xe3\xc4\xbf\x32\x9b\x35\x33\x34\x08\x76\xfc\x65\x0a\xb7\xcc\xe5\x78\x8d\x39\xe9\x07\x1f\xe9\x87\x23\x4a\x5f\x2a\xf6\x4d\x6b\xd6\x03\x96\x26\x14\xbe\xa6\x8e\x63\x7f\x7b\x32\x21\xfd\xe5\xf8\xb6\x92\x5e\xc2\xa5\xa0\x41\xa6\xf6\x52\x36\x2a\x65\x16\xf0\x2c\x6d\x87\x2f\x2f\x6b\x45\x4f\x97\x7a\xbf\xf6\xaa\x58\xc8\x69\xb8\x41\x43\x9e\x88\x3c\xf7\x0f\xc5\x2e\x18\x71\x1b\xec\x35\xe9\xf7\xde\x56\xbb\x6d\xab\x0b\x25\x05\xaa\xda\x3c\x66\x71\xb6\xc9\x57\xcf\x79\xe0\x7a\xc9\x36\xb8\xaf\x1a\xcb\xde\x7e\xbb\x6d\xbf\x4b\x0d\xf2\x2a\x13\xb7\xf8\x39\x77\x16\xeb\x83\x99\x05\x7c\x75\x1f\x2e\x30\x6e\xd8\x91\x4e\x8a\x07\x07\xe7\x30\xfa\xae\x72\xc1\x9f\x28\x68\x0a\x7e\xba\xaa\xd5\x2c\x53\xb6\xe7\xb5\x67\x0a\x8f\xef\xd7\x75\xa7\x5a\xc3\xb5\x88\x15\x5d\xa8\xd6\x1b\x24\xcd\x4b\x35\xfd\x98\x37\xf2\x59\xba\x76\xd0\xd5\xfa\xff\x4a\x11\x20\xf1\x75\x92\x5f\xad\xf2\xed\xfd\x3b\xad\x76\x83\xec\x9f\x8c\xdd\x7e\x32\xae\xdc\x8d\xe5\x46\xe8\xdd\xf9\xbf\xc4\x36\xd8\x6c\xa1\xeb\x7b\x8b\xfd\x53\x8b\xb5\xca\xdf\x1f\x5b\x7f\x03\x00\x00\xff\xff\x61\x95\x7d\xc5\x4d\x17\x00\x00")

func databasesDevelopmentJsonBytes() ([]byte, error) {
	return bindataRead(
		_databasesDevelopmentJson,
		"databases-development.json",
	)
}

func databasesDevelopmentJson() (*asset, error) {
	bytes, err := databasesDevelopmentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "databases-development.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _envDevelopmentJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xeb\x73\xa2\xc8\x16\xff\x3e\x7f\x85\xe5\xdd\x2a\x27\x75\xf3\x00\x32\xce\xc4\xad\xda\x0f\x04\xa3\xc1\x07\x11\x1f\xa8\xec\x4e\x4d\x35\x4d\xab\xad\x0d\x4d\x41\x83\x31\x5b\xf3\xbf\xdf\x02\xc4\x27\x0a\x26\x33\x1f\x2e\xa9\xd2\x48\x9f\xf3\xeb\xd3\xa7\xcf\xb3\xfb\xdf\x4f\x85\x42\xa1\x50\xfc\xc3\x83\x33\x64\x81\xe2\x9f\x85\xe2\x8c\x31\xc7\xfb\xf3\xee\x2e\x7e\x73\x6b\x01\x1b\x4c\x91\x85\x6c\x76\x0b\xde\x7c\x17\xdd\x42\x6a\xad\xc7\xbc\x3b\x81\xe3\xcb\x37\x1c\x7f\xc3\xf1\x77\x26\x72\x08\x5d\x85\x74\x7d\x64\x39\x04\x30\x74\x3b\xf7\xa8\xfd\x9f\xe2\x75\x3c\x03\xa4\x36\x43\x36\xd3\x90\xeb\x61\x6a\x87\x13\xf1\xb7\x5c\xf8\x97\x10\x38\xc0\x05\x16\x62\xc8\xf5\x8a\x7f\x16\x62\xb1\xe2\xf7\x2e\x7d\x5d\x49\xc8\x65\x7b\xaf\xa3\x21\xb6\x72\x50\x88\xe4\x31\x17\xdb\xd3\xe2\x66\xf0\xe7\xf5\x21\x3b\xc1\xc8\x66\x1f\x04\xa9\x52\x0b\x60\x5b\x01\x16\x6a\x01\x03\x91\x0f\x20\xc9\x16\x98\xa2\x8f\xf2\x8b\x3e\x9b\x9d\xc1\x40\xd0\x77\x51\x26\x52\x13\xad\x3e\x84\xe1\x1b\x04\x43\xb9\x23\x9a\xa6\x8b\x3c\x4f\x24\x84\x42\xc0\x30\xb5\xdb\x88\xcd\xa8\x99\xb9\xc4\xeb\xfd\x51\x13\x4d\x80\x4f\x98\x06\x88\x1f\x51\xf5\x18\x60\x18\xe6\x9a\xba\xb7\xf0\xc3\x9d\xf9\x05\x33\xda\x26\x70\xcd\xf4\x39\x3d\x6f\xd6\x89\xa6\x3d\xaf\xb6\x33\x0a\x0b\x1c\x5b\x12\x43\x3b\xc4\x13\x0c\x01\xbb\xc4\x08\x3e\xed\x60\x15\x5d\xe4\x51\xdf\x85\x28\xf4\x95\xbf\x37\x34\x07\x50\xde\xc2\x3f\xc2\x8f\x06\xec\x58\x53\xc5\xbf\xb7\x3e\xf7\xb9\x94\xae\xd0\xd2\xd5\xf7\xe2\x1e\xc0\xcf\x03\x0d\x3a\x2e\x75\xc2\xf5\x20\x2f\x7d\xae\x0d\xec\xb1\x6d\x9c\x9d\xff\x90\x3e\x53\x90\x64\x51\x26\x0a\x6e\x02\xc7\xbe\x71\xb0\x73\xb8\xdb\x89\x6e\xdb\x18\xba\xd4\xa3\x13\x76\xab\x20\xb6\xa4\xee\xe2\xee\x60\x72\xe4\x1d\xb2\x26\xc2\x44\x62\x27\xda\xaf\xbb\xd4\x77\x3e\x5f\xdd\x26\x83\xdf\x0f\xb9\x80\x83\x77\x02\x9e\xc0\xf1\x95\x1b\xee\xdb\x0d\xc7\xa7\x1a\xc7\xbf\x97\x29\x16\xac\xf7\xc9\x01\xf0\xd8\x8c\x0e\xa9\x3a\x2e\x9a\xe0\xd7\x03\x73\x39\x22\xe6\xb9\x38\x24\xdf\x55\x8a\xa9\x44\xdf\x8f\xde\x1e\x6c\x42\x84\xe2\xf9\x86\x8d\xd8\xe9\xa9\xd2\x25\x2d\xe4\x58\xf3\xe9\x95\x45\xf9\x24\x91\x5e\xf8\x92\x2e\xfe\x09\x81\x37\x88\x89\x05\xd5\x01\x43\x4b\xb0\xea\x45\xeb\x48\x87\xfa\x79\xf4\xf6\x7b\x7e\xe3\x0c\x51\x73\x5b\x66\x80\x5d\xe6\x03\xb2\xfe\xf9\x7f\x60\x97\xd8\x91\xa8\x3d\xc1\x53\xdf\x8d\xe6\xfe\xed\x76\x10\x9b\x5b\x26\x5d\x2c\x9b\xb9\xa7\x27\xd9\xfc\x5c\xca\xd4\xf8\xdd\xda\x9e\x4b\xd7\x85\x52\xb2\x7d\xe1\xff\x7b\x56\x72\x14\x9d\x0e\x9f\x33\x76\x57\x48\x49\x67\xbf\x70\x39\x47\xa1\x6d\xb3\x90\x38\x48\x66\x8b\xfe\x21\x67\x5a\x67\xd8\xdc\x6e\x94\x12\x50\x02\xc7\xee\xaf\xfd\xa3\x4b\x7d\x86\x1e\x81\x87\xcc\x62\x5a\xe4\x39\x91\xf0\xf6\x04\xd2\x1c\xbb\xbe\xe4\x53\xd8\x23\x2a\x86\x91\xbb\x43\x95\x2b\xe0\x85\x49\x3d\x2e\x30\x77\x0d\xff\xb4\x24\x1b\xfa\xf5\x96\x74\x28\x3d\xae\x26\xf7\x38\x2e\x89\xe2\x11\x03\x5f\x11\x6e\xf9\xaf\x0f\xb7\x42\xb9\x9c\x11\x10\x8f\x63\xfa\x89\x65\xee\x8b\xde\xa5\x94\xed\xd4\x31\xe7\x45\xca\xf0\xe0\x0b\xbc\xbd\xb0\xf5\x95\x70\xf6\x2a\x60\xe0\xa8\x90\x38\xac\xb1\x3e\xec\x9b\x87\x95\x05\x04\x67\xf2\x4b\x7a\xe2\xcc\x52\x67\xc7\xa5\x8c\x42\x4a\x32\x12\xf4\x8b\x83\x6c\xad\xa3\xe4\xce\xce\x97\x14\x4c\xef\x4d\x49\xeb\x38\xf8\xbb\x33\xd3\x51\xe1\xee\x20\xdb\xf4\x5e\xec\x54\x85\xfd\x8a\x98\x98\xe2\xe8\x97\x25\x8e\xbd\x84\x71\x68\x83\xdf\x73\x64\xda\xcc\xfa\x3d\xe9\x56\x7e\x54\x05\xef\x47\x70\x9f\x26\x72\x12\xcf\x36\x8d\x4d\x0a\x0d\x04\x0e\x80\x98\x85\x2d\x0d\xff\xa1\x5a\xdf\x77\xa6\x2e\x30\x51\x87\x12\x0c\x8f\x1b\xa4\x0d\x99\x45\xcd\xd8\xb2\x80\xed\x03\x92\x33\xc6\xc6\xba\x6d\x03\x38\xc3\x36\xea\xb8\x74\x82\xc9\x99\xb2\x97\x7a\x59\x24\xf1\xca\xa9\xe5\xf8\x0c\xb9\x61\xa7\xb3\x2d\x24\xc3\x4d\x8b\xba\xe3\x9b\x13\x59\xa2\x10\xc7\x64\x0b\xdb\x03\x0f\xb9\xc9\x6e\x40\x42\x7d\xf3\xc6\xf7\x90\x7b\x8e\x8d\x60\xdb\x7f\xcd\x97\x28\x36\x3c\x26\xf6\x80\x41\x50\x07\x78\xde\x92\xba\x66\xd8\xf9\x23\x9b\xe1\x8d\x7f\x31\xd7\x47\x19\x31\xcc\xf3\x8e\x0f\x0b\x52\x09\x9d\xa4\xc1\xcd\xce\x32\xc9\x93\x8d\xba\x45\x07\xd1\xa1\x45\xf1\x6e\x46\x2d\x74\xb7\xd5\xd8\xdd\xad\xe7\xcd\xee\x80\xcf\x66\xd4\xc5\x6f\xc8\xfc\xb1\x40\x47\x11\xe5\x2c\xf0\x02\xad\x52\x93\xc1\x6e\xcb\x9e\x99\x08\x92\xe7\x74\xc5\x93\x3c\xe9\x59\x33\x9b\x3f\x7d\xe4\x54\xb6\xf5\x18\x75\xc1\x34\xd3\xda\x23\x5a\x6c\x81\x29\xea\xa2\x09\x72\x91\x7d\xa6\x21\xdc\xd0\x47\xfb\xec\xcd\xe2\xe8\xd0\x45\xe6\x33\x38\x6c\x4a\x8e\x58\xe8\x64\xb2\x26\x7f\x7e\x6a\x65\x11\xc7\xc1\xab\xf8\xed\xa6\x2b\x0e\xb3\x68\x83\x6d\xc4\x27\x61\x31\x71\xa2\x5a\x2c\x64\x94\x9c\xd4\xab\x62\x6f\x91\xbd\x74\xe8\x22\xc0\xd0\x8b\x93\x64\xa7\x9a\x4b\xad\xf8\x48\x2e\x43\xce\xf8\x2c\xd4\xcc\x35\x4b\x61\x67\x03\x45\x08\xa9\x6f\xb3\xa4\x88\xed\xb8\xc8\xc2\xbe\xf5\xa3\xd5\xed\xbd\xbb\xf2\xbe\xc8\x8e\xec\x38\x23\xe5\xb2\xa3\x35\xad\x6c\x33\xe4\x4e\x00\x44\x39\x9b\xb9\xe4\xc9\xa1\x94\xdd\xba\x23\x0e\xb3\x81\xe5\x79\x37\x36\x86\x39\x1c\xfe\xd2\x62\x71\xcd\x83\x2d\xe0\xae\x72\x45\xca\x0d\x53\xee\x3e\x36\xed\xc9\x1f\x12\x0b\x67\x54\x82\x1d\x18\x89\x70\x41\x20\x2c\xbc\x53\x47\x7b\xfc\x17\xb4\xd4\xa9\xfc\x1f\x6d\xb3\x5d\x67\xd3\x65\xbb\xce\x8d\x97\xaf\xc3\x4e\x7b\x32\x2a\xfb\x54\xe1\xdf\x63\x2c\xfb\x00\xfb\xc5\xe5\x65\xb9\xfe\x24\xea\x09\x13\x39\x3e\xe5\xcc\x2f\xe7\xc7\xac\x64\x83\x63\xda\x5e\x0f\x31\x86\xed\xe9\xc7\x80\x62\xb0\xa3\x4b\x96\x83\x53\xe2\x94\x9b\x98\x77\x99\x46\xf2\x64\xe7\xfa\x5f\xc3\x75\x19\x47\x7e\xea\x7c\x94\xe7\xeb\x95\x6c\x9c\xd3\xa3\x97\x9d\x1f\xa0\x57\x86\xec\x30\xd7\xe7\xca\x45\x1b\xea\xdf\x99\x77\xa0\x97\x95\xf7\x0b\xef\xce\x3b\xbb\x35\xd6\x36\x02\x8a\xd1\x3d\xea\xd3\x76\x71\x39\x33\x52\xd2\x91\x4b\xbe\xc7\xa8\xd5\x83\x2e\x76\xb2\x6a\xb6\x3d\xde\x67\x60\x9b\x04\xb9\xbb\xfd\xf5\xe6\xfa\x35\x13\x00\xf8\x8c\x0e\xe2\xfe\xae\x8d\x6d\xba\x83\x72\x41\x4e\xf5\x76\xe2\x44\xce\xd8\x1c\x2a\x9e\x21\xc8\x90\xf9\xae\x20\x53\xf4\x62\x35\x85\x71\xc4\x00\x1e\xfa\xfa\xe5\x33\xa4\x36\x04\xec\x73\xfc\xab\x4f\x7b\xd1\x45\xdb\xe7\x12\x14\x34\x4e\x96\x78\x82\x44\xda\x2c\x5d\x5d\x97\x3a\xdd\x97\xd1\x58\x6e\x8b\xf5\xa7\xbf\xfe\x58\x13\x17\x6e\xcc\xc2\x3f\x3e\xc7\xdd\xc3\xdd\xcf\x52\xa9\x74\xbd\x86\x3e\x8a\x54\x51\x59\x59\xba\xba\xba\x2e\x95\x4a\x57\xff\xd8\xa5\x5d\x58\x71\xd0\x7f\xfe\x28\x74\xd8\x0a\x1e\xc3\x4b\x4f\xdd\xfe\x5f\x21\xef\x11\x93\x84\x5c\x56\x8a\xc8\x77\xa8\x5b\xf2\x93\xd2\x3f\xc3\xb3\xb9\x3c\x3f\xe4\x6c\x3e\x8d\xd3\x59\xa2\x66\x6b\x43\x1b\x7e\x1c\x6a\x1b\x8d\x34\x26\x4b\x7c\x59\x7e\xd6\x96\x7a\xbd\xc6\xe9\x3d\x91\x21\xe9\x71\xa4\x0e\x5e\x1d\xc3\xd6\xbe\xa8\x43\x93\x18\xb6\xda\xdc\xd0\xd5\x89\x0f\xef\xbb\x33\xa3\xbe\x9c\xea\xf5\xca\x1c\x08\xda\x4a\x9a\x3a\x16\x18\x35\x88\x29\xd4\x3c\x43\xe2\xe7\xc6\x50\x9d\xb6\x7a\xfc\x4c\xaf\xab\x0c\xd6\x2b\x2b\xb3\xca\x71\x4a\xb5\x1d\x98\x75\x65\x29\x4b\x1c\x83\x75\x6d\x65\x0c\x6b\xbe\x3e\x2c\x73\xd2\xd4\x61\x40\xe8\x3a\x10\x8b\x01\xb4\x2a\x81\x29\x3d\xf8\x1b\x5c\x4b\x99\x99\x92\xf8\xdf\xd6\x7d\x23\x30\xee\xd5\xa0\x65\x75\x83\xb1\xc0\x08\xc4\x95\xb9\x21\x94\x2d\x30\x84\x3e\xb0\x95\xc0\xc0\xe2\x43\xe7\x49\xeb\x74\xa7\xce\x37\x69\xba\xc0\xe3\x91\xc6\x81\xe7\x36\x7e\xc1\x8f\xe1\xef\x86\x8c\xbb\xdf\x06\xb5\x46\x67\x58\x23\x8d\xfe\xa0\xf6\xdc\xed\x0d\x48\x6b\xe5\x54\xe4\x39\x9d\xa2\x25\x6d\x48\xea\x9a\x47\x92\xbf\xca\x92\xbc\xd8\xa3\x1d\xd4\x34\xed\x69\x8a\x43\x9c\x89\x4a\x1b\x13\xd5\xa9\x48\x8b\x68\xae\x37\x34\x52\x38\x7d\xc8\xcf\xcd\xfa\x72\x1a\xea\x04\xda\xea\x46\x27\x2d\x5b\x21\xd0\xd6\x9d\xb1\x30\x68\x26\xef\xe4\xe7\x47\x3e\xd4\x9b\x8c\xbb\xea\x60\x51\x19\x0f\x07\x44\x51\x07\x66\x4d\x9e\xd2\xa6\x31\x64\x0b\x30\x92\xa7\x2d\x41\xe3\xc6\xab\xca\x12\x5a\x95\x2f\x48\x75\xf0\x78\xa4\x10\x65\xae\x4e\x5b\x43\x75\xda\xa9\x2e\x1f\xb6\xbc\x4a\x6d\x40\x54\x2c\x57\xbf\x04\xfa\xa8\x3b\x6f\xdd\x3f\xae\x8c\xfb\x59\x79\xf3\x6d\x29\x2b\x53\x3c\xc7\xcf\x6a\xc3\x9e\x3c\xed\xe0\x0a\x31\xeb\xed\x00\x3e\x37\x02\xf4\xbc\x48\xbe\x7d\x20\x68\x65\xc9\x6a\xcc\xa0\x30\x10\x14\x49\x64\xba\x24\x3e\x74\xaa\x4b\xdc\xa8\x3d\xf6\xfa\xfc\x4c\x57\xb9\xd7\x46\x77\x50\x1e\xa8\x9c\xd6\xd3\xa4\x93\x38\x6c\x2c\xbc\x3a\xe1\x3e\xaf\xe5\x99\x83\x7a\xe5\xde\xc0\x22\x1b\x60\xf1\xb5\x5d\x15\x97\x2f\xf3\xa7\x65\xbb\x2a\x1e\xae\x7b\x0e\xea\x7c\xa0\x4b\xe2\x52\x99\x8b\x4b\x59\x3a\x23\xe3\xd4\x99\x8f\x47\xea\x76\xfe\x7b\xf2\x36\x16\x2a\xbe\x6e\x11\x3b\xd1\x85\x5c\x5d\x3e\x74\x07\x95\xba\x44\x62\xd9\x47\x5c\xac\xf7\x4e\x0f\xee\xef\x75\x0f\x36\x23\xba\x14\x4c\xb3\xae\x31\x5d\xaa\xac\xf7\x9c\xdb\xc8\x00\x05\x6d\x65\x5a\x64\xae\xf7\xc4\x87\x8e\x64\xd6\xfa\xdc\xd8\x96\x08\xd3\x0c\x8b\x70\x23\xd5\x79\xd4\xed\x2e\x81\x73\x7e\x61\x08\x8a\xab\x8f\xe4\x2d\xbd\xea\xf4\xf4\x51\x8d\x0f\xfd\x06\xbe\xa5\x8e\xf7\xcd\x7a\x6d\x65\x3e\xbd\x3a\xc6\x90\x70\xbd\x61\x99\xd3\x47\x0d\x61\x3c\x5c\x56\xda\x22\x6d\x0e\xf9\xc4\xbe\x34\x53\x5a\x68\xbe\x69\x91\x95\x21\x94\x59\xa8\xeb\xae\x45\x3c\xbd\xcf\xad\xed\x42\x29\x43\x41\x09\x0c\x4b\x77\xf4\xad\x7e\x6b\xa8\xae\xcd\x07\x91\xcd\x76\x55\x68\x0d\x2a\xad\x5e\x85\x87\xf7\x72\x30\xb6\x88\xdf\x12\x12\x3f\x7b\x5c\x19\x3d\x91\xe9\x58\x24\xc6\x74\x97\x47\xad\xb4\xee\xb5\x37\x88\x2b\x18\x0c\xbf\x04\x5b\xfb\x6e\xf0\xe1\xde\xb6\x46\x0d\x16\xfa\xb9\x61\xd5\x98\xde\x13\x49\xf8\x0e\x4a\x62\x18\x03\xbe\xbe\x54\x55\xae\xbd\x12\x99\x89\xc5\x3d\xbb\x7d\xc1\x95\x37\x7d\xa8\xac\xf4\x51\xf7\x4d\x96\xd6\x36\xaa\x55\xe2\x7d\xd9\xca\x1b\xc0\x2a\x17\x98\x23\x65\xd5\x12\x1a\x8e\x81\x2b\x89\xde\x42\xff\x0b\xa0\x14\xc9\xd9\xd3\x47\x0a\x37\x1e\x35\xb8\xce\xb0\xe6\x99\x42\xad\x0c\x97\xdb\x77\x03\x41\x9b\x77\xfa\x4f\x4d\x89\xb0\x86\x61\x2b\xdc\x78\xf8\xea\x8d\x54\x67\x34\x0e\xf5\x3b\xec\x4a\xa8\xcf\x33\x73\xf8\xca\x81\x1e\xcf\xc3\xc8\x8f\xbb\x33\x68\x99\xc4\x14\x9d\x70\x6f\x9b\x92\xad\x94\xe1\x7d\x97\x18\x43\x85\x33\xa4\x47\x62\x58\x35\x6c\xd4\x07\xd3\x23\x7b\x50\x69\xb3\xf9\xac\x78\xfa\x50\x5b\xca\xd5\xf6\xf2\x65\xf5\xb8\xd2\x87\x51\x1c\x73\x64\x69\xdc\x2c\x5d\x5d\xfd\xba\x53\xb0\x5f\x5c\x33\xe6\x3a\x08\xa6\x01\x72\x1d\x97\x06\x78\x5d\x7d\x4c\x00\xf1\x50\xee\x7b\x8e\x6d\xdd\x97\x7d\xdd\x21\xc5\x87\xc3\x77\xfb\x47\xcf\x3d\x08\x08\xea\x21\xf6\x1b\xef\x3b\xee\xf7\x6f\xe2\x3f\xc5\x2a\xfb\xf9\xe9\x7f\x01\x00\x00\xff\xff\x7a\x2a\x6b\x88\xac\x27\x00\x00")

func envDevelopmentJsonBytes() ([]byte, error) {
	return bindataRead(
		_envDevelopmentJson,
		"env-development.json",
	)
}

func envDevelopmentJson() (*asset, error) {
	bytes, err := envDevelopmentJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "env-development.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"databases-development.json": databasesDevelopmentJson,
	"env-development.json":       envDevelopmentJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"databases-development.json": {databasesDevelopmentJson, map[string]*bintree{}},
	"env-development.json":       {envDevelopmentJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
