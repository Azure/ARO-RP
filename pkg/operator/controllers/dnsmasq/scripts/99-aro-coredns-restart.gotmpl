{{ define "99-aro-coredns-restart" }}
#!/bin/sh
# This is a NetworkManager dispatcher script to restart dnsmasq
# in the event of a network interface change (e. g. host servicing event https://learn.microsoft.com/en-us/azure/developer/intro/hosting-apps-on-azure)
# this will restart dnsmasq, reapplying our /etc/resolv.conf file and overwriting any modifications made by NetworkManager

interface=$1
action=$2

log() {
    logger -i "$0" -t '99-DNSMASQ-RESTART SCRIPT' "$@"
}

# log dns configuration information relevant to SRE while troubleshooting
# The line break used here is important for formatting
log_dns_files() {
    log "/etc/resolv.conf contents

    $(cat /etc/resolv.conf)"

    log "$(echo -n \"/etc/resolv.conf file metadata: \") $(ls -lZ /etc/resolv.conf)"

    log "/etc/resolv.conf.dnsmasq contents

    $(cat /etc/resolv.conf.dnsmasq)"

    log "$(echo -n "/etc/resolv.conf.dnsmasq file metadata: ") $(ls -lZ /etc/resolv.conf.dnsmasq)"
}

if [[ $interface == eth* && $action == "up" ]] || [[ $interface == eth* && $action == "down" ]] || [[ $interface == enP* && $action == "up" ]] || [[ $interface == enP* && $action == "down" ]]; then
    log "$action happened on $interface, connection state is now $CONNECTIVITY_STATE"
    log "Pre aro-coredns restart file information"
    log_dns_files
    log "restarting aro-coredns now"
    if systemctl try-restart aro-coredns --wait; then
        log "aro-coredns successfully restarted"
        log "Post aro-coredns restart file information"
        log_dns_files
    else
        log "failed to restart aro-coredns"
    fi
fi

exit 0
{{ end }}