{{ define "aro-dnsmasq-pre.sh" }}
#!/bin/bash
# This bash script is a part of the ARO DnsMasq configuration
# It's deployed as part of the 99-aro-dns-* machine config
# See https://github.com/Azure/ARO-RP
# This file can be rerun and the effect is idempotent, output might change if the DHCP configuration changes

set -o pipefail \
    -o errexit \
    -o nounset

main() {
    local -r restore_context="${1:-true}"

    tmp_self_resolv="$(mktemp)"
    tmp_net_resolv="$(mktemp)"
    # shellcheck disable=SC2064
    trap "cleanup $tmp_net_resolv $tmp_self_resolv" EXIT

    echo "# Generated for dnsmasq.service - should point to self" > "$tmp_self_resolv"
    echo "# Generated for dnsmasq.service - should contain DHCP configured DNS" > "$tmp_net_resolv"

    local -r br_ex_device="br-ex"
    local search
    local nameserver
    local local_ips
    if nmcli device show "$br_ex_device" 1> /dev/null; then
        echo "OVN mode - $br_ex_device device exists"

        get_raw_values br_ex_device \
                       search \
                       nameserver \
                       local_ips
    else
        local -r net_dev="$(nmcli --get device connection show --active | head -n 1)" #there should be only one active device
        echo "OVS SDN mode - $br_ex_device not found, using device $net_dev"

        get_raw_values br_ex_device \
                       search \
                       nameserver \
                       local_ips
    fi

    echo -e "Using values\n\tsearch=$search\n\tnameserver=$nameserver\n\tlocal_ips=$local_ips"

    #search line
    echo "search $search" | tr '\n' ' ' >> "$tmp_net_resolv"
    echo "" >> "$tmp_net_resolv"
    echo "search $search" | tr '\n' ' ' >> "$tmp_self_resolv"
    echo "" >> "$tmp_self_resolv"

    #nameservers as separate lines
    echo "$nameserver" | while read -r line; do
        echo "nameserver $line" >> "$tmp_net_resolv"
    done
        # device IPs are returned in address/mask format
    echo "$local_ips" | while read -r line; do
        echo "nameserver $line" | cut -d'/' -f 1 >> "$tmp_self_resolv"
    done

    cp_files tmp_net_resolv \
             tmp_self_resolv \
             "$restore_context"
}

# get_raw_values
# args:
# 1) net_dev - nameref; network device to get settings from
# 2) search_raw - nameref; Empty variable for assigning the search domain
# 3) nameserver_raw - nameref; Empty variable for assigning the nameserver value
# 4) local_ips_raw - nameref; Empty variable for assigning the local ips value
get_raw_values() {
    local -n net_dev="$1"
    local -n search_raw="$2"
    local -n nameserver_raw="$3"
    local -n local_ips_raw="$4"

    # Get DNS search strings
    # shellcheck disable=SC2034
    search_raw="$(nmcli --get IP4.DOMAIN device show $net_dev)"
    # Get DNS servers
    # shellcheck disable=SC2034
    nameserver_raw=$(nmcli --get IP4.DNS device show $net_dev | tr -s " | " "\n")
    # shellcheck disable=SC2034
    local_ips_raw=$(nmcli --get IP4.ADDRESS device show $net_dev)
}

# cp_files
# copy files to destination and fix mode, selinux context
# args:
# 1) net_resolve - nameref; temporary resolv.conf.dnsmasq file
# 2) self_resolv - nameref; temporary resolv.conf file
# 3) rest_context - boolean; optional, defaults to true. Restores selinux file context
cp_files() {
    local -n net_resolv="$1"
    local -n self_resolv="$2"
    local rest_context="${3:-true}"

    local -r resolvconf="/etc/resolv.conf"
    local -r resolvconf_dnsmasq="/etc/resolv.conf.dnsmasq"

    echo "Updating $resolvconf_dnsmasq"
    /bin/cp "$net_resolv" "$resolvconf_dnsmasq"
    echo "Updating mode of $resolvconf_dnsmasq"
    chmod 0744 "$resolvconf_dnsmasq"

    echo "Updating $resolvconf"
    /bin/cp "$self_resolv" "$resolvconf"

    if $rest_context; then
        echo "Restoring selinux context of $resolvconf"
        /usr/sbin/restorecon "$resolvconf"
    fi
}

cleanup() {
    local -a tmp_dirs="$@"
    # shellcheck disable=SC2068
    for d in ${tmp_dirs[@]}; do
        [ -d "$d" ] && rm -fr "$d"
    done
}

main "$@"

{{ end }}