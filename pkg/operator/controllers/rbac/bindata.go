// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x4f\xaf\xe3\xb8\x0d\xbf\xbf\x4f\x61\x6c\x0f\x0b\x14\x78\x19\xf4\x56\xbc\x1e\x77\x8b\xa2\x40\xd1\x05\x06\xd3\xde\x19\x99\xb1\xb9\x91\x45\x0d\x45\xe5\x4d\xfa\xe9\x0b\xc9\xb2\x63\xe7\x9f\xf3\x9c\x9d\x39\xc5\xa6\x24\xfe\x48\x8a\xa2\x48\x3a\x7f\xaa\x7e\xe1\x1a\xab\x06\x1d\x0a\x28\xd6\xd5\xf6\x58\xb5\x60\xf6\x9f\x1a\x74\x35\x05\xc3\x07\x94\xa3\x01\xd3\xe2\xdf\xaa\x5f\x7f\xab\xfe\xfd\xdb\x97\xea\xef\xbf\xfe\xf3\xcb\xe6\x05\x3c\xfd\x17\x25\x10\xbb\xb7\x4a\xb6\x60\x36\x10\xb5\x65\xa1\xff\x81\x12\xbb\xcd\xfe\xaf\x61\x43\xfc\xe9\xf0\x97\x97\x3d\xb9\xfa\xad\xfa\xc5\xc6\xa0\x28\x9f\xd9\xe2\x4b\x87\x0a\x35\x28\xbc\xbd\x54\x95\x11\xcc\x0b\xbe\x50\x87\x41\xa1\xf3\x6f\x95\x8b\xd6\xbe\x54\x95\x83\x0e\xdf\xaa\x70\x0c\x8a\xdd\x1b\x08\xbf\x06\xc1\x17\x89\x16\xc3\xdb\xcb\x6b\x05\x9e\xfe\x21\x1c\x7d\x48\x4c\x5e\xab\x9f\x7e\x7a\xa9\x2a\xc1\xc0\x51\x0c\x16\x9a\xe1\xce\xb3\x43\xa7\x41\x41\x63\xc0\xf0\x52\x55\x07\x94\x6d\x19\x6e\x50\xf3\xaf\xa5\xa0\x8f\x32\x74\x3b\x6a\x3a\xf0\x21\xbf\xa2\xab\x3d\x93\xd3\xf2\x76\xc0\xe1\xd1\x52\x47\x2a\xe0\x1a\xec\xdf\x93\x26\xc1\x83\x19\x5e\xb9\x2e\x4f\x3e\x19\x30\x28\x3a\x3d\xb0\x8d\x1d\x1a\x0b\xd4\x5d\x1f\x2a\x54\xae\xc7\x07\xc5\xce\x5b\xd0\x32\x22\xe8\x2d\x99\x6c\x4a\xc3\x4e\x85\xad\x45\x19\x86\x7a\x2d\xbe\x46\x56\xe8\x49\x01\xe5\x40\x06\xc1\x18\x8e\x83\xd4\x85\x76\xcf\x4a\xe9\xe1\x1d\xd4\xb4\x8f\xd9\x2b\x49\xfb\xc9\x72\x73\xc9\xf1\x62\x39\xd4\x1d\x85\xe4\x4c\x82\x0d\x05\x95\xa9\x13\x5d\x32\xee\xa2\x82\x92\x6b\xde\x71\xdb\x32\xef\xfb\x7d\x89\xfd\xa2\x5e\x99\x03\x58\xaa\xef\xce\x59\xa1\x23\x78\xc2\x6f\x8a\x2e\xc9\x19\x6e\x0a\x67\x62\x50\xee\x06\x62\x8d\x3b\x72\xf4\x1c\xe8\x43\x36\x01\x4f\xcf\xed\x60\x61\x80\xb2\x61\x8f\x2e\xb4\xb4\xd3\x5b\x40\x82\x5f\x23\x06\x1d\x9d\x67\x15\x5a\x3e\x45\x97\x27\xac\xb8\xae\xe0\x81\xc2\xb8\x9d\x35\x60\xc7\x2e\x60\x71\xd5\x1a\xbd\xe5\x63\x37\x1e\xb8\xe2\xfc\xe3\x78\x3a\xf0\xb8\x8b\xb6\x10\x56\x8a\xb7\x60\x87\x93\x10\xbd\x6f\xfd\x40\xa4\x47\x0f\x95\xf0\x02\x67\xd3\x47\xe5\xb5\xa2\x47\x6d\xd1\x69\x09\x3b\x37\x3d\x53\x79\x8f\x2e\xed\x27\xbe\x9f\x01\xe5\xe0\x8f\xd7\x19\x9f\x5f\x25\x97\x7c\x03\xda\x5d\x88\xdb\xdf\xd1\x28\x18\x83\x21\x9c\x30\x66\x83\xf9\xce\x98\x8d\x5d\x5f\xf4\x61\xc1\x1e\xb2\xad\xb0\xc5\x2d\xb9\x9a\x5c\x13\xce\xe9\xc5\x7b\xcf\x67\x0c\x43\x0f\x5f\x56\x1f\x11\x6b\x78\xbd\x62\xb2\x1f\x62\x96\x89\xb6\x82\x41\x85\xcc\x33\xc1\x31\x2a\x07\x03\x96\x5c\x73\x89\x94\x45\x62\xa7\x60\x3d\xd7\xc3\xcc\x67\x9c\x7d\x80\x7a\x6c\xe3\xe7\x88\xaf\x55\x07\xa6\x25\x87\x4f\x0b\xb2\xcd\xe4\x4b\x54\x61\xf7\x3b\x6f\x7b\xac\xf2\xb0\x86\x7b\x24\x5b\x2f\x28\x98\xe7\x9c\x82\x5e\x21\x7c\x6f\xc0\x47\xa3\x9e\x41\x51\xda\xa5\xa0\x84\x77\x2e\xe9\xc9\x24\x6a\x5c\x76\xc6\x7c\xa7\xad\xd4\xc2\x58\x8e\xf5\xc6\xa1\xbe\xb3\xec\x17\xfd\x83\x63\xed\x85\x0e\xa0\x48\xfe\xa9\xcb\x23\xb3\x32\x82\x75\x0a\xc3\x60\x97\x80\xc7\x89\xe1\x49\x6d\xb3\xcc\xcb\x79\x42\x9f\x4f\x84\x2b\x97\xc5\x99\xdf\x8c\x87\x86\x7d\x2a\x43\x58\x66\xc4\x43\x5f\x67\x84\x01\x3b\x8c\xa1\xb3\x76\xa1\x3c\xed\x10\x34\x0a\x36\x63\x42\x4c\x1d\x34\x98\xf2\x09\x74\xea\xd9\x92\xa1\xe9\x40\x79\x74\x3b\x81\xa0\x12\x4d\x5a\x3b\xd0\x52\x5c\x1a\xd8\x96\x1d\x3d\x4f\xdc\x39\x69\x53\x1e\x8b\xc4\x6d\x2c\x67\xcf\x0b\xa7\x30\x3a\xbe\x7c\x1b\x80\x83\x69\xb1\x8e\xeb\x0f\x7e\xd1\x7c\x69\x93\xfb\x59\xc6\x52\xcd\xef\xce\x32\xd4\x33\xbb\xa5\x04\x56\x1c\x58\xcb\x8d\x25\xb7\x9f\x8d\x5d\x10\x1c\x97\x43\x72\x6e\x7d\x6f\x63\x43\x73\xd2\xd7\x48\x66\x1f\x14\x44\x67\xe4\x23\x74\x36\x40\xe7\xef\xdf\x68\xf7\xb5\x4e\x29\xa1\xb7\xe0\xb2\xea\xd9\xd8\x0b\x36\xf0\x5c\x97\x8d\x33\xec\x1c\x1a\xa5\x03\xe9\xd1\xb4\x68\xf6\xab\xa5\x60\xa9\xc9\xdd\x4f\x48\x2c\xc2\xfd\x2a\xf3\x0e\xc0\x58\x6b\xdf\xe4\x3e\x96\x9b\x76\x7d\x8e\xdf\x17\xa9\xb7\x21\x86\x1a\x76\x05\xeb\x9d\xe5\xf7\xb2\x57\x9b\x53\x29\x71\x0b\x29\xcd\x4e\xe7\xa1\x83\xe1\x9c\x10\x0b\xe9\xd1\xe2\x01\xed\x1f\x51\xab\xb5\x68\xbb\x05\x2f\x49\x53\x4c\x0b\xa2\x82\x9e\x03\x29\xcb\x70\x52\xcb\x11\xbe\x35\x61\x85\x38\x39\xe8\x2c\xc8\x33\x0d\x4c\xf9\x51\x05\xa1\xfb\xee\x80\x19\x65\xc4\x5e\xba\x5d\x3f\xc8\x57\xa1\x99\x68\x54\xde\x1e\xce\x6b\xf3\xa2\x52\xfd\x1e\x1f\x3d\xfc\xd3\xc4\x24\x33\xf0\x12\xdd\xea\xa0\x5b\xae\x83\x47\xc1\x6b\x17\x04\x0d\xcb\xda\x6c\x28\x9d\x17\xe3\x68\x63\x9c\xd9\x5d\x05\x28\x71\xed\x15\x54\xc1\xb4\xa9\x26\x7c\x7d\xba\xc5\x90\x40\xf9\xe0\x36\x2c\x57\xb2\x68\xcc\xfa\xef\x48\xf0\x1d\xac\x0d\x13\x1a\xf9\xe9\xdb\x57\x5e\x1d\xfb\x4a\x66\xbc\x60\xda\x32\xab\x45\xb0\xda\x8e\xb1\x7c\xa4\xcf\x5f\x56\x17\xfe\x85\xc1\x2c\x04\x2d\x3b\x9c\x02\x39\x14\x89\x4e\xa9\xc3\xa9\x03\x9e\x1a\x1a\x53\xea\x3e\x6e\xd1\xa2\x4e\x49\x33\x5c\xcf\x6c\xaf\x90\xd7\xaa\x84\xa9\xca\xba\x1d\xf5\x27\xfd\x48\xbe\xeb\xb7\x97\x9c\xa9\x59\xe8\x4a\x05\x65\xc9\xc1\x60\xcc\xcb\x0a\xa5\xe4\x74\x23\x87\xb5\xba\xb1\xcb\x71\xd9\x35\x1b\xc3\x82\x1c\x36\x86\xbb\x2b\xb9\xa8\x45\xd1\x0e\x5c\x0a\x27\x53\xab\x4f\xe9\xa3\x09\x0a\xcf\xf1\x2a\xd8\x9e\x6e\x85\x0e\xb5\xc5\x18\x2e\x08\xb9\xc5\xd0\xab\xd7\xf7\xe0\x66\x3c\xb4\x05\xc7\x79\xce\xda\x28\x34\x29\x2c\x1e\x89\x42\xfd\x89\x14\x8e\x3a\xa8\x35\x2c\xf4\x7b\x7a\x4e\x84\x64\xe9\x5b\x9b\x5d\x62\xa5\xb1\x30\xe6\xcf\x57\xb3\xe9\x49\x3a\xbe\x46\x10\xae\xf1\xa6\x08\xc3\x11\x1c\x45\x58\x01\xf0\xa0\x91\xaf\x15\x34\x67\xf5\xd8\xac\x8a\x31\x81\x6a\xa1\xb1\x1e\x3a\x8b\x12\xa7\x9a\xc6\x04\x0a\x0e\x7c\x68\x59\xcf\x3b\xf9\xa7\x72\x07\xd5\xd4\x97\x75\x4e\x2f\xdf\xbc\xda\x29\x7b\x72\xc6\x29\x45\xa0\xb3\x02\x2d\x91\x4e\xd3\x66\x87\x22\x0d\xcd\xaa\x97\x42\xba\x72\x94\x07\x9f\x9f\x15\x4e\xa3\x21\xcf\x20\x47\xfa\x0d\xdc\x72\x98\x0c\xcc\x42\xc7\x93\xdb\x1a\xee\x46\x0a\x03\x0a\x96\x9b\x42\x9b\xee\x5f\x11\x66\x56\x8c\x92\x0b\x0a\x36\x17\x27\x45\x23\xdb\x4d\x37\x76\xc0\x34\xec\x6a\x3a\xb9\xc9\x40\x6e\xb2\x78\x73\xe9\x7a\x4d\xe3\x36\x18\x21\xff\x44\x64\xf4\x60\xf6\xc9\x58\x9b\xc7\xf4\x2e\xd3\x3b\x70\xb4\x5b\x68\x0c\x5c\x42\xa1\xec\x38\xed\x9c\x59\xba\xc3\x27\x33\xbd\xf0\x8e\x56\x57\x85\xd9\xc7\x8f\x57\x2b\xbf\x9a\x82\xc4\x6c\xb9\x6d\xac\x9b\xe1\x93\x40\xba\xda\xd0\xc4\x54\x63\x3c\x17\x7e\x7c\xdf\x19\xdd\x2c\x37\xd7\xcb\xcc\xd2\x99\x58\x0d\x97\x4b\x91\x45\xa8\x3c\xeb\x7a\x57\xe7\xc6\xa6\x7d\x84\xf1\x4a\xe1\xf3\x17\xc7\xc5\x36\x91\xb7\x84\xf5\xd0\x15\x3f\xff\x56\xf9\xb0\x13\x3e\x82\xf5\x51\x90\x3b\xaa\xdd\xfc\xe4\xfd\x23\x3f\x04\xdc\x93\x2f\x5d\xfe\x8b\xad\xf8\xa8\x6b\xf9\x97\x9e\xce\xc7\x8b\xb2\x35\x58\xfd\xd5\x73\x2f\xf5\x18\xfa\x07\x4f\x5d\xfc\x43\x80\xd8\x90\xeb\x9b\x64\x4b\xf6\x03\xd7\x20\x58\xcb\xe6\x99\x14\x76\x44\xfd\x30\xd8\x69\x6d\xbe\xff\xbf\xa5\x6b\x34\xa8\x00\xad\x6e\xe2\x0c\x89\xc7\xa6\x5c\xb5\x37\xed\x5d\xfe\x94\x30\xe4\x29\x93\x8c\xef\x6c\xa4\x24\x26\x57\x86\xd6\x8a\xb8\x20\xd9\x79\x9a\x15\xe8\x54\xdf\xa4\xd4\xaa\x5f\x6e\xc0\x83\x21\xa5\x79\x51\x72\xa9\xc7\xa9\xcc\x5e\x29\xee\xf0\x2f\x8d\xa5\x2f\x1c\xc2\x7b\x94\x61\x72\x4e\x2b\xdc\x90\x7f\xdc\xa7\xae\x95\x2b\x3a\x5c\xfa\xec\x32\xb9\xa2\xcb\x82\x95\x60\xd1\x37\x02\x35\x6e\xfa\xe4\x6e\x09\xb6\xcc\x7e\x2a\x64\xc4\xb0\xf8\x3f\x86\x49\xf2\x45\x39\x5f\x1f\xbd\x21\x2d\xfe\x7e\xb8\x69\x4a\x01\x3c\x76\xe0\x7d\x89\xf6\x4b\x8d\xb7\xf7\x16\x05\x61\xcb\x51\x17\x3a\x44\xe4\x4f\xed\x03\x3e\xa0\xd8\x1e\x23\xc7\x0f\xf2\x82\x29\x8f\xfd\x50\xbc\x72\xec\x3e\x17\x88\xff\x7c\xfe\x57\x99\xfd\xf3\x9f\x7f\xbe\x5c\xfe\xff\x00\x00\x00\xff\xff\xe9\xba\x5d\x39\x4d\x26\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
