// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x1a\x4d\xaf\xe3\xb8\xed\xfe\x7e\x85\xb1\x3d\x2c\x50\xe0\x79\x50\xf4\x52\xbc\x1e\x77\x8b\xa2\x40\xd1\x05\x06\xd3\xde\x19\x89\xb1\xb9\x91\x45\x0d\x25\xe5\x4d\xfa\xeb\x0b\xc9\xb2\x63\x3b\x1f\xce\x73\x3a\x73\x8a\x4d\x51\xfc\x12\xc5\x2f\xe7\x0f\xd5\x2f\xac\xb1\x6a\xd0\xa2\x40\x40\x5d\xed\x4e\x55\x0b\xea\xf0\xa9\x41\xab\xc9\x2b\x3e\xa2\x9c\x14\xa8\x16\xff\x5a\xfd\xfa\x5b\xf5\xaf\xdf\xbe\x54\x7f\xfb\xf5\x1f\x5f\xea\x17\x70\xf4\x1f\x14\x4f\x6c\xdf\x2a\xd9\x81\xaa\x21\x86\x96\x85\xfe\x0b\x81\xd8\xd6\x87\xbf\xf8\x9a\xf8\xd3\xf1\x4f\x2f\x07\xb2\xfa\xad\xfa\xc5\x44\x1f\x50\x3e\xb3\xc1\x97\x0e\x03\x68\x08\xf0\xf6\x52\x55\x4a\x30\x6f\xf8\x42\x1d\xfa\x00\x9d\x7b\xab\x6c\x34\xe6\xa5\xaa\x2c\x74\xf8\x56\xf9\x93\x0f\xd8\xbd\x81\xf0\xab\x17\x7c\x91\x68\xd0\xbf\xbd\xbc\x56\xe0\xe8\xef\xc2\xd1\xf9\x44\xe4\xb5\xfa\xe9\xa7\x97\xaa\x12\xf4\x1c\x45\x61\x81\x29\xee\x1c\x5b\xb4\xc1\x07\x08\xd1\xa3\x7f\xa9\xaa\x23\xca\xae\x2c\x37\x18\xf2\xaf\x21\x1f\x1e\x25\x68\xf7\xd4\x74\xe0\x7c\x7e\x45\xab\x1d\x93\x0d\xe5\xed\x88\xc3\xa3\xa1\x8e\x82\x80\x6d\xb0\x7f\x4f\x9a\x78\x07\x6a\x78\x65\x5d\x9e\x5c\x32\xa0\x0f\x68\xc3\x91\x4d\xec\x50\x19\xa0\xee\xfa\x52\x81\xb2\x1e\x1f\x02\x76\xce\x40\x28\x2b\x82\xce\x90\xca\xa6\x54\x6c\x83\xb0\x31\x28\xc3\x52\xaf\xc5\xd7\xc8\x01\x7a\x90\x47\x39\x92\x42\x50\x8a\xe3\x20\x75\x81\xdd\xb3\x52\x7a\x78\x87\xa0\xda\xc7\xec\x95\xa4\xfd\x64\xb8\xb9\xa4\x78\xb1\x1d\x74\x47\x3e\x39\x93\x60\x43\x3e\xc8\xd4\x89\x2e\x09\x77\x31\x40\x20\xdb\xbc\xe3\xae\x65\x3e\xf4\xe7\x12\xfb\x4d\xbd\x32\x47\x30\xa4\xef\xe2\x6c\xd0\x11\x1c\xe1\xb7\x80\x36\xc9\xe9\x6f\x0a\xa7\xa2\x0f\xdc\x0d\x40\x8d\x7b\xb2\xf4\x1c\xd3\x87\x6c\x02\x8e\x9e\x3b\xc1\x42\x00\xa5\x66\x87\xd6\xb7\xb4\x0f\xb7\x18\x09\x7e\x8d\xe8\xc3\xe8\x3c\x9b\xb8\xe5\x5b\x74\x79\xc3\x8a\xeb\x0a\x1e\xc9\x8f\xc7\xa9\x01\x3b\xb6\x1e\x8b\xab\x6a\x74\x86\x4f\xdd\x78\xe1\x8a\xf3\x8f\xeb\xe9\xc2\xe3\x3e\x9a\x02\xd8\x28\xde\x8a\x1d\xce\x42\xf4\xbe\xf5\x03\x39\x3d\x7a\xa9\x84\x57\x28\xab\x3e\x2a\x6f\x15\x3d\x86\x16\x6d\x28\x61\xe7\xa6\x67\x06\x3e\xa0\x4d\xe7\x89\xef\x0b\x46\x39\xf8\xe3\x75\xc2\xcb\x54\x72\x49\xd7\xa3\xd9\xfb\xb8\xfb\x1d\x55\x00\xa5\xd0\xfb\x33\x8f\xd9\x62\xce\x19\xb3\xb5\xeb\x9b\x3e\x2c\xd8\x43\xb6\x15\x36\xb8\x23\xab\xc9\x36\x7e\x09\x2f\xde\xbb\xc4\x18\x96\x1e\x4e\x56\x1f\x11\x6b\x78\xbd\x62\xb2\x1f\x62\x96\x89\xb6\x82\x3e\x08\xa9\x67\x82\x63\x0c\xec\x15\x18\xb2\xcd\x25\xa7\x2c\x12\xdb\x00\xc6\xb1\x1e\x30\x9f\x71\xf6\x81\xd5\x63\x07\x3f\xe7\xf8\x5a\x75\xa0\x5a\xb2\xf8\xb4\x20\xbb\x0c\xbe\xe4\x2a\x6c\x7f\xe7\x5d\xcf\xab\x3c\x6c\xa1\x1e\xc9\xe8\x15\x05\x33\xce\x39\xe8\x15\xc0\xf7\x66\xf8\x68\xd4\x53\x28\x81\xf6\x29\x28\xe1\x9d\x24\x3d\x41\xa2\xc6\x66\x67\xcc\x39\x6d\xa3\x16\xca\x70\xd4\xb5\xc5\xf0\xce\x72\x58\xf5\x0f\x8e\xda\x09\x1d\x21\x20\xb9\xa7\x92\x47\x26\xa5\x04\x75\x0a\xc3\x60\xd6\x18\x8f\x88\xfe\x49\x6d\xb3\xcc\xeb\x75\x42\x5f\x4f\xf8\x2b\xc9\x62\xe1\x37\xe3\xa5\x61\x97\xda\x10\x96\x19\xf0\xd8\xf7\x19\x7e\xe0\xed\xc7\xd0\xa9\xad\x2f\x4f\x7b\x84\x10\x05\x9b\xb1\x20\xa6\x0e\x1a\x4c\xf5\x04\xda\xe0\xd8\x90\xa2\xe9\x82\xa6\x06\x7d\xe8\x48\x84\x65\x2c\x1b\xf2\xca\xe4\x31\x40\xb3\xc4\xb0\x7b\x01\x1f\x24\xaa\xc4\x6c\x80\xa5\x40\x36\xc8\x51\x5c\x60\x59\xe9\x73\x52\xbf\x3c\x16\x15\xdb\x58\x2e\xab\x13\x4e\x71\x77\x7c\xf9\x36\x48\xea\x55\x8b\x3a\x6e\x8f\x14\xc5\x54\x6b\x5e\xd1\x63\x29\x43\x9a\xdf\xad\x61\xd0\x33\x43\xa7\x8a\x57\x2c\x18\xc3\x8d\x21\x7b\x98\xad\x5d\x00\x2c\x97\x5b\xb5\x3c\x2e\x67\x62\x43\x73\xd0\xd7\x48\xea\xe0\x03\x48\x98\x1f\x2c\x74\x6e\x38\xde\x02\x3a\x41\x67\xce\xe0\x6d\x86\x48\x65\xa5\x33\x60\xb3\x35\xb2\xfd\x57\xcc\xe2\x58\x97\xb3\x54\x6c\x2d\xaa\x40\x47\x0a\x27\xd5\xa2\x3a\x6c\x96\x82\x45\x93\xbd\x5f\xd4\x18\x84\xfb\x9d\xea\x1d\x06\x63\xbf\x7e\x93\xfa\xd8\xb2\x9a\xed\x7d\x42\xdf\xe8\xde\x66\x31\xf4\xc1\x1b\x48\xef\x0d\xbf\x97\xb3\xaa\xcf\xed\xc8\x2d\x4e\x09\x3b\x5d\x91\x0e\x86\xab\x43\x2c\x14\x4e\x06\x8f\x68\xfe\x1f\xfd\x5e\x8b\xa6\x5b\xf1\x92\x84\xa2\x5a\x90\x20\xe8\xd8\x53\x60\x19\x2e\x6f\xb9\xd5\xb7\x10\x36\x88\x93\x63\xd2\x8a\x3c\xcb\x10\xe6\x83\x20\x74\xdf\x9d\x61\xe6\x32\xf2\x5e\xcb\xd0\x1f\xa4\x1b\xa0\x99\x07\xe5\x0f\xd5\xc6\x79\x53\xe9\xa0\x4f\x8f\x5e\xfe\x69\x71\x93\x09\x38\x89\x76\x73\x1c\x9e\x67\x8d\xba\x64\xb5\xfa\xdb\xeb\xcd\xf9\x06\x06\x30\x7f\x16\xec\x50\xd3\x24\x96\x5e\x80\xa7\x23\xa0\x4d\x72\xe5\xcc\xf5\xa8\x51\xb4\xf5\x82\x8a\x65\x6b\xa5\x47\x0e\xba\x07\x94\x27\x07\x5a\x27\xb9\x26\xd3\xb0\x11\xb6\x55\xd5\xc4\x4c\x59\xaa\x95\x55\xfb\xab\x5c\x4b\xac\x7f\x85\x10\x40\xb5\xa9\xd7\x7e\x7d\x7a\x74\x93\x98\xf2\xd1\xd6\x2c\x57\xba\x13\xd0\x1d\xd9\x5c\x98\x9c\x76\xe0\x51\x0f\x79\x56\x38\x0e\x25\x0c\xe6\xe3\xd9\x93\xe0\x3b\x18\x33\x85\x91\x9b\xbe\x7d\x65\x3f\xdb\xf1\xdc\x1c\xa8\xf4\x29\xeb\x37\x64\x4c\xa9\x65\xc7\x58\x25\x95\xf7\x16\xc1\x84\x76\xcc\x98\x23\x7c\xfe\xb2\x79\x44\x53\x08\xcc\x02\xfd\x03\x42\x03\x59\x14\x89\x36\x50\x87\xd3\x6b\x7e\x1e\x3d\x4d\xa1\x87\xb8\x43\x83\x61\x0a\x9a\xf1\x3d\x57\x78\x33\xb0\x63\x36\x57\xc0\x5b\x35\xcd\xf7\xfe\x7a\x67\x04\x29\x1c\x04\x30\x2d\xfb\x62\xfd\x5d\xa7\xfa\x1c\x1c\x77\x5e\x09\xb9\x30\x99\xa2\x05\x98\x24\x88\x3d\x49\xf7\x0e\x82\xd3\x1c\xda\x82\xe8\x04\x4b\xa8\x3d\x80\x7d\x18\x10\xcf\x03\xf5\x8b\x25\x8f\x21\x8c\xf3\x0b\x27\xe8\x84\xfb\xf9\x1d\xd9\x66\xc2\x72\x0a\xde\x6e\x0c\x21\x75\xbb\xfe\x98\x4c\xd7\xf9\x6e\xa4\xba\xa4\x4c\xcd\xca\x8c\xd5\x07\x96\x9c\x96\xc6\x2e\xa3\x40\x4a\x87\x32\x52\xd8\xaa\x1b\xdb\x5c\x21\xd8\xa6\x56\x2c\xc8\xbe\x56\xdc\x5d\x09\x1d\x06\x25\x74\x60\x53\x62\x9b\x7a\xe6\x14\x3e\x9a\xa0\xd0\x1c\xed\xbf\x3b\x1f\x45\x87\xa1\xc5\xe8\x2f\x00\x79\x60\xd6\xab\xd7\x47\x92\x19\x8d\xd0\x82\xe5\x8c\xb3\x35\x1f\x4e\xd4\x5c\x69\x21\x93\x42\x29\x4b\x8d\x02\x65\x88\xa0\x81\xdd\x50\xe2\x6d\x94\x61\xd2\xaa\x3f\x92\xfb\xfa\xc0\x9a\x63\xb3\xcc\xdb\x38\x77\xa0\xe7\x44\x48\x66\xb8\x99\x0b\xfb\x0c\xad\x0c\x8c\x0d\xe6\xd5\x76\x73\xd2\xe0\x6e\x11\x84\x35\xde\x14\x61\x08\x95\xa3\x08\x1b\x18\x3c\x68\xe4\x6b\x23\x82\xc5\x84\x63\x36\x17\x50\x9e\xb4\xd0\x38\x61\x58\x44\xf3\xf3\x94\x40\x79\xf2\x16\x9c\x6f\x39\x2c\xbf\x8d\x9d\x07\x08\x18\x94\xbe\x9c\x1c\xf4\xf2\xcd\xe7\x07\xe5\x4c\x16\x94\xc8\x7a\x6a\xda\xe0\xe7\x13\x8c\x94\x3f\x16\x83\x90\x04\x3a\x6f\x9e\x5d\xd7\xb4\x34\x6b\xfa\x0b\xe8\x4a\x90\x61\xb9\x92\x5f\x66\x9f\xc0\x66\x93\x88\xd1\xf0\x0b\x61\x46\xf8\x0d\x89\x4a\x00\x50\x30\x0b\x77\x4f\xba\x81\xbf\x1b\xdd\x14\x04\x30\xdc\x14\xd8\xf4\xbc\x8b\x30\xb3\x71\x10\x59\x1f\xc0\xe4\x3a\xa4\x68\x64\xba\xa9\x23\x0c\x3c\x15\x5b\x4d\x67\xe3\x0c\xe0\x26\x8b\x37\x97\xae\xd7\x74\x91\x3d\x37\xa8\xeb\x40\x1d\x92\xb1\xea\xc7\xf4\x2e\xe8\x1d\x58\xda\xaf\x8c\xe6\x2e\x59\xa1\xec\x39\x9d\x9c\x5a\xab\xdb\x26\x98\x4e\x78\x4f\x9b\x67\x2a\x7d\xe9\x7a\x75\x6e\xa2\xc9\x4b\xcc\x96\xdb\x45\xdd\x6c\x2e\xf0\x7a\x0e\xf5\x03\x61\x32\xd7\xd2\x97\xa1\x30\x95\x47\x1e\x0d\x59\xbc\x81\xb0\x45\xa8\xfe\xc3\x48\xbd\xfe\x6d\xad\x60\x96\xc1\xe4\x66\x76\x79\x8a\xb0\xca\x2a\x63\x5d\x1f\xea\xde\xf0\x98\x8f\x10\xde\x28\x7c\xfe\xc3\xc1\xea\x94\xd8\x19\x42\x3d\x7c\x14\x5b\xfe\x55\xe1\xe1\x1b\xf0\x08\xaf\x8f\x32\xb9\xa3\xda\xcd\x7f\xbc\xfc\xc8\xef\x80\xf7\xe4\x4b\x95\xca\xea\x97\xb8\xb8\x79\x74\x50\xc6\xb1\x1f\x9f\xa7\x6c\xe1\xd5\x67\xc4\x7b\x01\x60\x18\xfd\x3d\x55\xa5\x78\x54\x31\x11\xa9\xc9\xf6\xad\xf8\x9a\xfd\xc0\x36\x08\xc6\xb0\x7a\xa6\xe6\x1f\xb9\x7e\x98\xd9\x79\x6f\x2e\x56\xbe\xa5\x1c\xee\x83\x00\x6d\x9e\xbf\x0e\x55\x52\x5d\xf2\xfc\x4d\x7b\x97\xff\x24\x0d\x45\xd5\xa4\x3c\x5d\xac\x94\x2a\xea\xca\xd2\x56\x11\x57\x24\x5b\xd6\x84\x9e\xce\x0d\x61\xaa\x03\xfb\xed\x0a\x1c\x28\x0a\x34\xef\xe2\x2e\xf5\x38\x4f\x83\x36\x8a\x3b\x4c\xe8\xd6\x3e\x70\x0a\x1f\x50\x06\xe4\x5c\xd3\xd8\xa1\xf8\xb9\x0f\xdd\x2a\x57\xb4\xb8\xf6\xd5\x75\x52\x1f\x94\x0d\x1b\x99\x45\xd7\x08\x68\xac\xfb\xca\x72\x8d\x6d\xc1\x7e\x2a\x64\x44\xbf\xfa\x37\xa6\x49\xe5\x47\xb9\xb9\x18\xbd\x21\x6d\xfe\x7e\x7c\x13\x4a\x61\x78\xea\xc0\xb9\xeb\x93\x90\x0b\xca\xef\x2d\x0a\xc2\x8e\x63\x58\x19\x64\x92\x3b\x0f\x9f\xf8\x88\x62\x7a\x1e\x39\x7e\x90\x13\x4c\x45\xf4\x87\xe2\x95\x65\xfb\xb9\xb0\xf8\xf7\xe7\x7f\x16\xec\x9f\xff\xf8\xf3\xe5\xf6\xff\x05\x00\x00\xff\xff\x44\xab\x56\xb9\x4c\x2a\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
