// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x4f\xaf\xe3\xb8\x0d\xbf\xe7\x53\x18\xdb\xc3\x02\x05\x5e\x06\x45\x2f\xc5\xeb\x71\xb7\x28\x0a\x14\x5d\x60\x30\xed\x9d\x91\x19\x9b\x1b\x59\xd4\x48\x54\xde\xa4\x9f\xbe\x90\x2c\x39\x76\xfe\xd9\x71\x3a\x73\x7a\x16\x25\xf1\x47\x51\x14\xff\xe5\xfd\xa1\xfa\x85\x6b\xac\x1a\x34\xe8\x40\xb0\xae\x76\xa7\xaa\x05\x75\xf8\xd4\xa0\xa9\xc9\x2b\x3e\xa2\x3b\x29\x50\x2d\xfe\xb5\xfa\xf5\xb7\xea\x5f\xbf\x7d\xa9\xfe\xf6\xeb\x3f\xbe\x6c\x37\x60\xe9\x3f\xe8\x3c\xb1\x79\xaf\xdc\x0e\xd4\x16\x82\xb4\xec\xe8\xbf\x20\xc4\x66\x7b\xf8\x8b\xdf\x12\x7f\x3a\xfe\x69\x73\x20\x53\xbf\x57\xbf\xe8\xe0\x05\xdd\x67\xd6\xb8\xe9\x50\xa0\x06\x81\xf7\x4d\x55\x29\x87\x69\xc3\x17\xea\xd0\x0b\x74\xf6\xbd\x32\x41\xeb\x4d\x55\x19\xe8\xf0\xbd\xf2\x27\x2f\xd8\xbd\x83\xe3\x37\xef\x70\xe3\x82\x46\xff\xbe\x79\xab\xc0\xd2\xdf\x1d\x07\xeb\x23\x93\xb7\xea\xa7\x9f\x36\x55\xe5\xd0\x73\x70\x0a\x33\x4d\x71\x67\xd9\xa0\x11\x2f\x20\xc1\xa3\xdf\x54\xd5\x11\xdd\x2e\x4f\x37\x28\xe9\xaf\x26\x2f\x4b\x19\x9a\x3d\x35\x1d\x58\x9f\x86\x68\x6a\xcb\x64\x24\x8f\x8e\x58\x3e\x35\x75\x24\x0e\x4c\x83\xfd\x38\x9e\xc4\x5b\x50\x65\xc8\x75\xfe\xb2\x51\x81\x5e\xd0\xc8\x91\x75\xe8\x50\x69\xa0\xee\xf6\x54\xa6\x72\x3d\x7c\x08\x76\x56\x83\xe4\x19\x87\x56\x93\x4a\xaa\x54\x6c\xc4\xb1\xd6\xe8\xca\x54\x7f\x8a\xaf\x81\x05\x7a\x92\x47\x77\x24\x85\xa0\x14\x87\x22\x75\xa6\x3d\xd2\x52\xfc\xf8\x00\x51\xed\x32\x7d\x45\x69\x3f\x69\x6e\xae\x39\x5e\x6d\x87\xba\x23\x1f\x8d\xc9\x61\x43\x5e\xdc\xd8\x88\xae\x19\x77\x41\x40\xc8\x34\x1f\xb8\x6b\x99\x0f\xfd\xbd\x84\x7e\x53\x7f\x98\x23\x68\xaa\x1f\xae\x59\x71\x46\xb0\x84\xdf\x04\x4d\x94\xd3\xdf\x15\x4e\x05\x2f\xdc\x15\x62\x8d\x7b\x32\xf4\x1a\xe8\x22\x9d\x80\xa5\xd7\x6e\x30\x33\x40\xb7\x65\x8b\xc6\xb7\xb4\x97\x7b\x40\x0e\xbf\x06\xf4\x32\x18\xcf\x2a\xb4\xf4\x8a\xae\x5f\x58\x36\x5d\x87\x47\xf2\xc3\x75\xd6\x80\x1d\x1b\x8f\xd9\x54\x6b\xb4\x9a\x4f\xdd\xf0\xe0\xb2\xf1\x0f\xf3\xf1\xc1\xe3\x3e\xe8\x4c\x58\x29\xde\x8c\x1e\xce\x42\xf4\xb6\xf5\x03\x91\x96\x3e\x2a\xc7\x33\x9c\x55\xef\x95\xd7\x8a\x1e\xa4\x45\x23\xd9\xed\xdc\xb5\x4c\xe1\x03\x9a\x78\x9f\xf8\x71\x01\x94\x9c\x3f\xde\x66\x7c\x19\x4a\xae\xf9\x7a\xd4\x7b\x1f\x76\xbf\xa3\x12\x50\x0a\xbd\x3f\x63\x4c\x26\x53\xcc\x98\xcc\xdd\xde\xf4\xb4\x60\x8b\x74\xeb\x58\xe3\x8e\x4c\x4d\xa6\xf1\x97\xf4\x6c\xbd\x97\x2b\xca\xd4\xe2\x60\xf5\x8c\x58\x65\x78\x43\x65\x3f\x44\x2d\xa3\xd3\x3a\xf4\xe2\x48\xbd\xe2\x1c\x83\xb0\x57\xa0\xc9\x34\xd7\x48\x49\x24\x36\x02\xda\x72\x5d\x56\xbe\x62\xec\x05\x6a\xd9\xc5\x4f\x11\xdf\xaa\x0e\x54\x4b\x06\x5f\x16\x64\x97\xc8\xd7\xa8\x8e\xcd\xef\xbc\xeb\xb1\xf2\xc7\x1a\xee\x81\x74\x3d\x73\xc0\xb4\xe6\xec\xf4\x32\xe1\x7b\x03\x2e\xf5\x7a\x0a\x9d\xd0\x3e\x3a\x25\x7c\x10\xa4\x47\x8b\xa8\x31\xc9\x18\x53\x4c\x5b\x79\x0a\xa5\x39\xd4\xca\x61\x1d\xfd\x21\xe8\x39\x0b\x19\x16\xfa\x17\x61\xd3\x25\xcc\x07\xec\x3e\xb0\xfb\x1b\x5e\xfb\xe2\x02\x07\xeb\x65\x1b\xeb\x01\x76\x13\xe2\xb1\x4f\xf8\x7d\xc1\xf6\x83\x0f\xab\x8d\xcf\x5f\x7b\x04\x09\x0e\x9b\x21\x33\xa5\x0e\x4a\x22\x4c\x66\xef\xc0\x8b\x0b\x2a\x2e\x29\xb4\xe8\x07\xca\x6e\x83\xf2\xc1\xee\xd0\x0f\x38\x8a\x9a\x3f\xb3\x38\x6d\xc8\x16\x6e\x1d\x47\x67\x35\x0c\xbe\x51\xe6\xe0\x55\x8b\x75\x58\xff\xbc\xf2\xb1\xe6\x6e\xb0\x5f\xa5\x34\xd5\xfc\x61\x34\x43\x3d\x51\x4a\x4c\x13\x9d\x01\xad\xb9\xd1\x64\x0e\x93\xb9\x2b\x82\xe1\x6c\x8a\x97\xaa\xb5\x3a\x34\x34\x25\x7d\x0d\xa4\x0e\x5e\xc0\xc9\x84\x7c\x82\x4e\x7b\xe8\xec\xe3\xb8\xf1\xf8\xd4\x31\xf1\xb2\x1a\x4c\x3a\x7a\x52\xf6\x8c\x0e\x2c\xd7\xf9\xba\x14\x1b\x83\x4a\xe8\x48\x72\x52\x2d\xaa\xc3\x6a\x29\xd8\xd5\x64\x1e\x87\x7d\x8d\xf0\xb8\x96\x7b\x00\x30\x54\xb4\x77\xb9\x0f\x45\x9d\x5e\x9f\x49\xf7\xa5\xe0\x7d\x88\x52\x29\xae\x60\xbd\xd7\xfc\x91\xef\x6a\x7b\x4e\xd8\xef\x21\xc5\xd5\xf1\x3d\x74\x50\xde\x09\xb1\x23\x39\x69\x3c\xa2\xfe\x7f\x54\x44\x2d\xea\x6e\xc6\x4a\xe2\x12\xd5\x82\x13\x87\x96\x3d\x09\x3b\x5a\xab\xd7\xe4\x49\x66\xe0\xc6\xde\x26\x7d\x8a\x43\xe8\xbe\x3b\x60\x42\x19\xb0\xe7\x42\xd4\x93\x7c\x05\x9a\xd1\x89\xf2\x68\x71\x72\x98\x36\xe5\x12\xf2\xb4\xf4\x6d\x8f\xa3\x7b\x62\x60\x5d\x30\xab\x7d\x6a\xf6\xf1\x4b\xc1\x6b\xe3\x1d\x2a\x76\x6b\x53\x8a\xf8\x1c\x94\xa1\xad\x32\x6a\x7f\x13\x20\xbb\xad\x37\x10\x01\xd5\xc6\xc2\xea\xed\xe5\x3a\x3d\xa7\x77\x33\x47\xcb\xab\x5a\x04\x2d\xed\xe0\x2a\x07\xfa\x74\xb0\xba\x7a\xcd\x0c\x26\x2f\x7c\xfe\xc2\x05\xc8\xa0\x73\xc1\x08\x75\x38\x36\x80\x73\x55\x3e\xa6\x1e\xc2\x0e\x35\xca\x98\x34\xc1\xb5\xcc\xfa\x06\x79\xed\x91\x50\x40\xff\xf9\x76\x76\x08\x0e\xd3\x74\xcb\xfe\x9c\x10\xf4\xed\x83\x5c\x53\xad\x03\x74\xa4\xee\x7b\xf1\x51\x17\x8f\x1f\x1a\xea\x35\x67\x6a\x66\x7a\x39\x5e\xd8\xa5\xd7\x3f\x24\x51\x99\x92\x13\xb0\x81\xc3\xda\xb3\xb1\x49\x8e\xd8\x34\x5b\xc5\x0e\xd9\x6f\x15\x77\x37\x12\x47\x8d\x4e\x3a\x30\xd1\x7f\x8c\xaf\x79\x4c\x1f\x54\x90\x79\x0e\xfa\xdf\xe1\xf0\xd9\xa1\xb4\x18\xfc\x15\x21\x15\xe6\xfd\xf1\xfa\xce\xd5\x84\x87\xb4\x60\x38\xad\x59\xeb\x76\xf2\x33\x5f\x56\xae\x4d\x32\x4f\x4c\xfe\x2a\x93\x2c\x6b\x52\x25\xbd\x4c\x36\x16\x76\xa6\xb4\x9a\x0c\xca\xa4\xbd\xfb\x9a\x98\x4b\xbc\x63\x2f\x9b\xe3\x20\x45\xfb\x65\xa3\x3d\xd0\x6b\x22\x44\x83\xb8\x67\x93\xd9\x87\x2b\x0d\x43\xb2\x7e\x33\x75\x1f\x69\x6b\x8d\x20\x5c\xe3\x5d\x11\x8a\x6b\x1a\x44\x58\x01\xb0\x50\xc9\xb7\x8a\xa4\x8b\x1a\x6f\x52\x19\x29\x4f\xb5\xa3\xa1\xc6\xba\xf0\x9e\xe7\x3a\x49\x79\xf2\x06\xac\x6f\x59\x2e\xdb\xf4\xe7\x12\x0a\x45\xd5\xa3\xd0\x1b\x17\xc6\x8c\x31\xc9\x37\x31\xc6\x72\x27\x17\x9c\xa2\x67\xbe\x28\xfa\x22\xe9\xbc\x6c\xf2\x76\xe3\xd4\xa4\x68\xca\xa4\x1b\x1e\xa7\x3c\xcd\x69\x95\x56\x14\x79\x01\x39\xd0\xef\xe0\xe6\x37\xaf\x60\xe2\xe1\x5e\xbc\x56\xff\xd0\xa1\x29\x10\xd0\xdc\x64\xda\xf8\xfe\xb2\x30\x93\x02\x97\x8c\x17\xd0\xa9\x26\x9a\xbe\x33\xc5\xa6\xa6\xb3\x5d\x14\x72\x93\xe4\x99\x8a\xd3\x1f\x2d\xec\xbc\x72\x64\x5f\xf0\xd8\x16\xd4\x21\x6a\x67\xbb\xec\xa0\x79\x79\x07\x86\xf6\x33\xdd\x85\x6b\xa8\x68\x61\xa7\x9b\xe5\x5e\x4d\xde\x85\x74\x8c\x5d\xa8\x9b\xe2\x02\x63\xfc\x43\x15\x62\x61\xf1\xda\xe3\xb7\x7d\xd3\x71\x3b\xdf\xb7\xce\x2b\x73\xaf\x61\x35\x5c\x6a\x21\xcc\x42\xa5\x55\xb7\xfb\x34\x77\x34\xf8\x0c\xe3\x95\xc2\xa7\x1f\xf3\x66\x1b\x3f\x56\x13\xd6\xa5\xe1\x7c\xf9\x33\xe0\x62\x8b\x58\x82\xf5\x2c\xc8\x83\xa3\xdd\xfd\x35\xf9\x47\xf6\xd8\x1f\xc9\x17\x43\xef\x6c\x97\x3b\xc8\x5a\xfe\xb9\x91\xf3\x7c\xa9\xb6\x06\xab\x77\xfc\x8f\x02\x7f\x69\x1a\xbc\x14\x76\x8b\x83\xd8\x92\xe9\x3b\x63\x73\xfa\x03\xd3\x20\x68\xcd\xea\x95\x3c\x77\x40\x7d\x1a\xec\xbc\x37\x45\xdf\x6f\x31\x88\x79\x71\x40\xab\x3b\x37\x25\xec\x6f\x73\xa0\xbb\xab\xef\xfc\x7b\x7f\xc9\x12\x46\xf9\xd6\xc5\x4c\x4e\x0b\x6e\x4c\xad\x15\x71\x46\xb2\xcb\x24\xc7\xd3\xb9\x08\x8a\x89\x4d\xbf\x5d\x81\x05\x45\x42\xd3\xca\xe5\xfa\x1c\xe7\xe2\x7b\xa5\xb8\xe5\x1f\x20\xe6\x7e\x3c\x70\x7c\x40\x57\x16\xa7\xa0\x6e\x4a\xf4\x7f\x4c\x5d\x2b\x57\x30\x38\xf7\x8b\x86\x75\xbc\xa7\xe2\x9c\xd2\x86\x95\x60\xc1\xcf\xfe\x60\x3f\xca\x4b\x28\xe5\xae\xc3\xdd\xc4\xcd\xdf\x0f\x37\x2e\xc9\x80\xa7\x0e\xac\xbd\x5d\x8b\x5f\x71\xfe\x68\xd1\x21\xec\x38\xc8\x4c\x17\x87\xec\xb9\xc5\xc0\x47\x74\xba\xc7\x48\xaf\x99\xac\xc3\x98\xd3\x3d\xe5\x3d\x0c\x9b\xcf\x19\xe2\xdf\x9f\xff\x99\x57\xff\xfc\xc7\x9f\xaf\xb7\xff\x2f\x00\x00\xff\xff\xa8\x8a\x65\xa3\x36\x25\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
