// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x4f\xaf\xe3\xb8\x0d\xbf\xe7\x53\x18\xdb\xc3\x02\x05\x5e\x06\xbd\x15\xaf\xc7\xdd\xa2\x28\x50\x74\x81\xc1\xb4\x77\x46\x62\x6c\x6e\x64\x51\x23\x51\x79\x93\x7e\xfa\x42\xb2\xec\xd8\xf9\x67\xc7\xd9\x99\x53\x6c\x4a\xe2\x8f\xa4\x28\x8a\xa4\xf3\xa7\xea\x17\xd6\x58\xd5\x68\xd1\x83\xa0\xae\x76\xa7\xaa\x01\x75\xf8\x54\xa3\xd5\x14\x14\x1f\xd1\x9f\x14\xa8\x06\xff\x56\xfd\xfa\x5b\xf5\xef\xdf\xbe\x54\x7f\xff\xf5\x9f\x5f\xb6\x1b\x70\xf4\x5f\xf4\x81\xd8\xbe\x57\x7e\x07\x6a\x0b\x51\x1a\xf6\xf4\x3f\x10\x62\xbb\x3d\xfc\x35\x6c\x89\x3f\x1d\xff\xb2\x39\x90\xd5\xef\xd5\x2f\x26\x06\x41\xff\x99\x0d\x6e\x5a\x14\xd0\x20\xf0\xbe\xa9\x2a\xe5\x31\x2f\xf8\x42\x2d\x06\x81\xd6\xbd\x57\x36\x1a\xb3\xa9\x2a\x0b\x2d\xbe\x57\xe1\x14\x04\xdb\x77\xf0\xfc\x16\x3c\x6e\x7c\x34\x18\xde\x37\x6f\x15\x38\xfa\x87\xe7\xe8\x42\x62\xf2\x56\xfd\xf4\xd3\xa6\xaa\x3c\x06\x8e\x5e\x61\xa1\x29\x6e\x1d\x5b\xb4\x12\x04\x24\x06\x0c\x9b\xaa\x3a\xa2\xdf\x95\xe1\x1a\x25\xff\x1a\x0a\xb2\x94\xa1\xdd\x53\xdd\x82\x0b\xf9\x15\xad\x76\x4c\x56\xca\xdb\x11\xfb\x47\x43\x2d\x89\x07\x5b\x63\xf7\x9e\x34\x09\x0e\x54\xff\xca\xba\x3c\xb9\x64\xc0\x20\x68\xe5\xc8\x26\xb6\xa8\x0c\x50\x7b\x7b\xa8\x50\x59\x0f\x0f\x82\xad\x33\x20\x65\xc4\xa3\x33\xa4\xb2\x29\x15\x5b\xf1\x6c\x0c\xfa\x7e\xa8\xd3\xe2\x6b\x64\x81\x8e\x14\xd0\x1f\x49\x21\x28\xc5\xb1\x97\xba\xd0\x1e\x59\x29\x3d\x7c\x80\xa8\x66\x99\xbd\x92\xb4\x9f\x0c\xd7\xd7\x1c\xaf\x96\x83\x6e\x29\x24\x67\xf2\x58\x53\x10\x3f\x76\xa2\x6b\xc6\x6d\x14\x10\xb2\xf5\x07\xee\x1a\xe6\x43\xb7\x2f\xb1\x5b\xd4\x29\x73\x04\x43\xfa\xe1\x9c\x15\x3a\x82\x23\xfc\x26\x68\x93\x9c\xe1\xae\x70\x2a\x06\xe1\xb6\x27\x6a\xdc\x93\xa5\xd7\x40\x17\xd9\x04\x1c\xbd\xb6\x83\x85\x01\xfa\x2d\x3b\xb4\xa1\xa1\xbd\xdc\x03\xf2\xf8\x35\x62\x90\xc1\x79\x56\xa1\xe5\x53\x74\x7d\xc2\x8a\xeb\x7a\x3c\x52\x18\xb6\x53\x03\xb6\x6c\x03\x16\x57\xd5\xe8\x0c\x9f\xda\xe1\xc0\x15\xe7\x1f\xc6\xd3\x81\xc7\x7d\x34\x85\xb0\x52\xbc\x19\x3b\x9c\x85\xe8\x7c\xeb\x07\x22\x2d\x3d\x54\x9e\x67\x38\xab\x2e\x2a\xaf\x15\x3d\x4a\x83\x56\x4a\xd8\xb9\xeb\x99\xc2\x07\xb4\x69\x3f\xf1\xe3\x02\x28\x07\x7f\xbc\xcd\xf8\xf2\x2a\xb9\xe6\x1b\xd0\xec\x43\xdc\xfd\x8e\x4a\x40\x29\x0c\xe1\x8c\x31\x19\xcc\x77\xc6\x64\xec\xf6\xa2\xa7\x05\x5b\x64\x5b\xcf\x06\x77\x64\x35\xd9\x3a\x5c\xd2\x8b\xf7\x5e\xce\xe8\x87\x16\x5f\x56\xcf\x88\xd5\xbf\xde\x30\xd9\x0f\x31\xcb\x48\x5b\x8f\x41\x3c\xa9\x57\x82\x63\x14\x0e\x0a\x0c\xd9\xfa\x1a\x29\x8b\xc4\x56\xc0\x38\xd6\xfd\xcc\x57\x9c\xbd\x87\x5a\xb6\xf1\x53\xc4\xb7\xaa\x05\xd5\x90\xc5\x97\x05\xd9\x65\xf2\x35\xaa\x67\xfb\x3b\xef\x3a\xac\xf2\xb0\x86\x7b\x24\xa3\x67\x14\xcc\x73\xce\x41\xaf\x10\xbe\x37\xe0\xd2\xa8\xa7\xd0\x0b\xed\x53\x50\xc2\x07\x97\xf4\x68\x12\xd5\x36\x3b\x63\xbe\xd3\x56\x6a\xa1\x0c\x47\xbd\xb5\x28\x1f\xec\x0f\xb3\xfe\xc1\x51\x3b\x4f\x47\x10\x24\xf7\xd2\xe5\x91\x59\x29\x8f\x3a\x85\x61\x30\x73\xc0\xc3\xc4\xf0\xa2\xb6\x59\xe6\xf9\x3c\xa1\xcb\x27\xc2\x8d\xcb\xe2\xc2\x6f\x86\x43\xc3\x2e\x95\x21\xec\x27\xc4\x63\x57\x67\x84\x1e\x3b\x0c\xa1\x53\xdb\x50\x9e\xf6\x08\x12\x3d\xd6\x43\x42\x4c\x2d\xd4\x98\xf2\x09\xb4\xe2\xd8\x90\xa2\xf1\x40\x79\xb4\x7b\x0f\x41\x7c\x54\x69\x6d\x4f\x4b\x71\xa9\x67\x5b\x76\xf4\x32\x71\xe7\xa4\x4d\x79\x2c\x12\x37\xb1\x9c\x3d\xe7\x39\x85\xd1\xe1\xe5\x5b\x0f\x1c\x54\x83\x3a\xae\x3f\xf8\x45\xf3\xb9\x4d\xee\x66\x29\x43\x9a\x3f\xac\x61\xd0\x13\xbb\xa5\x04\xd6\x5b\x30\x86\x6b\x43\xf6\x30\x19\xbb\x22\x58\x2e\x87\xe4\xd2\xfa\xce\xc4\x9a\xa6\xa4\xaf\x91\xd4\x21\x08\x78\x99\x90\x4f\xd0\x9a\x00\xad\x7b\x7c\xa3\x3d\xd6\x3a\xa5\x84\xce\x80\xcd\xaa\x67\x63\xcf\xd8\xc0\xb1\x2e\x1b\xa7\xd8\x5a\x54\x42\x47\x92\x93\x6a\x50\x1d\x56\x4b\xc1\x5e\x93\x7d\x9c\x90\x18\x84\xc7\x55\xe6\x03\x80\xa1\xd6\xbe\xcb\x7d\x28\x37\xcd\xfa\x1c\xbf\x2b\x52\xef\x43\xf4\x35\xec\x0a\xd6\x7b\xc3\x1f\x65\xaf\xb6\xe7\x52\xe2\x1e\x52\x9a\x9d\xce\x43\x0b\xfd\x39\x21\xf6\x24\x27\x83\x47\x34\x7f\x44\xad\xd6\xa0\x69\x67\xbc\x24\x4d\x51\x0d\x78\xf1\xe8\x38\x90\xb0\xef\x4f\x6a\x39\xc2\xf7\x26\xac\x10\x27\x07\x9d\x19\x79\xc6\x81\x29\x3f\x8a\x47\x68\xbf\x3b\x60\x46\x19\xb0\xe7\x6e\xd7\x27\xf9\x0a\xd4\x23\x8d\xca\xdb\xe2\xbc\x36\x2f\x2a\xd5\xef\x69\xe9\xe1\x1f\x27\x26\x99\x81\xf3\xd1\xae\x0e\xba\xe5\x3a\x58\x0a\xae\x6d\xf0\xa8\xd8\xaf\xcd\x86\xd2\x79\x51\x96\xb6\xca\xaa\xfd\x4d\x80\x12\xd7\xde\x40\x04\x54\x93\x6a\xc2\xb7\x97\x5b\x0c\x25\x33\x9d\x51\xad\xcc\x6a\x10\x8c\x34\x43\x2c\x1d\xe8\xd3\x97\xd5\x85\x77\x61\x30\x09\x01\xf3\x1b\x2e\x40\x16\xbd\x8f\x56\xa8\xc5\xb1\x03\x9c\x1b\x0a\x63\xea\x21\xee\xd0\xa0\x8c\x49\x13\x5c\xc7\x6c\x6e\x90\xd7\xaa\x84\xa9\xca\xb9\x1f\x75\x47\xfd\x40\x7e\xe8\x37\xd7\x9c\xa9\x9e\xe9\x0a\x05\x61\x9f\x0f\xe3\x90\x17\x15\x4a\xc9\xa9\x06\x0e\x6b\x75\x63\x9b\xe3\xa2\xad\xb7\x8a\x3d\x72\xd8\x2a\x6e\x6f\xe4\x82\x06\xbd\xb4\x60\xd3\x71\x1e\x5b\x7d\x4c\x1f\x4c\x50\x78\x0e\xa1\x78\x77\x8e\xca\x2d\x4a\x83\x31\x5c\x11\x72\x89\xdf\xa9\xd7\xf5\xc0\x26\x3c\xa4\x01\xcb\x79\xce\xda\x28\xb0\x34\xb1\xcf\xe9\xea\x24\x67\xc4\x1c\x3e\x0a\x69\x92\x87\x36\x1c\x24\xc4\x9d\xed\x9b\x56\x16\x65\xd2\x28\x7e\x4d\xcc\x25\xc1\xaa\x93\xcd\x73\x94\xde\xfa\xfd\x42\x77\xa0\xd7\x44\x48\x0e\x71\xcf\x27\x4b\x48\x55\x06\x86\x34\xfb\x66\xd2\x3d\xb2\xd6\x1a\x41\x58\xe3\x5d\x11\xfa\x48\x31\x88\xb0\x02\x60\xa1\x91\x6f\xd5\x3d\x17\x65\xdb\xa4\xd8\x51\x81\xb4\xa7\xa1\x6c\xba\x08\x66\xe7\xd2\x47\x05\x0a\x16\x5c\x68\x58\x2e\x1b\xfe\xe7\xaa\x08\x45\xe9\xeb\x72\xa8\x93\x6f\x5a\x14\x95\x3d\xb9\xe0\x94\x02\xe5\x45\x1d\x97\x48\xe7\x69\x93\xb3\x9b\x86\x26\x45\x4e\x21\xdd\x88\x38\xfd\xd1\x9c\x9c\x95\xc1\x90\x17\x90\x03\xfd\x0e\x6e\x39\xf3\x0a\x26\x11\xee\xc5\x6d\x0d\x0f\x03\x9a\x02\x01\xc3\x75\xa1\x8d\xf7\xaf\x08\x33\xa9\x59\xc9\x06\x01\x93\x6b\x98\xa2\x91\x69\xc7\x1b\xdb\x63\x2a\xb6\x9a\xce\x6e\xd2\x93\xeb\x2c\xde\x54\xba\x4e\xd3\xb8\x0b\xca\x93\x7b\x21\x80\x3b\x50\x87\x64\xac\xed\x32\xbd\xcb\xf4\x16\x2c\xed\x67\xfa\x07\xd7\x50\xe8\xf7\x9c\x76\x4e\xcd\xa5\x1a\xa3\x99\xce\xf3\x9e\x56\x17\x8f\xd9\xc7\x4f\x37\x0b\x44\x4d\xc1\xc7\x6c\xb9\x5d\xd4\x75\x1f\x84\xd3\x0d\x8c\x2a\xa6\x52\xe4\xb5\xf0\xe3\xba\x06\xea\x76\xbe\x07\x5f\x66\x96\x06\xc6\x6a\xb8\x5c\xb1\xcc\x42\xe5\x59\xb7\x9b\x3f\x77\x36\xed\x19\xc6\x2b\x85\xcf\x1f\x26\x67\xbb\x49\xce\x10\xea\xbe\x79\x7e\xf9\x49\x73\xb1\x13\x2e\xc1\x7a\x16\xe4\x81\x6a\x77\xbf\x8c\xff\xc8\xef\x05\x8f\xe4\x4b\x97\xff\x6c\xc7\x3e\xca\x5a\xfe\xa5\xf5\xf3\x7c\xed\xb6\x06\xab\xbb\x7a\x1e\xa5\x1e\x7d\x9b\xe1\xa5\x8b\xbf\x0f\x10\x5b\xb2\x5d\x2f\x6d\xce\x7e\x60\x6b\x04\x63\x58\xbd\x92\x69\x0f\xa8\x4f\x83\x9d\xd7\xe6\xfb\xff\x5b\xba\x46\x83\x78\xa0\xd5\xbd\x9e\x3e\xf1\xd8\x96\xab\xf6\xae\xbd\xcb\x7f\x17\xfa\x3c\x65\x94\xf1\x5d\x8c\x94\xc4\xe4\xc6\xd0\x5a\x11\x67\x24\xbb\x4c\xb3\x02\x9d\xcb\xb0\x94\x5a\x75\xcb\x15\x38\x50\x24\x34\xad\x9d\xae\xf5\x38\x57\xe3\x2b\xc5\xed\xff\xcc\x31\xf7\x21\xc4\xf3\x01\x7d\x3f\x39\xa7\x15\xb6\xcf\x3f\x1e\x53\xd7\xca\x15\x2d\xce\x7d\x9d\x19\x5d\xd1\x65\xc1\x4a\xb0\xe8\x6a\x0f\x1a\xb7\x5d\x72\x37\x07\x5b\x66\xbf\x14\x32\x62\x98\xfd\xbb\xc3\x28\xf9\xa2\x9c\xaf\x0f\xde\x90\x16\x7f\x3f\xdc\x34\xa5\x00\x9e\x5a\x70\xae\x44\xfb\xb9\xfe\xdc\x47\x83\x1e\x61\xc7\x51\x66\x1a\x49\xe4\xce\x5d\x0e\x3e\xa2\x37\x1d\x46\x8e\x1f\xe4\x3c\xa6\x3c\xf6\xa9\x78\x65\xd9\x7e\x2e\x10\xff\xf9\xfc\xaf\x32\xfb\xe7\x3f\xff\x7c\xbd\xfc\xff\x01\x00\x00\xff\xff\xa1\xae\xf0\xd1\x74\x26\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
