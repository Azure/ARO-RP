// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x4f\xaf\xe3\xb8\x0d\xbf\xbf\x4f\x61\x6c\x0f\x0b\x14\x78\x19\x14\xbd\x14\xaf\xc7\xdd\xa2\x28\x50\x74\x81\xc1\xb4\x77\x46\x66\x6c\x6e\x64\x51\x43\x51\x79\x93\x7e\xfa\x42\xb2\xec\xd8\xf9\xe7\x3c\xa7\x33\xa7\xd8\x94\xc4\x1f\x49\x51\xfc\x23\xe7\x0f\xd5\x2f\x5c\x63\xd5\xa0\x43\x01\xc5\xba\xda\x1e\xab\x16\xcc\xfe\x53\x83\xae\xa6\x60\xf8\x80\x72\x34\x60\x5a\xfc\x6b\xf5\xeb\x6f\xd5\xbf\x7e\xfb\x52\xfd\xed\xd7\x7f\x7c\xd9\xbc\x80\xa7\xff\xa0\x04\x62\xf7\x56\xc9\x16\xcc\x06\xa2\xb6\x2c\xf4\x5f\x50\x62\xb7\xd9\xff\x25\x6c\x88\x3f\x1d\xfe\xf4\xb2\x27\x57\xbf\x55\xbf\xd8\x18\x14\xe5\x33\x5b\x7c\xe9\x50\xa1\x06\x85\xb7\x97\xaa\x32\x82\x79\xc1\x17\xea\x30\x28\x74\xfe\xad\x72\xd1\xda\x97\xaa\x72\xd0\xe1\x5b\x15\x8e\x41\xb1\x7b\x03\xe1\xd7\x20\xf8\x22\xd1\x62\x78\x7b\x79\xad\xc0\xd3\xdf\x85\xa3\x0f\x89\xc9\x6b\xf5\xd3\x4f\x2f\x55\x25\x18\x38\x8a\xc1\x42\x33\xdc\x79\x76\xe8\x34\x28\x68\x0c\x18\x5e\xaa\xea\x80\xb2\x2d\xc3\x0d\x6a\xfe\xb5\x14\xf4\x51\x86\x6e\x47\x4d\x07\x3e\xe4\x57\x74\xb5\x67\x72\x5a\xde\x0e\x38\x3c\x5a\xea\x48\x05\x5c\x83\xfd\x7b\xd2\x24\x78\x30\xc3\x2b\xd7\xe5\xc9\x27\x03\x06\x45\xa7\x07\xb6\xb1\x43\x63\x81\xba\xeb\x43\x85\xca\xf5\xf8\xa0\xd8\x79\x0b\x5a\x46\x04\xbd\x25\x93\x4d\x69\xd8\xa9\xb0\xb5\x28\xc3\x50\xaf\xc5\xd7\xc8\x0a\x3d\x29\xa0\x1c\xc8\x20\x18\xc3\x71\x90\xba\xd0\xee\x59\x29\x3d\xbc\x83\x9a\xf6\x31\x7b\x25\x69\x3f\x59\x6e\x2e\x39\x5e\x2c\x87\xba\xa3\x90\x9c\x49\xb0\xa1\xa0\x32\x75\xa2\x4b\xc6\x5d\x54\x50\x72\xcd\x3b\x6e\x5b\xe6\x7d\xbf\x2f\xb1\x5f\xd4\x2b\x73\x00\x4b\xf5\xdd\x39\x2b\x74\x04\x4f\xf8\x4d\xd1\x25\x39\xc3\x4d\xe1\x4c\x0c\xca\xdd\x40\xac\x71\x47\x8e\x9e\x03\x7d\xc8\x26\xe0\xe9\xb9\x1d\x2c\x0c\x50\x36\xec\xd1\x85\x96\x76\x7a\x0b\x48\xf0\x6b\xc4\xa0\xa3\xf3\xac\x42\xcb\xa7\xe8\xf2\x84\x15\xd7\x15\x3c\x50\x18\xb7\xb3\x06\xec\xd8\x05\x2c\xae\x5a\xa3\xb7\x7c\xec\xc6\x03\x57\x9c\x7f\x1c\x4f\x07\x1e\x77\xd1\x16\xc2\x4a\xf1\x16\xec\x70\x12\xa2\xf7\xad\x1f\x88\xf4\xe8\xa1\x12\x5e\xe0\x6c\xfa\xa8\xbc\x56\xf4\xa8\x2d\x3a\x2d\x61\xe7\xa6\x67\x2a\xef\xd1\xa5\xfd\xc4\xf7\x33\xa0\x1c\xfc\xf1\x3a\xe3\xf3\x54\x72\xc9\x37\xa0\xdd\x85\xb8\xfd\x1d\x8d\x82\x31\x18\xc2\x09\x63\x36\x98\x73\xc6\x6c\xec\xfa\xa2\x0f\x0b\xf6\x90\x6d\x85\x2d\x6e\xc9\xd5\xe4\x9a\x70\x4e\x2f\xde\x7b\x3e\x63\x18\x7a\x38\x59\x7d\x44\xac\xe1\xf5\x8a\xc9\x7e\x88\x59\x26\xda\x0a\x06\x15\x32\xcf\x04\xc7\xa8\x1c\x0c\x58\x72\xcd\x25\x52\x16\x89\x9d\x82\xf5\x5c\x0f\x33\x9f\x71\xf6\x01\xea\xb1\x8d\x9f\x23\xbe\x56\x1d\x98\x96\x1c\x3e\x2d\xc8\x36\x93\x2f\x51\x85\xdd\xef\xbc\xed\xb1\xca\xc3\x1a\xee\x91\x6c\xbd\xa0\x60\x9e\x73\x0a\x7a\x85\xf0\xbd\x01\x1f\x8d\x7a\x06\x45\x69\x97\x82\x12\xde\x49\xd2\x93\x49\xd4\xb8\xec\x8c\x39\xa7\xad\xd4\xc2\x58\x8e\xf5\xc6\xa1\xbe\xb3\xec\x17\xfd\x83\x63\xed\x85\x0e\xa0\x48\xfe\xa9\xe4\x91\x59\x19\xc1\x3a\x85\x61\xb0\x4b\xc0\xe3\xc4\xf0\xa4\xb6\x59\xe6\xe5\x3a\xa1\xaf\x27\xc2\x95\x64\x71\xe6\x37\xe3\xa1\x61\x9f\xda\x10\x96\x19\xf1\xd0\xf7\x19\x61\xc0\x0e\x63\xe8\xac\x5d\x28\x4f\x3b\x04\x8d\x82\xcd\x58\x10\x53\x07\x0d\xa6\x7a\x02\x9d\x7a\xb6\x64\x68\x3a\x50\x1e\xdd\x4e\x20\xa8\x44\x93\xd6\x0e\xb4\x14\x97\x06\xb6\x65\x47\xcf\x0b\x77\x4e\xda\x94\xc7\x22\x71\x1b\xcb\xd9\xf3\xc2\x29\x8c\x8e\x2f\xdf\x06\xe0\x60\x5a\xac\xe3\xfa\x83\x5f\x34\x5f\xda\xe4\x7e\x96\xb1\x54\xf3\xbb\xb3\x0c\xf5\xcc\x6e\xa9\x80\x15\x07\xd6\x72\x63\xc9\xed\x67\x63\x17\x04\xc7\xe5\x90\x9c\x5b\xdf\xdb\xd8\xd0\x9c\xf4\x35\x92\xd9\x07\x05\xd1\x19\xf9\x08\x9d\x0d\xd0\xf9\xfb\x19\xed\xbe\xd6\xa9\x24\xf4\x16\x5c\x56\x3d\x1b\x7b\xc1\x06\x9e\xeb\xb2\x71\x86\x9d\x43\xa3\x74\x20\x3d\x9a\x16\xcd\x7e\xb5\x14\x2c\x35\xb9\xfb\x05\x89\x45\xb8\xdf\x65\xde\x01\x18\x7b\xed\x9b\xdc\xc7\x76\xd3\xae\xaf\xf1\xfb\x26\xf5\x36\xc4\xd0\xc3\xae\x60\xbd\xb3\xfc\x5e\xf6\x6a\x73\x6a\x25\x6e\x21\xa5\xd9\xe9\x3c\x74\x30\x9c\x13\x62\x21\x3d\x5a\x3c\xa0\xfd\x7f\xf4\x6a\x2d\xda\x6e\xc1\x4b\xd2\x14\xd3\x82\xa8\xa0\xe7\x40\xca\x32\x9c\xd4\x72\x84\x6f\x4d\x58\x21\x4e\x0e\x3a\x0b\xf2\x4c\x03\x53\x7e\x54\x41\xe8\xbe\x3b\x60\x46\x19\xb1\x97\xb2\xeb\x07\xf9\x2a\x34\x13\x8d\xca\xdb\xc3\x75\x6d\x5e\x54\xba\xdf\xe3\xa3\x87\x7f\x5a\x98\x64\x06\x5e\xa2\x5b\x1d\x74\x4b\x3a\x78\x14\xbc\x76\x41\xd0\xb0\xac\xad\x86\xd2\x79\x31\x8e\x36\xc6\x99\xdd\x55\x80\x12\xd7\x5e\x41\x15\x4c\x9b\x7a\xc2\xd7\xa7\xaf\x18\x4a\x65\xba\x6c\xd7\x31\x10\x97\x15\x63\xc3\x5d\xde\x5b\x04\xab\xed\x18\x67\x47\xfa\xfc\x65\x75\x53\x5e\x18\xcc\xc2\xc3\x03\x42\x03\x39\x14\x89\x4e\xa9\xc3\xa9\x73\x9c\x2e\x1b\xa6\xd4\x7d\xdc\xa2\x45\x9d\x92\x66\xb8\x9e\xd9\x5e\x21\xaf\x55\x09\x15\xec\x9f\xaf\x17\xbd\x20\x98\x87\x5b\x0e\xc5\xcc\xdb\xce\xf4\x21\x3a\x6e\x83\x11\xf2\xa7\xbc\xbc\x23\xe9\xde\x41\x70\x1a\x53\x5b\x90\x3a\xd1\x6a\x50\xe8\x09\x1c\x74\x9c\x88\xaa\x63\xc3\xe9\x05\xbd\x70\x7f\xe1\x42\xae\x99\x04\xa2\x29\x79\xbd\x8a\x42\xe6\x76\xd2\x99\x5c\x87\xf2\xdd\x63\x73\xc9\x99\x9a\x85\x4b\xb1\xa0\x2c\x39\x16\x8d\x65\x61\xa1\x94\x92\x72\xe4\xb0\x56\x37\x76\x39\x2d\xb8\x66\x63\x58\x90\xc3\xc6\x70\x77\xa5\x14\xb6\x28\xda\x81\x4b\xd1\x6c\xea\x58\x53\xfa\x68\x82\xc2\x73\xb4\xff\xf6\xb4\x15\x1d\x6a\x8b\x31\x5c\x10\xf2\x0d\x47\xaf\x5e\x7f\x05\x38\xe3\xa1\x2d\x38\xce\x73\xd6\x06\xc1\x47\xfb\x9a\x5c\xad\xcf\x4a\x66\xcc\xd1\xb3\x90\x66\x65\x78\xf6\xea\xb8\x75\x43\x08\x71\xa8\xb3\x7b\xf2\xe7\xc4\x7c\x24\x56\xf7\xb2\x09\x47\x1d\xac\x3f\x2c\xf4\x7b\x7a\x4e\x84\xe4\x10\xb7\x7c\xb2\x64\x14\x63\x61\xec\x32\xae\xf6\x1c\x13\x6b\xad\x11\x84\x6b\xbc\x29\xc2\x10\x0c\x47\x11\x56\x00\x3c\x68\xe4\x6b\x6d\xdf\x59\xd7\x3a\xeb\xf5\x4c\xa0\x5a\x68\xec\x1a\xcf\xe2\xf5\xa9\xf3\x33\x81\x82\x03\x1f\x5a\xd6\xf3\xef\x1d\xa7\xa6\x10\xd5\xd4\x97\xdd\x60\x2f\xdf\xbc\x27\x2c\x7b\x72\xc6\x89\x5c\xa0\xa6\xd5\x30\xef\x4a\x53\x86\x38\x6b\x6e\x13\xe9\xb4\x78\x76\xa2\xd3\xd0\xac\xf3\x2b\xa4\x2b\x71\x68\x00\x98\x9d\xa0\xd1\xbc\x67\x90\x23\xfd\x06\x6e\x89\x04\x06\x66\x71\xef\xc9\xcd\x0e\x77\xc3\x9c\x01\x05\xcb\x4d\xa1\x4d\x77\xb5\x08\x33\x6b\xe4\xc9\x05\x05\x9b\xeb\x89\xa2\x91\xed\xa6\xdb\x3d\x60\x1a\x76\x35\x9d\x9c\x67\x20\x37\x59\xbc\xb9\x74\xbd\xa6\x67\xc9\x71\x85\xba\x1e\xcc\x3e\x19\x6b\xf3\x98\xde\x65\x7a\x07\x8e\x76\x0b\x97\x2a\x97\x50\x28\x3b\x4e\x3b\x67\x96\xea\xaf\xc9\x4c\x2f\xbc\xa3\xd5\x1d\x75\xf6\xfc\xe3\xd5\xae\xb9\xa6\x20\x31\x5b\x6e\x1b\xeb\x66\x75\xa1\xe6\xfb\xdb\xe3\xcd\xf2\x07\x88\x32\xb3\xdc\xde\xac\x86\xcb\xed\xda\x22\x54\x9e\x75\xfd\xe6\xeb\xc6\xe6\x7c\x84\xf1\x4a\xe1\xf3\x57\xd9\xc5\xab\x34\x6f\x09\xeb\xe1\xcb\xc1\xf9\xf7\xdc\x87\x9d\xed\x11\xac\x8f\x82\xdc\x51\xed\xe6\xdf\x02\x7e\xe4\xc7\x92\x7b\xf2\xa5\xd4\xbf\xf8\xb9\x22\xea\x5a\xfe\xe5\xde\xeb\xe3\x8d\xeb\x1a\xac\x3e\xc5\xdc\x2b\x3c\x86\x3b\x96\xa7\xd2\x7e\x40\x13\x13\x93\x0d\xb9\xfe\x22\x71\xc9\x7e\xe0\x1a\x04\x6b\xd9\x3c\x53\x67\x8f\xa8\x1f\x06\x3b\xad\xcd\xd9\xff\x5b\x4a\x97\x41\x05\x68\xf5\x45\xd7\x50\x76\x6c\x4a\x4a\xbd\x69\xef\xf2\xc7\x8d\xa1\x4a\x99\xd4\x7b\x67\x23\xa5\x2c\xb9\x32\xb4\x56\xc4\x05\xc9\xce\x8b\xac\x40\xa7\x26\x2c\x15\x56\xfd\x72\x03\x1e\x0c\x29\xcd\x3b\xa7\x4b\x3d\x4e\x57\x11\x2b\xc5\x1d\xfe\xc9\xb2\xf4\x15\x48\x78\x8f\x32\x4c\xce\xe5\x83\x1b\xea\x8c\xfb\xd4\xb5\x72\x45\x87\x4b\x9f\xa6\x26\xa9\xb8\x2c\x58\x09\x16\x7d\x23\x50\xe3\xa6\x2f\xe2\x96\x60\xcb\xec\xa7\x42\x46\x0c\x8b\xff\xf5\x98\x14\x59\x94\xab\xf5\xd1\x1b\xd2\xe2\xef\x87\x9b\xa6\x14\xc0\x63\x07\xde\x5f\xbf\x7d\xb8\xe0\xfc\xde\xa2\x20\x6c\x39\xea\xc2\x2d\x1a\xf9\xd3\x35\x0e\x1f\x50\x6c\x8f\x91\xe3\x07\x79\xc1\x54\xaf\x7e\x28\x5e\x39\x76\x9f\x0b\xc4\xbf\x3f\xff\xb3\xcc\xfe\xf9\x8f\x3f\x5f\x2e\xff\x5f\x00\x00\x00\xff\xff\xdf\xd5\x94\x74\x71\x27\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
