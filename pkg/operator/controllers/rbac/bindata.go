// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x4f\xaf\xe3\xb8\x0d\xbf\xe7\x53\x18\xdb\xc3\x02\x05\x5e\x06\x45\x2f\xc5\xeb\x71\xb7\x28\x0a\x14\x5d\x60\x30\xed\x9d\x91\x19\x9b\x1b\x59\xd4\x48\x54\xde\xa4\x9f\xbe\x90\x2c\x39\x76\xfe\xd9\x71\x3a\x73\x7a\x36\x45\xf3\x9f\xa8\x1f\x49\xe5\xfd\xa1\xfa\x85\x6b\xac\x1a\x34\xe8\x40\xb0\xae\x76\xa7\xaa\x05\x75\xf8\xd4\xa0\xa9\xc9\x2b\x3e\xa2\x3b\x29\x50\x2d\xfe\xb5\xfa\xf5\xb7\xea\x5f\xbf\x7d\xa9\xfe\xf6\xeb\x3f\xbe\x6c\x37\x60\xe9\x3f\xe8\x3c\xb1\x79\xaf\xdc\x0e\xd4\x16\x82\xb4\xec\xe8\xbf\x20\xc4\x66\x7b\xf8\x8b\xdf\x12\x7f\x3a\xfe\x69\x73\x20\x53\xbf\x57\xbf\xe8\xe0\x05\xdd\x67\xd6\xb8\xe9\x50\xa0\x06\x81\xf7\x4d\x55\x29\x87\xe9\x83\x2f\xd4\xa1\x17\xe8\xec\x7b\x65\x82\xd6\x9b\xaa\x32\xd0\xe1\x7b\xe5\x4f\x5e\xb0\x7b\x07\xc7\x6f\xde\xe1\xc6\x05\x8d\xfe\x7d\xf3\x56\x81\xa5\xbf\x3b\x0e\xd6\x47\x21\x6f\xd5\x4f\x3f\x6d\xaa\xca\xa1\xe7\xe0\x14\x66\x9a\xe2\xce\xb2\x41\x23\x5e\x40\x82\x47\xbf\xa9\xaa\x23\xba\x5d\x5e\x6e\x50\xd2\x5f\x4d\x5e\x96\x0a\x34\x7b\x6a\x3a\xb0\x3e\xbd\xa2\xa9\x2d\x93\x91\xfc\x76\xc4\xf2\xa8\xa9\x23\x71\x60\x1a\xec\xdf\xa3\x27\xde\x82\x2a\xaf\x5c\xe7\x27\x1b\x03\xe8\x05\x8d\x1c\x59\x87\x0e\x95\x06\xea\x6e\x2f\x65\x2a\xd7\xc3\x83\x60\x67\x35\x48\x5e\x71\x68\x35\xa9\x14\x4a\xc5\x46\x1c\x6b\x8d\xae\x2c\xf5\x5e\x7c\x0d\x2c\xd0\x93\x3c\xba\x23\x29\x04\xa5\x38\x14\xab\x33\xed\x51\x94\xe2\xc3\x07\x88\x6a\x97\xc5\x2b\x5a\xfb\x49\x73\x73\x2d\xf1\xea\x73\xa8\x3b\xf2\x31\x99\x1c\x36\xe4\xc5\x8d\x93\xe8\x5a\x70\x17\x04\x84\x4c\xf3\x81\xbb\x96\xf9\xd0\xef\x4b\xe8\x3f\xea\x9d\x39\x82\xa6\xfa\x21\xcf\x0a\x1f\xc1\x12\x7e\x13\x34\xd1\x4e\x7f\xd7\x38\x15\xbc\x70\x57\x88\x35\xee\xc9\xd0\x6b\x4a\x17\xc5\x04\x2c\xbd\xb6\x83\x60\x53\x5e\x5f\xe7\x7c\x4e\x26\x87\x47\xf2\x43\x80\x6b\xc0\x8e\x8d\xc7\x9c\x3c\x35\x5a\xcd\xa7\x6e\x38\x02\x39\x1d\x87\xf5\x78\x04\x71\x1f\x74\x26\xac\x34\x6f\xcb\x16\x8d\x6f\x69\x2f\x37\x43\x70\x36\xa2\xdf\xed\x1f\xa8\x69\x69\x9a\x3b\x9e\x91\xac\x7a\x9c\x5c\x6b\x7a\x90\x16\x8d\x64\x20\xb8\x9b\x2b\xc2\x07\x34\x71\x3f\xf1\xe3\x42\x51\x82\x63\xbc\x2d\xf8\x12\xdc\xaf\xe5\x7a\xd4\x7b\x1f\x76\xbf\xa3\x12\x50\x0a\xbd\x3f\xeb\x98\x2c\x26\x14\x9f\xac\xdd\xfe\xe8\x69\xc3\x16\xc5\xd6\xb1\xc6\x1d\x99\x9a\x4c\xe3\x2f\xe9\x39\x7b\x2f\x39\xca\xd2\xe2\xf2\xf1\x8c\x59\xe5\xf5\x46\xc8\x7e\x48\x58\x46\xde\x3a\xf4\xe2\x48\xbd\x02\x57\x41\xd8\x2b\xd0\x64\x9a\x6b\x4d\xc9\x24\x36\x02\xda\x72\x5d\x38\x5f\x49\xf6\xa2\x6a\xd9\xc6\x4f\x35\xbe\x55\x1d\xa8\x96\x0c\xbe\x6c\xc8\x2e\x91\xaf\xb5\x3a\x36\xbf\xf3\xae\xd7\x95\x1f\xd6\x48\x0f\xa4\xeb\x19\x07\x13\xcf\x19\xf4\x32\xe1\x7b\x2b\x5c\x8a\x7a\x0a\x9d\xd0\x3e\x82\x12\x3e\x28\x9b\x23\x26\x6a\x4c\x4a\xc6\xaf\x01\xfd\xda\x7a\xa1\x34\x87\x5a\x39\xac\x23\x1e\x82\x9e\xcb\x90\x81\xd1\xbf\xa8\x36\x6d\xc2\x8c\xb6\x5c\xab\x4b\x1e\x4e\x51\xfb\x62\x03\x87\xec\x65\x1b\x3b\x74\x76\x13\xe2\xb1\x6f\xc1\x7d\xd1\xed\x07\x0c\xab\x8d\xcf\x4f\x7b\x04\x09\x0e\x9b\xa1\x57\xa4\x0e\x4a\x6b\x4a\x66\xef\xc0\x8b\x0b\x2a\xb2\x14\x5a\xc4\x81\xf2\xb5\x41\xf9\x60\x77\xe8\x5f\x38\x9a\x9a\x1f\xb3\x39\x6d\xc8\x19\x6e\x1d\x47\xb0\x1a\x5e\xbe\x51\x96\xe0\x55\x8b\x75\x58\x7f\xbc\xb2\x5b\x73\x3b\xd8\x73\x29\x4d\x35\x7f\x18\xcd\x50\x4f\x82\x12\x1b\x37\x67\x40\x6b\x6e\x34\x99\xc3\x64\xed\x8a\x60\x38\xa7\xe2\x65\x68\xad\x0e\x0d\x4d\x49\x5f\x03\xa9\x83\x17\x70\x32\x21\x9f\xa0\xd3\x1e\x3a\xfb\xb8\x6e\x3c\xf6\x3a\x36\x5e\x56\x83\x49\xae\xa7\x60\xcf\xc4\xc0\x72\x9d\xb7\x4b\xb1\x31\xa8\x84\x8e\x24\x27\xd5\xa2\x3a\xac\xb6\x82\x5d\x4d\xe6\x71\xd9\xd7\x08\x8f\xa7\xab\x07\x0a\x86\x19\xf3\xae\xf4\x61\xcc\xd2\xeb\x7b\xdb\x7e\x38\xbb\xaf\xa2\xcc\x6e\x6b\x44\x0f\x13\xc1\xb5\xdc\xf1\x49\x5a\x21\x7a\xaf\xf9\x23\xa7\xc1\x76\x80\x8c\xbb\x4e\x44\xee\x78\xd4\x3a\x28\x47\x90\xd8\x91\x9c\x34\x1e\x51\xff\x3f\xc6\x9f\x16\x75\x37\x93\x80\x91\x45\xb5\xe0\xc4\xa1\x65\x4f\xc2\x8e\xd6\x3a\x9f\x40\x6a\x46\xdd\x18\xc8\xd2\xa3\x38\x84\xee\xbb\x2b\x4c\x5a\x06\xdd\x73\xd5\xef\x49\xb9\x02\xcd\xc8\xa3\xfc\xb6\xb8\xef\x4c\x1f\xe5\x79\xf1\xb4\x14\x36\xc6\x8d\x43\x12\x60\x5d\x30\xab\xe1\x3a\x27\xfd\x52\xe5\xb5\xf1\x0e\x15\xbb\xb5\xdd\x4a\x3c\x0e\xca\xd0\x56\x19\xb5\xbf\xa9\x20\x23\xe2\x1b\x88\x80\x6a\xe3\xcc\xf6\xf6\xf2\x50\x9e\x3b\xc7\x19\xd7\x32\x57\x8b\xa0\xa5\x1d\x50\x78\xa0\x4f\x5f\x56\x0f\xc6\x59\xc0\xe4\x84\xcf\x6f\xb8\x00\x19\x74\x2e\x18\xa1\x0e\xc7\x09\x70\x1e\xf8\xc7\xd4\x43\xd8\xa1\x46\x19\x93\x26\x7a\x2d\xb3\xbe\x41\x5e\xeb\x12\x0a\xe8\x3f\xdf\x6e\x3c\xc1\x61\x5a\x6e\xd9\x9f\x7b\x8d\xfe\x66\x22\x8f\x6b\xeb\x14\x3a\x52\xf7\x0b\xc4\xe8\xca\x8e\x1f\x26\xea\xb5\x64\x6a\x66\x2e\x6e\xbc\xb0\x4b\xa7\x7f\xe8\xcf\x32\x25\xf7\x76\x83\x84\xb5\xbe\xb1\x49\x40\x6c\x9a\xad\x62\x87\xec\xb7\x8a\xbb\x1b\x3d\xa9\x46\x27\x1d\x98\x88\x1f\xe3\x6d\x1e\xd3\x87\x10\x64\x99\x43\xfc\x77\x38\x3c\x76\x28\x2d\x06\x7f\x45\x48\x33\x7f\xef\x5e\x7f\x4d\x35\x91\x21\x2d\x18\x4e\x3c\x6b\x61\x27\x1f\xf3\x65\x93\xe0\xa4\xa9\xc5\x84\x57\x99\x64\x59\x93\x2a\x9d\x6b\xca\xb1\xb0\x33\xe5\x16\xcb\xa0\x4c\xee\x72\x5f\x33\x73\x09\x3a\x16\x36\x7b\xa0\xd7\x14\xc6\xed\xbf\x97\x81\x19\xb1\x95\x86\xa1\xeb\xbf\x39\x03\x8c\x62\xb3\xc6\x10\xae\xf1\xae\x09\x05\x88\x06\x13\x56\x28\x58\x18\xd2\x5b\xd3\xd6\xc5\xb0\x38\x19\xb1\x94\xa7\xda\xd1\x30\xac\x5d\x60\xe5\x79\xe0\x52\x9e\xbc\x01\xeb\x5b\x96\xcb\x1b\xf8\xf3\x2c\x86\xa2\xea\x51\xa1\x8d\x8c\xb1\xf5\x4c\xf6\x4d\x52\xaf\xec\xc9\x85\xa4\x88\xc3\x17\xd3\x63\x24\x9d\xd9\x26\x27\x35\x2e\x4d\xa6\xaf\x4c\xba\x81\x2f\xe5\x20\x4e\xc7\xbd\x12\xc8\x0b\x95\x03\xfd\x8e\xde\x7c\xc2\x15\x4c\xf0\xec\xc5\x6d\xf5\x0f\xe1\x4b\x81\x80\xe6\x26\xd3\xc6\xfb\x97\x8d\x99\x4c\xca\x64\xbc\x80\x4e\xc3\xd5\x74\x9a\x55\x6c\x6a\x3a\xe7\x45\x21\x37\xc9\x9e\xa9\x39\xbd\x6b\x61\xe7\x95\x23\xfb\x02\x3e\x5b\x50\x87\x18\x9d\xed\x32\x47\x33\x7b\x07\x86\xf6\x33\xd7\x14\xd7\xaa\x62\x86\x9d\x6e\xce\x8d\x35\x79\x17\x92\x1b\xbb\x50\x37\x05\xf0\x62\xb5\x43\x15\xe2\x18\xf1\xda\xe1\xcf\x97\x03\x73\xf3\x6b\xcf\x75\xfb\x06\xe6\x8e\x4b\xcf\x08\x5e\x69\x7c\xfa\xe1\x6c\xf6\x4a\xc7\x6a\xc2\xba\x5c\x25\x5f\xfe\xe4\xb6\x78\x8b\x96\xe8\x7a\x56\xc9\x03\xd7\xee\xfe\x72\xfb\x23\x6f\xcf\x1f\xd9\xc7\x41\xe6\xda\xec\xc4\xb3\x52\x7e\xbe\xa2\x79\x7e\x52\x5a\xa3\xab\x47\xe2\x47\x95\xb8\xcc\xec\x2f\xd5\xc1\x72\x62\xb7\x64\xfa\x3b\xaf\xb9\xf8\x81\x69\x10\xb4\x66\xf5\x4a\x9b\x39\x68\x7d\x5a\xd9\xf9\xdb\x54\x0e\xbf\xc5\xaa\xe2\xc5\x01\xad\xbe\x93\x29\x75\x78\x9b\x2b\xcf\xdd\x78\xe7\xdf\xd6\x4b\xd9\x1e\x35\x40\x17\x2b\xb9\x4e\xdf\x58\x5a\x6b\xe2\x8c\x65\x97\x5d\x87\xa7\xf3\x0c\x92\xbf\xbd\x36\xf7\x3c\xe2\xae\xb4\xaa\xfc\x4f\xc1\xdc\xed\xbf\xe3\x03\xba\xc2\x9c\x8a\xa9\x29\x55\xf7\x31\x75\xad\x5d\xc1\xe0\xdc\x4f\x12\xd6\xf1\x9e\x0a\x06\xa5\x0f\x56\x2a\x0b\x1e\xe7\x70\x60\xd4\x0f\x50\xea\x19\xa5\xf4\x6d\xf1\xe3\xef\xa7\x37\xb2\x64\x85\xa7\x0e\xac\xbd\x3d\xf1\x5e\x49\xfe\x68\xd1\x21\xec\x38\xc8\xcc\x5d\x09\xd9\xf3\x20\xcf\x47\x74\xba\xd7\x91\x0e\x2d\x59\x87\xb1\x97\x7a\x0a\x24\x0c\x9b\xcf\x59\xc5\xbf\x3f\xff\x33\x73\xff\xfc\xc7\x9f\xaf\x3f\xff\x5f\x00\x00\x00\xff\xff\x79\xf4\x39\x03\x89\x24\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
