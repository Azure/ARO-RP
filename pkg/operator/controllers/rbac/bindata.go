// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x1a\x4d\xaf\xe3\xb8\xed\xfe\x7e\x85\xb1\x3d\x2c\x50\xe0\x65\x50\xf4\x52\xbc\x1e\x77\x8b\xa2\x40\xd1\x05\x06\xd3\xde\x19\x99\xb1\xb9\x91\x45\x0d\x45\xe5\x4d\xfa\xeb\x0b\xc9\xb2\x63\xe7\xcb\x79\x4e\x67\x4e\xb1\x29\x8a\x5f\xa2\xf8\xe5\xfc\xa1\xfa\x85\x6b\xac\x1a\x74\x28\xa0\x58\x57\xdb\x63\xd5\x82\xd9\x7f\x6a\xd0\xd5\x14\x0c\x1f\x50\x8e\x06\x4c\x8b\x7f\xad\x7e\xfd\xad\xfa\xd7\x6f\x5f\xaa\xbf\xfd\xfa\x8f\x2f\x9b\x17\xf0\xf4\x1f\x94\x40\xec\xde\x2a\xd9\x82\xd9\x40\xd4\x96\x85\xfe\x0b\x4a\xec\x36\xfb\xbf\x84\x0d\xf1\xa7\xc3\x9f\x5e\xf6\xe4\xea\xb7\xea\x17\x1b\x83\xa2\x7c\x66\x8b\x2f\x1d\x2a\xd4\xa0\xf0\xf6\x52\x55\x46\x30\x6f\xf8\x42\x1d\x06\x85\xce\xbf\x55\x2e\x5a\xfb\x52\x55\x0e\x3a\x7c\xab\xc2\x31\x28\x76\x6f\x20\xfc\x1a\x04\x5f\x24\x5a\x0c\x6f\x2f\xaf\x15\x78\xfa\xbb\x70\xf4\x21\x11\x79\xad\x7e\xfa\xe9\xa5\xaa\x04\x03\x47\x31\x58\x60\x86\x3b\xcf\x0e\x9d\x06\x05\x8d\x01\xc3\x4b\x55\x1d\x50\xb6\x65\xb9\x41\xcd\xbf\x96\x82\x3e\x4a\xd0\xed\xa8\xe9\xc0\x87\xfc\x8a\xae\xf6\x4c\x4e\xcb\xdb\x01\x87\x47\x4b\x1d\xa9\x80\x6b\xb0\x7f\x4f\x9a\x04\x0f\x66\x78\xe5\xba\x3c\xf9\x64\xc0\xa0\xe8\xf4\xc0\x36\x76\x68\x2c\x50\x77\x7d\xa9\x40\xb9\x1e\x1f\x14\x3b\x6f\x41\xcb\x8a\xa0\xb7\x64\xb2\x29\x0d\x3b\x15\xb6\x16\x65\x58\xea\xb5\xf8\x1a\x59\xa1\x07\x05\x94\x03\x19\x04\x63\x38\x0e\x52\x17\xd8\x3d\x2b\xa5\x87\x77\x50\xd3\x3e\x66\xaf\x24\xed\x27\xcb\xcd\x25\xc5\x8b\xed\x50\x77\x14\x92\x33\x09\x36\x14\x54\xa6\x4e\x74\x49\xb8\x8b\x0a\x4a\xae\x79\xc7\x6d\xcb\xbc\xef\xcf\x25\xf6\x9b\x7a\x65\x0e\x60\xa9\xbe\x8b\xb3\x42\x47\xf0\x84\xdf\x14\x5d\x92\x33\xdc\x14\xce\xc4\xa0\xdc\x0d\xc0\x1a\x77\xe4\xe8\x39\xa6\x0f\xd9\x04\x3c\x3d\x77\x82\x85\x00\xca\x86\x3d\xba\xd0\xd2\x4e\x6f\x31\x12\xfc\x1a\x31\xe8\xe8\x3c\xab\xb8\xe5\x5b\x74\x79\xc3\x8a\xeb\x0a\x1e\x28\x8c\xc7\x59\x03\x76\xec\x02\x16\x57\xad\xd1\x5b\x3e\x76\xe3\x85\x2b\xce\x3f\xae\xa7\x0b\x8f\xbb\x68\x0b\x60\xa5\x78\x0b\x76\x38\x09\xd1\xfb\xd6\x0f\xe4\xf4\xe8\xa5\x12\x5e\xa0\x6c\xfa\xa8\xbc\x56\xf4\xa8\x2d\x3a\x2d\x61\xe7\xa6\x67\x2a\xef\xd1\xa5\xf3\xc4\xf7\x33\x46\x39\xf8\xe3\x75\xc2\xe7\xa9\xe4\x92\x6e\x40\xbb\x0b\x71\xfb\x3b\x1a\x05\x63\x30\x84\x13\x8f\xd9\x62\xce\x19\xb3\xb5\xeb\x9b\x3e\x2c\xd8\x43\xb6\x15\xb6\xb8\x25\x57\x93\x6b\xc2\x39\xbc\x78\xef\x39\xc6\xb0\xf4\x70\xb2\xfa\x88\x58\xc3\xeb\x15\x93\xfd\x10\xb3\x4c\xb4\x15\x0c\x2a\x64\x9e\x09\x8e\x51\x39\x18\xb0\xe4\x9a\x4b\x4e\x59\x24\x76\x0a\xd6\x73\x3d\x60\x3e\xe3\xec\x03\xab\xc7\x0e\x7e\xce\xf1\xb5\xea\xc0\xb4\xe4\xf0\x69\x41\xb6\x19\x7c\xc9\x55\xd8\xfd\xce\xdb\x9e\x57\x79\x58\x43\x3d\x92\xad\x17\x14\xcc\x38\xa7\xa0\x57\x00\xdf\x9b\xe1\xa3\x51\xcf\xa0\x28\xed\x52\x50\xc2\x3b\x49\x7a\x82\x44\x8d\xcb\xce\x98\x73\xda\x4a\x2d\x8c\xe5\x58\x6f\x1c\xea\x3b\xcb\x7e\xd1\x3f\x38\xd6\x5e\xe8\x00\x8a\xe4\x9f\x4a\x1e\x99\x94\x11\xac\x53\x18\x06\xbb\xc4\x78\x44\x0c\x4f\x6a\x9b\x65\x5e\xae\x13\xfa\x7a\x22\x5c\x49\x16\x67\x7e\x33\x5e\x1a\xf6\xa9\x0d\x61\x99\x01\x0f\x7d\x9f\x11\x06\xde\x61\x0c\x9d\xb5\x0b\xe5\x69\x87\xa0\x51\xb0\x19\x0b\x62\xea\xa0\xc1\x54\x4f\xa0\x53\xcf\x96\x0c\x4d\x17\xca\xa3\xdb\x09\x04\x95\x68\xd2\xde\x01\x96\xe2\xd2\x40\xb6\x9c\xe8\x79\xe1\xce\x49\x9b\xf2\x58\x24\x6e\x63\xb9\x7b\x5e\x38\x85\xd1\xf1\xe5\xdb\xc0\x38\x98\x16\xeb\xb8\xfe\xe2\x17\xcd\x97\x0e\xb9\xc7\x32\x96\x6a\x7e\x77\x96\xa1\x9e\xd9\x2d\x15\xb0\xe2\xc0\x5a\x6e\x2c\xb9\xfd\x6c\xed\x02\xe0\xb8\x5c\x92\x73\xeb\x7b\x1b\x1b\x9a\x83\xbe\x46\x32\xfb\xa0\x20\x3a\x03\x1f\xa1\xb3\x01\x3a\x7f\x3f\xa3\xdd\xd7\x3a\x95\x84\xde\x82\xcb\xaa\x67\x63\x2f\xd8\xc0\x73\x5d\x0e\xce\xb0\x73\x68\x94\x0e\xa4\x47\xd3\xa2\xd9\xaf\x96\x82\xa5\x26\x77\xbf\x20\xb1\x08\xf7\xbb\xcc\x3b\x0c\xc6\x5e\xfb\x26\xf5\xb1\xdd\xb4\xeb\x6b\xfc\xbe\x49\xbd\xcd\x62\xe8\x61\x57\x90\xde\x59\x7e\x2f\x67\xb5\x39\xb5\x12\xb7\x38\x25\xec\x74\x1f\x3a\x18\xee\x09\xb1\x90\x1e\x2d\x1e\xd0\xfe\x3f\x7a\xb5\x16\x6d\xb7\xe0\x25\x09\xc5\xb4\x20\x2a\xe8\x39\x90\xb2\x0c\x37\xb5\x5c\xe1\x5b\x08\x2b\xc4\xc9\x41\x67\x41\x9e\x69\x60\xca\x8f\x2a\x08\xdd\x77\x67\x98\xb9\x8c\xbc\x97\xb2\xeb\x07\xe9\x2a\x34\x13\x8d\xca\xdb\xc3\x75\x6d\xde\x54\xba\xdf\xe3\xa3\x97\x7f\x5a\x98\x64\x02\x5e\xa2\x5b\x1d\x74\x4b\x3a\x78\x94\x79\xed\x82\xa0\x61\x59\x5b\x0d\xa5\xfb\x62\x1c\x6d\x8c\x33\xbb\xab\x0c\x4a\x5c\x7b\x05\x55\x30\x6d\xea\x09\x5f\x9f\x1e\x31\x94\xca\x74\x41\xb5\x82\xd5\x22\x58\x6d\xc7\x58\x3a\xc2\xe7\x2f\xab\x1b\xef\x42\x60\x16\x02\x96\x0f\x5c\x81\x1c\x8a\x44\xa7\xd4\xe1\xd4\x01\x4e\x03\x85\x29\x74\x1f\xb7\x68\x51\xa7\xa0\x19\x5f\xcf\x6c\xaf\x80\xd7\xaa\x84\x0a\xf6\xcf\xd7\x0b\x5b\x10\xcc\xcb\x2d\x87\x92\x37\xb7\x9d\xe9\xc3\x70\xdc\x06\x23\xe4\x4f\xb9\x77\x47\xd2\xbd\x83\xe0\x34\x6e\xa6\x7d\x23\x1c\x55\xc7\x1e\xd2\x0b\x7a\xe1\x7e\x86\x42\xae\x99\xc4\x96\x29\x78\xbd\x46\x42\xe6\x76\x1e\x99\x4c\x38\xf9\xee\x4d\xb8\xa4\x4c\xcd\xc2\x9c\x2b\x28\x4b\x0e\x2f\x63\xa5\x57\x20\xa5\x4a\x1c\x29\xac\xd5\x8d\x5d\x8e\xf4\xae\xd9\x18\x16\xe4\xb0\x31\xdc\x5d\xa9\x6e\x2d\x8a\x76\xe0\x52\x80\x9a\xfa\xd1\x14\x3e\x9a\xa0\xd0\x1c\xed\xbf\x3d\x1d\x45\x87\xda\x62\x0c\x17\x80\x3c\xb4\xe8\xd5\xeb\xa7\x7a\x33\x1a\xda\x82\xe3\x8c\xb3\x36\xae\x3d\xda\xaa\xe4\x02\x7c\x56\x05\x63\x0e\x88\x05\x34\xab\xac\xb3\x13\xc7\xad\x1b\xc6\x70\x0e\x75\x36\xfa\x7e\x4e\xcc\x47\xc2\x6f\x2f\x9b\x70\xd4\xc1\xfa\xc3\x46\xbf\xa7\xe7\x44\x48\x0e\x71\xcb\x27\x4b\x92\x30\x16\xc6\xc6\xe1\x6a\x1b\x31\xb1\xd6\x1a\x41\xb8\xc6\x9b\x22\x0c\xb1\x6f\x14\x61\x05\x83\x07\x8d\x7c\xad\x93\x3b\x6b\x44\x67\xed\x9b\x09\x54\x0b\x8d\x8d\xe0\x59\x78\x3e\x35\x73\x26\x50\x70\xe0\x43\xcb\x7a\xfe\x09\xe3\xd4\xe7\xa1\x9a\xfa\xb2\xc1\xeb\xe5\x9b\xb7\x79\xe5\x4c\xce\x28\xa5\xd0\x7f\xd6\x99\x26\xd0\x09\x6d\x76\x77\xd3\xd2\xac\x6d\x2b\xa0\x2b\x11\x67\xb8\x9a\xb3\xbb\x32\x1a\xf2\x8c\xe5\x08\xbf\xc1\xb7\xdc\x79\x03\xb3\x08\xf7\xe4\xb1\x86\xbb\x01\xcd\x80\x82\xe5\xa6\xc0\xa6\xe7\x57\x84\x99\x75\xe1\xe4\x82\x82\xcd\x5d\x59\xd1\xc8\x76\xd3\x83\x1d\x78\x1a\x76\x35\x9d\xdc\x64\x00\x37\x59\xbc\xb9\x74\xbd\xa6\x67\x59\x6f\x85\xba\x1e\xcc\x3e\x19\x6b\xf3\x98\xde\x05\xbd\x03\x47\xbb\x85\x89\xc8\x25\x2b\x94\x1d\xa7\x93\x33\x4b\xc5\xd3\x04\xd3\x0b\xef\x68\x75\x3b\x9c\x7d\xfc\x78\xb5\xe5\xad\x29\x48\xcc\x96\xdb\xc6\xba\x19\x82\x70\xca\xc0\x68\x62\x6a\xae\x9e\x0b\x3f\xbe\x1f\x09\x6f\x96\xbf\x2a\x14\xcc\x32\x92\x59\xcd\x2e\xf7\x60\x8b\xac\x32\xd6\xf5\x71\xd6\x8d\x43\xfb\x08\xe1\x95\xc2\xe7\x4f\xad\x8b\xf3\x31\x6f\x09\xeb\xe1\x73\xc0\xf9\x47\xda\x87\x9d\xf0\x11\x5e\x1f\x65\x72\x47\xb5\x9b\xdf\xfa\x7f\xe4\x17\x90\x7b\xf2\xa5\xe4\xbf\xf8\x0d\x22\xea\x5a\xfa\x65\x98\xf5\xf1\x6e\x74\x0d\xaf\x3e\xf5\xdc\x2b\x3d\x86\xc1\xc9\x53\x89\x7f\x08\x10\x1b\x72\xfd\x74\x70\xc9\x7e\xe0\x1a\x04\x6b\xd9\x3c\x53\x69\x8f\x5c\x3f\xcc\xec\xb4\x37\xe7\xff\x6f\x29\x8d\x06\x15\xa0\xd5\xd3\xab\xa1\xf0\xd8\x94\x54\x7b\xd3\xde\xe5\xdf\x18\x43\x9d\x32\xa9\xf8\xce\x56\x4a\x61\x72\x65\x69\xad\x88\x0b\x92\x9d\x97\x59\x81\x4e\x6d\x58\x2a\xad\xfa\xed\x06\x3c\x18\x52\x9a\xf7\x4e\x97\x7a\x9c\xe6\x0b\x2b\xc5\x1d\xfe\x9e\xb2\xf4\x69\x47\x78\x8f\x32\x20\xe7\xb2\xc2\x0d\xf5\xc7\x7d\xe8\x5a\xb9\xa2\xc3\xa5\xef\x4d\x93\x14\x5d\x36\xac\x64\x16\x7d\x23\x50\xe3\xa6\x2f\xee\x96\xd8\x16\xec\xa7\x42\x46\x0c\x8b\x7f\xe0\x98\x14\x5f\x94\xeb\xf5\xd1\x1b\xd2\xe6\xef\xc7\x37\xa1\x14\x86\xc7\x0e\xbc\xbf\x3e\x7f\xb8\xa0\xfc\xde\xa2\x20\x6c\x39\xea\xc2\x68\x8c\xfc\x69\x6e\xc3\x07\x14\xdb\xf3\xc8\xf1\x83\xbc\x60\xaa\x63\x3f\x14\xaf\x1c\xbb\xcf\x85\xc5\xbf\x3f\xff\xb3\x60\xff\xfc\xc7\x9f\x2f\xb7\xff\x2f\x00\x00\xff\xff\x5a\xab\x65\x4f\x46\x27\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
