// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x4f\xaf\xe3\xb8\x0d\xbf\xe7\x53\x18\xdb\xc3\x02\x05\x5e\x06\x45\x2f\xc5\xeb\x71\xb7\x28\x0a\x14\x5d\x60\x30\xed\x9d\x91\x19\x9b\x1b\x59\xd4\x48\x54\xde\xa4\x9f\xbe\x90\x2c\x39\x76\xfe\xd9\x71\x3a\x73\x8a\x4d\x49\xfc\x27\x8a\xe4\x4f\xce\x1f\xaa\x5f\xb8\xc6\xaa\x41\x83\x0e\x04\xeb\x6a\x77\xaa\x5a\x50\x87\x4f\x0d\x9a\x9a\xbc\xe2\x23\xba\x93\x02\xd5\xe2\x5f\xab\x5f\x7f\xab\xfe\xf5\xdb\x97\xea\x6f\xbf\xfe\xe3\xcb\x76\x03\x96\xfe\x83\xce\x13\x9b\xf7\xca\xed\x40\x6d\x21\x48\xcb\x8e\xfe\x0b\x42\x6c\xb6\x87\xbf\xf8\x2d\xf1\xa7\xe3\x9f\x36\x07\x32\xf5\x7b\xf5\x8b\x0e\x5e\xd0\x7d\x66\x8d\x9b\x0e\x05\x6a\x10\x78\xdf\x54\x95\x72\x98\x16\x7c\xa1\x0e\xbd\x40\x67\xdf\x2b\x13\xb4\xde\x54\x95\x81\x0e\xdf\x2b\x7f\xf2\x82\xdd\x3b\x38\x7e\xf3\x0e\x37\x2e\x68\xf4\xef\x9b\xb7\x0a\x2c\xfd\xdd\x71\xb0\x3e\x32\x79\xab\x7e\xfa\x69\x53\x55\x0e\x3d\x07\xa7\x30\xd3\x14\x77\x96\x0d\x1a\xf1\x02\x12\x3c\xfa\x4d\x55\x1d\xd1\xed\xf2\x70\x83\x92\x7e\x35\x79\x59\xca\xd0\xec\xa9\xe9\xc0\xfa\xf4\x8a\xa6\xb6\x4c\x46\xf2\xdb\x11\xcb\xa3\xa6\x8e\xc4\x81\x69\xb0\x7f\x8f\x96\x78\x0b\xaa\xbc\x72\x9d\x9f\x6c\x74\xa0\x17\x34\x72\x64\x1d\x3a\x54\x1a\xa8\xbb\x3d\x94\xa9\x5c\x0f\x0f\x82\x9d\xd5\x20\x79\xc4\xa1\xd5\xa4\x92\x2b\x15\x1b\x71\xac\x35\xba\x32\xd4\x5b\xf1\x35\xb0\x40\x4f\xf2\xe8\x8e\xa4\x10\x94\xe2\x50\xb4\xce\xb4\x47\x5e\x8a\x0f\x1f\x20\xaa\x5d\xe6\xaf\xa8\xed\x27\xcd\xcd\x35\xc7\xab\xe5\x50\x77\xe4\x63\x30\x39\x6c\xc8\x8b\x1b\x07\xd1\x35\xe3\x2e\x08\x08\x99\xe6\x03\x77\x2d\xf3\xa1\xdf\x97\xd0\x2f\xea\x8d\x39\x82\xa6\xfa\xe1\x9c\x15\x36\x82\x25\xfc\x26\x68\xa2\x9e\xfe\xae\x72\x2a\x78\xe1\xae\x10\x6b\xdc\x93\xa1\xd7\x84\x2e\xf2\x09\x58\x7a\x6d\x07\x33\x03\x74\x5b\xb6\x68\x7c\x4b\x7b\xb9\x27\xc8\xe1\xd7\x80\x5e\x86\xe0\x59\x25\x2d\x9d\xa2\xeb\x13\x96\x43\xd7\xe1\x91\xfc\xb0\x9d\x35\x60\xc7\xc6\x63\x0e\xd5\x1a\xad\xe6\x53\x37\x1c\xb8\x1c\xfc\xc3\x78\x3c\xf0\xb8\x0f\x3a\x13\x56\xaa\x37\xe3\x87\xb3\x12\x7d\x6c\xfd\x40\x49\x4b\x0f\x95\xe3\x19\xce\xaa\xcf\xca\x6b\x55\x0f\xd2\xa2\x91\x9c\x76\xee\x46\xa6\xf0\x01\x4d\xdc\x4f\xfc\xb8\x10\x94\x92\x3f\xde\x66\x7c\x59\x4a\xae\xf9\x7a\xd4\x7b\x1f\x76\xbf\xa3\x12\x50\x0a\xbd\x3f\xcb\x98\x0c\xa6\x9a\x31\x19\xbb\xbd\xe8\x69\xc5\x16\xf9\xd6\xb1\xc6\x1d\x99\x9a\x4c\xe3\x2f\xe9\x39\x7a\x2f\x67\x94\xa1\xc5\xc5\xea\x19\xb5\xca\xeb\x0d\x97\xfd\x10\xb7\x8c\xac\x75\xe8\xc5\x91\x7a\x25\x39\x06\x61\xaf\x40\x93\x69\xae\x25\x25\x95\xd8\x08\x68\xcb\x75\x99\xf9\x4a\xb0\x17\x51\xcb\x36\x7e\x2a\xf1\xad\xea\x40\xb5\x64\xf0\x65\x45\x76\x89\x7c\x2d\xd5\xb1\xf9\x9d\x77\xbd\xac\xfc\xb0\x86\x7b\x20\x5d\xcf\x18\x98\xe6\x9c\x93\x5e\x26\x7c\x6f\x81\x4b\xb3\x9e\x42\x27\xb4\x8f\x49\x09\x1f\x14\xe9\xd1\x24\x6a\x4c\x0a\xc6\x54\xd3\x56\x5a\xa1\x34\x87\x5a\x39\xac\x63\x3e\x04\x3d\x17\x21\xc3\x44\xff\xa2\xd8\xb4\x09\xf3\x05\xbb\x2f\xec\xfe\x46\xd6\xbe\xd8\xc0\x21\x7a\xd9\x46\x3c\xc0\x6e\x42\x3c\xf6\x0d\xbf\x2f\xb2\xfd\x90\xc3\x6a\xe3\xf3\xd3\x1e\x41\x82\xc3\x66\xe8\x4c\xa9\x83\xd2\x08\x93\xd9\x3b\xf0\xe2\x82\x8a\x53\x0a\x2d\xe6\x81\xb2\xda\xa0\x7c\xb0\x3b\xf4\x2f\x1c\x55\xcd\x8f\x59\x9d\x36\xe4\x08\xb7\x8e\x63\xb2\x1a\x5e\xbe\x51\xe6\xe0\x55\x8b\x75\x58\x7f\xbc\xb2\x59\x73\x3b\xd8\xcf\x52\x9a\x6a\xfe\x30\x9a\xa1\x9e\x38\x25\xb6\x89\xce\x80\xd6\xdc\x68\x32\x87\xc9\xd8\x15\xc1\x70\x0e\xc5\x4b\xd7\x5a\x1d\x1a\x9a\x92\xbe\x06\x52\x07\x2f\xe0\x64\x42\x3e\x41\xa7\x3d\x74\xf6\x71\xdd\x78\x6c\x75\x6c\xbc\xac\x06\x93\x4c\x4f\xce\x9e\xf1\x81\xe5\x3a\x6f\x97\x62\x63\x50\x09\x1d\x49\x4e\xaa\x45\x75\x58\xad\x05\xbb\x9a\xcc\xe3\xb2\xaf\x11\x1e\x63\xb9\x07\x02\x06\x44\x7b\x97\xfb\x00\xea\xf4\xfa\x4e\xba\x87\x82\xf7\x45\x14\xa4\xb8\x86\xf5\x80\x3f\xae\xf9\x8e\x4f\xd2\x0a\xd6\x7b\xcd\x1f\x39\x0c\xb6\x67\x2c\x70\xcf\x88\x38\x3b\x1e\xb5\x0e\xca\x11\x24\x76\x24\x27\x8d\x47\xd4\xff\x0f\xb0\xd5\xa2\xee\x66\x02\x30\x4e\x51\x2d\x38\x71\x68\xd9\x93\xb0\xa3\xb5\xc6\xa7\x24\x35\x23\x6e\x9c\xc8\xd2\xa3\x38\x84\xee\xbb\x0b\x4c\x52\x06\xd9\x73\xd5\xef\x49\xbe\x02\xcd\xc8\xa2\xfc\xb6\xb8\xef\x4c\x8b\x32\x3a\x3d\x2d\x4d\x1b\xe3\xc6\x21\x31\xb0\x2e\x98\xd5\xe9\x3a\x07\xfd\x52\xe1\xb5\xf1\x0e\x15\xbb\xb5\xdd\x4a\x3c\x0e\xca\xd0\x56\x19\xb5\xbf\x29\x20\x67\xc4\x37\x10\x01\xd5\x46\xcc\xf6\xf6\xf2\x15\x40\xee\x1c\x67\x4c\xcb\xb3\x5a\x04\x2d\xed\x90\x85\x07\xfa\xf4\x65\x35\x30\xce\x0c\x26\x27\x7c\x7e\xc3\x05\xc8\xa0\x73\xc1\x08\x75\x38\x0e\x80\x33\xe0\x1f\x53\x0f\x61\x87\x1a\x65\x4c\x9a\xc8\xb5\xcc\xfa\x06\x79\xad\x49\x28\xa0\xff\x7c\xbb\xf1\x04\x87\x69\xb8\x65\x7f\xee\x35\xfa\x9b\x89\x0c\xd7\xd6\x09\x74\xa4\xee\x17\x88\xd1\x05\x21\x3f\x0c\xd4\x6b\xce\xd4\xcc\x5c\x13\x79\x61\x97\x4e\xff\xd0\x9f\x65\x4a\xee\xed\x06\x0e\x6b\x6d\x63\x93\x12\xb1\x69\xb6\x8a\x1d\xb2\xdf\x2a\xee\x6e\xf4\xa4\x1a\x9d\x74\x60\x62\xfe\x18\x6f\xf3\x98\x3e\xb8\x20\xf3\x1c\xfc\xbf\xc3\xe1\xb1\x43\x69\x31\xf8\x2b\x42\xc2\xfc\xbd\x79\xfd\xa5\xd8\x84\x87\xb4\x60\x38\xcd\x59\x9b\x76\xf2\x31\x5f\x86\x04\x27\x4d\x2d\xa6\x7c\x95\x49\x96\x35\xa9\xd2\xb9\xa6\x18\x0b\x3b\x53\x6e\xb1\x0c\xca\xe4\xe6\xf8\x35\x35\x97\x64\xc7\x5e\x37\xc7\x41\x8a\xf7\xcb\x42\x7b\xa0\xd7\x54\x88\x01\x71\x2f\x26\x73\x0e\x57\x1a\x06\x1c\x70\x13\x15\x8c\xbc\xb5\x46\x11\xae\xf1\xae\x0a\x25\x35\x0d\x2a\xac\x10\xb0\xd0\xc9\xb7\xf0\xd7\x05\x7c\x9c\x80\x2e\xe5\xa9\x76\x34\xc0\xb7\x8b\xec\x79\x86\x60\xca\x93\x37\x60\x7d\xcb\x72\xf9\x05\xe0\x8c\xce\x50\x54\x3d\x2a\xbd\x71\x62\x6c\x46\x93\x7e\x93\x60\x2c\x7b\x72\xc1\x29\x66\xe6\x0b\x3c\x19\x49\xe7\x69\x93\xb3\x1b\x87\x26\x78\x2c\x93\x6e\x64\x9c\x72\x34\xa7\x00\xb0\x38\xf2\x42\xe4\x40\xbf\x23\x37\x9f\x79\x05\x93\x0c\xf7\xe2\xb6\xfa\x87\x09\x4d\x81\x80\xe6\x26\xd3\xc6\xfb\x97\x95\x99\x60\x67\x32\x5e\x40\x27\xb8\x35\x3d\x67\x8a\x4d\x4d\xe7\xb8\x28\xe4\x26\xe9\x33\x55\xa7\x37\x2d\xec\xbc\x72\x64\x5f\xc8\xd8\x16\xd4\x21\x7a\x67\xbb\xcc\xd0\x3c\xbd\x03\x43\xfb\x99\x8b\x8b\x6b\x51\x31\xc2\x4e\x37\x91\x64\x4d\xde\x85\x64\xc6\x2e\xd4\x4d\x49\x81\xb1\xfe\xa1\x0a\x11\x58\xbc\x76\xf8\xf3\x75\xc1\x1c\xa2\xed\x67\xdd\xbe\x93\xb9\x63\xd2\x33\x8c\x57\x2a\x9f\x3e\xdc\xcd\x5e\xf2\x58\x4d\x58\x97\xcb\xe5\xcb\x4f\x7e\x8b\xb7\x68\x89\xac\x67\x85\x3c\x30\xed\xee\x97\xe3\x1f\x79\x9f\xfe\x48\xbf\x58\x0b\x67\x6f\xb4\x83\xac\xe5\x9f\x2f\x6d\x9e\xc7\x4e\x6b\x64\xf5\x99\xf8\x51\x25\x2e\x28\xfe\xa5\x3a\x58\x4e\xec\x96\x4c\x7f\x0b\x36\xe7\x3f\x30\x0d\x82\xd6\xac\x5e\x69\x3c\x07\xa9\x4f\x0b\x3b\xaf\x4d\xe5\xf0\x5b\xac\x2a\x5e\x1c\xd0\xea\x5b\x9a\x52\x87\xb7\xb9\xf2\xdc\xf5\x77\xfe\xb6\x5f\xca\xf6\xa8\x01\xba\x18\xc9\x75\xfa\xc6\xd0\x5a\x15\x67\x34\xbb\xec\x3a\x3c\x9d\x51\x49\xec\x34\xfa\xe5\x0a\x2c\x28\x12\x9a\x42\x89\x6b\x3b\xce\x68\x78\xa5\xba\xe5\xcf\x0e\x73\x1f\x0a\x1c\x1f\xd0\x95\xc9\xa9\xca\x9a\x52\x8e\x1f\x53\xd7\xea\x15\x0c\xce\x7d\xbd\xb0\x8e\xf7\x54\x92\x53\x5a\xb0\x52\x58\xf0\xb3\x1f\xe7\x47\x8d\x02\xa5\x66\x72\xd8\x9b\xb8\xf8\xfb\xc9\x8d\x53\xb2\xc0\x53\x07\xd6\xde\x06\xc7\x57\x9c\x3f\x5a\x74\x08\x3b\x0e\x32\x73\xad\x42\xf6\x8c\xf9\xf9\x88\x4e\xf7\x32\xd2\x69\x26\xeb\x30\x36\x59\x4f\x65\x0f\xc3\xe6\x73\x16\xf1\xef\xcf\xff\xcc\xb3\x7f\xfe\xe3\xcf\xd7\xcb\xff\x17\x00\x00\xff\xff\x55\x78\xab\x48\x22\x25\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
