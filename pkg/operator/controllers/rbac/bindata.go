// Code generated for package rbac by go-bindata DO NOT EDIT. (@generated)
// sources:
// staticresources/clusterrole.yaml
// staticresources/clusterrolebinding.yaml
package rbac

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x5f\x8f\xe3\xb8\x0d\x7f\x9f\x4f\x61\x5c\x1f\x0e\x28\x30\x59\xf4\xad\x98\x3e\xde\x15\x45\x81\xa2\x07\x2c\xb6\x7d\x67\x64\xc6\xe6\x45\x16\xb5\x14\x95\xd9\xf4\xd3\x17\x92\x65\xc7\xce\x3f\x67\x9c\xdb\x7d\x1a\x9b\x92\xf9\x23\x29\x8a\xff\x32\x7f\xaa\x7e\xe1\x1a\xab\x06\x1d\x0a\x28\xd6\xd5\xf6\x58\xb5\x60\xf6\x9f\x1a\x74\x35\x05\xc3\x07\x94\xa3\x01\xd3\xe2\xdf\xaa\x5f\x7f\xab\xfe\xfd\xdb\x97\xea\xef\xbf\xfe\xf3\xcb\xe6\x05\x3c\xfd\x17\x25\x10\xbb\xb7\x4a\xb6\x60\x36\x10\xb5\x65\xa1\xff\x81\x12\xbb\xcd\xfe\xaf\x61\x43\xfc\xe9\xf0\x97\x97\x3d\xb9\xfa\xad\xfa\xc5\xc6\xa0\x28\x9f\xd9\xe2\x4b\x87\x0a\x35\x28\xbc\xbd\x54\x95\x11\xcc\x1f\x7c\xa1\x0e\x83\x42\xe7\xdf\x2a\x17\xad\x7d\xa9\x2a\x07\x1d\xbe\x55\xe1\x18\x14\xbb\x37\x10\x7e\x0d\x82\x2f\x12\x2d\x86\xb7\x97\xd7\x0a\x3c\xfd\x43\x38\xfa\x90\x98\xbc\x56\x3f\xfd\xf4\x52\x55\x82\x81\xa3\x18\x2c\x34\xc3\x9d\x67\x87\x4e\x83\x82\xc6\x80\xe1\xa5\xaa\x0e\x28\xdb\xb2\xdc\xa0\xe6\xbf\x96\x82\x3e\xca\xd0\xed\xa8\xe9\xc0\x87\xfc\x8a\xae\xf6\x4c\x4e\xcb\xdb\x01\x87\x47\x4b\x1d\xa9\x80\x6b\xb0\x7f\x4f\x9a\x04\x0f\x66\x78\xe5\xba\x3c\xf9\x64\xc0\xa0\xe8\xf4\xc0\x36\x76\x68\x2c\x50\x77\x7d\xa9\x50\xb9\x1e\x1f\x14\x3b\x6f\x41\xcb\x8a\xa0\xb7\x64\xb2\x29\x0d\x3b\x15\xb6\x16\x65\x58\xea\xb5\xf8\x1a\x59\xa1\x27\x05\x94\x03\x19\x04\x63\x38\x0e\x52\x17\xda\x3d\x2b\xa5\x87\x77\x50\xd3\x3e\x66\xaf\x24\xed\x27\xcb\xcd\x25\xc7\x8b\xcf\xa1\xee\x28\x24\x67\x12\x6c\x28\xa8\x4c\x9d\xe8\x92\x71\x17\x15\x94\x5c\xf3\x8e\xdb\x96\x79\xdf\x9f\x4b\xec\x3f\xea\x95\x39\x80\xa5\xfa\xee\x9e\x15\x3a\x82\x27\xfc\xa6\xe8\x92\x9c\xe1\xa6\x70\x26\x06\xe5\x6e\x20\xd6\xb8\x23\x47\xcf\x81\x3e\x64\x13\xf0\xf4\xdc\x09\x16\x06\x28\x1b\xf6\xe8\x42\x4b\x3b\xbd\x05\x24\xf8\x35\x62\xd0\xd1\x79\x56\xa1\xe5\x5b\x74\x79\xc3\x8a\xeb\x0a\x1e\x28\x8c\xc7\x59\x03\x76\xec\x02\x16\x57\xad\xd1\x5b\x3e\x76\xe3\x85\x2b\xce\x3f\xae\xa7\x0b\x8f\xbb\x68\x0b\x61\xa5\x78\x0b\x76\x38\x09\xd1\xfb\xd6\x0f\x44\x7a\xf4\x52\x09\x2f\x70\x36\x7d\x54\x5e\x2b\x7a\xd4\x16\x9d\x96\xb0\x73\xd3\x33\x95\xf7\xe8\xd2\x79\xe2\xfb\x19\x50\x0e\xfe\x78\x9d\xf1\x79\x2a\xb9\xe4\x1b\xd0\xee\x42\xdc\xfe\x8e\x46\xc1\x18\x0c\xe1\x84\x31\x5b\xcc\x39\x63\xb6\x76\xfd\xa3\x0f\x0b\xf6\x90\x6d\x85\x2d\x6e\xc9\xd5\xe4\x9a\x70\x4e\x2f\xde\x7b\xbe\x63\x58\x7a\x38\x59\x7d\x44\xac\xe1\xf5\x8a\xc9\x7e\x88\x59\x26\xda\x0a\x06\x15\x32\xcf\x04\xc7\xa8\x1c\x0c\x58\x72\xcd\x25\x52\x16\x89\x9d\x82\xf5\x5c\x0f\x3b\x9f\x71\xf6\x01\xea\xb1\x83\x9f\x23\xbe\x56\x1d\x98\x96\x1c\x3e\x2d\xc8\x36\x93\x2f\x51\x85\xdd\xef\xbc\xed\xb1\xca\xc3\x1a\xee\x91\x6c\xbd\xa0\x60\xde\x73\x0a\x7a\x85\xf0\xbd\x01\x1f\x8d\x7a\x06\x45\x69\x97\x82\x12\xde\x49\xd2\x93\x4d\xd4\xb8\xec\x8c\x39\xa7\xad\xd4\xc2\x58\x8e\xf5\xc6\xa1\xbe\xb3\xec\x17\xfd\x83\x63\xed\x85\x0e\xa0\x48\xfe\xa9\xe4\x91\x59\x19\xc1\x3a\x85\x61\xb0\x4b\xc0\xe3\xc6\xf0\xa4\xb6\x59\xe6\xe5\x3a\xa1\xaf\x27\xc2\x95\x64\x71\xe6\x37\xe3\xa5\x61\x9f\xda\x10\x96\x19\xf1\xd0\xf7\x19\x61\xc0\x0e\x63\xe8\xac\x5d\x28\x4f\x3b\x04\x8d\x82\xcd\x58\x10\x53\x07\x0d\xa6\x7a\x02\x9d\x7a\xb6\x64\x68\xba\x50\x1e\xdd\x4e\x20\xa8\x44\x93\xbe\x1d\x68\x29\x2e\x0d\x6c\xcb\x89\x9e\x17\xee\x9c\xb4\x29\x8f\x45\xe2\x36\x96\xbb\xe7\x85\x53\x18\x1d\x5f\xbe\x0d\xc0\xc1\xb4\x58\xc7\xf5\x17\xbf\x68\xbe\x74\xc8\xfd\x2e\x63\xa9\xe6\x77\x67\x19\xea\x99\xdd\x52\x01\x2b\x0e\xac\xe5\xc6\x92\xdb\xcf\xd6\x2e\x08\x8e\xcb\x25\x39\xb7\xbe\xb7\xb1\xa1\x39\xe9\x6b\x24\xb3\x0f\x0a\xa2\x33\xf2\x11\x3a\x1b\xa0\xf3\xf7\x33\xda\x7d\xad\x53\x49\xe8\x2d\xb8\xac\x7a\x36\xf6\x82\x0d\x3c\xd7\xe5\xe0\x0c\x3b\x87\x46\xe9\x40\x7a\x34\x2d\x9a\xfd\x6a\x29\x58\x6a\x72\xf7\x0b\x12\x8b\x70\xbf\xcb\xbc\x03\x30\xf6\xda\x37\xb9\x8f\xed\xa6\x5d\x5f\xe3\xf7\x4d\xea\x6d\x88\xa1\x87\x5d\xc1\x7a\x67\xf9\xbd\x9c\xd5\xe6\xd4\x4a\xdc\x42\x4a\xbb\xd3\x7d\xe8\x60\xb8\x27\xc4\x42\x7a\xb4\x78\x40\xfb\x47\xf4\x6a\x2d\xda\x6e\xc1\x4b\xd2\x16\xd3\x82\xa8\xa0\xe7\x40\xca\x32\xdc\xd4\x72\x85\x6f\x6d\x58\x21\x4e\x0e\x3a\x0b\xf2\x4c\x03\x53\x7e\x54\x41\xe8\xbe\x3b\x60\x46\x19\xb1\x97\xb2\xeb\x07\xf9\x2a\x34\x13\x8d\xca\xdb\xc3\x75\x6d\xfe\xa8\x74\xbf\xc7\x47\x2f\xff\xb4\x30\xc9\x0c\xbc\x44\xb7\x3a\xe8\x96\x74\xf0\x28\x78\xed\x82\xa0\x61\x59\x5b\x0d\xa5\xfb\x62\x1c\x6d\x8c\x33\xbb\xab\x00\x25\xae\xbd\x82\x2a\x98\x36\xf5\x84\xaf\x4f\x8f\x18\x12\x28\x1f\xdc\x86\xe5\x4a\x15\x8d\x59\xff\x1d\x09\xbe\x83\xb5\x61\x42\x23\x3f\x7d\xfb\xca\xab\x63\x5f\xa9\x8c\x17\x4c\x5b\x76\xb5\x08\x56\xdb\x31\x96\x8f\xf4\xf9\x0b\x9e\xb2\xd0\x98\x3d\xe6\x6b\xeb\xe5\x9c\x85\xa7\x65\x67\x54\x20\x87\x22\xd1\x29\x75\x38\x75\xce\xd3\xb0\x63\x4a\xdd\xc7\x2d\x5a\xd4\x29\x69\x86\xeb\x99\xed\x15\xf2\x5a\x95\x30\x75\x60\xb7\x33\xc2\x64\x56\xc9\x77\x7d\xfa\x92\x33\x35\x0b\x13\xab\xa0\x2c\x39\x50\x8c\x35\x5b\xa1\x94\x7a\x6f\xe4\xb0\x56\x37\x76\x39\x66\xbb\x66\x63\x58\x90\xc3\xc6\x70\x77\xa5\x4e\xb5\x28\xda\x81\x4b\xa1\x66\x6a\xf5\x29\x7d\x34\x41\xe1\x39\xa6\x89\xed\x29\x63\x74\xa8\x2d\xc6\x70\x41\xc8\xe3\x87\x5e\xbd\x7e\x3e\x37\xe3\xa1\x2d\x38\xce\x7b\xd6\x46\xa8\x49\xd3\xf1\x48\x84\xea\x6f\xab\x70\xd4\x41\xad\xe1\x43\xbf\xa7\xe7\x44\x48\x96\xbe\x75\xd8\x25\x8e\x1a\x0b\x63\x6d\x7d\xb5\xd2\x9e\x94\xea\x6b\x04\xe1\x1a\x6f\x8a\x30\x5c\xc1\x51\x84\x15\x00\x0f\x1a\xf9\x5a\xb3\x73\xd6\xab\xcd\x3a\x1c\x13\xa8\x16\x1a\x7b\xa5\xb3\x28\x71\xea\x77\x4c\xa0\xe0\xc0\x87\x96\xf5\x7c\xca\x7f\x6a\x85\x50\x4d\x7d\xd9\x03\xf5\xf2\xcd\x3b\xa1\x72\x26\x67\x9c\x52\x04\x3a\x6b\xde\x12\xe9\xb4\x6d\x76\x29\xd2\xd2\xac\xb3\x29\xa4\x2b\x57\x79\xf0\xf9\x59\x53\x35\x1a\xf2\x0c\x72\xa4\xdf\xc0\x2d\x97\xc9\xc0\x2c\x74\x3c\x79\xac\xe1\x6e\xa4\x30\xa0\x60\xb9\x29\xb4\xe9\xf9\x15\x61\x66\x8d\x2a\xb9\xa0\x60\x73\xea\x29\x1a\xd9\x6e\x7a\xb0\x03\xa6\x61\x57\xd3\xc9\x4d\x06\x72\x93\xc5\x9b\x4b\xd7\x6b\x1a\xb7\xc1\x08\xf9\x27\x22\xa3\x07\xb3\x4f\xc6\xda\x3c\xa6\x77\xd9\xde\x81\xa3\xdd\xc2\xd0\xe0\x12\x0a\x65\xc7\xe9\xe4\xcc\x52\x7e\x9f\xec\xf4\xc2\x3b\x5a\xdd\x31\x66\x1f\x3f\x5e\xed\x0a\x6b\x0a\x12\xb3\xe5\xb6\xb1\x6e\x86\x22\x21\xa5\x36\x34\x31\xf5\x1f\xcf\x85\x1f\xdf\x4f\x4d\x37\xcb\x83\xf7\xb2\xb3\x4c\x2d\x56\xc3\xe5\x36\x65\x11\x2a\xef\xba\x3e\xf1\xb9\x71\x68\x1f\x61\xbc\x52\xf8\xfc\x6b\xe4\xe2\x08\xc9\x5b\xc2\x7a\x98\x98\x9f\xff\x8e\xf9\xb0\x13\x3e\x82\xf5\x51\x90\x3b\xaa\xdd\xfc\x39\xfc\x47\xfe\x48\x70\x4f\xbe\x94\xfc\x17\xc7\xf4\x51\xd7\xf2\x2f\xf3\x9e\x8f\x37\x6c\x6b\xb0\xfa\xd4\x73\xaf\xf4\x18\x66\x0b\x4f\x25\xfe\x21\x40\x6c\xc8\xf5\x03\xb4\x25\xfb\x81\x6b\x10\xac\x65\xf3\x4c\x09\x3b\xa2\x7e\x18\xec\xf4\x6d\xce\xff\xdf\x52\x1a\x0d\x2a\x40\xab\x07\x3c\x43\xe1\xb1\x29\xa9\xf6\xa6\xbd\xcb\x3f\x2c\x0c\x75\xca\xa4\xe2\x3b\x5b\x29\x85\xc9\x95\xa5\xb5\x22\x2e\x48\x76\x5e\x66\x05\x3a\xf5\x37\xa9\xb4\xea\x3f\x37\xe0\xc1\x90\xd2\xbc\x29\xb9\xd4\xe3\xd4\x82\xaf\x14\x77\xf8\x0f\x8e\xa5\x5f\x3f\x84\xf7\x28\xc3\xe6\x5c\x56\xb8\xa1\xfe\xb8\x4f\x5d\x2b\x57\x74\xb8\xf4\x93\xcc\x24\x45\x97\x0f\x56\x82\x45\xdf\x08\xd4\xb8\xe9\x8b\xbb\x25\xd8\xb2\xfb\xa9\x90\x11\xc3\xe2\xff\x38\x4c\x8a\x2f\xca\xf5\xfa\xe8\x0d\xe9\xe3\xef\x87\x9b\xb6\x14\xc0\x63\x07\xde\x97\x68\xbf\x34\x94\x7b\x6f\x51\x10\xb6\x1c\x75\x61\x7a\x44\xfe\x34\x3e\xe0\x03\x8a\xed\x31\x72\xfc\x20\x2f\x98\xea\xd8\x0f\xc5\x2b\xc7\xee\x73\x81\xf8\xcf\xe7\x7f\x95\xdd\x3f\xff\xf9\xe7\xcb\xcf\xff\x1f\x00\x00\xff\xff\xc3\x85\xb5\xcb\x69\x26\x00\x00")

func clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterroleYaml,
		"clusterrole.yaml",
	)
}

func clusterroleYaml() (*asset, error) {
	bytes, err := clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\xbd\x0a\xc2\x40\x0c\x07\xf0\xfd\x9e\x22\x2f\xd0\x8a\x9b\xdc\xa8\x83\x7b\x41\xf7\xb4\x8d\x1a\xdb\x26\x47\x92\x13\xf4\xe9\x45\x70\x93\x3a\xff\x3f\x7e\x58\xf8\x4c\xe6\xac\x92\xc1\x7a\x1c\x5a\xac\x71\x53\xe3\x17\x06\xab\xb4\xd3\xce\x5b\xd6\xcd\x63\x9b\x26\x96\x31\xc3\x61\xae\x1e\x64\x9d\xce\xb4\x67\x19\x59\xae\x69\xa1\xc0\x11\x03\x73\x02\x10\x5c\x28\x83\x3f\x3d\x68\xc9\x68\xda\xb8\x51\x32\x9d\xa9\xa3\xcb\x27\xc7\xc2\x47\xd3\x5a\xfe\x58\x09\xe0\x87\x5a\x7b\xf6\xda\xdf\x69\x08\xcf\xa9\xf9\x8e\x4e\x4e\xb6\xd6\x7e\x07\x00\x00\xff\xff\xc4\xb6\x1b\x05\xeb\x00\x00\x00")

func clusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterrolebindingYaml,
		"clusterrolebinding.yaml",
	)
}

func clusterrolebindingYaml() (*asset, error) {
	bytes, err := clusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clusterrole.yaml":        clusterroleYaml,
	"clusterrolebinding.yaml": clusterrolebindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"clusterrole.yaml":        {clusterroleYaml, map[string]*bintree{}},
	"clusterrolebinding.yaml": {clusterrolebindingYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
