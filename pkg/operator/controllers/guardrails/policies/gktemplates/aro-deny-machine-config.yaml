apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: arodenymachineconfig
  annotations:
    description: >-
      Do not allow modification of cluster's machine config objects
      machine config regex match: ^.+(-master|-worker|-master-.+|-worker-.+|-kubelet|-container-runtime|-aro-.+|-ssh|-generated-.+)$
spec:
  crd:
    spec:
      names:
        kind: ARODenyMachineConfig
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package arodenymachineconfig
        import future.keywords.in
        import data.lib.common.is_exempted_account
        import data.lib.common.get_username

        violation[{"msg": msg}] {
            input.review.operation in ["CREATE", "UPDATE", "DELETE"]

            # Check if it is an exempted user
            not is_exempted_account(input.review)
            username := get_username(input.review)

            # Check if it is a protected machine config
            mc := input.review.object.metadata.name
            is_protected_mc(mc)

            msg := sprintf("user %v not allowed to %v machine config %v", [username, input.review.operation, mc])
        }

        is_protected_mc(mc) = true {
            is_ocp_mc(mc)
        } {
            # for rendered-master-542f4aec7e9ca2afda1955ea19266af9
            regex.match("^rendered-(master|worker)-.+$", mc)
        }

        is_ocp_mc(mc) = true {
            ocp_mc[mc]
        }
        ocp_mc = {
            # protected ocp machine configs
            "00-master",
            "00-worker",
            "01-master-container-runtime",
            "01-master-kubelet",
            "01-worker-container-runtime",
            "01-worker-kubelet",
            "90-aro-worker-registries",
            "97-master-generated-kubelet",
            "97-worker-generated-kubelet",
            "98-master-generated-kubelet",
            "98-worker-generated-kubelet",
            "99-master-aro-dns",
            "99-master-aro-etc-hosts-gateway-domains",
            "99-master-generated-kubelet",
            "99-master-generated-registries",
            "99-master-ssh",
            "99-worker-aro-dns",
            "99-worker-aro-etc-hosts-gateway-domains",
            "99-worker-generated-kubelet",
            "99-worker-generated-registries",
            "99-worker-ssh"
        }
      libs:
        - |
          package lib.common
          import future.keywords.in

          # shared structures, functions, etc.

          is_exempted_account(review) = true {
            has_field(review, "userInfo")
            has_field(review.userInfo, "username")
            username := get_username(review)
            groups := get_user_group(review)
            is_exempted_user_or_groups(username, groups)
          } {
            not has_field(review, "userInfo")
          } {
            has_field(review, "userInfo")
            not has_field(review.userInfo, "username")
          }

          get_username(review) = name {
            not has_field(review.userInfo, "username")
            name = "notfound"
          } {
            has_field(review.userInfo, "username")
            name = review.userInfo.username
            print(name)
          }

          get_user_group(review) = group {
              not review.userInfo
              group = []
          } {
              not review.userInfo.groups
              group = []
          } {
              group = review.userInfo.groups
          }

          is_exempted_user_or_groups(user, groups) = true {
            exempted_user[user]
            print("exempted user:", user)
          } {
            g := groups[_]
            kw := exempted_groups[_]
            contains(lower(g), lower(kw))
            print("exempted group:", groups)
          }

          has_field(object, field) = true {
              object[field]
          }

          is_exempted_user(user) = true {
            exempted_user[user]
          }

          is_priv_namespace(ns) = true {
            privileged_ns[ns]
          }

          exempted_user = {
            "system:kube-controller-manager",
            "system:kube-scheduler",
            "system:admin"
          }

          exempted_groups = {
            # "system:cluster-admins", # dont allow kube:admin
            "system:node",
            "system:serviceaccount", # allow all system service accounts
            "system:master"
          }
          privileged_ns = {
            # Kubernetes specific namespaces
            "kube-node-lease",
            "kube-public",
            "kube-system",

            # ARO specific namespaces
            "openshift-azure-logging",
            "openshift-azure-operator",
            "openshift-managed-upgrade-operator",
            "openshift-azure-guardrails",

            # OCP namespaces
            "openshift",
            "openshift-apiserver",
            "openshift-apiserver-operator",
            "openshift-authentication-operator",
            "openshift-cloud-controller-manager",
            "openshift-cloud-controller-manager-operator",
            "openshift-cloud-credential-operator",
            "openshift-cluster-machine-approver",
            "openshift-cluster-storage-operator",
            "openshift-cluster-version",
            "openshift-config-managed",
            "openshift-config-operator",
            "openshift-console",
            "openshift-console-operator",
            "openshift-controller-manager",
            "openshift-controller-manager-operator",
            "openshift-dns",
            "openshift-dns-operator",
            "openshift-etcd",
            "openshift-etcd-operator",
            "openshift-host-network",
            "openshift-image-registry",
            "openshift-ingress",
            "openshift-ingress-operator",
            "openshift-kube-apiserver",
            "openshift-kube-apiserver-operator",
            "openshift-kube-controller-manager",
            "openshift-kube-controller-manager-operator",
            "openshift-kube-scheduler",
            "openshift-kube-scheduler-operator",
            "openshift-machine-api",
            "openshift-machine-config-operator",
            "openshift-monitoring",
            "openshift-multus",
            "openshift-network-operator",
            "openshift-oauth-apiserver",
            "openshift-operator-lifecycle-manager",
            "openshift-ovn-kubernetes",
            "openshift-sdn",
            "openshift-service-ca",
            "openshift-service-ca-operator"
          }
