// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xcd\x72\xdb\xc8\x11\xbe\xf3\x29\xba\x94\x83\x0f\x11\xa9\x75\xa5\x52\x95\xf0\xa6\x95\x6c\x87\xe5\xb5\xac\x92\x54\xde\xc3\x6a\x0f\x8d\x41\x13\xec\x68\x30\x83\xed\x69\x50\xa2\x53\x79\xf7\xd4\x0c\x00\xfe\x09\xa0\x44\xab\xf6\x12\x5c\x24\x0c\x66\xfa\xbf\xbf\x9e\x6e\x8e\xc6\xe3\xf1\x08\x2b\xfe\x46\x12\xd8\xbb\x29\x60\xc5\xf4\xa4\xe4\xe2\x5b\x98\x3c\xfc\x23\x4c\xd8\x9f\x2d\xdf\x8f\x1e\xd8\xe5\x53\xb8\xa8\x83\xfa\xf2\x86\x82\xaf\xc5\xd0\x25\xcd\xd9\xb1\xb2\x77\xa3\x92\x14\x73\x54\x9c\x8e\x00\xd0\x39\xaf\x18\x97\x43\x7c\x05\x30\xde\xa9\x78\x6b\x49\xc6\x05\xb9\xc9\x43\x9d\x51\x56\xb3\xcd\x49\x12\xf1\x8e\xf5\xf2\xa7\xc9\xdf\x27\x3f\x8d\x00\x8c\x50\x3a\x7e\xc7\x25\x05\xc5\xb2\x9a\x82\xab\xad\x1d\x01\x38\x2c\x69\x0a\xc6\xd6\x41\x49\xc2\x04\xc5\x4f\x7c\x45\x2e\x2c\x78\xae\x13\xf6\xa3\x50\x91\x89\x3c\x0b\xf1\x75\x35\x85\x67\xdf\x1b\x0a\xad\x58\xad\x4a\x0d\xb1\xb4\x62\x39\xe8\xe7\xed\xd5\x5f\x38\x68\xfa\x52\xd9\x5a\xd0\x6e\x58\xa7\xc5\xc0\xae\xa8\x2d\xca\x7a\x79\x04\x10\x8c\xaf\x68\x9b\x6a\xab\x5e\xe2\x39\x6e\x15\x58\xbe\x47\x5b\x2d\xf0\x7d\x43\xc5\x2c\xa8\xc4\x46\x24\x80\x28\xee\xf9\xf5\xec\xdb\xdf\x6e\x77\x96\x01\x72\x0a\x46\xb8\xd2\x64\xaa\x96\x3c\x70\x00\x5d\x10\x34\x7b\x61\xee\x25\xbd\x76\x42\xc2\xf9\xf5\x6c\x7d\xbe\x12\x5f\x91\x28\x77\xda\x37\xcf\x96\xeb\xb7\x56\xf7\xb8\xbd\x8b\x02\x35\xbb\x20\x8f\x3e\xa7\x86\x6d\xab\x1a\xe5\xad\x0e\xe0\xe7\xa0\x0b\x0e\x20\x54\x09\x05\x72\x4d\x14\xec\x10\x86\xb8\x09\x1d\xf8\xec\xdf\x64\x74\x02\xb7\x24\x91\x0c\x84\x85\xaf\x6d\x1e\x43\x65\x49\xa2\x20\x64\x7c\xe1\xf8\xfb\x9a\x76\x00\xf5\x89\xa9\x45\xa5\xd6\x29\x9b\x87\x9d\x92\x38\xb4\xb0\x44\x5b\xd3\x29\xa0\xcb\xa1\xc4\x15\x08\x45\x2e\x50\xbb\x2d\x7a\x69\x4b\x98\xc0\x17\x2f\x04\xec\xe6\x7e\x0a\x0b\xd5\x2a\x4c\xcf\xce\x0a\xd6\x2e\xe4\x8d\x2f\xcb\xda\xb1\xae\xce\x52\xf4\x72\x56\xab\x97\x70\x96\xd3\x92\xec\x59\xe0\x62\x8c\x62\x16\xac\x64\xb4\x16\x3a\xc3\x8a\xc7\x49\x74\x97\xc2\x7e\x52\xe6\x7f\x91\x36\x49\xc2\xbb\x1d\x59\x75\x15\xc3\x23\xa8\xb0\x2b\xb6\x3e\xa4\x58\x3c\xe0\x81\x18\x95\xd1\xdb\xd8\x1e\x6d\xb4\xd8\x18\x3a\x2e\x45\xeb\xdc\x7c\xb8\xbd\x83\x8e\x75\x72\xc6\xbe\xf5\x93\xdd\x37\x07\xc3\xc6\x05\xd1\x60\xec\xe6\x24\x8d\x13\xe7\xe2\xcb\x44\x93\x5c\x5e\x79\x76\xda\xc6\x16\x93\xdb\x37\x7f\xa8\xb3\x92\x35\xfa\xfd\x8f\x9a\x82\x46\x5f\x4d\xe0\x22\xe1\x00\x64\x04\x75\x95\xa3\x52\x3e\x81\x99\x83\x0b\x2c\xc9\x5e\x60\xa0\x3f\xdd\x01\xd1\xd2\x61\x1c\x0d\xfb\x3a\x17\x6c\x43\xd8\xfe\xe6\xc6\x6a\x5b\x1f\x3a\xa0\x19\xf0\x57\x9b\x9f\xb7\x15\x99\x9d\x8c\xc9\x29\xb0\xc4\x98\x56\x54\x8a\x99\xb0\x8d\x3e\xdd\xd3\x9f\xa9\xf1\x41\x23\x97\xbe\x44\x76\xfb\x1f\x06\x95\x82\x26\xc7\x67\x4e\x67\xd7\xc7\x1d\xda\xb2\x6e\x2f\x42\x6c\xce\xc7\xe4\x2b\xf6\x74\x00\xc0\xef\x1f\xdc\x92\xc5\xbb\x92\x9c\x1e\xc5\x3a\x43\xe7\x48\x9e\x1f\xd9\xb1\xf0\xcf\x69\xd3\xda\xb8\x3c\x07\xec\xd6\x5a\x28\xc9\x28\xfe\xf7\xe8\x3a\xe0\x30\xa9\x76\x3d\x93\xf3\x90\xbd\xa1\x2d\x5e\xbd\x1a\xbc\xa0\xc5\x60\xe8\x24\x55\x8e\xf7\xe2\x9c\x30\xfa\xa2\x47\xc6\x1d\xbb\x7c\x6c\xb7\xed\x84\xde\xf9\xcd\xd7\x58\x58\x04\xd5\x4b\x47\x08\x8a\x08\xa4\x47\x1a\x23\xc2\xa8\x33\x6c\xe9\xdc\x92\xe8\xaf\x94\x2d\xbc\x7f\x38\x64\x9a\xcc\x7b\x4b\xb8\x5f\x02\x76\x48\xfd\x3c\xe0\xee\xa3\x88\x5c\x5e\xdd\x7e\xc1\xf0\xc7\x1b\xa9\x7c\x22\x47\x4b\xfc\xc5\x17\x05\xbb\xe2\x8d\xb4\xbe\xa0\x59\xb0\xa3\x5b\x3a\x18\x3a\xaf\x21\xe4\x1d\xab\x8f\x11\x71\xe1\xdd\x9c\xdf\x2a\xd7\xd5\xed\xa7\x5e\xd7\x1e\x43\xc2\xe7\x74\x29\xc8\x6f\x77\xdb\x75\x6d\xed\x2d\x19\x79\xb3\x91\x6e\x7c\xad\xf4\x91\x9f\xde\x48\xe6\x57\x2f\x0f\x28\xbe\x76\x79\xb8\x58\x5f\x5a\x7f\x84\xe6\x81\xdc\x8f\x79\xf7\x88\xab\x06\xc8\x7b\x5c\xc1\x4a\x65\xaf\x87\x5e\x01\x36\x28\x82\xab\x7e\x7e\xd7\xc2\x4b\x54\xfa\xd0\x16\xf3\x23\xcb\x41\x71\x38\x33\x5e\x84\xd0\x39\x17\x83\x55\x24\x11\x40\x8d\x37\xb8\x29\xbc\xfb\xed\xa7\xf1\x3f\x7f\xff\xeb\xa4\xf9\xf3\xee\x78\xd4\x05\x28\xd7\x09\xf3\xe9\xe2\xf6\xdc\x18\x5f\x0f\xc1\x37\xb9\xba\xec\xff\x32\x8e\x98\xd9\x35\x01\xbe\x08\xb3\xab\xbb\x57\xed\xbb\xbe\xf9\x7a\xf9\xaa\x8d\x6f\x56\xec\x60\x75\x7d\x49\xb9\x4b\xc6\xc2\xf9\xa0\x6c\xc2\xb5\xf8\x7c\x60\xd7\xdd\xf3\x8b\x76\xf7\xe9\x02\x3f\x22\xcb\x1c\x9f\xde\xac\xc7\x55\x6c\xc8\x2a\x34\xf4\x7f\xe0\xa2\x03\x59\xcf\x6e\x2e\x38\xcb\x8f\x4a\x3a\x76\x85\x50\x08\x47\xa6\x6a\xd3\x0b\x91\x5e\x2c\xc8\x3c\xf4\xa1\xd7\xe1\x64\xad\xc5\x0e\xd4\x87\x41\x60\x7a\x41\xa0\xed\x0d\x7d\x00\x75\xd0\x6e\xd6\x9b\xd4\x44\x1e\x65\x82\xae\x01\xea\xb3\xf7\xce\x6d\xa9\x9b\x64\xcc\x2e\xbb\x56\xfa\xfc\x7b\xbc\x1b\x6d\x08\x34\x3d\x2d\x6d\x75\xf8\xaf\x96\x62\xe9\x48\x8f\xf2\xf8\x50\xaf\xa1\xa8\x75\x78\x45\xb7\x91\xf6\xed\xf4\x1b\x3e\x0b\xb1\xb9\xfb\xe1\x86\xc3\x78\x97\xf3\xd6\x24\x67\x58\x84\xf5\xc6\xb6\x4b\x25\x4d\xdc\xba\x65\x60\x17\x14\x9d\xa1\x30\x79\x7d\xc1\xdb\xe1\x70\xb2\xa1\xb5\x69\x5e\x9b\x49\x42\xd4\x31\x05\xc9\xce\x6c\xe1\x5d\x7f\x02\x27\x4b\x4c\xb6\x05\x46\xa1\x78\x6a\x3d\xf6\x82\x92\xcc\x02\x1d\x87\x32\xe5\x92\xcb\x29\x8f\x3d\x44\x6c\x64\x03\xf5\x63\xe5\xe3\x82\x5c\xdb\xe0\x29\xb2\x0d\x6b\x41\x36\xa2\x45\x2e\xb1\x1f\x46\xa8\x84\xbd\x30\x3c\xb8\xd8\x9c\x78\x81\xc7\xd8\xae\xf4\x92\x4d\xfb\xab\xca\xae\x22\x7f\xb4\x76\x63\xc5\xc4\x00\x0a\x5e\x92\x83\xcf\xec\xf2\x09\xdc\xbb\x6d\x9d\x9a\x1e\xa8\x97\x68\x46\x80\x79\xab\x13\x3d\x55\x96\x0d\xab\x5d\x35\x93\x97\xd5\x56\x2c\x80\x2e\x50\xa3\xca\x12\xd2\x3c\xc5\xf8\xb2\xf2\x2e\x5a\xbd\x97\xac\x49\x66\xcc\x7c\xad\x20\xa8\x8b\x34\x45\x40\x97\x46\x02\x2c\xcd\x78\xc2\x07\xda\xa1\x9f\x6c\x9a\x26\x0e\x32\x60\xd7\x34\x83\xf0\x89\xda\x96\x2d\xc3\x04\xbe\x3a\x43\x6d\xa4\xe7\xa7\xc9\xf2\x25\xa1\x8b\x6c\x92\x61\xd6\x96\x18\x10\xd5\x41\x3b\x9a\x88\x8e\x2e\x28\x07\x94\x8c\x55\x50\xd8\xae\x60\x0c\x1c\xbf\x19\x5f\x52\x80\x0a\x45\x3b\x0c\x38\xbf\x9e\xa5\xd1\x52\x2f\xd1\x05\x36\x29\x17\xb0\x24\xc8\xd0\x3c\x3c\xa2\xe4\x61\x9c\x4c\x37\xf7\xd2\xbc\x45\x1b\xa2\x72\xc6\x96\x35\x99\xdc\x90\xb8\xe8\xcc\x5e\x92\xe8\x56\xad\xf2\x7b\x52\x4c\x4e\x7a\xf6\x1f\x86\x75\x00\x8b\x41\xef\x04\x5d\xe0\x6e\xb6\x3a\x84\xe5\x73\x2f\x25\xea\x14\x72\x54\x1a\x2b\x97\xf4\xa3\x98\x5f\x52\x08\x58\x0c\xf2\x79\xf1\xbc\x10\x86\xa1\x1b\xe3\x10\x00\xdd\xa4\x33\x11\x85\xf6\x92\x17\xc1\x3b\x1a\x3f\x7a\xc9\x4f\x37\x53\xa8\x01\xd2\xb0\x37\xc2\x5c\x57\x01\x54\x2a\xbc\xac\xe2\xbb\xc1\x3a\xd0\xfa\x43\x2d\x42\x4e\x5b\xac\x7e\x8e\x71\xdd\x33\xd3\x1e\xc9\x22\xac\x00\xbb\x14\x0f\x1c\x69\xd6\x5a\xd5\x7a\x0a\xa1\x36\x0b\xc0\x90\xe4\xb6\xec\x86\x85\x7d\xa8\x33\x32\x6a\xa1\x88\xa8\xdb\x1e\x8e\x71\xc7\x0e\x42\x5d\x96\x28\xfc\x3d\xa5\x86\x69\xc4\x6c\xf1\x23\x29\x30\x28\xeb\x8b\xce\xe9\x2b\x4b\x47\x1c\x4f\x1b\x5e\xe3\xd9\x0d\xf0\xdf\xad\x2a\xea\xea\x74\x3c\xbe\x36\xfe\xba\x32\x0c\x25\x67\x7c\xe2\xc1\x55\xc5\x06\xad\x5d\x45\x88\xe8\x42\x20\x87\x18\x13\x11\x88\xc3\xc2\x8b\x42\xb5\x90\x34\x9e\xdc\x06\xd4\x41\xa2\x69\xc8\xd8\x4d\x9c\xd8\xe5\x1c\x23\xa4\xad\xb6\xdc\x94\x84\xfb\x13\xcc\x5c\xcc\x28\x3b\x56\xa9\xe9\xfe\x04\x2a\x6f\x51\x58\x57\xc3\x61\xf2\xd1\x0b\xd0\x13\x96\x95\xa5\x53\xe0\x7d\x2d\x3b\x3e\xa1\xa9\x3b\x18\x09\xb2\x59\x35\x91\xb5\x44\xcb\xf9\xe9\xb0\xc0\x49\x22\x0e\x90\xf6\xdd\x9f\x80\xc1\x90\x8c\x5a\x89\xcf\x30\x8b\xa5\x66\x11\x0b\x95\x94\xa7\x10\xfc\x2e\xe3\x41\xa2\x9b\x89\x5b\xb4\x2e\xe5\x70\x7f\x32\x73\x2d\x83\x5e\xac\x82\x97\x23\xa4\x29\x1c\xd4\x73\x7f\x8a\x37\xf5\x26\xf8\x7a\x3f\x45\xba\x83\xdd\x73\xef\x1d\xf3\xd0\xe5\xb4\x1b\x9b\xbd\x30\x03\x1d\xb8\x86\xe6\xff\x42\xfd\x4c\xab\x70\xdd\x60\xc9\x9f\xdd\xec\xf7\xea\xf8\x6c\xb1\xb9\x12\x4e\x21\x46\x63\xb3\xa0\x5e\x22\x4c\x6f\xad\xd4\xd9\xfa\xf7\x8b\x4e\xba\x36\xdf\xe1\x3f\xff\x1d\x6d\x52\x1f\x8d\xa1\x4a\x29\xbf\xda\xff\x59\xed\xa4\x71\x7b\xf7\xbb\x59\x7a\xdd\xba\x4d\xc2\x6f\xbf\x8f\x1a\xc6\x94\x7f\xeb\x7e\x21\x8b\x8b\xff\x0b\x00\x00\xff\xff\xf7\xab\x22\x12\x91\x1c\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
