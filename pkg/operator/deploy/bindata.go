// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xcd\x6e\xe3\xc8\x11\xbe\xeb\x29\x0a\xce\x61\x0e\xb1\xe4\x19\x04\x01\x12\xdd\x0c\x7b\x77\x22\xec\xee\xac\x31\x36\x26\x87\xf5\x1e\x8a\xcd\x12\x59\x71\xb3\x9b\xdb\x5d\x94\x47\x13\xe4\xdd\x83\x6a\x92\x12\x25\x91\xb6\xb5\x8b\xed\x8b\xc0\xfe\xf9\xea\xb7\xab\xbe\xd6\x6c\x3e\x9f\xcf\xb0\xe6\x2f\x14\x22\x7b\xb7\x04\xac\x99\xbe\x0a\x39\xfd\x8a\x8b\xa7\x7f\xc4\x05\xfb\xab\xcd\x87\xd9\x13\xbb\x7c\x09\x37\x4d\x14\x5f\x7d\xa6\xe8\x9b\x60\xe8\x96\xd6\xec\x58\xd8\xbb\x59\x45\x82\x39\x0a\x2e\x67\x00\xe8\x9c\x17\xd4\xe9\xa8\x9f\x00\xc6\x3b\x09\xde\x5a\x0a\xf3\x82\xdc\xe2\xa9\xc9\x28\x6b\xd8\xe6\x14\x12\x78\x2f\x7a\xf3\x7e\xf1\xf7\xc5\xfb\x19\x80\x09\x94\x8e\x3f\x70\x45\x51\xb0\xaa\x97\xe0\x1a\x6b\x67\x00\x0e\x2b\x5a\x82\xb1\x4d\x14\x0a\x71\x81\xc1\x2f\x7c\x4d\x2e\x96\xbc\x96\x05\xfb\x59\xac\xc9\xa8\xcc\x22\xf8\xa6\x5e\xc2\xc9\x7a\x8b\xd0\xa9\xd5\x99\xd4\x82\xa5\x19\xcb\x51\x7e\x18\xce\xfe\xc8\x51\xd2\x4a\x6d\x9b\x80\x76\x2f\x3a\x4d\x46\x76\x45\x63\x31\xec\xa6\x67\x00\xd1\xf8\x9a\x86\xa8\x9d\x79\x49\xe6\xbc\x33\x60\xf3\x01\x6d\x5d\xe2\x87\x16\xc5\x94\x54\x61\xab\x12\x80\xaa\x7b\x7d\xb7\xfa\xf2\xb7\xfb\x83\x69\x80\x9c\xa2\x09\x5c\x4b\x72\x55\x07\x0f\x1c\x41\x4a\x82\x76\x2f\xac\x7d\x48\x9f\xbd\x92\x70\x7d\xb7\xda\x9d\xaf\x83\xaf\x29\x08\xf7\xd6\xb7\x63\x10\xfa\xc1\xec\x91\xb4\x77\xaa\x50\xbb\x0b\x72\x8d\x39\xb5\x62\x3b\xd3\x28\xef\x6c\x00\xbf\x06\x29\x39\x42\xa0\x3a\x50\x24\xd7\x66\xc1\x01\x30\xe8\x26\x74\xe0\xb3\xff\x90\x91\x05\xdc\x53\x50\x18\x88\xa5\x6f\x6c\xae\xa9\xb2\xa1\x20\x10\xc8\xf8\xc2\xf1\xb7\x1d\x76\x04\xf1\x49\xa8\x45\xa1\x2e\x28\xfb\xc1\x4e\x28\x38\xb4\xb0\x41\xdb\xd0\x25\xa0\xcb\xa1\xc2\x2d\x04\x52\x29\xd0\xb8\x01\x5e\xda\x12\x17\xf0\x93\x0f\x04\xec\xd6\x7e\x09\xa5\x48\x1d\x97\x57\x57\x05\x4b\x9f\xf2\xc6\x57\x55\xe3\x58\xb6\x57\x29\x7b\x39\x6b\xc4\x87\x78\x95\xd3\x86\xec\x55\xe4\x62\x8e\xc1\x94\x2c\x64\xa4\x09\x74\x85\x35\xcf\x93\xea\x2e\xa5\xfd\xa2\xca\xff\x12\xba\x4b\x12\xdf\x1d\xe8\x2a\x5b\x4d\x8f\x28\x81\x5d\x31\x58\x48\xb9\xf8\x42\x04\x34\x2b\x35\xda\xd8\x1d\x6d\xad\xd8\x3b\x5a\xa7\xd4\x3b\x9f\xbf\xbb\x7f\x80\x5e\x74\x0a\xc6\xb1\xf7\x93\xdf\xf7\x07\xe3\x3e\x04\xea\x30\x76\x6b\x0a\x6d\x10\xd7\xc1\x57\x09\x93\x5c\x5e\x7b\x76\xd2\xe5\x16\x93\x3b\x76\x7f\x6c\xb2\x8a\x45\xe3\xfe\x5b\x43\x51\x34\x56\x0b\xb8\x49\x75\x00\x32\x82\xa6\xce\x51\x28\x5f\xc0\xca\xc1\x0d\x56\x64\x6f\x30\xd2\x9f\x1e\x00\xf5\x74\x9c\xab\x63\xdf\x16\x82\x61\x09\x3b\xde\xdc\x7a\x6d\xb0\xd0\x17\x9a\x89\x78\x75\xf7\xf3\xbe\x26\x73\x70\x63\x72\x8a\x1c\x34\xa7\x05\x85\xf4\x26\x0c\xab\x4f\x3f\xc6\x6f\xaa\x0e\x34\xe1\xd6\x57\xc8\xee\x78\x61\xd2\x28\x68\xef\xf8\xca\xc9\xea\xee\xbc\x43\x03\xef\x8e\x56\x88\xfd\x79\xbd\x7c\xc5\x91\x0d\x00\xf8\xed\x3b\xb7\xe1\xe0\x5d\x45\x4e\xce\x12\x9d\x9f\x6f\xe2\x9a\x50\x15\x3d\x71\xd8\x51\x58\xbe\xef\xb6\x1d\xc4\xe5\xfa\xf3\xcf\x5a\x75\x03\x8a\x0f\x3d\x10\x14\x5a\x65\x4e\xc0\xa6\x23\xa3\x43\x6b\x8c\x33\x6c\xe9\xda\x52\x90\x7f\x53\x56\x7a\xff\x34\xb6\xb1\x37\x25\xf3\xde\x12\x1e\xd7\xc7\x03\xa8\xdb\x4f\xf7\x3f\x61\xfc\xed\x0f\xa2\x7c\x24\x47\x1b\xfc\xd1\x17\x05\xbb\xe2\x0f\x62\x7d\xba\xff\x38\x6a\xfd\x6b\x10\x13\x17\x49\x47\xf1\xb2\x7a\x2f\x7b\xdd\x78\xb7\xe6\x62\x32\x45\x13\x00\x8a\xb6\x87\x25\xbc\xfb\xe5\xfd\xfc\x9f\xbf\xfe\x75\xd1\xfe\xbc\x7b\xc1\x8a\xd1\x2c\xd3\x51\x79\xc7\xe2\x75\xf1\xe3\xcd\xfd\x8b\x19\xae\x83\x5c\x53\x8d\xaf\xcc\xe1\x96\xb1\x70\x3e\x0a\x9b\x78\x17\x7c\x3e\xb1\xeb\xe1\xb4\xd9\xbd\x41\xcf\x17\x9c\xcd\x6e\x1d\x70\x95\x9f\x75\xbd\xd8\x15\x81\x62\x3c\xb3\x84\xb4\x4d\x99\xe4\xa6\x24\xf3\x44\xe1\xdc\xc0\x36\xc1\x4e\x24\x1a\x0b\x55\x13\x4b\xaf\xc6\xaf\xdf\x80\x21\xe0\xf6\x1c\xbf\x59\x6f\x12\x9b\x39\xcb\x05\x7d\x27\x1e\xf3\xf7\x41\x65\xea\x29\xf5\xea\xb6\xe7\x74\xd7\xdf\xb4\x0e\xed\x01\x5a\x72\x45\x03\xaa\xf9\x66\x2d\x36\x8e\xe4\xac\x88\x4f\x35\x3d\x41\x69\xe2\x1b\xda\x5e\xda\x77\xd0\xf8\x7c\x16\x95\x65\xfc\xee\xce\x67\xbc\xcb\x79\xf0\xa4\x98\x56\x61\xb7\xb1\xa3\x4b\x24\x49\x5a\x3f\x0d\xec\xa2\xa0\x33\x14\x17\x27\x40\x93\x79\x75\x20\xe1\x62\x8f\xb5\x67\x51\x2d\xa5\x55\x1b\x53\x92\x1c\x90\xdc\x77\xa7\x8d\xa4\xf7\x26\x2d\x86\x0a\x63\x20\x3d\xb5\x7b\x7f\x41\x45\xa6\x44\xc7\xb1\x4a\x77\xc9\xe5\x94\x2b\x0b\x56\x46\x15\x69\xbc\x60\x3c\x97\xe4\x3a\xa6\x21\xc8\x36\xee\x14\xd9\xab\xa6\x52\x94\x98\x21\xd4\x81\x7d\x60\x78\x72\xfe\xd9\x81\x0f\xf0\xac\x14\x7c\x14\x36\xed\xaf\x6b\xbb\x55\xf9\x68\xed\xde\x8b\x49\x00\x14\xbc\x21\x07\x4a\x52\x17\xf0\xe8\x86\x36\xb5\xbc\x7e\x14\x34\x23\xc0\xbc\xb3\x89\xbe\xd6\x96\x0d\x8b\xdd\xb6\x4f\x80\xed\x20\x17\x40\x4a\x14\x35\x39\xc4\x44\xec\x8d\xaf\x6a\xef\xd4\xeb\xa3\xb0\x26\xb9\x31\xf3\x8d\x40\x40\x29\x13\x9d\x45\x97\xb8\x29\x87\x96\x27\xfb\x48\x07\xf8\xc9\xa7\x89\xfa\x86\x09\xbf\x26\x32\xec\x13\xda\xc0\x97\x71\x01\x3f\x3b\x43\x5d\xa6\xe7\x97\xc9\xf3\x15\xa1\x53\x31\xc9\x31\x3b\x4f\x4c\xa8\xea\xa0\xe3\xc8\x1a\xe8\x82\x72\xc0\x90\xb1\x04\x0c\x6c\xb7\x30\x07\xd6\x35\xe3\x2b\x8a\x50\x63\x90\xbe\x06\x5c\xdf\xad\xd2\x1b\x67\x14\xb4\xc4\xf6\xca\x45\xac\x08\x32\x34\x4f\xcf\x18\xf2\x38\x4f\xae\x5b\xfb\xd0\x7e\xa9\x0f\x51\x38\x63\xcb\x92\x5c\x6e\x28\x38\x0d\xe6\x28\x24\xba\x6d\x67\xfc\x91\x16\x8b\x8b\x91\xfd\x2f\x97\x75\x00\x8b\x51\x1e\x02\xba\xc8\xfd\x23\x7f\xaa\x96\xaf\x7d\xa8\x50\x96\xa0\xcf\x87\xb9\x70\x45\xbf\xb7\xe6\x57\x14\x23\x16\x93\x72\x5e\x3d\x1f\x08\xe3\x14\xbb\x98\x2a\x40\x9f\xd3\x19\xad\x42\x47\x97\x17\xc1\x3b\x9a\x3f\xfb\x90\x5f\xee\x9f\x43\x13\xd0\x70\xf4\x96\xde\x75\x01\x14\x2a\x7c\xd8\xea\xb7\xc1\x26\xd2\x6e\xa1\x09\x81\x9c\x74\xb5\xfa\xb4\xc6\xf5\x63\x25\x23\x9a\x69\x59\x01\x76\x29\x1f\x58\x31\x1b\xa9\x1b\xb9\x84\xd8\x98\x12\x30\x26\xbd\x2d\xbb\x69\x65\x9f\x9a\x8c\x8c\x58\x28\xb4\xea\x76\x87\x35\xef\xd8\x41\x6c\xaa\x0a\x03\x7f\x4b\x57\xc3\xb4\x6a\x76\xf5\x23\x19\x30\xa9\xeb\xab\xc1\x19\x6b\x4b\x67\x1c\x4f\x1b\xde\x12\xd9\x7d\xe1\x7f\xd8\xd6\xd4\xf7\x69\x3d\xbe\x73\xfe\xae\x33\x4c\x5d\x4e\x1d\x7a\x70\x5b\xb3\x41\x6b\xb7\x5a\x22\xfa\x14\xc8\x41\x73\x42\x0b\x71\x2c\x7d\x10\xa8\xcb\x90\xde\xc9\xc3\x82\x3a\x09\x9a\x5e\xbb\xfd\xbf\x28\xec\x72\xd6\x0c\xe9\xba\x2d\xb7\x2d\xe1\xf1\x02\x33\xa7\x37\xca\xce\x25\x34\xf4\x78\x01\xb5\xb7\x18\x58\xb6\xd3\x69\xf2\xbd\x0f\x40\x5f\xb1\xaa\x2d\x5d\x02\x1f\x5b\xd9\xcb\x89\x6d\xdf\x41\x05\x64\xb3\x6d\x33\x6b\x83\x96\xf3\xcb\x69\x85\x93\x46\x1c\x21\xed\x7b\xbc\x00\x83\x31\x39\xb5\x0e\x3e\xc3\x4c\x5b\x4d\xa9\x8d\x2a\x54\x97\x10\xfd\xa1\xe0\x49\xd0\xce\x7e\xad\xa7\x68\x2d\xe5\xf0\x78\xb1\x72\x9d\x80\xd1\x5a\x05\xaf\x67\x48\xdb\x38\x68\x84\x3f\x29\x3f\x6f\x93\x6f\x74\x49\x71\x47\x16\x5e\xe0\x98\x2f\x91\xd3\xfe\x89\xfa\xca\x63\x7c\x82\x86\xe6\xff\x42\xf9\x81\xb6\xf1\xae\xad\x25\xa7\xa7\x27\xb9\xcf\x1b\xde\x19\xa7\xea\x8e\xda\x78\x32\xd9\x52\xc2\x25\x68\x36\xb6\x13\xe2\x83\x96\xe9\xc1\x4c\x93\xed\xfe\x48\xeb\xb5\xeb\xee\x3b\xfc\xf7\x7f\xb3\xfd\xd5\x47\x63\xa8\x16\xca\x3f\x1d\xff\xbf\x7b\xd1\x86\xbd\xff\x03\x37\x7d\x0e\xd8\x24\xfc\xf2\xeb\xac\x15\x4c\xf9\x97\xfe\xaf\x5a\x9d\xfc\x7f\x00\x00\x00\xff\xff\x1e\x00\x52\xd8\x1a\x17\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
