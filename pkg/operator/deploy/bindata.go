// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x6e\xe3\xc8\x11\xbe\xeb\x29\x0a\xce\xc1\x87\x58\xf4\x0c\x82\x00\x89\x6e\x86\x67\x67\x23\xec\x66\xd6\x18\x1b\x73\x59\xef\xa1\xd4\x2c\x91\x15\x37\xbb\x99\xee\xa2\x3c\x9a\x20\xef\x1e\x54\x93\x94\x28\x89\xb4\xad\x1d\x04\xd8\xbe\x08\xea\x9f\xfa\xaf\xaf\xbf\xe6\x6c\x3e\x9f\xcf\xb0\xe6\x2f\x14\x22\x7b\xb7\x00\xac\x99\xbe\x0a\x39\xfd\x17\xb3\xa7\xbf\xc5\x8c\xfd\xf5\xe6\xfd\xec\x89\x5d\xbe\x80\xdb\x26\x8a\xaf\x3e\x53\xf4\x4d\x30\xf4\x81\xd6\xec\x58\xd8\xbb\x59\x45\x82\x39\x0a\x2e\x66\x00\xe8\x9c\x17\xd4\xe9\xa8\x7f\x01\x8c\x77\x12\xbc\xb5\x14\xe6\x05\xb9\xec\xa9\x59\xd1\xaa\x61\x9b\x53\x48\xc2\x7b\xd5\x9b\x77\xd9\x5f\xb3\x77\x33\x00\x13\x28\x1d\x7f\xe0\x8a\xa2\x60\x55\x2f\xc0\x35\xd6\xce\x00\x1c\x56\xb4\x00\x63\x9b\x28\x14\x62\x86\xc1\x67\xbe\x26\x17\x4b\x5e\x4b\xc6\x7e\x16\x6b\x32\xaa\xb3\x08\xbe\xa9\x17\x70\xb2\xde\x4a\xe8\xcc\xea\x5c\x6a\x85\xa5\x19\xcb\x51\x7e\x1a\xce\xfe\xcc\x51\xd2\x4a\x6d\x9b\x80\x76\xaf\x3a\x4d\x46\x76\x45\x63\x31\xec\xa6\x67\x00\xd1\xf8\x9a\x86\x52\x3b\xf7\x92\xce\x79\xe7\xc0\xe6\x3d\xda\xba\xc4\xf7\xad\x14\x53\x52\x85\xad\x49\x00\x6a\xee\xcd\xdd\xf2\xcb\x5f\xee\x0f\xa6\x01\x72\x8a\x26\x70\x2d\x29\x54\x9d\x78\xe0\x08\x52\x12\xb4\x7b\x61\xed\x43\xfa\xdb\x1b\x09\x37\x77\xcb\xdd\xf9\x3a\xf8\x9a\x82\x70\xef\x7d\x3b\x06\xa9\x1f\xcc\x1e\x69\xbb\x54\x83\xda\x5d\x90\x6b\xce\xa9\x55\xdb\xb9\x46\x79\xe7\x03\xf8\x35\x48\xc9\x11\x02\xd5\x81\x22\xb9\xb6\x0a\x0e\x04\x83\x6e\x42\x07\x7e\xf5\x2f\x32\x92\xc1\x3d\x05\x15\x03\xb1\xf4\x8d\xcd\xb5\x54\x36\x14\x04\x02\x19\x5f\x38\xfe\xb6\x93\x1d\x41\x7c\x52\x6a\x51\xa8\x4b\xca\x7e\xb0\x13\x0a\x0e\x2d\x6c\xd0\x36\x74\x05\xe8\x72\xa8\x70\x0b\x81\x54\x0b\x34\x6e\x20\x2f\x6d\x89\x19\xfc\xd3\x07\x02\x76\x6b\xbf\x80\x52\xa4\x8e\x8b\xeb\xeb\x82\xa5\x2f\x79\xe3\xab\xaa\x71\x2c\xdb\xeb\x54\xbd\xbc\x6a\xc4\x87\x78\x9d\xd3\x86\xec\x75\xe4\x62\x8e\xc1\x94\x2c\x64\xa4\x09\x74\x8d\x35\xcf\x93\xe9\x2e\x95\x7d\x56\xe5\x7f\x0a\x5d\x93\xc4\xcb\x03\x5b\x65\xab\xe5\x11\x25\xb0\x2b\x06\x0b\xa9\x16\x5f\xc8\x80\x56\xa5\x66\x1b\xbb\xa3\xad\x17\xfb\x40\xeb\x94\x46\xe7\xf3\x0f\xf7\x0f\xd0\xab\x4e\xc9\x38\x8e\x7e\x8a\xfb\xfe\x60\xdc\xa7\x40\x03\xc6\x6e\x4d\xa1\x4d\xe2\x3a\xf8\x2a\xc9\x24\x97\xd7\x9e\x9d\x74\xb5\xc5\xe4\x8e\xc3\x1f\x9b\x55\xc5\xa2\x79\xff\x77\x43\x51\x34\x57\x19\xdc\x26\x1c\x80\x15\x41\x53\xe7\x28\x94\x67\xb0\x74\x70\x8b\x15\xd9\x5b\x8c\xf4\x7f\x4f\x80\x46\x3a\xce\x35\xb0\x6f\x4b\xc1\x10\xc2\x8e\x37\xb7\x51\x1b\x2c\xf4\x40\x33\x91\xaf\xae\x3f\xef\x6b\x32\x07\x1d\x93\x53\xe4\xa0\x35\x2d\x28\xa4\x9d\x30\x44\x9f\x7e\x8c\x77\xaa\x0e\x34\xe1\x83\xaf\x90\xdd\xf1\xc2\xa4\x53\xd0\xf6\xf8\xd2\xc9\xf2\xee\xbc\x43\x83\xe8\x8e\x22\xc4\xfe\xbc\x36\x5f\x71\xe4\x03\x00\x7e\xfb\xc1\x6d\x38\x78\x57\x91\x93\xb3\x54\xe7\xe7\xbb\xb8\x26\x54\x43\x4f\x02\x76\x94\x96\x8f\xdd\xb6\x83\xbc\xdc\x7c\xfe\x45\x51\x37\xa0\xf8\xd0\x0b\x82\x42\x51\xe6\x44\xd8\x74\x66\x74\x28\xc6\x38\xc3\x96\x3e\xdd\xff\x38\xba\xa1\x77\x61\xe5\xbd\x25\x3c\xc6\xc5\xc9\x5a\xd3\x51\x90\xa3\x0d\xfe\xec\x8b\x82\x5d\x71\x2a\xfb\x65\xc3\x8c\x77\x6b\x2e\x26\xb3\x98\x04\xa0\x28\x82\x2e\xe0\xf2\xd7\x77\xf3\xbf\xff\xf6\xe7\xac\xfd\xb9\x7c\xc1\x8b\xd1\x44\xe8\xa8\xbc\x63\xf1\xba\xf8\xe3\xed\xfd\x8d\x31\xbe\x19\x2b\x00\x1d\xe4\x9a\x6a\x7c\x65\xae\x69\xe9\x2f\x61\x5f\xc4\xe5\xa7\x87\x37\xed\xfb\x6e\x7b\x5f\x2c\xda\xd7\x6c\xfe\xc0\x58\x38\x1f\x85\x4d\xbc\x0b\x3e\x9f\xd8\xf5\x70\x7a\x7f\xf5\x4b\xb7\xf8\x11\x39\xac\xf1\xeb\x77\xfb\xf1\x49\x79\x4e\x8d\x86\xfe\xb8\x91\x7f\xa1\xdc\xd9\xad\x03\x2e\xf3\xb3\x30\x80\x5d\x11\x28\xc6\x33\x71\xae\x65\x0e\x24\xb7\x25\x99\x27\x0a\xe7\xb6\x56\x13\xec\x44\xab\xb3\x50\x35\xb1\xf4\x6a\x26\xfb\x0d\x18\x02\x6e\xcf\x89\x9b\xf5\x26\x51\xae\xb3\x42\xd0\xd3\x85\xb1\x78\x1f\xc0\x67\xcf\xfb\x97\x1f\x7a\xe2\x79\xf3\x4d\xc1\x72\x2f\xa0\x65\x80\x34\xe0\xc3\x6f\xb6\x62\xe3\x48\xce\xca\xf8\xd4\xcd\x2c\x28\x4d\x7c\xc3\xdd\x9c\xf6\x1d\xdc\xce\x7e\x15\x95\x0a\xfd\xee\xeb\xd9\x78\x97\xf3\xe0\xdd\x33\x6d\xc2\x6e\x63\xc7\xe9\x48\x92\xb6\x7e\x1a\xd8\x45\x41\x67\x28\x66\x27\x82\x26\xeb\xea\x40\xc3\xc5\x5e\xd6\x9e\xea\xb5\xbc\x5b\x7d\x4c\x45\x72\xc0\xc4\x2f\xc7\x1b\x38\x45\x22\x1b\x1a\x8c\x81\xf4\xd4\xee\x91\x08\x15\x99\x12\x1d\xc7\x2a\xf5\x92\xcb\x29\x57\xaa\xae\xb4\x2f\xd2\x38\x04\x3e\x97\xe4\x3a\x3a\x24\xc8\x36\xee\x0c\xd9\x9b\xa6\x5a\x94\x3d\x22\xd4\x81\x7d\x60\x78\x72\xfe\xd9\x81\x0f\xf0\xac\xef\x84\x51\xb1\x69\x7f\x5d\xdb\xad\xea\x47\x6b\xf7\x51\x4c\x0a\xa0\xe0\x0d\x39\x50\x26\x9d\xc1\xa3\x1b\xfa\xd4\x3e\x3e\x46\x85\xae\x08\x30\xef\x7c\xa2\xaf\xb5\x65\xc3\x62\xb7\xed\x3b\x65\x3b\xa8\x05\x90\x12\x45\x5d\x0e\x31\xbd\x3e\x8c\xaf\x6a\xef\x34\xea\xa3\x62\x4d\x0a\xe3\xca\x37\x02\x01\xa5\x4c\x9c\x1b\x5d\x22\xd0\x1c\x5a\x32\xef\x23\x1d\xc8\x4f\x31\x4d\xfc\x3c\x4c\xc4\x35\x31\x76\x9f\xa4\x0d\x62\x19\x33\xf8\xc5\x19\xea\x2a\x3d\xbf\x4a\x91\xaf\x08\x9d\xaa\x49\x81\xd9\x45\x62\xc2\x54\x07\x1d\x91\xd7\x44\x17\x94\x03\x86\x15\x4b\xc0\xc0\x76\x0b\x73\x60\x5d\x33\xbe\xa2\x08\x35\x06\xe9\x31\xe0\xe6\x6e\x99\x1e\x62\xa3\x42\x4b\x6c\x5b\x2e\x62\x45\xb0\x42\xf3\xf4\x8c\x21\x8f\xf3\x14\xba\xb5\x0f\xed\x3f\x8d\x21\x0a\xaf\xd8\xb2\xa4\x90\x1b\x0a\x4e\x93\x39\x2a\x12\xdd\xb6\x73\xfe\xc8\x8a\xec\x62\x64\xff\xcb\xb0\x0e\x60\x31\xca\x43\x40\x17\xb9\xff\x12\x31\x85\xe5\x6b\x1f\x2a\x94\x05\xe8\x1b\x67\x2e\x5c\xd1\xef\xc5\xfc\x8a\x62\xc4\x62\x52\xcf\xab\xe7\x03\x61\x9c\xe2\x77\x53\x00\xf4\x39\x9d\x51\x14\x3a\x6a\x5e\x04\xef\x68\xfe\xec\x43\x7e\xb5\x7f\xb3\x4d\x88\x86\xa3\x07\xff\xee\x16\x40\xa1\xc2\x87\xad\xfe\x37\xd8\x44\xda\x2d\x34\x21\x90\x93\x0e\xab\x4f\x31\xae\x1f\x4b\x19\xb1\x4c\x61\x05\xd8\xa5\x7a\x60\x95\xd9\x48\xdd\xc8\x15\xc4\xc6\x94\x80\x31\xd9\x6d\xd9\x4d\x1b\xfb\xd4\xac\xc8\x88\x85\x42\x51\xb7\x3b\xac\x75\xc7\x0e\x62\x53\x55\x18\xf8\x5b\x6a\x0d\xd3\x9a\xd9\xe1\x47\x72\x60\xd2\xd6\x57\x93\x33\x76\x2d\x9d\x71\x3c\x6d\x78\x4b\x66\xf7\xc0\xff\xb0\xad\xa9\xbf\xa7\xf5\xf8\x2e\xf8\xbb\x9b\x61\xaa\x39\x75\xe8\xc1\x6d\xcd\x06\xad\xdd\x2a\x44\xf4\x25\x90\x83\xd6\x84\x02\x71\x2c\x7d\x10\xa8\xcb\x90\x1e\xf3\x43\x40\x9d\x14\x9a\x9e\xe4\xfd\xa7\x1e\x76\x39\x6b\x85\x74\xb7\x2d\xb7\x57\xc2\xe3\x05\xae\x9c\x76\x94\x9d\x4b\x68\xe8\xf1\x02\x6a\x6f\x31\xb0\x6c\xa7\xcb\xe4\xa3\x0f\x40\x5f\xb1\xaa\x2d\x5d\x01\x1f\x7b\xd9\xeb\x89\xed\xbd\x83\x2a\x90\xcd\xb6\xad\xac\x0d\x5a\xce\xaf\xa6\x0d\x4e\x16\x71\x84\xb4\xef\xf1\x02\x0c\xc6\x14\xd4\x3a\xf8\x15\xae\xf4\xaa\x29\xf5\xa2\x0a\xd5\x15\x44\x7f\xa8\x78\x52\x68\xe7\xbf\xe2\x29\x5a\x4b\x39\x3c\x5e\x2c\x5d\xa7\x60\x14\xab\xe0\xf5\x0a\x69\x2f\x0e\x1a\xe1\x4f\xca\xd4\xdb\xe2\x1b\x5d\x52\xb9\x23\x0b\x2f\x70\xcc\x97\xc8\x69\xff\x8e\x7e\xe5\x8b\xc1\x04\x0d\xcd\xff\x81\xf2\x13\x6d\xe3\x5d\x8b\x25\xa7\xa7\x27\xb9\xcf\x1b\xde\x19\xa7\xe6\x8e\xfa\x78\x32\xd9\x52\xc2\x05\x68\x35\xb6\x13\xe2\x83\xc2\xf4\x60\xa6\x59\xed\xbe\xf6\xf5\xd6\x75\xfd\x0e\xff\xf9\xef\x6c\xdf\xfa\x68\x0c\xd5\x42\xf9\xa7\xe3\x8f\xd0\x17\x6d\xda\xfb\xaf\xcc\xe9\xef\x80\x4d\xc2\xaf\xbf\xcd\x5a\xc5\x94\x7f\xe9\xbf\x27\xeb\xe4\xff\x02\x00\x00\xff\xff\x46\x9e\x78\x23\xbf\x17\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
