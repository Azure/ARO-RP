// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4b\x6f\xe3\xc8\x11\xbe\xeb\x57\x14\x9c\x83\x0f\xb1\xe4\x19\x04\x01\x12\xdd\x0c\x7b\x67\x22\xec\x8e\xc7\xb0\x8d\xd9\xc3\x7a\x0f\xa5\x66\x89\xac\xb8\xd9\xcd\xad\x6e\xca\xd6\x04\xf9\xef\x41\x35\x49\xbd\x4c\xca\xd6\x18\xb9\x6c\x5f\x04\xf6\xe3\xab\x77\x75\x55\x6b\x34\x1e\x8f\x47\x58\xf1\x37\x92\xc0\xde\x4d\x01\x2b\xa6\xe7\x48\x4e\xbf\xc2\xe4\xf1\x1f\x61\xc2\xfe\x7c\xf9\x71\xf4\xc8\x2e\x9b\xc2\x65\x1d\xa2\x2f\x6f\x29\xf8\x5a\x0c\x5d\xd1\x82\x1d\x47\xf6\x6e\x54\x52\xc4\x0c\x23\x4e\x47\x00\xe8\x9c\x8f\xa8\xd3\x41\x3f\x01\x8c\x77\x51\xbc\xb5\x24\xe3\x9c\xdc\xe4\xb1\x9e\xd3\xbc\x66\x9b\x91\x24\xf0\x8e\xf4\xf2\xc3\xe4\xef\x93\x0f\x23\x00\x23\x94\x8e\xdf\x73\x49\x21\x62\x59\x4d\xc1\xd5\xd6\x8e\x00\x1c\x96\x34\x05\x63\xeb\x10\x49\xc2\x04\xc5\x4f\x7c\x45\x2e\x14\xbc\x88\x13\xf6\xa3\x50\x91\x51\x9a\xb9\xf8\xba\x9a\xc2\x8b\xf5\x06\xa1\x65\xab\x15\xa9\x01\x4b\x33\x96\x43\xfc\x79\x7b\xf6\x17\x0e\x31\xad\x54\xb6\x16\xb4\x1b\xd2\x69\x32\xb0\xcb\x6b\x8b\xb2\x9e\x1e\x01\x04\xe3\x2b\xda\x46\x6d\xc5\x4b\x34\xc7\xad\x00\xcb\x8f\x68\xab\x02\x3f\x36\x28\xa6\xa0\x12\x1b\x96\x00\x94\xdd\x8b\x9b\xd9\xb7\xbf\xdd\xed\x4c\x03\x64\x14\x8c\x70\x15\x93\xaa\x5a\x78\xe0\x00\xb1\x20\x68\xf6\xc2\xc2\x4b\xfa\xec\x98\x84\x8b\x9b\xd9\xfa\x7c\x25\xbe\x22\x89\xdc\x49\xdf\x8c\x2d\xd3\x6f\xcd\xee\x51\x3b\x55\x86\x9a\x5d\x90\xa9\xcd\xa9\x21\xdb\x8a\x46\x59\x2b\x03\xf8\x05\xc4\x82\x03\x08\x55\x42\x81\x5c\xe3\x05\x3b\xc0\xa0\x9b\xd0\x81\x9f\xff\x9b\x4c\x9c\xc0\x1d\x89\xc2\x40\x28\x7c\x6d\x33\x75\x95\x25\x49\x04\x21\xe3\x73\xc7\xdf\xd7\xd8\x01\xa2\x4f\x44\x2d\x46\x6a\x8d\xb2\x19\xec\x22\x89\x43\x0b\x4b\xb4\x35\x9d\x01\xba\x0c\x4a\x5c\x81\x90\x52\x81\xda\x6d\xe1\xa5\x2d\x61\x02\x5f\xbc\x10\xb0\x5b\xf8\x29\x14\x31\x56\x61\x7a\x7e\x9e\x73\xec\x5c\xde\xf8\xb2\xac\x1d\xc7\xd5\x79\xf2\x5e\x9e\xd7\xd1\x4b\x38\xcf\x68\x49\xf6\x3c\x70\x3e\x46\x31\x05\x47\x32\xb1\x16\x3a\xc7\x8a\xc7\x89\x75\x97\xdc\x7e\x52\x66\x7f\x91\x36\x48\xc2\xe9\x0e\xaf\x71\xa5\xee\x11\xa2\xb0\xcb\xb7\x16\x92\x2f\x1e\xb0\x80\x7a\xa5\x5a\x1b\xdb\xa3\x8d\x14\x1b\x45\xeb\x94\x6a\xe7\xf6\xa7\xbb\x7b\xe8\x48\x27\x63\xec\x6b\x3f\xe9\x7d\x73\x30\x6c\x4c\xa0\x0a\x63\xb7\x20\x69\x8c\xb8\x10\x5f\x26\x4c\x72\x59\xe5\xd9\xc5\xd6\xb7\x98\xdc\xbe\xfa\x43\x3d\x2f\x39\xaa\xdd\xff\xa8\x29\x44\xb5\xd5\x04\x2e\x53\x1e\x80\x39\x41\x5d\x65\x18\x29\x9b\xc0\xcc\xc1\x25\x96\x64\x2f\x31\xd0\xff\xdd\x00\xaa\xe9\x30\x56\xc5\xbe\xcd\x04\xdb\x29\x6c\x7f\x73\xa3\xb5\xad\x85\x2e\xd1\x0c\xd8\xab\x8d\xcf\xbb\x8a\xcc\x4e\xc4\x64\x14\x58\xd4\xa7\x23\x46\xd2\x48\xd8\xce\x3e\xdd\xe8\x8f\x54\x1d\x68\xe4\xca\x97\xc8\x6e\x7f\x61\x50\x28\x68\x62\x7c\xe6\xe2\xec\xe6\xb8\x43\x5b\xda\xed\xcd\x10\x9b\xf3\x1a\x7c\xf9\x9e\x0c\x00\xf8\xfd\x27\xb7\x64\xf1\xae\x24\x17\x8f\x22\x9d\x1d\x2f\xe2\x82\x50\x19\x7d\xa1\xb0\x3d\xb3\x7c\x6a\xb7\xed\xd8\xe5\xe2\xf6\xab\x66\x5d\xc1\xe8\xa5\x03\x82\x5c\xb3\xcc\x0b\xb0\x61\xcb\xe8\xd0\x1c\xe3\x0c\x5b\xba\xb0\x24\xf1\x57\x9a\x17\xde\x3f\xf6\x6d\xec\x44\x99\x7b\x6f\x09\xf7\xf3\xe3\x0e\xd4\xd5\xf5\xdd\x17\x0c\x7f\xbc\x13\xe5\x33\x39\x5a\xe2\x2f\x3e\xcf\xd9\xe5\xef\xc4\xfa\x82\xa6\x60\x47\x77\xd4\x63\xd4\xe3\x80\xbc\xe3\xe8\xd5\x98\x97\xde\x2d\xf8\xbd\x7c\x5d\xdf\x7d\xee\xb5\xca\x31\x10\x3e\xa3\x2b\x41\x76\x24\xef\x44\xba\xa9\xad\xbd\x23\x23\xef\x56\xd2\xad\xaf\x23\x7d\xe2\xe7\x77\xc2\xfc\xea\xe5\x11\xc5\xd7\x2e\x0b\x97\xeb\x62\xec\x47\x30\x07\xd2\xa1\x8e\xfc\xb0\x93\x1d\x8e\x1d\x93\x5c\x60\x30\xd1\x24\x00\x8c\x7a\xc9\x4f\xe1\xf4\xb7\x0f\xe3\x7f\xfe\xfe\xd7\x49\xf3\x73\x7a\x40\x8a\xde\x5c\xa1\xa3\x5c\xfb\xde\xe7\xcb\xbb\x0b\x63\x7c\xdd\x97\xa3\x74\x90\xab\xcb\xfe\x95\xb1\x66\x8e\xae\x4e\xf4\x79\x98\x5d\xdf\xbf\x69\xdf\xcd\xed\xd7\xab\x37\x6d\x7c\xb7\x60\x07\x13\xf0\x6b\xc2\x5d\x31\xe6\xce\x87\xc8\x26\xdc\x88\xcf\x06\x76\xdd\xbf\xac\xc5\xba\xa5\x4b\xfc\x84\x2c\x0b\x7c\x7e\xb7\x1c\xd7\x5a\xb3\x57\x68\xe8\x4f\x60\xa2\x03\x01\xc4\x6e\x21\x38\xcb\x8e\xba\xf8\xd8\xe5\x42\x21\x1c\x79\xb9\x37\xe5\x32\xc5\xcb\x82\xcc\x63\x5f\x22\x38\x1c\xac\xb5\xd8\x81\x54\xcb\x91\xca\x81\xa5\x57\x4d\xde\x6d\x40\x11\x5c\x1d\xa3\x37\xeb\x4d\xea\x33\x8e\x52\x41\x57\x23\xf7\xe9\x7b\xa7\x66\xe8\x9a\xdd\xd9\x55\xd7\x6d\x5d\x7c\xd7\x0a\x61\x03\xd0\xb4\x3d\xb4\xd5\x04\xbe\x99\x8b\xa5\xa3\x78\x94\xc5\x87\xca\xd1\x88\xb1\x0e\x6f\x28\x48\xd3\xbe\x9d\x92\xd4\xcf\x83\xd6\xff\x3f\x5c\x93\x1a\xef\x32\xde\x6a\xf6\x87\x59\x58\x6f\x6c\x1b\x19\x8a\x89\x5a\x37\x0d\xec\x42\x44\x67\x28\x4c\x5e\x00\x0d\xfa\xd5\x0e\x85\x93\x0d\xd6\xa6\xbf\x69\x9a\x4d\x95\x31\x39\xc9\x4e\xfb\x79\xda\x1f\xc0\x49\x13\x93\x6d\x86\x51\x48\x4f\xad\x5f\x46\xa0\x24\x53\xa0\xe3\x50\xa6\x58\x72\x19\x65\xda\x9f\x6a\xaf\x13\xa8\x3f\x57\x3e\x15\xe4\xda\x1e\x20\x22\xdb\xb0\x66\x64\xc3\x9a\x52\xd1\x96\x09\xa1\x12\xf6\xc2\xf0\xe8\xfc\x93\x03\x2f\xf0\xa4\xcd\x71\x2f\x6c\xda\x5f\x55\x76\xa5\xf4\xd1\xda\x8d\x16\x13\x01\xc8\x79\x49\x0e\xb4\x7d\x9c\xc0\x83\xdb\x96\xa9\xe9\xb8\x7b\x41\xe7\x04\x98\xb5\x32\xd1\x73\x65\xd9\x70\xb4\xab\xa6\x39\x5f\x6d\xf9\x02\xc4\x02\xa3\x8a\x2c\x21\xb5\xdc\xc6\x97\x95\x77\xaa\xf5\x5e\x58\x93\xd4\x38\xf7\x75\x04\xc1\x58\xa4\x46\x13\x5d\xea\x1a\x59\x9a\x0e\xd6\x07\xda\xc1\x4f\x3a\x4d\x4d\xa9\x0c\xe8\x35\xb5\xa9\x3e\xa1\x6d\xe9\x32\x4c\xe0\xab\x33\xd4\x7a\x7a\x76\x96\x34\x5f\x12\x3a\x25\x93\x14\xb3\xd6\xc4\x00\xab\x0e\xda\xee\x55\x0d\x9d\x53\x06\x28\x73\x8e\x82\xc2\x76\x05\x63\x60\x5d\x33\xbe\xa4\x00\x15\x4a\xec\x72\xc0\xc5\xcd\x2c\xbd\x3e\xf4\x82\x16\xd8\x84\x5c\xc0\x92\x60\x8e\xe6\xf1\x09\x25\x0b\xe3\xa4\xba\x85\x97\xe6\x4b\x75\x88\x91\xe7\x6c\x39\x26\x95\x1b\x12\xa7\xc6\xec\x85\x44\xb7\x6a\x85\xdf\xe3\x62\x72\xd2\xb3\xff\x70\x5a\x07\xb0\x18\xe2\xbd\xa0\x0b\xdc\x3d\xbf\x0d\xe5\xf2\x85\x97\x12\xe3\x14\xb4\xb1\x1f\x47\x2e\xe9\x47\x73\x7e\x49\x21\x60\x3e\x48\xe7\xd5\xf3\x42\x18\x86\x2a\xc6\xa1\x04\x74\x9b\xce\x68\x16\xda\x0b\x5e\x04\xef\x68\xfc\xe4\x25\x3b\xdb\x3c\x54\x0c\x40\xc3\xde\x2b\xd7\xfa\x16\xc0\x48\xb9\x97\x95\x7e\x1b\xac\x03\xad\x17\x6a\x11\x72\xb1\xcd\xd5\x2f\x73\x5c\x37\x66\xb1\x87\x33\x4d\x2b\xc0\x2e\xf9\x03\x2b\x66\x1d\xab\x3a\x9e\x41\xa8\x4d\x01\x18\x12\xdf\x96\xdd\x30\xb3\x8f\xf5\x9c\x4c\xb4\x90\x6b\xd6\x6d\x0f\xab\xdf\xb1\x83\x50\x97\x25\x0a\x7f\x4f\xa1\x61\x1a\x36\xdb\xfc\x91\x04\x18\xe4\xf5\x55\xe3\xf4\x5d\x4b\x47\x1c\x4f\x1b\xde\x62\xd9\x4d\xe2\xbf\x5f\x55\xd4\xdd\xd3\x7a\x7c\xad\xfc\xf5\xcd\x30\x14\x9c\x3a\xf4\xe0\xaa\x62\x83\xd6\xae\x34\x45\x74\x2e\x90\x81\xfa\x84\x26\xe2\x50\x78\x89\x50\x15\x92\x5e\xb0\xb6\x13\xea\x20\x68\x7a\x87\xea\xde\x37\xd9\x65\xac\x1e\xd2\xde\xb6\xdc\x5c\x09\x0f\x27\x38\x77\x1a\x51\x76\x1c\xa5\xa6\x87\x13\xa8\xbc\x45\xe1\xb8\x1a\x76\x93\x4f\x5e\x80\x9e\xb1\xac\x2c\x9d\x01\xef\x4b\xd9\xd1\x09\xcd\xbd\x83\x0a\xc8\x66\xd5\x78\xd6\x12\x2d\x67\x67\xc3\x0c\x27\x8e\x38\x40\xda\xf7\x70\x02\x06\x43\x52\x6a\x25\x7e\x8e\x73\xbd\x6a\x0a\xbd\xa8\xa4\x3c\x83\xe0\x77\x09\x0f\x82\xb6\xf2\x6b\x3e\x45\x6b\x29\x83\x87\x93\x99\x6b\x09\xf4\xe6\x2a\x78\xdd\x43\x9a\x8b\x83\x7a\xea\x27\xad\xd4\x1b\xe7\xeb\x5d\x52\xdc\x9e\x85\x03\x35\xe6\xa1\xe2\xb4\x7b\x3c\x7a\xe5\x99\x6c\xa0\x0c\xcd\xfe\x85\xf1\x67\x5a\x85\x9b\x26\x97\xbc\x3c\x3d\x58\xfb\xbc\xa1\xcf\x78\xc9\x6e\xaf\x8c\x2f\x26\x9b\x92\x70\x0a\xea\x8d\xcd\x44\xf4\xa2\x69\x7a\x6b\xa6\x9e\xaf\x9f\xb8\x3b\xee\xda\x78\x87\xff\xfc\x77\xb4\x09\x7d\x34\x86\xaa\x48\xd9\xf5\xfe\x3f\x2f\x27\x8d\xd9\xbb\xbf\x56\xd2\xe7\x56\x35\x09\xbf\xfd\x3e\x6a\x08\x53\xf6\xad\xfb\x13\x45\x27\xff\x17\x00\x00\xff\xff\x67\xdf\xaa\xff\xb4\x1a\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
