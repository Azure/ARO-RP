// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x6f\xe3\xc8\xd1\xbe\xeb\x57\x14\xfc\x1e\x7c\x78\x2d\x79\x06\x41\x80\x44\x37\xc3\xde\x9d\x08\xbb\x33\x6b\x8c\x8d\xc9\x61\xbd\x87\x52\xb3\x44\x56\xdc\xec\xe6\x76\x17\xe5\xd1\x04\xf9\xef\x41\x35\x49\x89\x92\x48\xd9\x9a\x41\xfa\x22\xa8\x3f\x9e\xaa\x7a\xea\xa3\xab\x39\x99\x4e\xa7\x13\xac\xf8\x0b\x85\xc8\xde\xcd\x01\x2b\xa6\xaf\x42\x4e\xff\xc5\xd9\xf3\xdf\xe2\x8c\xfd\xf5\xfa\xfd\xe4\x99\x5d\x36\x87\xdb\x3a\x8a\x2f\x3f\x53\xf4\x75\x30\x74\x47\x2b\x76\x2c\xec\xdd\xa4\x24\xc1\x0c\x05\xe7\x13\x00\x74\xce\x0b\xea\x74\xd4\xbf\x00\xc6\x3b\x09\xde\x5a\x0a\xd3\x9c\xdc\xec\xb9\x5e\xd2\xb2\x66\x9b\x51\x48\xe0\x9d\xe8\xf5\xbb\xd9\x5f\x67\xef\x26\x00\x26\x50\x3a\xfe\xc8\x25\x45\xc1\xb2\x9a\x83\xab\xad\x9d\x00\x38\x2c\x69\x0e\xc6\xd6\x51\x28\xc4\x19\x06\x3f\xf3\x15\xb9\x58\xf0\x4a\x66\xec\x27\xb1\x22\xa3\x32\xf3\xe0\xeb\x6a\x0e\x47\xeb\x0d\x42\xab\x56\x6b\x52\x03\x96\x66\x2c\x47\xf9\xa5\x3f\xfb\x2b\x47\x49\x2b\x95\xad\x03\xda\x9d\xe8\x34\x19\xd9\xe5\xb5\xc5\xb0\x9d\x9e\x00\x44\xe3\x2b\xea\xa3\xb6\xe6\x25\x99\xd3\xd6\x80\xf5\x7b\xb4\x55\x81\xef\x1b\x14\x53\x50\x89\x8d\x4a\x00\xaa\xee\xcd\xfd\xe2\xcb\x5f\x1e\xf6\xa6\x01\x32\x8a\x26\x70\x25\x89\xaa\x16\x1e\x38\x82\x14\x04\xcd\x5e\x58\xf9\x90\xfe\x76\x4a\xc2\xcd\xfd\x62\x7b\xbe\x0a\xbe\xa2\x20\xdc\x59\xdf\x8c\x9e\xeb\x7b\xb3\x07\xd2\x2e\x55\xa1\x66\x17\x64\xea\x73\x6a\xc4\xb6\xa6\x51\xd6\xda\x00\x7e\x05\x52\x70\x84\x40\x55\xa0\x48\xae\x89\x82\x3d\x60\xd0\x4d\xe8\xc0\x2f\xff\x45\x46\x66\xf0\x40\x41\x61\x20\x16\xbe\xb6\x99\x86\xca\x9a\x82\x40\x20\xe3\x73\xc7\xdf\xb6\xd8\x11\xc4\x27\xa1\x16\x85\x5a\xa7\xec\x06\x3b\xa1\xe0\xd0\xc2\x1a\x6d\x4d\x57\x80\x2e\x83\x12\x37\x10\x48\xa5\x40\xed\x7a\x78\x69\x4b\x9c\xc1\x47\x1f\x08\xd8\xad\xfc\x1c\x0a\x91\x2a\xce\xaf\xaf\x73\x96\x2e\xe4\x8d\x2f\xcb\xda\xb1\x6c\xae\x53\xf4\xf2\xb2\x16\x1f\xe2\x75\x46\x6b\xb2\xd7\x91\xf3\x29\x06\x53\xb0\x90\x91\x3a\xd0\x35\x56\x3c\x4d\xaa\xbb\x14\xf6\xb3\x32\xfb\xbf\xd0\x26\x49\xbc\xdc\xd3\x55\x36\x1a\x1e\x51\x02\xbb\xbc\xb7\x90\x62\xf1\x84\x07\x34\x2a\xd5\xdb\xd8\x1e\x6d\xac\xd8\x11\xad\x53\xca\xce\xe7\x9f\x1e\x1e\xa1\x13\x9d\x9c\x71\xc8\x7e\xe2\x7d\x77\x30\xee\x5c\xa0\x84\xb1\x5b\x51\x68\x9c\xb8\x0a\xbe\x4c\x98\xe4\xb2\xca\xb3\x93\x36\xb6\x98\xdc\x21\xfd\xb1\x5e\x96\x2c\xea\xf7\x3f\x6b\x8a\xa2\xbe\x9a\xc1\x6d\xaa\x03\xb0\x24\xa8\xab\x0c\x85\xb2\x19\x2c\x1c\xdc\x62\x49\xf6\x16\x23\xfd\xcf\x1d\xa0\x4c\xc7\xa9\x12\xfb\x36\x17\xf4\x4b\xd8\xe1\xe6\x86\xb5\xde\x42\x57\x68\x46\xfc\xd5\xe6\xe7\x43\x45\x66\x2f\x63\x32\x8a\x1c\x34\xa6\x05\x85\x34\x13\xfa\xd5\xa7\x1b\xc3\x99\xaa\x03\x4d\xb8\xf3\x25\xb2\x3b\x5c\x18\x35\x0a\x9a\x1c\x5f\x38\x59\xdc\x9f\x77\xa8\xc7\xee\x60\x85\xd8\x9d\xd7\xe4\xcb\x0f\x6c\x00\xc0\x6f\x3f\xb9\x35\x07\xef\x4a\x72\x72\x96\xe8\xec\x7c\x13\x57\x84\xaa\xe8\x11\x61\x07\x6e\xf9\xb9\xdd\xb6\xe7\x97\x9b\xcf\xbf\x69\xd5\x0d\x28\x3e\x74\x40\x90\x6b\x95\x39\x02\x1b\xf7\x8c\x0e\xad\x31\xce\xb0\xa5\x1b\x4b\x41\xfe\x49\xcb\xc2\xfb\xe7\xa1\x8d\x9d\x29\x4b\xef\x2d\xe1\x61\x7d\xdc\x83\xba\xfb\xf4\xf0\x11\xe3\x9f\x3f\x88\xf2\x81\x1c\xad\xf1\x57\x9f\xe7\xec\xf2\x1f\xc4\xfa\xe8\x1d\x8b\x57\x1f\xdc\x7a\xb7\xe2\x1f\x85\xfb\xf4\xf0\x61\x90\xcc\x73\x20\x7c\x46\x77\x01\xd9\x51\xf8\x1e\xa4\x91\x0c\xd7\x91\x9f\xe6\xed\x74\x38\x98\x44\xcf\x68\xee\x24\x00\x14\xbd\xb7\xe6\x70\xf9\xfb\xbb\xe9\xdf\xff\xf8\xff\x59\xf3\x73\x79\xc2\x8a\xc1\xf0\xd7\x51\x6e\xfd\xf2\xe1\xf6\xe1\x64\xea\xe9\x20\x57\x97\xc3\x2b\x53\xb8\x63\xcc\x9d\x8f\xc2\x26\xde\x07\x9f\x8d\xec\x7a\x3c\xbe\x85\xdf\xa0\xe7\x09\xb2\xd9\xad\x02\x2e\xb2\xb3\xf2\x9e\x5d\x1e\x28\xc6\x33\x6b\x5b\xd3\x2d\x90\xdc\x16\x64\x9e\x87\x82\xe6\xb4\x63\xeb\x60\x47\x42\x96\x85\xca\x91\xa5\x57\xfd\xd7\x6d\xc0\x10\x70\x73\x0e\x6f\xd6\x9b\xd4\x66\x9d\x45\x41\xd7\x22\x0c\xf1\xbd\x57\x32\xbb\x5e\x7f\x71\xd7\x35\x9b\x37\xdf\xb4\x40\xee\x00\x9a\xae\x8f\x7a\x3d\xf0\x9b\xb5\x58\x3b\x92\xb3\x3c\x3e\x76\x1b\x0b\x4a\x1d\xdf\x70\x1f\xa7\x7d\x7b\x37\xb2\x5f\x46\x6d\x7f\xbe\xfb\x4a\x36\xde\x65\xdc\x7b\xeb\x8c\xab\xb0\xdd\xd8\xf6\x71\x24\x49\x5a\x37\x0d\xec\xa2\xa0\x33\x14\x67\x47\x40\xa3\x71\xb5\x27\xe1\x62\x87\xb5\x6b\xef\x9a\x5e\x5b\x6d\x4c\x41\xb2\xd7\x7d\x5f\x1e\xdf\x70\x1d\x9b\x34\xeb\x2b\x8c\x81\xf4\xd4\xf6\x61\x08\x25\x99\x02\x1d\xc7\x32\xe5\x92\xcb\x28\xd3\xf6\x5c\x5b\xbd\x48\xc3\x05\xe3\xa5\x20\xd7\xb6\x40\x82\x6c\xe3\x56\x91\x9d\x6a\x2a\x45\x3b\x46\x84\x2a\xb0\x0f\x0c\xcf\xce\xbf\x38\xf0\x01\x5e\xf4\x6d\x30\x08\x9b\xf6\x57\x95\xdd\xa8\x7c\xb4\x76\xc7\x62\x12\x00\x39\xaf\xc9\x81\x76\xcf\x33\x78\x72\x7d\x9b\x9a\x07\xc7\x20\xe8\x92\x00\xb3\xd6\x26\xfa\x5a\x59\x36\x2c\x76\xd3\xbc\x4d\x36\xbd\x58\x00\x29\x50\xd4\xe4\x10\xd3\x8b\xc3\xf8\xb2\xf2\x4e\x59\x1f\x84\x35\x89\xc6\xa5\xaf\x05\x02\x4a\x91\xfa\x6c\x74\xa9\x69\xe6\xd0\x34\xf0\x3e\xd2\x1e\x7e\xe2\x34\xf5\xe4\x61\x84\xd7\xd4\xa5\xfb\x84\xd6\xe3\x32\xce\xe0\x37\x67\xa8\x8d\xf4\xec\x2a\x31\x5f\x12\x3a\x15\x93\x88\xd9\x32\x31\xa2\xaa\x83\xb6\x79\x57\x47\xe7\x94\x01\x86\x25\x4b\xc0\xc0\x76\x03\x53\x60\x5d\x33\xbe\xa4\x08\x15\x06\xe9\x6a\xc0\xcd\xfd\x22\x3d\xbe\x06\x41\x0b\x6c\x52\x2e\x62\x49\xb0\x44\xf3\xfc\x82\x21\x8b\xd3\x44\xdd\xca\x87\xe6\x9f\x72\x88\xc2\x4b\xb6\x2c\x89\x72\x43\xc1\xa9\x33\x07\x21\xd1\x6d\x5a\xe3\x0f\xb4\x98\x5d\x0c\xec\x3f\x5d\xd6\x01\x2c\x46\x79\x0c\xe8\x22\x77\x5f\x1f\xc6\x6a\xf9\xca\x87\x12\x65\x0e\xfa\xae\x99\x0a\x97\xf4\xbd\x35\xbf\xa4\x18\x31\x1f\x95\xf3\xea\xf9\x40\x18\xc7\xba\x8b\xb1\x02\xf4\x39\x9d\xd1\x2a\x74\x90\xbc\x08\xde\xd1\xf4\xc5\x87\xec\x6a\xf7\x4e\x1b\x81\x86\x83\x47\xfe\xf6\x16\x40\xa1\xdc\x87\x8d\xfe\x37\x58\x47\xda\x2e\xd4\x21\x90\x93\xb6\x56\x1f\xd7\xb8\x6e\x2c\x64\x40\x33\x2d\x2b\xc0\x2e\xc5\x03\x2b\x66\x2d\x55\x2d\x57\x10\x6b\x53\x00\xc6\xa4\xb7\x65\x37\xae\xec\x73\xbd\x24\x23\x16\x72\xad\xba\xed\x61\x8d\x3b\x76\x10\xeb\xb2\xc4\xc0\xdf\x52\x6a\x98\x46\xcd\xb6\x7e\x24\x03\x46\x75\x7d\xd5\x39\x43\xd7\xd2\x19\xc7\xd3\x86\xb7\x78\x76\x57\xf8\x1f\x37\x15\x75\xf7\xb4\x1e\xdf\x92\xbf\xbd\x19\xc6\x92\x53\x87\x1e\xdc\x54\x6c\xd0\xda\x8d\x96\x88\x2e\x04\x32\xd0\x98\xd0\x42\x1c\x0b\x1f\x04\xaa\x22\xa4\x07\x7c\xbf\xa0\x8e\x82\xa6\x67\x78\xf7\x79\x87\x5d\xc6\x1a\x21\xed\x6d\xcb\xcd\x95\xf0\x74\x81\x4b\xa7\x19\x65\xa7\x12\x6a\x7a\xba\x80\xca\x5b\x0c\x2c\x9b\xf1\x30\xf9\xd9\x07\xa0\xaf\x58\x56\x96\xae\x80\x0f\xad\xec\xe4\xc4\xe6\xde\x41\x05\x64\xb3\x69\x22\x6b\x8d\x96\xb3\xab\x71\x85\x93\x46\x1c\x21\xed\x7b\xba\x00\x83\x31\x91\x5a\x05\xbf\xc4\xa5\x5e\x35\x85\x5e\x54\xa1\xbc\x82\xe8\xf7\x05\x8f\x82\xb6\xf6\x6b\x3d\x45\x6b\x29\x83\xa7\x8b\x85\x6b\x05\x0c\xd6\x2a\x78\x3d\x42\x9a\x8b\x83\x06\xfa\x27\xed\xcf\x9b\xe0\x1b\x5c\x52\xdc\x81\x85\x13\x3d\xe6\xa9\xe6\xb4\x7b\x3b\xbf\xf2\x95\x60\xa4\x0d\xcd\xfe\x81\xf2\x0b\x6d\xe2\x7d\x53\x4b\x8e\x4f\x8f\xf6\x3e\x6f\x78\x67\x1c\xab\x3b\x68\xe3\xd1\x64\xd3\x12\xce\x41\xa3\xb1\x99\x10\x1f\xb4\x4c\xf7\x66\xea\xe5\xf6\x0b\x5f\xa7\x5d\x9b\xef\xf0\xef\xff\x4c\x76\xa9\x8f\xc6\x50\x25\x94\x7d\x3a\xfc\xf0\x7c\xd1\xb8\xbd\xfb\xb2\x9c\xfe\xf6\xba\x49\xf8\xfd\x8f\x49\x23\x98\xb2\x2f\xdd\x37\x64\x9d\xfc\x6f\x00\x00\x00\xff\xff\x47\x6a\xd1\x48\xb3\x17\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
