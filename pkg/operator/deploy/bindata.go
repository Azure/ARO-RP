// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x6e\xe3\xc8\x11\xbe\xeb\x29\x0a\xce\xc1\x87\x58\xf2\x0c\x82\x00\x89\x6e\x86\xbd\x33\x11\x76\xc7\x6b\xd8\xc6\xec\x61\xbd\x87\x52\xb3\x44\x55\xdc\xec\xe6\x54\x37\x65\x6b\x82\xbc\x7b\x50\x4d\x52\xa2\x64\x52\xb6\xc6\x08\xb0\x7d\x11\xd8\x3f\x5f\xfd\x57\x57\xb5\x46\xe3\xf1\x78\x84\x25\x7f\x25\x09\xec\xdd\x14\xb0\x64\x7a\x8e\xe4\xf4\x2b\x4c\x1e\xff\x11\x26\xec\xcf\x57\x1f\x47\x8f\xec\xb2\x29\x5c\x56\x21\xfa\xe2\x96\x82\xaf\xc4\xd0\x15\x2d\xd8\x71\x64\xef\x46\x05\x45\xcc\x30\xe2\x74\x04\x80\xce\xf9\x88\x3a\x1d\xf4\x13\xc0\x78\x17\xc5\x5b\x4b\x32\xce\xc9\x4d\x1e\xab\x39\xcd\x2b\xb6\x19\x49\x02\x6f\x49\xaf\x3e\x4c\xfe\x3e\xf9\x30\x02\x30\x42\xe9\xf8\x3d\x17\x14\x22\x16\xe5\x14\x5c\x65\xed\x08\xc0\x61\x41\x53\x30\xb6\x0a\x91\x24\x4c\x50\xfc\xc4\x97\xe4\xc2\x92\x17\x71\xc2\x7e\x14\x4a\x32\x4a\x33\x17\x5f\x95\x53\x78\xb1\x5e\x23\x34\x6c\x35\x22\xd5\x60\x69\xc6\x72\x88\x3f\x77\x67\x7f\xe1\x10\xd3\x4a\x69\x2b\x41\xbb\x25\x9d\x26\x03\xbb\xbc\xb2\x28\x9b\xe9\x11\x40\x30\xbe\xa4\x2e\x6a\x23\x5e\xa2\x39\x6e\x04\x58\x7d\x44\x5b\x2e\xf1\x63\x8d\x62\x96\x54\x60\xcd\x12\x80\xb2\x7b\x71\x33\xfb\xfa\xb7\xbb\x9d\x69\x80\x8c\x82\x11\x2e\x63\x52\x55\x03\x0f\x1c\x20\x2e\x09\xea\xbd\xb0\xf0\x92\x3e\x5b\x26\xe1\xe2\x66\xb6\x39\x5f\x8a\x2f\x49\x22\xb7\xd2\xd7\xa3\x63\xfa\xce\xec\x1e\xb5\x53\x65\xa8\xde\x05\x99\xda\x9c\x6a\xb2\x8d\x68\x94\x35\x32\x80\x5f\x40\x5c\x72\x00\xa1\x52\x28\x90\xab\xbd\x60\x07\x18\x74\x13\x3a\xf0\xf3\x7f\x93\x89\x13\xb8\x23\x51\x18\x08\x4b\x5f\xd9\x4c\x5d\x65\x45\x12\x41\xc8\xf8\xdc\xf1\xf7\x0d\x76\x80\xe8\x13\x51\x8b\x91\x1a\xa3\x6c\x07\xbb\x48\xe2\xd0\xc2\x0a\x6d\x45\x67\x80\x2e\x83\x02\xd7\x20\xa4\x54\xa0\x72\x1d\xbc\xb4\x25\x4c\xe0\x8b\x17\x02\x76\x0b\x3f\x85\x65\x8c\x65\x98\x9e\x9f\xe7\x1c\x5b\x97\x37\xbe\x28\x2a\xc7\x71\x7d\x9e\xbc\x97\xe7\x55\xf4\x12\xce\x33\x5a\x91\x3d\x0f\x9c\x8f\x51\xcc\x92\x23\x99\x58\x09\x9d\x63\xc9\xe3\xc4\xba\x4b\x6e\x3f\x29\xb2\xbf\x48\x13\x24\xe1\x74\x87\xd7\xb8\x56\xf7\x08\x51\xd8\xe5\x9d\x85\xe4\x8b\x07\x2c\xa0\x5e\xa9\xd6\xc6\xe6\x68\x2d\xc5\x56\xd1\x3a\xa5\xda\xb9\xfd\xe9\xee\x1e\x5a\xd2\xc9\x18\xfb\xda\x4f\x7a\xdf\x1e\x0c\x5b\x13\xa8\xc2\xd8\x2d\x48\x6a\x23\x2e\xc4\x17\x09\x93\x5c\x56\x7a\x76\xb1\xf1\x2d\x26\xb7\xaf\xfe\x50\xcd\x0b\x8e\x6a\xf7\x6f\x15\x85\xa8\xb6\x9a\xc0\x65\xca\x03\x30\x27\xa8\xca\x0c\x23\x65\x13\x98\x39\xb8\xc4\x82\xec\x25\x06\xfa\xbf\x1b\x40\x35\x1d\xc6\xaa\xd8\xb7\x99\xa0\x9b\xc2\xf6\x37\xd7\x5a\xeb\x2c\xb4\x89\x66\xc0\x5e\x4d\x7c\xde\x95\x64\x76\x22\x26\xa3\xc0\xa2\x3e\x1d\x31\x92\x46\x42\x37\xfb\xb4\xa3\x3f\x52\x75\xa0\x91\x2b\x5f\x20\xbb\xfd\x85\x41\xa1\xa0\x8e\xf1\x99\x8b\xb3\x9b\xe3\x0e\x75\xb4\xdb\x9b\x21\xb6\xe7\x35\xf8\xf2\x3d\x19\x00\xf0\xfb\x4f\x6e\xc5\xe2\x5d\x41\x2e\x1e\x45\x3a\x3b\x5e\xc4\x05\xa1\x32\xfa\x42\x61\x7b\x66\xf9\xd4\x6c\xdb\xb1\xcb\xc5\xed\xaf\x9a\x75\x05\xa3\x97\x16\x08\x72\xcd\x32\x2f\xc0\x86\x2d\xa3\x43\x73\x8c\x33\x6c\xe9\xc2\x92\xc4\xdf\x68\xbe\xf4\xfe\xb1\x6f\x63\x2b\xca\xdc\x7b\x4b\xb8\x9f\x1f\x77\xa0\xae\xae\xef\xbe\x60\xf8\xf6\x4e\x94\xcf\xe4\x68\x85\xbf\xf8\x3c\x67\x97\xbf\x13\xeb\x8b\x77\x1c\xbd\xda\xe0\xd2\xbb\x05\xbf\x17\xee\xfa\xee\x73\xaf\x32\x8f\x81\xf0\x19\x5d\x09\xb2\x23\x79\x27\xd2\x4d\x65\xed\x1d\x19\xa1\x1e\x87\x3d\x0a\xe8\xd6\x57\x91\x3e\xf1\xf3\x3b\x61\x7e\xf3\xf2\x88\xe2\x2b\x97\x85\xcb\x4d\x0d\xf5\x23\x98\x03\x59\x4c\x47\x7e\xd8\x37\x0e\xbb\xbc\x49\x2e\x30\x98\x1f\x12\x00\x46\xbd\x9b\xa7\x70\xfa\xfb\x87\xf1\x3f\xff\xf8\xeb\xa4\xfe\x39\x3d\x20\x45\x6f\x88\xeb\x28\x36\xbe\xf7\xf9\xf2\xee\xc2\x18\x5f\xf5\xa5\x16\x1d\xe4\xaa\xa2\x7f\x65\xac\x01\xdf\x96\x77\x3e\x0f\xb3\xeb\xfb\x37\xed\x7b\x37\xbf\x07\xd3\xe1\x6b\x3c\x5f\x31\xe6\xce\x87\xc8\x26\xdc\x88\xcf\x06\x76\xdd\xbf\xac\x8c\xda\xa5\x4b\xfc\x84\x2c\x0b\x7c\x7e\xb7\x1c\xd7\x5a\x41\x97\x68\xe8\xcf\xab\xf9\x03\xee\xce\x6e\x21\x38\xcb\x8e\xba\x5d\xd8\xe5\x42\x21\x1c\x79\x83\xd6\x35\x29\xc5\xcb\x25\x99\xc7\xbe\xb0\x3d\x1c\x5a\x95\xd8\x81\xc4\xc8\x91\x8a\x81\xa5\x57\x2d\xd9\x6e\x40\x11\x5c\x1f\xa3\x37\xeb\x4d\x2a\xe6\x8f\x52\x41\x5b\x88\xf6\xe9\x7b\xe7\x62\x6e\x3b\xca\xd9\x55\xdb\xd2\x5c\x7c\xd7\x6b\x78\x0b\x50\xf7\x16\xd4\xe9\xb4\xde\xcc\xc5\xca\x51\x3c\xca\xe2\x43\x35\x5f\xc4\x58\x85\x37\x54\x7d\x69\xdf\x4e\xdd\xe7\xe7\x41\x8b\xec\x1f\x2e\xfc\x8c\x77\x19\x77\x3a\xea\x61\x16\x36\x1b\x9b\x6e\x81\x62\xa2\xd6\x4e\x03\xbb\x10\xd1\x19\x0a\x93\x17\x40\x83\x7e\xb5\x43\xe1\x64\x8b\xb5\x6d\x22\xea\x8e\x4e\x65\x4c\x4e\xb2\xd3\xe3\x9d\xf6\x07\x70\xd2\xc4\xa4\xcb\x30\x0a\xe9\xa9\xcd\xf3\x03\x14\x64\x96\xe8\x38\x14\x29\x96\x5c\x46\x99\x36\x81\xda\x50\x04\xea\x4f\x81\x4f\x4b\x72\x4d\xa1\x1d\x91\x6d\xd8\x30\xb2\x65\x4d\xa9\x68\x5f\x82\x50\x0a\x7b\x61\x78\x74\xfe\xc9\x81\x17\x78\xd2\x0e\xb4\x17\x36\xed\x2f\x4b\xbb\x56\xfa\x68\xed\x56\x8b\x89\x00\xe4\xbc\x22\x07\xda\xa3\x4d\xe0\xc1\x75\x65\xaa\xdb\xda\x5e\xd0\x39\x01\x66\x8d\x4c\xf4\x5c\x5a\x36\x1c\xed\xba\xee\x80\xd7\x1d\x5f\x80\xb8\xc4\xa8\x22\x4b\x48\x7d\xad\xf1\x45\xe9\x9d\x6a\xbd\x17\xd6\x24\x35\xce\x7d\x15\x41\x30\x2e\x53\x37\x87\x2e\xb5\x66\x2c\x75\x9b\xe8\x03\xed\xe0\x27\x9d\xa6\xce\x4f\x06\xf4\x9a\x7a\x41\x9f\xd0\x3a\xba\x0c\x13\xf8\xd5\x19\x6a\x3c\x3d\x3b\x4b\x9a\x2f\x08\x9d\x92\x49\x8a\xd9\x68\x62\x80\x55\x07\x4d\x8b\xa8\x86\xce\x29\x03\x94\x39\x47\x41\x61\xbb\x86\x31\xb0\xae\x19\x5f\x50\x80\x12\x25\xb6\x39\xe0\xe2\x66\x96\x5a\xfc\x5e\xd0\x25\xd6\x21\x17\xb0\x20\x98\xa3\x79\x7c\x42\xc9\xc2\x38\xa9\x6e\xe1\xa5\xfe\x52\x1d\x62\xe4\x39\x5b\x8e\x49\xe5\x86\xc4\xa9\x31\x7b\x21\xd1\xad\x1b\xe1\xf7\xb8\x98\x9c\xf4\xec\x3f\x9c\xd6\x01\x2c\x86\x78\x2f\xe8\x02\xb7\x6f\x5c\x43\xb9\x7c\xe1\xa5\xc0\x38\x05\xed\x9e\xc7\x91\x0b\xfa\xd1\x9c\x5f\x50\x08\x98\x0f\xd2\x79\xf5\xbc\x10\x86\xa1\xfa\x6e\x28\x01\xdd\xa6\x33\x9a\x85\xf6\x82\x17\xc1\x3b\x1a\x3f\x79\xc9\xce\xb6\xaf\x01\x03\xd0\xb0\xf7\x94\xb4\xb9\x05\x30\x52\xee\x65\xad\xdf\x06\xab\x40\x9b\x85\x4a\x84\x5c\x6c\x72\xf5\xcb\x1c\xd7\x8e\x59\xec\xe1\x4c\xd3\x0a\xb0\x4b\xfe\xc0\x8a\x59\xc5\xb2\x8a\x67\x10\x2a\xb3\x04\x0c\x89\x6f\xcb\x6e\x98\xd9\xc7\x6a\x4e\x26\x5a\xc8\x35\xeb\x36\x87\xd5\xef\xd8\x41\xa8\x8a\x02\x85\xbf\xa7\xd0\x30\x35\x9b\x4d\xfe\x48\x02\x0c\xf2\xfa\xaa\x71\xfa\xae\xa5\x23\x8e\xa7\x0d\x6f\xb1\xec\x36\xf1\xdf\xaf\x4b\x6a\xef\x69\x3d\xbe\x51\xfe\xe6\x66\x18\x0a\x4e\x1d\x7a\x70\x5d\xb2\x41\x6b\xd7\x9a\x22\x5a\x17\xc8\x40\x7d\x42\x13\x71\x58\x7a\x89\x50\x2e\x25\x3d\x13\x75\x13\xea\x20\x68\x7a\xec\x69\x1f\x11\xd9\x65\xac\x1e\xd2\xdc\xb6\x5c\x5f\x09\x0f\x27\x38\x77\x1a\x51\x76\x1c\xa5\xa2\x87\x13\x28\xbd\x45\xe1\xb8\x1e\x76\x93\x4f\x5e\x80\x9e\xb1\x28\x2d\x9d\x01\xef\x4b\xd9\xd2\x09\xf5\xbd\x83\x0a\xc8\x66\x5d\x7b\xd6\x0a\x2d\x67\x67\xc3\x0c\x27\x8e\x38\x40\xda\xf7\x70\x02\x06\x43\x52\x6a\x29\x7e\x8e\x73\xbd\x6a\x96\x7a\x51\x49\x71\x06\xc1\xef\x12\x1e\x04\x6d\xe4\xd7\x7c\x8a\xd6\x52\x06\x0f\x27\x33\xd7\x10\xe8\xcd\x55\xf0\xba\x87\xd4\x17\x07\xf5\xd4\x4f\x5a\xa9\xd7\xce\xd7\xbb\xa4\xb8\x3d\x0b\x07\x6a\xcc\x43\xc5\x69\xfb\x42\xf3\xca\x5b\xd4\x40\x19\x9a\xfd\x0b\xe3\xcf\xb4\x0e\x37\x75\x2e\x79\x79\x7a\xb0\xf6\x79\x43\x9f\xf1\x92\xdd\x5e\x19\x5f\x4c\xd6\x25\xe1\x14\xd4\x1b\xeb\x89\xe8\x45\xd3\x74\x67\xa6\x9a\x6f\xde\x91\x5b\xee\x9a\x78\x87\xff\xfc\x77\xb4\x0d\x7d\x34\x86\xca\x48\xd9\xf5\xfe\xdf\x1b\x27\xb5\xd9\xdb\xff\x2f\xd2\x67\xa7\x9a\x84\xdf\xff\x18\xd5\x84\x29\xfb\xda\xfe\x53\xa1\x93\xff\x0b\x00\x00\xff\xff\x59\x16\xb4\x6d\x19\x1a\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
