// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/preview.aro.openshift.io_previewfeatures.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xcd\x72\xdb\x36\x10\xbe\xeb\x29\x76\xd2\x83\x0f\xad\xa8\x64\x7a\x68\xab\x9b\x2b\x27\xa9\x26\x69\xac\xb1\x3c\xb9\x64\x72\x58\x81\x4b\x6a\x63\x12\x60\x81\x85\x12\xa7\xd3\x77\xef\x00\x24\x25\x4a\xa6\x64\xd1\x99\xf4\x50\x5e\x24\x2e\xf6\x7f\xbf\x5d\x00\x1c\x8d\xc7\xe3\x11\x56\xfc\x9e\xac\x63\xa3\xa7\x80\x15\xd3\x17\x21\x1d\xde\x5c\x72\xf7\xab\x4b\xd8\x4c\x36\x2f\x46\x77\xac\xd3\x29\xcc\xbc\x13\x53\xde\x90\x33\xde\x2a\xba\xa2\x8c\x35\x0b\x1b\x3d\x2a\x49\x30\x45\xc1\xe9\x08\x00\xb5\x36\x82\x81\xec\xc2\x2b\x80\x32\x5a\xac\x29\x0a\xb2\xe3\x9c\x74\x72\xe7\x57\xb4\xf2\x5c\xa4\x64\xa3\xf2\xd6\xf4\xe6\x79\xf2\x4b\xf2\x7c\x04\xa0\x2c\x45\xf1\x5b\x2e\xc9\x09\x96\xd5\x14\xb4\x2f\x8a\x11\x80\xc6\x92\xa6\xa0\x0a\xef\x84\xac\x4b\xd0\x9a\xc4\x54\xa4\xdd\x9a\x33\x49\xd8\x8c\x5c\x45\x2a\xd8\xcc\xad\xf1\xd5\x14\x1e\xac\xd7\x1a\x1a\xb7\x9a\x90\x6a\x65\x91\x52\xb0\x93\x37\x5d\xea\x5b\x76\x12\x57\xaa\xc2\x5b\x2c\x76\xa6\x23\xd1\xb1\xce\x7d\x81\x76\x4b\x1e\x01\x38\x65\x2a\xea\x6a\x6d\xc2\x8b\x36\xc7\x4d\x00\x9b\x17\x58\x54\x6b\x7c\x51\x6b\x51\x6b\x2a\xb1\x76\x09\x20\xb8\x7b\xb9\x98\xbf\xff\x79\xb9\x47\x06\x48\xc9\x29\xcb\x95\xc4\x54\x35\xea\x81\x1d\xc8\x9a\xa0\xe6\x85\xcc\xd8\xf8\xda\x3a\x09\x97\x8b\xf9\x56\xbe\xb2\xa6\x22\x2b\xdc\x46\x5f\x3f\x9d\xd2\x77\xa8\x07\xd6\x2e\x82\x43\x35\x17\xa4\xa1\xe6\x54\x9b\x6d\x42\xa3\xb4\x89\x01\x4c\x06\xb2\x66\x07\x96\x2a\x4b\x8e\x74\x8d\x82\x3d\xc5\x10\x98\x50\x83\x59\x7d\x22\x25\x09\x2c\xc9\x06\x35\xe0\xd6\xc6\x17\x69\x80\xca\x86\xac\x80\x25\x65\x72\xcd\x5f\xb7\xba\x1d\x88\x89\x46\x0b\x14\x6a\x8a\xb2\x7b\x58\x0b\x59\x8d\x05\x6c\xb0\xf0\xf4\x13\xa0\x4e\xa1\xc4\x7b\xb0\x14\xac\x80\xd7\x1d\x7d\x91\xc5\x25\xf0\xa7\xb1\x04\xac\x33\x33\x85\xb5\x48\xe5\xa6\x93\x49\xce\xd2\x42\x5e\x99\xb2\xf4\x9a\xe5\x7e\x12\xd1\xcb\x2b\x2f\xc6\xba\x49\x4a\x1b\x2a\x26\x8e\xf3\x31\x5a\xb5\x66\x21\x25\xde\xd2\x04\x2b\x1e\x47\xd7\x75\x84\x7d\x52\xa6\x3f\xd8\xa6\x49\xdc\xc5\x9e\xaf\x72\x1f\xe0\xe1\xc4\xb2\xce\x3b\x0b\x11\x8b\x27\x2a\x10\x50\x19\xaa\x8d\x8d\x68\x1d\xc5\x2e\xd1\x81\x14\xb2\x73\xf3\x72\x79\x0b\xad\xe9\x58\x8c\xc3\xec\xc7\xbc\xef\x04\xdd\xae\x04\x21\x61\xac\x33\xb2\x75\x11\x33\x6b\xca\xa8\x93\x74\x5a\x19\xd6\xd2\x60\x8b\x49\x1f\xa6\xdf\xf9\x55\xc9\x12\xea\xfe\x97\x27\x27\xa1\x56\x09\xcc\xe2\x1c\x80\x15\x81\xaf\x52\x14\x4a\x13\x98\x6b\x98\x61\x49\xc5\x0c\x1d\x7d\xf7\x02\x84\x4c\xbb\x71\x48\xec\x79\x25\xe8\x8e\xb0\x43\xe6\x3a\x6b\x9d\x85\x76\xd0\x1c\xa9\x57\xd3\x9f\xcb\x8a\xd4\x5e\xc7\xa4\xe4\xd8\x06\x4c\x0b\x0a\x85\x4e\xe8\x4e\x9f\xf6\xe9\xef\xd4\xf0\xa0\xb2\x57\xa6\x44\xd6\x87\x0b\x47\x83\x82\xba\xc7\xe7\x5a\xe6\x8b\x61\x42\x9d\xec\xf6\x4e\x88\x9d\x7c\x68\xbe\xfc\x20\x06\x00\xfc\xfa\x52\x6f\xd8\x1a\x5d\x92\x96\x41\xa6\x57\xa8\x35\xd9\x87\x22\x7b\x19\xfe\x3d\x32\x6d\x93\xcb\x19\x60\x4b\x6b\x46\xc9\x8a\xc2\xbf\xcf\xba\x1d\x1c\x2a\xee\x5d\x0f\xfc\x3c\x95\x6f\x68\x36\xaf\xde\x08\x1e\x89\xe2\x28\x74\xa2\xd2\xba\xec\xed\x46\xfa\x3a\x6c\x57\xf3\x74\x50\x96\xd2\xe1\x40\xc8\x51\xe8\x33\xde\xd7\x10\xea\x09\x96\x85\xca\xde\x1c\x9c\x11\x26\x5a\x8b\xf7\xfd\xf6\x16\x96\x37\x28\xf4\xb2\x19\x23\x03\x81\x98\x93\xa6\x0d\xbe\x35\x79\xce\x3a\x7f\x28\xf9\x68\xf1\x32\xce\x8f\xe2\x37\x2a\x40\x09\x7b\xc7\x14\x2e\x3e\x3c\x1f\xff\xf6\xf1\xc7\xa4\xfe\xb9\x18\x5e\x6f\x80\xd2\x68\x16\x13\x16\x5f\xcf\x96\x97\x4a\x19\x7f\x0c\x38\xa4\x7d\xd9\xbf\x32\x86\xcb\x9b\xeb\xf6\xf8\x61\x72\x37\x7f\x77\x7b\x16\xdf\xe2\xe6\xfa\xea\x2c\xc6\x6f\x0e\xec\x64\x5f\x3f\x16\xdc\x15\x63\xae\x8d\x13\x56\x6e\x61\x4d\x7a\x84\xeb\xf6\xe1\x16\xdf\x2e\xcd\xf0\x15\xb2\xcd\xf0\xcb\x37\xc7\xf1\x2e\x1c\x05\x2b\x54\xf4\x3f\x28\xd1\x89\x59\xc3\x3a\xb3\x38\x70\xb8\xb0\xce\x2d\x39\x37\xb0\x55\xeb\x53\x18\xc9\x6c\x4d\xea\xae\x6f\x82\x9f\x6e\x56\x6f\x8b\x5e\xfa\x89\xc1\xf4\x88\x43\x5d\x86\xbe\x01\x75\x32\x6f\x85\x51\xf1\xf8\x3a\x28\x05\x21\x3e\x14\x63\xb3\x02\xf3\x1e\x8f\x31\x4d\xe3\x7d\x09\x8b\xc5\xc9\x54\x9c\x8c\x69\x6f\x1f\xbc\x6e\x0c\xbe\x0a\x06\xb7\xdb\x61\x46\x18\x36\xee\x38\x81\xdd\xf6\x5e\x70\x79\x73\xbd\xe5\x1f\x92\x89\xf6\x3c\xd9\x07\xa2\x3d\x67\xda\xfd\x6c\x7e\xd5\xde\x4c\x2e\xbf\x06\x37\x76\x0a\xea\x2b\x02\x75\x2e\x4c\x67\x07\xee\xc8\x6e\x58\xd1\xd2\xaf\x34\xc9\x7f\xb0\x7b\x39\x31\x16\x73\x5a\xfa\x2c\xe3\x2f\x83\x40\xb0\xd1\x24\x83\x1a\xee\xd8\x21\x53\x50\xbc\x3b\xe3\x98\x19\xf9\xf6\x0e\x9a\x66\x15\xd2\xf5\xf4\x93\xa6\x32\xba\x46\xea\x90\x44\xf7\x02\x73\xd6\x6a\x0a\x90\xf8\xe4\x5d\x7d\x8d\x70\x82\x3a\x45\x9b\xee\x0c\x41\xc6\x54\xa4\x2e\xe9\xd1\x7b\x7a\x6c\x00\x14\xe8\xe4\xd6\xa2\x76\xdc\x7e\x35\x38\x36\x2b\x32\x63\x4b\x94\x29\x84\xfb\xc8\x58\xb8\xa4\xa7\xce\x94\x92\x9c\xc3\xfc\xa8\x9d\x47\xe5\x2d\xa1\x3b\x76\x22\x39\x43\xbc\x0f\x19\x03\xc4\x23\xc3\xd3\x84\x4f\x8c\x89\x53\xcd\xd4\xce\xc5\x47\xae\x12\xbd\x66\x2d\xa5\x7f\xa0\xbc\xa1\x7b\xb7\xa8\xef\xac\xdf\xbb\xf7\x7b\x63\x7c\x40\xac\x1b\x6c\x0a\x62\x7d\x0d\xa3\x66\x60\x74\x29\x7e\xb5\xfd\x0c\xd0\x7a\xd7\x94\x0e\xfe\xfe\x67\xb4\xab\x22\x2a\x45\x95\x50\xfa\xee\xf0\xeb\xd4\xb3\x67\xf1\xa5\xfd\xfc\x14\x5f\x3b\xbd\x09\x1f\x3e\x8e\x6a\xc3\x94\xbe\x6f\x3f\x34\x05\xe2\xbf\x01\x00\x00\xff\xff\xa7\x08\xf4\x35\xd8\x13\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _previewAroOpenshiftIo_previewfeaturesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x73\xdb\x38\x12\xbd\xeb\x57\x74\x65\x0f\xbe\x44\xb4\xbd\xa9\xca\xee\xea\xe6\xb2\x93\x94\x6b\x13\x27\x65\xbb\x9c\xc3\xd4\x1c\x5a\x44\x93\x44\x0c\x02\x0c\xd0\x90\x46\x33\x35\xff\x7d\x0a\x00\x29\x91\x14\x69\x7b\x32\x33\x3c\x89\xf8\x78\xdd\x78\xfd\xba\xd1\xd4\x62\xb9\x5c\x2e\xb0\x91\x0f\x64\x9d\x34\x7a\x05\xd8\x48\xfa\x85\x49\x87\x37\x97\x3d\xfe\xd7\x65\xd2\x9c\x6e\xce\x17\x8f\x52\x8b\x15\x5c\x7a\xc7\xa6\xbe\x25\x67\xbc\xcd\xe9\x8a\x0a\xa9\x25\x4b\xa3\x17\x35\x31\x0a\x64\x5c\x2d\x00\x50\x6b\xc3\x18\x86\x5d\x78\x05\xc8\x8d\x66\x6b\x94\x22\xbb\x2c\x49\x67\x8f\x7e\x4d\x6b\x2f\x95\x20\x1b\xc1\x3b\xd3\x9b\xb3\xec\x3f\xd9\xd9\x02\x20\xb7\x14\xb7\xdf\xcb\x9a\x1c\x63\xdd\xac\x40\x7b\xa5\x16\x00\x1a\x6b\x5a\x41\x63\x69\x23\x69\x5b\x10\xb2\xb7\xe4\xb2\xf6\x3d\x43\x6b\x32\xd3\x90\x76\x95\x2c\x38\x93\x66\xe1\x1a\xca\x83\x0b\xa5\x35\xbe\xd9\xef\x3b\x5e\x97\x80\x5b\x6f\xd3\x49\xbf\xa4\xb5\xef\x93\x8d\x38\xa1\xa4\xe3\xff\x4f\x4c\x7e\x94\x8e\xe3\x82\x46\x79\x8b\xea\xc8\xbf\x38\xe7\xa4\x2e\xbd\x42\x3b\x9e\x5d\x00\xb8\xdc\x34\xb4\x82\x4b\xe5\x1d\x93\x5d\x00\xb4\x8c\x44\x7f\x96\xed\x99\x37\xe7\xa8\x9a\x0a\xcf\x13\x58\x5e\x51\x8d\xc9\x5d\x80\x70\x94\x8b\x2f\xd7\x0f\x6f\xee\x06\xc3\x00\x82\x5c\x6e\x65\xc3\x91\xdd\xa1\xcf\x20\x1d\x70\x45\x90\xb6\x40\x61\x6c\x7c\x6d\x7d\x83\xd6\x39\xb8\xf8\x72\xbd\x47\x6b\xac\x69\xc8\xb2\xec\x78\x4a\x4f\x4f\x3b\xbd\xd1\x91\xed\x93\xe0\x5e\x5a\x05\x22\x88\x86\x92\xf5\xf6\xa0\x24\xda\x13\x81\x29\x80\x2b\xe9\xc0\x52\x63\xc9\x91\x4e\x32\x1a\x00\x43\x58\x84\x1a\xcc\xfa\x1b\xe5\x9c\xc1\x1d\xd9\x00\x03\xae\x32\x5e\x89\xa0\xb5\x0d\x59\x06\x4b\xb9\x29\xb5\xfc\x75\x8f\xed\x80\x4d\x34\xaa\x90\xa9\x0d\xd8\xe1\x91\x9a\xc9\x6a\x54\xb0\x41\xe5\xe9\x35\xa0\x16\x50\xe3\x0e\x2c\x05\x2b\xe0\x75\x0f\x2f\x2e\x71\x19\x7c\x32\x81\x47\x5d\x98\x15\x54\xcc\x8d\x5b\x9d\x9e\x96\x92\xbb\x9c\xc9\x4d\x5d\x7b\x2d\x79\x77\x1a\xe5\x2f\xd7\x9e\x8d\x75\xa7\x82\x36\xa4\x4e\x9d\x2c\x97\x68\xf3\x4a\x32\xe5\x81\xe8\x53\x6c\xe4\x32\xba\xae\x63\xde\x64\xb5\xf8\x97\x6d\xb3\xcc\x9d\x0c\x7c\xe5\x5d\x10\x8b\x63\x2b\x75\xd9\x9b\x88\xaa\x7d\x22\x02\x41\xb8\x21\xe8\xd8\x6e\x4d\xa7\x38\x10\x1d\x86\x02\x3b\xb7\xef\xee\xee\xa1\x33\x1d\x83\x31\x66\x3f\xf2\x7e\xd8\xe8\x0e\x21\x08\x84\x49\x5d\x90\x4d\x41\x2c\xac\xa9\x23\x26\x69\xd1\x18\xa9\x39\xbe\xe4\x4a\x92\x1e\xd3\xef\xfc\xba\x96\x1c\xe2\xfe\xdd\x93\xe3\x10\xab\x0c\x2e\x63\x21\x81\x35\x81\x6f\x04\x32\x89\x0c\xae\x35\x5c\x62\x4d\xea\x12\x1d\xfd\xe3\x01\x08\x4c\xbb\x65\x20\xf6\x65\x21\xe8\xd7\xc0\xf1\xe2\xc4\x5a\x6f\xa2\x2b\x4d\x33\xf1\x1a\x66\xeb\x5d\x43\xf9\x20\x71\xc6\x79\x1a\xf2\xf7\xe2\xf6\xf3\x00\x6f\x3a\x5f\xc3\xa3\x5d\xf9\x5e\x99\xed\x47\x53\x1e\x4d\x8d\xdc\xb8\xb9\xfb\xd0\xad\x8c\x55\x1c\xa5\x8e\x3f\x0a\x59\x7a\x1b\x73\x33\x9a\xbe\xb9\xfb\x00\x85\x32\x5b\x50\xa6\x74\xd9\x11\x24\xc0\xe7\x5a\xb6\xd1\x1f\xec\x95\x05\xec\x8c\x07\x61\xf4\x09\xc3\x16\xf5\x7e\x4d\x7b\x5d\x84\x94\x0d\x89\xa7\x73\xa9\x68\x02\xf6\x19\xbb\xf3\x0c\x84\x87\x34\xae\x15\x89\xa9\xa9\x71\xf2\xbc\x4b\x4b\x07\x21\x58\x53\x85\x1b\x69\xbc\x4d\x45\x8b\x0e\x8e\xda\x69\x48\x80\x6d\x45\x1a\xd8\x7a\x1a\x1f\x73\x2b\x95\x02\xb6\xbb\x74\x5e\xcc\xab\xb8\x40\x90\x93\x96\xc4\x90\xb3\xd7\x4f\x61\x17\xa8\x1c\x81\xe4\x01\xa0\x90\x2e\x78\x1f\x21\x0f\x64\x9d\x4c\xe2\x24\xb1\xae\x8d\x51\x84\xe3\xb2\x1b\x1e\x4d\xbc\x35\xf6\xf1\x2b\x72\x5e\x91\xbd\xbe\x7a\x01\x79\x37\xa3\x2d\x51\xf9\xb2\x90\x2d\x8d\xd7\x57\x1d\x7f\x2d\xf6\xdc\xf9\xd2\xfe\x29\x71\xcd\x26\x64\xf7\x58\xe2\x94\xd6\x57\xb8\x9b\x94\x42\x70\xb9\x40\xaf\x78\x05\xff\x3b\x7b\xfe\x48\xb7\x7d\xbc\xde\x79\x2a\xb3\x85\x1a\xf5\x0e\x44\x18\xef\xf8\x0e\x74\xcf\x1c\xaa\xbd\xb3\xd6\x41\x3c\x21\xb7\x48\x4c\x9f\xaf\x30\xb6\x46\x5e\x85\x5b\xea\xcd\xbf\x9f\x60\x20\xdc\x62\x65\x6c\x21\x8e\x2c\xb1\xb1\x58\xd2\x45\x9e\x1b\xaf\xb9\x6b\xe0\xae\x5f\xa2\xfe\xbb\xe9\xad\xfb\xb8\xb5\xd0\x80\x69\x01\x78\x47\x62\xe6\xbc\xa1\x56\xe4\x41\xf2\xf9\xfe\xbe\x39\x28\x12\x3e\x79\x17\xab\xbd\xd4\x09\x17\xeb\xc0\x4b\x19\x0a\x85\x29\xe6\x10\xdb\xed\x3f\xa4\x0b\xb6\x58\x14\x32\xbf\xd0\xa8\x76\x2c\x73\x77\x1d\x9a\x80\x0d\xaa\x67\x24\xf2\xf6\xac\x7e\x41\xcd\xe8\xc0\x00\x19\xb6\x95\x0c\x39\x6d\x42\x2a\x0b\x9f\x73\x72\x1b\x3b\xbb\x19\x3c\xc4\x96\x62\xae\x6e\xbc\x3d\xab\x5f\xc3\xf9\x59\x9d\xc1\x55\xcf\x87\x99\x14\x26\xed\xeb\x69\xa0\xe5\xac\xe7\xcb\x80\xfe\x77\x30\xf8\xd1\x94\xfb\xdf\x5f\x8d\x7d\x74\x0d\xbe\x50\x65\xb7\xf4\xdd\xc7\x6a\x17\x34\x72\x3f\x82\x9d\xd4\xc6\x0c\x59\x7b\xc5\xfc\x35\x6d\x6c\xa6\x9a\xda\x83\xe7\x6d\x18\xa6\x93\x71\x70\xb0\x71\xdf\xdb\x02\x07\x07\xfb\xd7\xd7\xb4\x93\x4f\x05\xf3\x7c\x66\xfc\x47\x0a\x84\x6d\xd9\x3f\xb6\xb5\xec\xee\xc9\xa3\x99\x99\xc6\x66\xbe\xe3\x61\x64\xef\x5e\xde\xf3\xc4\xe5\x83\x2b\xd7\xac\x5d\xe8\x34\x45\x84\xa2\xc0\xe0\xc4\x57\x5a\xf7\xcc\x5f\xfe\x21\x09\x65\xef\xf3\xb4\xff\x48\xa6\x7a\x32\x0f\x07\x9e\x7e\x6e\xc8\x22\x1b\x7b\xd9\x21\x85\xce\xfa\x5b\x90\x68\x2a\x88\xa8\x05\x5a\x71\x30\x04\x85\x24\x25\x26\x3b\xa3\xa7\x7b\x14\x00\x85\x8e\xef\x2d\x6a\x27\xbb\x2f\xe2\xb9\x2a\xd1\x5d\x12\xa1\x55\x5e\xb2\x9c\x4d\x90\x67\x84\x1f\xfa\x58\xe7\xb0\x9c\xb5\xf3\xec\x7e\x4b\xe8\xe6\x32\xe7\x05\xdb\xa7\x74\xf2\x27\xb6\xc7\x05\x3f\xb6\x79\x56\xd1\x87\x49\xb4\x16\x77\xe3\x2f\xa2\x56\x0d\x93\xdf\xc1\x4f\x9a\x9d\x34\x78\x34\x98\x44\xbf\x8a\x9d\x63\x1a\x48\x37\x6e\x7f\xc4\xaf\xf7\x9f\x8b\x9d\xfd\x96\x47\xf8\xed\xf7\xc5\x81\x52\xcc\x73\x6a\x98\xc4\xcd\xf8\xff\x8e\x57\xaf\x06\x7f\x61\xc4\xd7\x5e\xa2\xc0\x4f\x3f\x2f\x92\x61\x12\x0f\xdd\xdf\x13\x61\xf0\x8f\x00\x00\x00\xff\xff\xca\x65\xb2\xa4\x41\x12\x00\x00")

func previewAroOpenshiftIo_previewfeaturesYamlBytes() ([]byte, error) {
	return bindataRead(
		_previewAroOpenshiftIo_previewfeaturesYaml,
		"preview.aro.openshift.io_previewfeatures.yaml",
	)
}

func previewAroOpenshiftIo_previewfeaturesYaml() (*asset, error) {
	bytes, err := previewAroOpenshiftIo_previewfeaturesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preview.aro.openshift.io_previewfeatures.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml":                aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":                        masterDeploymentYaml,
	"master/rolebinding.yaml":                       masterRolebindingYaml,
	"master/service.yaml":                           masterServiceYaml,
	"master/serviceaccount.yaml":                    masterServiceaccountYaml,
	"namespace.yaml":                                namespaceYaml,
	"preview.aro.openshift.io_previewfeatures.yaml": previewAroOpenshiftIo_previewfeaturesYaml,
	"worker/deployment.yaml":                        workerDeploymentYaml,
	"worker/role.yaml":                              workerRoleYaml,
	"worker/rolebinding.yaml":                       workerRolebindingYaml,
	"worker/serviceaccount.yaml":                    workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"preview.aro.openshift.io_previewfeatures.yaml": {previewAroOpenshiftIo_previewfeaturesYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
