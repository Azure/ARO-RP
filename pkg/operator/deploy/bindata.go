// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xe3\xc8\x0d\x7f\xf7\xa7\x20\xd2\x87\x7d\x68\xec\xec\xa2\x28\xd0\xfa\x2d\xc8\xde\x6d\x8d\xbb\xdd\x0b\x36\xc1\xf6\xe1\x72\x0f\xd4\x88\x96\xd8\x8c\x66\x74\x33\x94\xb3\xde\xa2\xdf\xbd\xe0\x48\xb2\x65\x5b\x4a\xe2\x5b\xdc\xbc\x18\x9e\x3f\x3f\x92\x3f\x72\x48\x8e\x66\xf3\xf9\x7c\x86\x35\x7f\xa1\x10\xd9\xbb\x25\x60\xcd\xf4\x55\xc8\xe9\xbf\xb8\x78\xfc\x47\x5c\xb0\xbf\xda\xbc\x9b\x3d\xb2\xcb\x97\x70\xd3\x44\xf1\xd5\x67\x8a\xbe\x09\x86\xde\xd3\x9a\x1d\x0b\x7b\x37\xab\x48\x30\x47\xc1\xe5\x0c\x00\x9d\xf3\x82\x3a\x1d\xf5\x2f\x80\xf1\x4e\x82\xb7\x96\xc2\xbc\x20\xb7\x78\x6c\x32\xca\x1a\xb6\x39\x85\x04\xde\x8b\xde\xbc\x5d\xfc\x7d\xf1\x76\x06\x60\x02\xa5\xe3\xf7\x5c\x51\x14\xac\xea\x25\xb8\xc6\xda\x19\x80\xc3\x8a\x96\x60\x6c\x13\x85\x42\x5c\x60\xf0\x0b\x5f\x93\x8b\x25\xaf\x65\xc1\x7e\x16\x6b\x32\x2a\xb3\x08\xbe\xa9\x97\x70\xb2\xde\x22\x74\x6a\x75\x26\xb5\x60\x69\xc6\x72\x94\x9f\x86\xb3\x3f\x73\x94\xb4\x52\xdb\x26\xa0\xdd\x8b\x4e\x93\x91\x5d\xd1\x58\x0c\xbb\xe9\x19\x40\x34\xbe\xa6\x21\x6a\x67\x5e\x92\x39\xef\x0c\xd8\xbc\x43\x5b\x97\xf8\xae\x45\x31\x25\x55\xd8\xaa\x04\xa0\xea\x5e\xdf\xae\xbe\xfc\xed\xee\x60\x1a\x20\xa7\x68\x02\xd7\x92\xa8\xea\xe0\x81\x23\x48\x49\xd0\xee\x85\xb5\x0f\xe9\x6f\xaf\x24\x5c\xdf\xae\x76\xe7\xeb\xe0\x6b\x0a\xc2\xbd\xf5\xed\x18\xb8\x7e\x30\x7b\x24\xed\x8d\x2a\xd4\xee\x82\x5c\x7d\x4e\xad\xd8\xce\x34\xca\x3b\x1b\xc0\xaf\x41\x4a\x8e\x10\xa8\x0e\x14\xc9\xb5\x51\x70\x00\x0c\xba\x09\x1d\xf8\xec\x3f\x64\x64\x01\x77\x14\x14\x06\x62\xe9\x1b\x9b\x6b\xa8\x6c\x28\x08\x04\x32\xbe\x70\xfc\x6d\x87\x1d\x41\x7c\x12\x6a\x51\xa8\x73\xca\x7e\xb0\x13\x0a\x0e\x2d\x6c\xd0\x36\x74\x09\xe8\x72\xa8\x70\x0b\x81\x54\x0a\x34\x6e\x80\x97\xb6\xc4\x05\x7c\xf4\x81\x80\xdd\xda\x2f\xa1\x14\xa9\xe3\xf2\xea\xaa\x60\xe9\x43\xde\xf8\xaa\x6a\x1c\xcb\xf6\x2a\x45\x2f\x67\x8d\xf8\x10\xaf\x72\xda\x90\xbd\x8a\x5c\xcc\x31\x98\x92\x85\x8c\x34\x81\xae\xb0\xe6\x79\x52\xdd\xa5\xb0\x5f\x54\xf9\x5f\x42\x77\x49\xe2\x9b\x03\x5d\x65\xab\xe1\x11\x25\xb0\x2b\x06\x0b\x29\x16\x9f\xf1\x80\x46\xa5\x7a\x1b\xbb\xa3\xad\x15\x7b\xa2\x75\x4a\xd9\xf9\xfc\xc3\xdd\x3d\xf4\xa2\x93\x33\x8e\xd9\x4f\xbc\xef\x0f\xc6\xbd\x0b\x94\x30\x76\x6b\x0a\xad\x13\xd7\xc1\x57\x09\x93\x5c\x5e\x7b\x76\xd2\xc5\x16\x93\x3b\xa6\x3f\x36\x59\xc5\xa2\x7e\xff\xbd\xa1\x28\xea\xab\x05\xdc\xa4\x3c\x00\x19\x41\x53\xe7\x28\x94\x2f\x60\xe5\xe0\x06\x2b\xb2\x37\x18\xe9\x4f\x77\x80\x32\x1d\xe7\x4a\xec\xeb\x5c\x30\x4c\x61\xc7\x9b\x5b\xd6\x06\x0b\x7d\xa2\x99\xf0\x57\x77\x3f\xef\x6a\x32\x07\x37\x26\xa7\xc8\x41\x63\x5a\x50\x48\x6f\xc2\x30\xfb\xf4\x63\xfc\xa6\xea\x40\x13\xde\xfb\x0a\xd9\x1d\x2f\x4c\x1a\x05\xed\x1d\x5f\x39\x59\xdd\x9e\x77\x68\xc0\xee\x68\x86\xd8\x9f\xd7\xcb\x57\x1c\xd9\x00\x80\xdf\x7e\x70\x1b\x0e\xde\x55\xe4\xe4\x2c\xd1\xf9\xf9\x26\xae\x09\x55\xd1\x13\xc2\x8e\xdc\xf2\x63\xb7\xed\xc0\x2f\xd7\x9f\x7f\xd1\xac\x1b\x50\x7c\xe8\x81\xa0\xd0\x2c\x73\x02\x36\xed\x19\x1d\x9a\x63\x9c\x61\x4b\xd7\x96\x82\xfc\x9b\xb2\xd2\xfb\xc7\xb1\x8d\xbd\x29\x99\xf7\x96\xf0\x38\x3f\x1e\x40\xbd\xff\x74\xf7\x11\xe3\xef\xdf\x89\xf2\x81\x1c\x6d\xf0\x67\x5f\x14\xec\x8a\xef\xc4\xfa\xe8\x1d\x8b\x57\x1f\xdc\x78\xb7\xe6\xef\x85\xfb\x74\xf7\x61\x94\xcc\x97\x20\x26\xee\xa5\x8e\xe2\x79\x6b\x9f\x77\xa2\x49\x46\x4d\x46\x7c\x02\x40\xd1\x6a\xb3\x84\x37\xbf\xbe\x9d\xff\xf3\xb7\xbf\x2e\xda\x9f\x37\xcf\x58\x31\x1a\xb4\x3a\xaa\x1d\x9b\x1f\x6e\xee\x9e\xbd\x30\x3a\xc8\x35\xd5\xf8\xca\x1c\xde\x33\x16\xce\x47\x61\x13\x6f\x83\xcf\x27\x76\xdd\x9f\xd6\xce\x57\xe8\xf9\x0c\xd9\xec\xd6\x01\x57\xf9\x59\xb7\x95\x5d\x11\x28\xc6\x33\x33\x52\x5b\xe3\x49\x6e\x4a\x32\x8f\x14\xce\x75\x6c\x13\xec\x44\xa0\xb1\x50\x35\xb1\xf4\xa2\xff\xfa\x0d\x18\x02\x6e\xcf\xe1\xcd\x7a\x93\x9a\xa3\xb3\x28\xe8\x0b\xfb\x18\xdf\x07\x89\xae\xef\xd0\x57\xef\xfb\x16\xf1\xfa\x9b\xa6\xb5\x3d\x40\xdb\xab\xd1\xa0\x73\x7d\xb5\x16\x1b\x47\x72\x96\xc7\xa7\x6a\xa8\xa0\x34\xf1\x15\x55\x34\xed\x3b\xa8\xa3\x3e\x8b\xda\xb4\xfc\xe1\x42\x6a\xbc\xcb\x79\xf0\x42\x99\x56\x61\xb7\xb1\xeb\xbe\x48\x92\xb4\x7e\x1a\xd8\x45\x41\x67\x28\x2e\x4e\x80\x26\xe3\xea\x40\xc2\xc5\x1e\x6b\xdf\x94\xb5\x1d\xb2\xda\x98\x82\xe4\xa0\x67\x7e\x73\x5a\x97\x7a\x36\x69\x31\x54\x18\x03\xe9\xa9\xdd\x73\x0e\x2a\x32\x25\x3a\x8e\x55\xba\x4b\x2e\xa7\x5c\x9b\x6a\x6d\xd0\x22\x8d\x27\x8c\xa7\x92\x5c\xd7\xb8\x08\xb2\x8d\x3b\x45\xf6\xaa\xa9\x14\xed\xf3\x10\xea\xc0\x3e\x30\x3c\x3a\xff\xe4\xc0\x07\x78\xd2\x8e\x7e\x14\x36\xed\xaf\x6b\xbb\x55\xf9\x68\xed\x9e\xc5\x24\x00\x0a\xde\x90\x03\xed\x79\x17\xf0\xe0\x86\x36\xb5\xcf\x84\x51\xd0\x8c\x00\xf3\xce\x26\xfa\x5a\x5b\x36\x2c\x76\xdb\xbe\x28\xb6\x83\x58\x00\x29\x51\xd4\xe4\x10\xd3\x3b\xc1\xf8\xaa\xf6\x4e\x59\x1f\x85\x35\x89\xc6\xcc\x37\x02\x01\xa5\x4c\xdd\x31\xba\xd4\xea\x72\x68\xdb\x6e\x1f\xe9\x00\x3f\x71\x9a\x3a\xe9\x30\xc1\x6b\xea\xad\x7d\x42\x1b\x70\x19\x17\xf0\x8b\x33\xd4\x45\x7a\x7e\x99\x98\xaf\x08\x9d\x8a\x49\xc4\xec\x98\x98\x50\xd5\x41\xd7\x72\xab\xa3\x0b\xca\x01\x43\xc6\x12\x30\xb0\xdd\xc2\x1c\x58\xd7\x8c\xaf\x28\x42\x8d\x41\xfa\x1c\x70\x7d\xbb\x4a\x4f\xa6\x51\xd0\x12\xdb\x2b\x17\xb1\x22\xc8\xd0\x3c\x3e\x61\xc8\xe3\x3c\x51\xb7\xf6\xa1\xfd\xa7\x1c\xa2\x70\xc6\x96\x25\x51\x6e\x28\x38\x75\xe6\x28\x24\xba\x6d\x67\xfc\x91\x16\x8b\x8b\x91\xfd\xcf\xa7\x75\x00\x8b\x51\xee\x03\xba\xc8\xfd\x37\x83\xa9\x5c\xbe\xf6\xa1\x42\x59\x82\xbe\x46\xe6\xc2\x15\xfd\xd1\x9c\x5f\x51\x8c\x58\x4c\xca\x79\xf1\x7c\x20\x8c\x53\xdd\xc5\x54\x02\xfa\x9c\xce\x68\x16\x3a\xba\xbc\x08\xde\xd1\xfc\xc9\x87\xfc\x72\xff\xba\x9a\x80\x86\xa3\xa7\xf9\xae\x0a\xa0\x50\xe1\xc3\x56\xff\x1b\x6c\x22\xed\x16\x9a\x10\xc8\x49\x97\xab\x4f\x73\x5c\x3f\x56\x32\xa2\x99\xa6\x15\x60\x97\xe2\x81\x15\xb3\x91\xba\x91\x4b\x88\x8d\x29\x01\x63\xd2\xdb\xb2\x9b\x56\xf6\xb1\xc9\xc8\x88\x85\x42\xb3\x6e\x77\x58\xe3\x8e\x1d\xc4\xa6\xaa\x30\xf0\xb7\x74\x35\x4c\xab\x66\x97\x3f\x92\x01\x93\xba\xbe\xe8\x9c\xb1\xb2\x74\xc6\xf1\xb4\xe1\x35\x9e\xdd\x27\xfe\xfb\x6d\x4d\x7d\x9d\xd6\xe3\x3b\xf2\x77\x95\x61\xea\x72\xea\xd0\x83\xdb\x9a\x0d\x5a\xbb\xd5\x14\xd1\x87\x40\x0e\x1a\x13\x9a\x88\x63\xe9\x83\x40\x5d\x86\xf4\xec\x1e\x26\xd4\x49\xd0\xf4\x78\xee\x3f\xca\xb0\xcb\x59\x23\xa4\xab\xb6\xdc\x96\x84\x87\x0b\xcc\x9c\xde\x28\x3b\x97\xd0\xd0\xc3\x05\xd4\xde\x62\x60\xd9\x4e\x87\xc9\x8f\x3e\x00\x7d\xc5\xaa\xb6\x74\x09\x7c\x6c\x65\x2f\x27\xb6\x75\x07\x15\x90\xcd\xb6\x8d\xac\x0d\x5a\xce\x2f\xa7\x15\x4e\x1a\x71\x84\xb4\xef\xe1\x02\x0c\xc6\x44\x6a\x1d\x7c\x86\x99\x96\x9a\x52\x0b\x55\xa8\x2e\x21\xfa\x43\xc1\x93\xa0\x9d\xfd\x9a\x4f\xd1\x5a\xca\xe1\xe1\x62\xe5\x3a\x01\xa3\xb9\x0a\x5e\x8e\x90\xb6\x70\xd0\x48\xff\xa4\xfd\x79\x1b\x7c\xa3\x4b\x8a\x3b\xb2\xf0\x4c\x8f\xf9\x5c\x73\xda\xbf\x78\x5f\x78\xdb\x4f\xb4\xa1\xf9\xbf\x50\x7e\xa2\x6d\xbc\x6d\x73\xc9\xe9\xe9\xc9\xde\xe7\x15\xef\x8c\x53\x75\x47\x6d\x3c\x99\x6c\x5b\xc2\x25\x68\x34\xb6\x13\xe2\x83\xa6\xe9\xc1\x4c\x93\xed\xbe\xcb\xf5\xda\x75\xf7\x1d\xfe\xfb\xbf\xd9\xfe\xea\xa3\x31\x54\x0b\xe5\x9f\x8e\x3f\x17\x5f\xb4\x6e\xef\xbf\x07\xa7\xbf\x83\x6e\x12\x7e\xfd\x6d\xd6\x0a\xa6\xfc\x4b\xff\xe5\x57\x27\xff\x1f\x00\x00\xff\xff\x4e\xb1\xda\xf5\x69\x17\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
