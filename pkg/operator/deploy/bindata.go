// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/preview.aro.openshift.io_previewfeatures.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xcd\x72\xdb\x36\x10\xbe\xeb\x29\x76\xd2\x83\xdb\x69\x45\x35\xd3\x4b\xab\x9b\x2b\x27\xa9\x26\x69\xac\xb1\x3c\xb9\x64\x72\x58\x81\x4b\x0a\x31\xb9\x60\x81\x85\x12\xa7\xd3\x77\xef\x00\x24\x25\x4a\xa6\x64\xd1\x99\xf4\x50\x5e\x24\x2e\x16\xfb\xfb\xed\x2e\xc0\xd1\x78\x3c\x1e\x61\xa5\xdf\x91\x75\xda\xf0\x14\xb0\xd2\xf4\x59\x88\xc3\x9b\x4b\xee\x7e\x75\x89\x36\x93\xcd\xf3\xd1\x9d\xe6\x74\x0a\x33\xef\xc4\x94\x37\xe4\x8c\xb7\x8a\xae\x28\xd3\xac\x45\x1b\x1e\x95\x24\x98\xa2\xe0\x74\x04\x80\xcc\x46\x30\x90\x5d\x78\x05\x50\x86\xc5\x9a\xa2\x20\x3b\xce\x89\x93\x3b\xbf\xa2\x95\xd7\x45\x4a\x36\x0a\x6f\x55\x7f\xef\xf9\x8e\xcd\x27\xfe\x61\x04\xa0\x2c\x45\x09\xb7\xba\x24\x27\x58\x56\x53\x60\x5f\x14\x23\x00\xc6\x92\xa6\xa0\x0a\xef\x84\xac\x4b\xd0\x9a\xc4\x54\xc4\x6e\xad\x33\x49\xb4\x19\xb9\x8a\x54\x50\x9b\x5b\xe3\xab\x29\x3c\x58\xaf\x25\x34\x96\x35\x5e\xd5\xc2\x22\xa5\xd0\x4e\x5e\x77\xa9\x6f\xb4\x93\xb8\x52\x15\xde\x62\xb1\x53\x1d\x89\x4e\x73\xee\x0b\xb4\x5b\xf2\x08\xc0\x29\x53\x51\x57\x6a\xe3\x61\xd4\x39\x6e\x1c\xd8\x3c\xc7\xa2\x5a\xe3\xf3\x5a\x8a\x5a\x53\x89\xb5\x49\x00\xc1\xdc\xcb\xc5\xfc\xdd\x2f\xcb\x3d\x32\x40\x4a\x4e\x59\x5d\x49\x8c\x56\x23\x1e\xb4\x03\x59\x13\xd4\xbc\x90\x19\x1b\x5f\x5b\x23\xe1\x72\x31\xdf\xee\xaf\xac\xa9\xc8\x8a\x6e\xbd\xaf\x9f\x4e\xf6\x3b\xd4\x03\x6d\x17\xc1\xa0\x9a\x0b\xd2\x90\x76\xaa\xd5\x36\xae\x51\xda\xf8\x00\x26\x03\x59\x6b\x07\x96\x2a\x4b\x8e\xb8\x06\xc2\x9e\x60\x08\x4c\xc8\x60\x56\x1f\x49\x49\x02\x4b\xb2\x41\x0c\xb8\xb5\xf1\x45\x1a\xd0\xb2\x21\x2b\x60\x49\x99\x9c\xf5\x97\xad\x6c\x07\x62\xa2\xd2\x02\x85\x9a\xa4\xec\x1e\xcd\x42\x96\xb1\x80\x0d\x16\x9e\x7e\x02\xe4\x14\x4a\xbc\x07\x4b\x41\x0b\x78\xee\xc8\x8b\x2c\x2e\x81\x3f\x8d\x25\xd0\x9c\x99\x29\xac\x45\x2a\x37\x9d\x4c\x72\x2d\x2d\xea\x95\x29\x4b\xcf\x5a\xee\x27\x11\xc0\x7a\xe5\xc5\x58\x37\x49\x69\x43\xc5\xc4\xe9\x7c\x8c\x56\xad\xb5\x90\x12\x6f\x69\x82\x95\x1e\x47\xd3\x39\x22\x3f\x29\xd3\xef\x6c\x53\x27\xee\x62\xcf\x56\xb9\x0f\xf0\x70\x62\x35\xe7\x9d\x85\x88\xc5\x13\x19\x08\xa8\x0c\xd9\xc6\x66\x6b\xed\xc5\x2e\xd0\x81\x14\xa2\x73\xf3\x62\x79\x0b\xad\xea\x98\x8c\xc3\xe8\xc7\xb8\xef\x36\xba\x5d\x0a\x42\xc0\x34\x67\x64\xeb\x24\x66\xd6\x94\x51\x26\x71\x5a\x19\xcd\xd2\x60\x4b\x13\x1f\x86\xdf\xf9\x55\xa9\x25\xe4\xfd\x2f\x4f\x4e\x42\xae\x12\x98\xc5\x56\x00\x2b\x02\x5f\xa5\x28\x94\x26\x30\x67\x98\x61\x49\xc5\x0c\x1d\x7d\xf3\x04\x84\x48\xbb\x71\x08\xec\x79\x29\xe8\x76\xb1\x43\xe6\x3a\x6a\x9d\x85\xb6\xd1\x1c\xc9\x57\x53\x9f\xcb\x8a\xd4\x5e\xc5\xa4\xe4\xb4\x0d\x98\x16\x14\x0a\x95\xd0\xed\x3e\xed\xd3\x5f\xa9\xe1\x41\x65\xaf\x4c\x89\x9a\x0f\x17\x8e\x3a\x05\x75\x8d\xcf\x59\xe6\x8b\x61\x9b\x3a\xd1\xed\xed\x10\xbb\xfd\xa1\xf8\xf2\x03\x1f\x00\xf0\xcb\x0b\xde\x68\x6b\xb8\x24\x96\x41\xaa\x57\xc8\x4c\xf6\xe1\x96\xbd\x08\xff\x1e\x99\xb6\xc1\xd5\x19\x60\x4b\x6b\x5a\xc9\x8a\xc2\xbf\x4f\xdc\x36\x0e\x15\xc7\xd7\x03\x3b\x4f\xc5\x1b\x9a\xf9\xd5\xeb\xc1\x23\x5e\x1c\x85\x4e\x14\x5a\xa7\xbd\x9d\xa5\xaf\xc2\xb8\x9a\xa7\x83\xa2\x94\x0e\x07\x42\x8e\x42\x9f\xf0\xbe\x86\x50\x8f\xb3\x5a\xa8\xec\x8d\xc1\x19\x6e\xa2\xb5\x78\xdf\xaf\x6f\x61\xf5\x06\x85\x5e\x34\x6d\x64\x20\x10\x73\x62\xda\xe0\x1b\x93\xe7\x9a\xf3\x87\x3b\x1f\x4d\x5e\xa6\xf3\xa3\xf8\x8d\x02\x50\xc2\xec\x98\xc2\xc5\xfb\x9f\xc7\xbf\x7d\xf8\x31\xa9\x7f\x2e\x86\xe7\x1b\xa0\x34\xac\xc5\x84\xc5\x57\xb3\xe5\xa5\x52\xc6\x1f\x03\x0e\xb1\x2f\xfb\x57\xc6\x70\x79\x73\xdd\x1e\x3f\x4c\xee\xe6\x6f\x6f\xcf\xe2\x5b\xdc\x5c\x5f\x9d\xc5\xf8\xd5\x8e\x9d\xac\xeb\xc7\x9c\xbb\xd2\x98\xb3\x71\xa2\x95\x5b\x58\x93\x1e\xe1\xba\x7d\x38\xe2\xdb\xa5\x19\xbe\x44\x6d\x33\xfc\xfc\xd5\x7e\xbc\x0d\x47\xc1\x0a\x15\xfd\x0f\x52\x74\xa2\xd7\x68\xce\x2c\x0e\x6c\x2e\x9a\x73\x4b\xce\x0d\x2c\xd5\xfa\x14\x46\x32\x5b\x93\xba\xeb\xeb\xe0\xa7\x8b\xd5\xdb\xa2\x97\x7e\xa2\x31\x3d\x62\x50\x97\xa1\xaf\x41\x9d\x8c\x5b\x61\x54\x3c\xbe\x0e\x0a\x41\xf0\x0f\xc5\xd8\xac\xc0\xbc\xc7\x62\x4c\xd3\x78\x65\xc2\x62\x71\x32\x14\x27\x7d\xda\x9b\x83\xd7\x8d\xc2\x97\x41\xe1\x76\x1c\x66\x84\x61\x70\xc7\x0e\xec\xb6\xf7\x82\xcb\x9b\xeb\x2d\xff\x90\x48\xb4\xe7\xc9\x3e\x10\xed\x19\xd3\xce\xb3\xf9\x55\x7b\x33\xb9\xfc\x12\xcc\xd8\x09\xa8\xaf\x08\xd4\xb9\x30\x9d\xed\xb8\x23\xbb\xd1\x8a\x96\x7e\xc5\x24\xff\xc1\xf4\x72\x62\x2c\xe6\xb4\xf4\x59\xa6\x3f\x0f\x02\xc1\x86\x49\x06\x15\xdc\xb1\x43\xa6\xa0\x78\x77\xc6\x31\x33\xf2\xed\x1d\x34\xcd\x2a\x84\xeb\xe9\x27\x4d\x65\xb8\x46\xea\x90\x40\xf7\x02\x73\xd6\x4a\x0a\x90\xf8\xe8\x5d\x7d\x8d\x70\x82\x9c\xa2\x4d\x77\x8a\x20\xd3\x54\xa4\x2e\xe9\x91\x7b\xba\x6d\x00\x14\xe8\xe4\xd6\x22\x3b\xdd\x7e\x35\x38\xd6\x2b\x32\x63\x4b\x94\x29\x84\xfb\xc8\x58\x74\x49\x4f\xed\x29\x25\x39\x87\xf9\x51\x3d\x8f\xee\xb7\x84\xee\xd8\x89\xe4\x8c\xed\x7d\xc8\x18\xb0\x3d\x32\x3c\x6d\xf3\x89\x36\x71\xaa\x98\xda\xbe\xf8\xc8\x55\xa2\x57\xad\xa5\xf4\x0f\x94\xd7\x74\xef\x16\xf5\x9d\xf5\x5b\xd7\x7e\xaf\x8f\x0f\x88\x75\x81\x4d\x41\xac\xaf\x61\xd4\x34\x8c\x2e\xc5\xaf\xb6\x9f\x01\x5a\xeb\x9a\xd4\xc1\xdf\xff\x8c\x76\x59\x44\xa5\xa8\x12\x4a\xdf\x1e\x7e\x9d\x7a\xf6\x2c\xbe\xb4\x9f\x9f\xe2\x6b\xa7\x36\xe1\xfd\x87\x51\xad\x98\xd2\x77\xed\x87\xa6\x40\xfc\x37\x00\x00\xff\xff\x58\x9f\x4b\x13\xdb\x13\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _previewAroOpenshiftIo_previewfeaturesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\x38\x74\x0f\xd9\x80\x5a\x49\x56\xa0\xd8\xfc\x16\x24\x6d\x11\xac\x4d\x8b\x24\x48\x1f\x86\x3d\x9c\xc5\x93\xcc\x86\x22\x55\xf2\x68\xcf\x1b\xf6\xdd\x07\x92\x92\x2d\xc9\x52\xe2\x75\x9b\x9e\x2c\xf2\xf8\xbb\xbb\xdf\xfd\xe1\xc9\xb3\xf9\x7c\x3e\xc3\x5a\x3e\x90\x75\xd2\xe8\x05\x60\x2d\xe9\x77\x26\x1d\xde\x5c\xf6\xf8\x93\xcb\xa4\x39\x5d\x9f\xcf\x1e\xa5\x16\x0b\xb8\xf4\x8e\x4d\x75\x4b\xce\x78\x9b\xd3\x15\x15\x52\x4b\x96\x46\xcf\x2a\x62\x14\xc8\xb8\x98\x01\xa0\xd6\x86\x31\x2c\xbb\xf0\x0a\x90\x1b\xcd\xd6\x28\x45\x76\x5e\x92\xce\x1e\xfd\x92\x96\x5e\x2a\x41\x36\x82\xb7\xaa\xbf\xf7\xfa\x51\x9b\x8d\xfe\x61\x06\x90\x5b\x8a\x08\xf7\xb2\x22\xc7\x58\xd5\x0b\xd0\x5e\xa9\x19\x80\xc6\x8a\x16\x50\x5b\x5a\x4b\xda\x14\x84\xec\x2d\xb9\xac\x79\xcf\xd0\x9a\xcc\xd4\xa4\xdd\x4a\x16\x9c\x49\x33\x73\x35\xe5\xc1\x8a\xd2\x1a\x5f\xef\xce\x1d\xca\x25\xe0\xc6\xe0\xe4\xec\xa7\x24\xfb\x36\xe9\x88\x1b\x4a\x3a\xfe\x65\x64\xf3\xbd\x74\x1c\x05\x6a\xe5\x2d\xaa\x03\xfb\xe2\x9e\x93\xba\xf4\x0a\xed\x70\x77\x06\xe0\x72\x53\xd3\x02\x2e\x95\x77\x4c\x76\x06\xd0\x90\x12\xed\x99\x37\x3e\xaf\xcf\x51\xd5\x2b\x3c\x4f\x60\xf9\x8a\x2a\x4c\xe6\x02\x04\x57\x2e\x3e\x5d\x3f\xbc\xba\xeb\x2d\x03\x08\x72\xb9\x95\x35\x47\x82\xfb\x36\x83\x74\xc0\x2b\x82\x74\x04\x0a\x63\xe3\x6b\x63\x1b\x34\xc6\xc1\xc5\xa7\xeb\x1d\x5a\x6d\x4d\x4d\x96\x65\xcb\x53\x7a\x3a\xe9\xd3\x59\x1d\xe8\x3e\x09\xe6\x25\x29\x10\x21\x6f\x28\x69\x6f\x1c\x25\xd1\x78\x04\xa6\x00\x5e\x49\x07\x96\x6a\x4b\x8e\x74\xca\xa4\x1e\x30\x04\x21\xd4\x60\x96\x5f\x28\xe7\x0c\xee\xc8\x06\x18\x70\x2b\xe3\x95\x08\xe9\xb6\x26\xcb\x60\x29\x37\xa5\x96\x7f\xec\xb0\x1d\xb0\x89\x4a\x15\x32\x35\x01\xdb\x3f\x52\x33\x59\x8d\x0a\xd6\xa8\x3c\xbd\x04\xd4\x02\x2a\xdc\x82\xa5\xa0\x05\xbc\xee\xe0\x45\x11\x97\xc1\x07\x13\x78\xd4\x85\x59\xc0\x8a\xb9\x76\x8b\xd3\xd3\x52\x72\x5b\x36\xb9\xa9\x2a\xaf\x25\x6f\x4f\x63\x05\xc8\xa5\x67\x63\xdd\xa9\xa0\x35\xa9\x53\x27\xcb\x39\xda\x7c\x25\x99\xf2\x40\xf4\x29\xd6\x72\x1e\x4d\xd7\xb1\x74\xb2\x4a\x7c\x67\x9b\x42\x73\x27\x3d\x5b\x79\x1b\x92\xc5\xb1\x95\xba\xec\x6c\xc4\xac\x7d\x22\x02\x21\x71\x43\xd0\xb1\x39\x9a\xbc\xd8\x13\x1d\x96\x02\x3b\xb7\x6f\xee\xee\xa1\x55\x1d\x83\x31\x64\x3f\xf2\xbe\x3f\xe8\xf6\x21\x08\x84\x49\x5d\x90\x4d\x41\x2c\xac\xa9\x22\x26\x69\x51\x1b\xa9\x39\xbe\xe4\x4a\x92\x1e\xd2\xef\xfc\xb2\x92\x1c\xe2\xfe\xd5\x93\xe3\x10\xab\x0c\x2e\x63\x2f\x81\x25\x81\xaf\x05\x32\x89\x0c\xae\x35\x5c\x62\x45\xea\x12\x1d\xfd\xef\x01\x08\x4c\xbb\x79\x20\xf6\xb8\x10\x74\xdb\xe0\x50\x38\xb1\xd6\xd9\x68\x5b\xd3\x44\xbc\xfa\xd5\x7a\x57\x53\xde\x2b\x9c\x61\x9d\x86\xfa\xbd\xb8\xfd\xd8\xc3\x1b\xaf\xd7\xf0\x68\x57\xbe\x55\x66\xf3\xde\x94\x07\x5b\x03\x33\x6e\xee\xde\xb5\x92\xb1\x91\xa3\xd4\xf1\x47\x21\x4b\x6f\x63\x6d\x46\xd5\x37\x77\xef\xa0\x50\x66\x03\xca\x94\x2e\x3b\x80\x04\xf8\x58\xc9\x26\xfa\xbd\xb3\xb2\x80\xad\xf1\x20\x8c\x3e\x61\xd8\xa0\xde\xc9\x34\x37\x46\x28\xd9\x50\x78\x3a\x97\x8a\x46\x60\x9f\xd1\x3b\xcd\x40\x78\x48\xe3\x52\x91\x18\xdb\x1a\x16\xcf\x9b\x24\xda\x0b\xc1\x92\x56\xb8\x96\xc6\xdb\xd4\xb4\x68\x6f\xa8\x1d\x87\x04\xd8\xac\x48\x03\x5b\x4f\x43\x37\x37\x52\x29\x60\xbb\x4d\xfe\x62\xbe\x8a\x02\x82\x9c\xb4\x24\xfa\x9c\xbd\x7c\x0a\xbb\x40\xe5\x08\x24\xf7\x00\x85\x74\xc1\xfa\x08\xb9\x27\xeb\x64\x14\x27\x25\xeb\xd2\x18\x45\x38\x6c\xbb\xe1\xd1\xc4\x1b\x63\x1f\x3f\x23\xe7\x2b\xb2\xd7\x57\x47\x90\x77\x33\x38\x12\x33\x5f\x16\xb2\xa1\xf1\xfa\xaa\xe5\xaf\xc1\x9e\xf2\x2f\x9d\x1f\x4b\xae\xc9\x82\x6c\x1f\x4b\x9c\xca\xfa\x0a\xb7\xa3\xa9\x10\x4c\x2e\xd0\x2b\x5e\xc0\xcf\x67\xcf\xbb\x74\xdb\xc5\xeb\xf8\xb3\x32\x1b\xa8\x50\x6f\x41\x84\xf5\x96\xef\x40\xf7\x84\x53\xcd\x9d\xb5\x0c\xc9\x13\x6a\x8b\xc4\xb8\x7f\x85\xb1\x15\xf2\x22\xdc\x52\xaf\x7e\x7c\x82\x81\x70\x8b\x95\x71\x84\x38\xd0\xc4\xc6\x62\x49\x17\x79\x6e\xbc\xe6\x76\x86\xbb\x3e\x26\xfb\xef\xc6\x8f\xee\xe2\xd6\x40\x03\x26\x01\xf0\x8e\xc4\x84\xbf\xa1\x57\xe4\x21\xe5\xf3\xdd\x7d\xb3\xcf\x48\xf8\xe0\x5d\xec\xf6\x52\x27\x5c\xac\x02\x2f\x65\x68\x14\xa6\x98\x42\x6c\x8e\x7f\x53\x5e\xb0\xc5\xa2\x90\xf9\x85\x46\xb5\x65\x99\xbb\xeb\x30\x04\xac\x51\x3d\x93\x22\xaf\xcf\xaa\x23\x7a\x46\x0b\x06\xc8\xb0\x59\xc9\x50\xd3\x26\x94\xb2\xf0\x39\x27\xb3\xb1\xd5\x9b\xc1\x43\x1c\x29\xa6\xfa\xc6\xeb\xb3\xea\x25\x9c\x9f\x55\x19\x5c\x75\x6c\x98\x28\x61\xd2\xbe\x1a\x07\x9a\x4f\x5a\x3e\x0f\xe8\xff\x05\x83\xef\x4d\xb9\xfb\xfd\xd9\xd8\x47\x57\xe3\x91\x59\x76\x4b\x5f\x7d\xec\x76\x21\x47\xee\x07\xb0\xa3\xb9\x31\x41\xd6\x2e\x63\xfe\x5d\x6e\xac\xc7\x86\xda\xbd\xe5\x4d\x18\xc6\x8b\xb1\xe7\xd8\x70\xee\x6d\x80\x83\x81\xdd\xeb\x6b\xdc\xc8\xa7\x82\x79\x3e\xb1\xfe\x2d\x0d\xc2\x36\xec\x1f\xea\x9a\xb7\xf7\xe4\xc1\xce\xc4\x60\x33\x3d\xf1\x30\xb2\x77\xc7\xcf\x3c\x51\xbc\x77\xe5\x9a\xa5\x0b\x93\xa6\x88\x50\x14\x18\x1c\xf9\x4a\x6b\x9f\xe9\xcb\x3f\x14\xa1\xec\x7c\xa1\x76\x1f\xc9\x54\x8d\xd6\x61\xcf\xd2\x8f\x35\x59\x64\x63\x2f\x5b\xa4\x30\x59\x7f\x09\x29\x9a\x1a\x22\x6a\x81\x56\xec\x15\x41\x21\x49\x89\xd1\xc9\xe8\xe9\x19\x05\x40\xa1\xe3\x7b\x8b\xda\xc9\xf6\x8b\x78\xaa\x4b\xb4\x97\x44\x18\x95\xe7\x2c\x27\x0b\xe4\x99\xc4\x0f\x73\xac\x73\x58\x4e\xea\x79\xf6\xbc\x25\x74\x53\x95\x73\xc4\xf1\xb1\x3c\xf9\x07\xc7\xa3\xc0\xb7\x1d\x9e\xcc\xe8\xfd\x26\x5a\x8b\xdb\xe1\x17\x51\x93\x0d\xa3\xdf\xc1\x4f\xaa\x1d\x55\x78\xb0\x98\x92\x7e\x11\x27\xc7\xb4\x90\x6e\xdc\xee\x8a\x5f\xee\x3e\x17\x5b\xfd\x0d\x8f\xf0\xe7\x5f\xb3\x3d\xa5\x98\xe7\x54\x33\x89\x9b\xe1\xff\x1d\x2f\x5e\xf4\xfe\xc2\x88\xaf\x9d\x42\x81\x5f\x7f\x9b\x25\xc5\x24\x1e\xda\xbf\x27\xc2\xe2\xdf\x01\x00\x00\xff\xff\xf2\xf1\xf8\xc1\x44\x12\x00\x00")

func previewAroOpenshiftIo_previewfeaturesYamlBytes() ([]byte, error) {
	return bindataRead(
		_previewAroOpenshiftIo_previewfeaturesYaml,
		"preview.aro.openshift.io_previewfeatures.yaml",
	)
}

func previewAroOpenshiftIo_previewfeaturesYaml() (*asset, error) {
	bytes, err := previewAroOpenshiftIo_previewfeaturesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "preview.aro.openshift.io_previewfeatures.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml":                aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":                        masterDeploymentYaml,
	"master/rolebinding.yaml":                       masterRolebindingYaml,
	"master/service.yaml":                           masterServiceYaml,
	"master/serviceaccount.yaml":                    masterServiceaccountYaml,
	"namespace.yaml":                                namespaceYaml,
	"preview.aro.openshift.io_previewfeatures.yaml": previewAroOpenshiftIo_previewfeaturesYaml,
	"worker/deployment.yaml":                        workerDeploymentYaml,
	"worker/role.yaml":                              workerRoleYaml,
	"worker/rolebinding.yaml":                       workerRolebindingYaml,
	"worker/serviceaccount.yaml":                    workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"preview.aro.openshift.io_previewfeatures.yaml": {previewAroOpenshiftIo_previewfeaturesYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
