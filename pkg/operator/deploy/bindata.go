// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4b\x73\xdb\xc8\x11\xbe\xf3\x57\x74\x29\x07\x1f\x22\x52\x76\xa5\x52\x95\xf0\xa6\x95\x6c\x87\xb5\x6b\x59\x25\xa9\xbc\x87\xd5\x1e\x1a\x83\x26\xd8\xd1\x60\x06\xdb\xd3\xa0\x44\xa7\xf2\xdf\x53\x33\x00\xf8\x12\x40\x89\x56\xed\x25\xb8\x48\x18\xcc\xf4\xe3\xeb\xd7\x74\x73\x34\x1e\x8f\x47\x58\xf1\x37\x92\xc0\xde\x4d\x01\x2b\xa6\x27\x25\x17\xdf\xc2\xe4\xe1\x1f\x61\xc2\xfe\x6c\xf9\x61\xf4\xc0\x2e\x9f\xc2\x45\x1d\xd4\x97\x37\x14\x7c\x2d\x86\x2e\x69\xce\x8e\x95\xbd\x1b\x95\xa4\x98\xa3\xe2\x74\x04\x80\xce\x79\xc5\xb8\x1c\xe2\x2b\x80\xf1\x4e\xc5\x5b\x4b\x32\x2e\xc8\x4d\x1e\xea\x8c\xb2\x9a\x6d\x4e\x92\x88\x77\xac\x97\xef\x27\x7f\x9f\xbc\x1f\x01\x18\xa1\x74\xfc\x8e\x4b\x0a\x8a\x65\x35\x05\x57\x5b\x3b\x02\x70\x58\xd2\x14\x8c\xad\x83\x92\x84\x09\x8a\x9f\xf8\x8a\x5c\x58\xf0\x5c\x27\xec\x47\xa1\x22\x13\x79\x16\xe2\xeb\x6a\x0a\xcf\xbe\x37\x14\x5a\xb1\x5a\x95\x1a\x62\x69\xc5\x72\xd0\x9f\xb7\x57\x7f\xe1\xa0\xe9\x4b\x65\x6b\x41\xbb\x61\x9d\x16\x03\xbb\xa2\xb6\x28\xeb\xe5\x11\x40\x30\xbe\xa2\x6d\xaa\xad\x7a\x89\xe7\xb8\x55\x60\xf9\x01\x6d\xb5\xc0\x0f\x0d\x15\xb3\xa0\x12\x1b\x91\x00\xa2\xb8\xe7\xd7\xb3\x6f\x7f\xbb\xdd\x59\x06\xc8\x29\x18\xe1\x4a\x13\x54\x2d\x79\xe0\x00\xba\x20\x68\xf6\xc2\xdc\x4b\x7a\xed\x84\x84\xf3\xeb\xd9\xfa\x7c\x25\xbe\x22\x51\xee\xb4\x6f\x9e\x2d\xd3\x6f\xad\xee\x71\x7b\x17\x05\x6a\x76\x41\x1e\x6d\x4e\x0d\xdb\x56\x35\xca\x5b\x1d\xc0\xcf\x41\x17\x1c\x40\xa8\x12\x0a\xe4\x1a\x2f\xd8\x21\x0c\x71\x13\x3a\xf0\xd9\xbf\xc9\xe8\x04\x6e\x49\x22\x19\x08\x0b\x5f\xdb\x3c\xba\xca\x92\x44\x41\xc8\xf8\xc2\xf1\xf7\x35\xed\x00\xea\x13\x53\x8b\x4a\xad\x51\x36\x0f\x3b\x25\x71\x68\x61\x89\xb6\xa6\x53\x40\x97\x43\x89\x2b\x10\x8a\x5c\xa0\x76\x5b\xf4\xd2\x96\x30\x81\x2f\x5e\x08\xd8\xcd\xfd\x14\x16\xaa\x55\x98\x9e\x9d\x15\xac\x9d\xcb\x1b\x5f\x96\xb5\x63\x5d\x9d\x25\xef\xe5\xac\x56\x2f\xe1\x2c\xa7\x25\xd9\xb3\xc0\xc5\x18\xc5\x2c\x58\xc9\x68\x2d\x74\x86\x15\x8f\x93\xe8\x2e\xb9\xfd\xa4\xcc\xff\x22\x6d\x90\x84\x77\x3b\xb2\xea\x2a\xba\x47\x50\x61\x57\x6c\x7d\x48\xbe\x78\xc0\x02\xd1\x2b\xa3\xb5\xb1\x3d\xda\x68\xb1\x01\x3a\x2e\x45\x74\x6e\x3e\xde\xde\x41\xc7\x3a\x19\x63\x1f\xfd\x84\xfb\xe6\x60\xd8\x98\x20\x02\xc6\x6e\x4e\xd2\x18\x71\x2e\xbe\x4c\x34\xc9\xe5\x95\x67\xa7\xad\x6f\x31\xb9\x7d\xf8\x43\x9d\x95\xac\xd1\xee\x7f\xd4\x14\x34\xda\x6a\x02\x17\x29\x0f\x40\x46\x50\x57\x39\x2a\xe5\x13\x98\x39\xb8\xc0\x92\xec\x05\x06\xfa\xd3\x0d\x10\x91\x0e\xe3\x08\xec\xeb\x4c\xb0\x9d\xc2\xf6\x37\x37\xa8\x6d\x7d\xe8\x12\xcd\x80\xbd\xda\xf8\xbc\xad\xc8\xec\x44\x4c\x4e\x81\x25\xfa\xb4\xa2\x52\x8c\x84\xed\xec\xd3\x3d\xfd\x91\x1a\x1f\x34\x72\xe9\x4b\x64\xb7\xff\x61\x50\x29\x68\x62\x7c\xe6\x74\x76\x7d\xdc\xa1\x2d\x74\x7b\x33\xc4\xe6\x7c\x0c\xbe\x62\x4f\x07\x00\xfc\xfe\xd1\x2d\x59\xbc\x2b\xc9\xe9\x51\xac\x33\x74\x8e\xe4\xf9\x91\x1d\x84\x7f\x4a\x9b\xd6\xe0\xf2\x1c\xb0\x5b\x6b\x53\x49\x46\xf1\xbf\x47\xd7\x25\x0e\x93\x6a\xd7\x33\x39\x0f\xe1\x0d\x6d\xf1\xea\xd5\xe0\x25\x00\x06\x7d\x27\xe9\x72\xbc\x19\xe7\x84\xd1\x18\x3d\x42\xee\x00\xf3\xa9\xdd\xb6\xe3\x7b\xe7\x37\x5f\x63\x65\x11\x54\x2f\x1d\x21\x28\x62\x26\x3d\x12\x8d\x98\x47\x9d\x61\x4b\xe7\x96\x44\x7f\xa5\x6c\xe1\xfd\xc3\x21\x6c\x32\xef\x2d\xe1\x7e\x0d\xd8\x21\xf5\xd3\x80\xbd\x8f\x22\x72\x79\x75\xfb\x05\xc3\x1f\x6f\xa4\xf2\x99\x1c\x2d\xf1\x17\x5f\x14\xec\x8a\x37\xd2\xfa\xe2\x1d\xab\x8f\x86\xbc\xf0\x6e\xce\x6f\x25\x77\x75\xfb\xb9\xd7\x22\xc7\x90\xf0\x39\x5d\x0a\xf2\xdb\xd1\xbe\xae\xad\xbd\x25\x23\x74\x30\x2e\x5e\x41\xe8\xc6\xd7\x4a\x9f\xf8\xe9\x8d\x64\x7e\xf5\xf2\x80\xe2\x6b\x97\x87\x8b\xf5\x65\xf3\x47\x68\x1e\x08\xd9\x18\x2e\x8f\xb8\x6a\x12\x70\x8f\x29\x58\xa9\xec\xb5\xd0\x81\x98\xee\x3e\xa2\x08\xae\xfa\xf9\x5d\x0b\x2f\x51\xe9\x63\x5b\x84\x8f\x4c\xe3\xc5\x61\x87\x7e\x31\xf5\xcd\xb9\x18\xcc\xfe\x89\x00\x6a\xbc\x79\x4d\xe1\xdd\x6f\xef\xc7\xff\xfc\xfd\xaf\x93\xe6\xcf\xbb\x03\xd0\x0f\x00\x01\x50\xae\x03\xe6\xf3\xc5\xed\xb9\x31\xbe\x1e\x4a\xbb\xe4\xea\xb2\xff\xcb\x38\xa6\xba\xee\xf2\xee\x8b\x30\xbb\xba\x7b\xd5\xbe\xeb\x9b\xaf\x97\xaf\xda\xf8\x66\xc5\x0e\x56\xc5\x97\x94\xbb\x64\x2c\x9c\x0f\xca\x26\x5c\x8b\xcf\x07\x76\xdd\x3d\xbf\x20\x77\x9f\x2e\xf0\x13\xb2\xcc\xf1\xe9\xcd\x7a\x5c\xc5\x46\xaa\x42\x43\xff\x07\x26\x3a\x10\xf5\xec\xe6\x82\xb3\xfc\xa8\xa0\x63\x57\x08\x85\x70\x64\xa8\x36\x3d\x0c\xe9\xc5\x82\xcc\x43\x5f\xf6\x3a\x1c\xac\xb5\xd8\x81\xfa\x30\x98\x98\x5e\x10\x68\x7b\x43\x5f\x82\x3a\x88\x9b\xf5\x26\x35\x7f\x47\x41\xd0\x35\x2e\x7d\x78\xef\x5c\x72\xba\x09\xc4\xec\xb2\x6b\x81\xcf\xbf\xc7\x2b\xcd\x86\x40\xd3\x8b\xd2\x56\x67\xfe\x6a\x29\x96\x8e\xf4\x28\x8b\x0f\xf5\x08\x8a\x5a\x87\x57\x74\x09\x69\xdf\x4e\x9f\xe0\xb3\x10\x9b\xb2\x1f\x6e\x14\x8c\x77\x39\x6f\x4d\x60\x86\x45\x58\x6f\x6c\xbb\x4b\xd2\xc4\xad\x5b\x06\x76\x41\xd1\x19\x0a\x93\xd7\x17\xbc\x1d\x0e\x27\x1b\x5a\x9b\xa6\xb3\x99\x00\x44\x1d\x93\x93\xec\xcc\x04\xde\xf5\x07\x70\x42\x62\xb2\x2d\x30\x0a\xc5\x53\xeb\x71\x15\x94\x64\x16\xe8\x38\x94\x29\x96\x5c\x4e\x79\xbc\xfb\xc7\x06\x34\x50\x7f\xae\x7c\x5c\x90\x6b\x1b\x33\x45\xb6\x61\x2d\xc8\x46\xb4\xc8\x25\xf6\xb1\x08\x95\xb0\x17\x86\x07\x17\x9b\x0a\x2f\xf0\x18\xdb\x8c\x5e\xb2\x69\x7f\x55\xd9\x55\xe4\x8f\xd6\x6e\x50\x4c\x0c\xa0\xe0\x25\x39\x88\x3d\xfd\x04\xee\xdd\xb6\x4e\x4d\xef\xd2\x4b\x34\x23\xc0\xbc\xd5\x89\x9e\x2a\xcb\x86\xd5\xae\x9a\x89\xc9\x6a\xcb\x17\x40\x17\xa8\x51\x65\x09\x69\x0e\x62\x7c\x59\x79\x17\x51\xef\x25\x6b\x12\x8c\x99\xaf\x15\x04\x75\x91\xba\x7f\x74\xa9\x95\x67\x69\xc6\x0a\x3e\xd0\x0e\xfd\x84\x69\x9a\x14\xc8\x00\xae\x69\x76\xe0\x13\xb5\x2d\x2c\xc3\x04\xbe\x3a\x43\xad\xa7\xe7\xa7\x09\xf9\x92\xd0\x45\x36\x09\x98\x35\x12\x03\xa2\x3a\x68\x47\x0a\xd1\xd0\x05\xe5\x80\x92\xb1\x0a\x0a\xdb\x15\x8c\x81\xe3\x37\xe3\x4b\x0a\x50\xa1\x68\x97\x03\xce\xaf\x67\x69\x24\xd4\x4b\x74\x81\x4d\xc8\x05\x2c\x09\x32\x34\x0f\x8f\x28\x79\x18\x27\xe8\xe6\x5e\x9a\xb7\x88\x21\x2a\x67\x6c\x59\x13\xe4\x86\xc4\x45\x63\xf6\x92\x44\xb7\x6a\x95\xdf\x93\x62\x72\xd2\xb3\xff\x70\x5a\x07\xb0\x18\xf4\x4e\xd0\x05\xee\x66\xa2\x43\xb9\x7c\xee\xa5\x44\x9d\x42\x8e\x4a\x63\xe5\x92\x7e\x34\xe7\x97\x14\x02\x16\x83\x7c\x5e\x3c\x2f\x84\x61\xe8\xc6\x38\x94\x80\x6e\xd2\x99\x98\x85\xf6\x82\x17\xc1\x3b\x1a\x3f\x7a\xc9\x4f\x37\xd3\xa3\x01\xd2\xb0\x37\x7a\x5c\x57\x01\x54\x2a\xbc\xac\xe2\xbb\xc1\x3a\xd0\xfa\x43\x2d\x42\x4e\xdb\x5c\xfd\x3c\xc7\x75\xcf\x4c\x7b\x24\x8b\x69\x05\xd8\x25\x7f\xe0\x48\xb3\xd6\xaa\xd6\x53\x08\xb5\x59\x00\x86\x24\xb7\x65\x37\x2c\xec\x43\x9d\x91\x51\x0b\x45\xcc\xba\xed\xe1\xe8\x77\xec\x20\xd4\x65\x89\xc2\xdf\x53\x68\x98\x46\xcc\x36\x7f\x24\x05\x06\x65\x7d\xd1\x38\x7d\x65\xe9\x88\xe3\x69\xc3\x6b\x2c\xbb\x49\xfc\x77\xab\x8a\xba\x3a\x1d\x8f\xaf\xc1\x5f\x57\x86\xa1\xe0\x8c\x4f\x3c\xb8\xaa\xd8\xa0\xb5\xab\x98\x22\x3a\x17\xc8\x21\xfa\x44\x4c\xc4\x61\xe1\x45\xa1\x5a\x48\x1a\x2b\x6e\x27\xd4\x41\xa2\x69\x38\xd8\x4d\x8a\xd8\xe5\x1c\x3d\xa4\xad\xb6\xdc\x94\x84\xfb\x13\xcc\x5c\x8c\x28\x3b\x56\xa9\xe9\xfe\x04\x2a\x6f\x51\x58\x57\xc3\x6e\xf2\xc9\x0b\xd0\x13\x96\x95\xa5\x53\xe0\x7d\x2d\x3b\x3e\xa1\xa9\x3b\x18\x09\xb2\x59\x35\x9e\xb5\x44\xcb\xf9\xe9\xb0\xc0\x49\x22\x0e\x90\xf6\xdd\x9f\x80\xc1\x90\x40\xad\xc4\x67\x98\xc5\x52\xb3\x88\x85\x4a\xca\x53\x08\x7e\x97\xf1\x20\xd1\xcd\xa4\x2c\xa2\x4b\x39\xdc\x9f\xcc\x5c\xcb\xa0\x37\x57\xc1\xcb\x1e\xd2\x14\x0e\xea\xb9\x3f\xc5\x9b\x7a\xe3\x7c\xbd\x9f\x22\xdd\xc1\xee\xb9\xf7\x8e\x79\xe8\x72\xda\x4d\xbb\x5e\x98\x5d\x0e\x5c\x43\xf3\x7f\xa1\xfe\x4c\xab\x70\xdd\xe4\x92\x3f\xbb\xd9\xef\xd5\xf1\xd9\x62\x73\x25\x9c\x42\xf4\xc6\x66\x41\xbd\xc4\x34\xbd\xb5\x52\x67\xeb\xdf\x1d\x3a\xe9\xda\x78\x87\xff\xfc\x77\xb4\x09\x7d\x34\x86\x2a\xa5\xfc\x6a\xff\xe7\xb0\x93\xc6\xec\xdd\xef\x5d\xe9\x75\xeb\x36\x09\xbf\xfd\x3e\x6a\x18\x53\xfe\xad\xfb\x65\x2b\x2e\xfe\x2f\x00\x00\xff\xff\x20\x01\x89\x9c\x49\x1c\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
