// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4b\x6f\xe3\xc8\x11\xbe\xeb\x57\x14\x9c\x83\x0f\xb1\xe4\x19\x04\x01\x12\xdd\x0c\x7b\x67\x22\xec\x8e\xc7\xb0\x8d\xd9\xc3\x7a\x0f\xc5\x66\x89\xaa\xb8\xd9\xcd\xad\x6e\xca\xd6\x04\xf9\xef\x41\x35\x49\xbd\x4c\xca\xd6\x18\xb9\x6c\x5f\x04\xf6\xe3\xab\x77\x75\x55\x6b\x34\x1e\x8f\x47\x58\xf1\x37\x92\xc0\xde\x4d\x01\x2b\xa6\xe7\x48\x4e\xbf\xc2\xe4\xf1\x1f\x61\xc2\xfe\x7c\xf9\x71\xf4\xc8\x2e\x9f\xc2\x65\x1d\xa2\x2f\x6f\x29\xf8\x5a\x0c\x5d\xd1\x9c\x1d\x47\xf6\x6e\x54\x52\xc4\x1c\x23\x4e\x47\x00\xe8\x9c\x8f\xa8\xd3\x41\x3f\x01\x8c\x77\x51\xbc\xb5\x24\xe3\x82\xdc\xe4\xb1\xce\x28\xab\xd9\xe6\x24\x09\xbc\x23\xbd\xfc\x30\xf9\xfb\xe4\xc3\x08\xc0\x08\xa5\xe3\xf7\x5c\x52\x88\x58\x56\x53\x70\xb5\xb5\x23\x00\x87\x25\x4d\xc1\xd8\x3a\x44\x92\x30\x41\xf1\x13\x5f\x91\x0b\x0b\x9e\xc7\x09\xfb\x51\xa8\xc8\x28\xcd\x42\x7c\x5d\x4d\xe1\xc5\x7a\x83\xd0\xb2\xd5\x8a\xd4\x80\xa5\x19\xcb\x21\xfe\xbc\x3d\xfb\x0b\x87\x98\x56\x2a\x5b\x0b\xda\x0d\xe9\x34\x19\xd8\x15\xb5\x45\x59\x4f\x8f\x00\x82\xf1\x15\x6d\xa3\xb6\xe2\x25\x9a\xe3\x56\x80\xe5\x47\xb4\xd5\x02\x3f\x36\x28\x66\x41\x25\x36\x2c\x01\x28\xbb\x17\x37\xb3\x6f\x7f\xbb\xdb\x99\x06\xc8\x29\x18\xe1\x2a\x26\x55\xb5\xf0\xc0\x01\xe2\x82\xa0\xd9\x0b\x73\x2f\xe9\xb3\x63\x12\x2e\x6e\x66\xeb\xf3\x95\xf8\x8a\x24\x72\x27\x7d\x33\xb6\x4c\xbf\x35\xbb\x47\xed\x54\x19\x6a\x76\x41\xae\x36\xa7\x86\x6c\x2b\x1a\xe5\xad\x0c\xe0\xe7\x10\x17\x1c\x40\xa8\x12\x0a\xe4\x1a\x2f\xd8\x01\x06\xdd\x84\x0e\x7c\xf6\x6f\x32\x71\x02\x77\x24\x0a\x03\x61\xe1\x6b\x9b\xab\xab\x2c\x49\x22\x08\x19\x5f\x38\xfe\xbe\xc6\x0e\x10\x7d\x22\x6a\x31\x52\x6b\x94\xcd\x60\x17\x49\x1c\x5a\x58\xa2\xad\xe9\x0c\xd0\xe5\x50\xe2\x0a\x84\x94\x0a\xd4\x6e\x0b\x2f\x6d\x09\x13\xf8\xe2\x85\x80\xdd\xdc\x4f\x61\x11\x63\x15\xa6\xe7\xe7\x05\xc7\xce\xe5\x8d\x2f\xcb\xda\x71\x5c\x9d\x27\xef\xe5\xac\x8e\x5e\xc2\x79\x4e\x4b\xb2\xe7\x81\x8b\x31\x8a\x59\x70\x24\x13\x6b\xa1\x73\xac\x78\x9c\x58\x77\xc9\xed\x27\x65\xfe\x17\x69\x83\x24\x9c\xee\xf0\x1a\x57\xea\x1e\x21\x0a\xbb\x62\x6b\x21\xf9\xe2\x01\x0b\xa8\x57\xaa\xb5\xb1\x3d\xda\x48\xb1\x51\xb4\x4e\xa9\x76\x6e\x7f\xba\xbb\x87\x8e\x74\x32\xc6\xbe\xf6\x93\xde\x37\x07\xc3\xc6\x04\xaa\x30\x76\x73\x92\xc6\x88\x73\xf1\x65\xc2\x24\x97\x57\x9e\x5d\x6c\x7d\x8b\xc9\xed\xab\x3f\xd4\x59\xc9\x51\xed\xfe\x47\x4d\x21\xaa\xad\x26\x70\x99\xf2\x00\x64\x04\x75\x95\x63\xa4\x7c\x02\x33\x07\x97\x58\x92\xbd\xc4\x40\xff\x77\x03\xa8\xa6\xc3\x58\x15\xfb\x36\x13\x6c\xa7\xb0\xfd\xcd\x8d\xd6\xb6\x16\xba\x44\x33\x60\xaf\x36\x3e\xef\x2a\x32\x3b\x11\x93\x53\x60\x51\x9f\x8e\x18\x49\x23\x61\x3b\xfb\x74\xa3\x3f\x52\x75\xa0\x91\x2b\x5f\x22\xbb\xfd\x85\x41\xa1\xa0\x89\xf1\x99\x8b\xb3\x9b\xe3\x0e\x6d\x69\xb7\x37\x43\x6c\xce\x6b\xf0\x15\x7b\x32\x00\xe0\xf7\x9f\xdc\x92\xc5\xbb\x92\x5c\x3c\x8a\x74\x9b\xbe\xba\x5b\xe6\xb3\xe6\xf2\x59\x7e\x14\x44\x7e\xbc\x96\xe6\x84\x2a\xeb\x0b\x9d\xef\x59\xf6\x53\xbb\x6d\xc7\xb4\x17\xb7\x5f\x35\x71\x0b\x46\x2f\x1d\x10\x14\x9a\xa8\x5e\x80\x0d\x1b\x57\xc7\x2d\x19\xef\x0c\x5b\xba\xab\x33\x47\xb1\x77\x4f\x27\x45\xe6\xbd\x25\xdc\xcf\xae\x3a\xa4\x43\xb9\xb0\x24\xf1\x57\xca\x16\xde\x3f\xbe\x13\xea\xea\xfa\xee\x0b\x86\x3f\xde\x89\xf2\x99\x1c\x2d\xf1\x17\x5f\x14\xec\x8a\x77\x62\x7d\xf1\x8e\xa3\x57\x4b\x5e\x7a\x37\xe7\xf7\xc2\x5d\xfb\x9c\xae\x04\xd9\x91\xbc\x13\xe9\xa6\xb6\xf6\x8e\x8c\x50\x8f\xdb\x1f\x05\x74\xeb\xeb\x48\x9f\xf8\xf9\x9d\x30\xbf\x7a\x79\x44\xf1\xb5\xcb\xc3\xe5\xba\x12\xfb\x11\xcc\x81\x5c\xa8\xa3\x38\x6c\xd8\xc3\x5e\x6f\x92\xfd\x06\xb3\x4c\x02\xc0\xa8\x37\xfc\x14\x4e\x7f\xfb\x30\xfe\xe7\xef\x7f\x9d\x34\x3f\xa7\x07\xa4\xe8\x8d\x72\x1d\xe5\xda\x71\x3e\x5f\xde\x5d\x18\xe3\xeb\xbe\x04\xa5\x83\x5c\x5d\xf6\xaf\x8c\x35\xe6\xbb\x22\xd1\x17\x61\x76\x7d\xff\xa6\x7d\x37\xb7\x5f\xaf\xde\xb4\xf1\xdd\x82\x1d\xcc\xbe\xaf\x09\x77\xc5\x58\x38\x1f\x22\x9b\x70\x23\x3e\x1f\xd8\x75\xff\xb2\x10\xeb\x96\x2e\xf1\x13\xb2\xcc\xf1\xf9\xdd\x72\x5c\x6b\xc1\x5e\xa1\xa1\x3f\x81\x89\x0e\x04\x10\xbb\xb9\xe0\x91\xb7\x1c\xbb\x42\x28\x84\x23\x6f\xf6\xa6\x56\xa6\x78\xb9\x20\xf3\xd8\x97\x08\x0e\x07\x6b\x2d\x76\xe0\x5a\xe2\x48\xe5\xc0\xd2\xab\x26\xef\x36\xa0\x08\xae\x8e\xd1\x9b\xf5\x26\x35\x19\x47\xa9\xa0\x2b\x90\xfb\xf4\xbd\x73\xdb\x77\x35\xc8\xec\xaa\x6b\xb5\x2e\xbe\xeb\xdd\xbe\x01\x68\x7a\x1e\xda\xea\x00\xdf\xcc\xc5\xd2\x51\x3c\xca\xe2\x43\xb5\x68\xc4\x58\x87\x37\x54\xa3\x69\xdf\x4e\x3d\xea\xb3\xa0\xc5\xff\x0f\x17\xa4\xc6\xbb\x9c\xb7\x3a\xfd\x61\x16\xd6\x1b\xdb\x2e\x86\x62\xa2\xd6\x4d\x03\xbb\x10\xd1\x19\x0a\x93\x17\x40\x83\x7e\xb5\x43\xe1\x64\x83\xb5\x69\x6e\x9a\x4e\x53\x65\x4c\x4e\xb2\xd3\x7b\x9e\xf6\x07\x70\xd2\xc4\x64\x9b\x61\x14\xd2\x53\xeb\x67\x11\x28\xc9\x2c\xd0\x71\x28\x53\x2c\xb9\x9c\x72\x6d\x4e\xb5\xd1\x09\xd4\x9f\x2b\x9f\x16\xe4\xda\x06\x20\x22\xdb\xb0\x66\x64\xc3\x9a\x52\xd1\x7e\x09\xa1\x12\xf6\xc2\xf0\xe8\xfc\x93\x03\x2f\xf0\xa4\x9d\x71\x2f\x6c\xda\x5f\x55\x76\xa5\xf4\xd1\xda\x8d\x16\x13\x01\x28\x78\x49\x0e\xb4\x77\x9c\xc0\x83\xdb\x96\xa9\x69\xb7\x7b\x41\x33\x02\xcc\x5b\x99\xe8\xb9\xb2\x6c\x38\xda\x55\xd3\x99\xaf\xb6\x7c\x01\xe2\x02\xa3\x8a\x2c\x21\xf5\xdb\xc6\x97\x95\x77\xaa\xf5\x5e\x58\x93\xd4\x98\xf9\x3a\x82\x60\x5c\xa4\x2e\x13\x5d\x6a\x19\x59\x9a\xf6\xd5\x07\xda\xc1\x4f\x3a\x4d\x1d\xa9\x0c\xe8\x35\xf5\xa8\x3e\xa1\x6d\xe9\x32\x4c\xe0\xab\x33\xd4\x7a\x7a\x7e\x96\x34\x5f\x12\x3a\x25\x93\x14\xb3\xd6\xc4\x00\xab\x0e\xda\xd6\x55\x0d\x5d\x50\x0e\x28\x19\x47\x41\x61\xbb\x82\x31\xb0\xae\x19\x5f\x52\x80\x0a\x25\x76\x39\xe0\xe2\x66\x96\x9e\x1e\x7a\x41\x17\xd8\x84\x5c\xc0\x92\x20\x43\xf3\xf8\x84\x92\x87\x71\x52\xdd\xdc\x4b\xf3\xa5\x3a\xc4\xc8\x19\x5b\x8e\x49\xe5\x86\xc4\xa9\x31\x7b\x21\xd1\xad\x5a\xe1\xf7\xb8\x98\x9c\xf4\xec\x3f\x9c\xd6\x01\x2c\x86\x78\x2f\xe8\x02\x77\x6f\x6f\x43\xb9\x7c\xee\xa5\xc4\x38\x05\xed\xea\xc7\x91\x4b\xfa\xd1\x9c\x5f\x52\x08\x58\x0c\xd2\x79\xf5\xbc\x10\x86\xa1\x8a\x71\x28\x01\xdd\xa6\x33\x9a\x85\xf6\x82\x17\xc1\x3b\x1a\x3f\x79\xc9\xcf\x36\xaf\x14\x03\xd0\xb0\xf7\xc4\xb5\xbe\x05\x30\x52\xe1\x65\xa5\xdf\x06\xeb\x40\xeb\x85\x5a\x84\x5c\x6c\x73\xf5\xcb\x1c\xd7\x8d\x59\xec\xe1\x4c\xd3\x0a\xb0\x4b\xfe\xc0\x8a\x59\xc7\xaa\x8e\x67\x10\x6a\xb3\x00\x0c\x89\x6f\xcb\x6e\x98\xd9\xc7\x3a\x23\x13\x2d\x14\x9a\x75\xdb\xc3\xea\x77\xec\x20\xd4\x65\x89\xc2\xdf\x53\x68\x98\x86\xcd\x36\x7f\x24\x01\x06\x79\x7d\xd5\x38\x7d\xd7\xd2\x11\xc7\xd3\x86\xb7\x58\x76\x93\xf8\xef\x57\x15\x75\xf7\xb4\x1e\x5f\x2b\x7f\x7d\x33\x0c\x05\xa7\x0e\x3d\xb8\xaa\xd8\xa0\xb5\x2b\x4d\x11\x9d\x0b\xe4\xa0\x3e\xa1\x89\x38\x2c\xbc\x44\xa8\x16\x92\x9e\xaf\xb6\x13\xea\x20\x68\x7a\x84\xea\x1e\x37\xd9\xe5\xac\x1e\xd2\xde\xb6\xdc\x5c\x09\x0f\x27\x98\x39\x8d\x28\x3b\x8e\x52\xd3\xc3\x09\x54\xde\xa2\x70\x5c\x0d\xbb\xc9\x27\x2f\x40\xcf\x58\x56\x96\xce\x80\xf7\xa5\xec\xe8\x84\xe6\xde\x41\x05\x64\xb3\x6a\x3c\x6b\x89\x96\xf3\xb3\x61\x86\x13\x47\x1c\x20\xed\x7b\x38\x01\x83\x21\x29\xb5\x12\x9f\x61\xa6\x57\xcd\x42\x2f\x2a\x29\xcf\x20\xf8\x5d\xc2\x83\xa0\xad\xfc\x9a\x4f\xd1\x5a\xca\xe1\xe1\x64\xe6\x5a\x02\xbd\xb9\x0a\x5e\xf7\x90\xe6\xe2\xa0\x9e\xfa\x49\x2b\xf5\xc6\xf9\x7a\x97\x14\xb7\x67\xe1\x40\x8d\x79\xa8\x38\xed\x9e\x7d\x5e\x79\x23\x1b\x28\x43\xf3\x7f\x61\xfc\x99\x56\xe1\xa6\xc9\x25\x2f\x4f\x0f\xd6\x3e\x6f\xe8\x33\x5e\xb2\xdb\x2b\xe3\x8b\xc9\xa6\x24\x9c\x82\x7a\x63\x33\x11\xbd\x68\x9a\xde\x9a\xa9\xb3\xf5\xfb\x76\xc7\x5d\x1b\xef\xf0\x9f\xff\x8e\x36\xa1\x8f\xc6\x50\x15\x29\xbf\xde\xff\xdb\xe5\xa4\x31\x7b\xf7\xbf\x4a\xfa\xdc\xaa\x26\xe1\xb7\xdf\x47\x0d\x61\xca\xbf\x75\xff\xa0\xe8\xe4\xff\x02\x00\x00\xff\xff\x3d\x49\x99\x78\xb1\x1a\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
