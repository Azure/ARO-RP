// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xcd\x72\xe3\xb8\x11\xbe\xeb\x29\xba\x9c\x83\x0f\xb1\x68\x6b\x27\x33\xb3\xab\x9b\xcb\xb3\x9b\x52\x65\x93\x71\x8d\x5d\x73\x59\xef\xa1\x09\xb6\xa8\x8e\x41\x80\x01\x9a\xf6\x68\x52\x79\xf7\x54\x83\xa4\x44\xc9\xa4\xe5\x4d\x55\x78\x51\xa9\x01\xf4\x7f\x7f\xf8\xc8\xd9\x7c\x3e\x9f\x61\xcd\x5f\x29\x44\xf6\x6e\x09\x58\x33\x7d\x13\x72\xfa\x2f\x66\x8f\x3f\xc6\x8c\xfd\xe5\xd3\x22\x27\xc1\xc5\xec\x91\x5d\xb1\x84\x9b\x26\x8a\xaf\xbe\x50\xf4\x4d\x30\xf4\x89\xd6\xec\x58\xd8\xbb\x59\x45\x82\x05\x0a\x2e\x67\x00\xe8\x9c\x17\x54\x71\xd4\xbf\x00\xc6\x3b\x09\xde\x5a\x0a\xf3\x92\x5c\xf6\xd8\xe4\x94\x37\x6c\x0b\x0a\xc9\x42\x6f\xff\xe9\x2a\x7b\x97\x2d\xe6\x57\xd9\x0f\x57\x3f\x5c\x5d\x7d\x58\x7c\xfc\x61\xb1\xf8\x70\xf5\x7e\xfe\xe1\xfd\xe2\xa7\xab\x77\x7f\xf9\xf8\x71\xf1\xe3\xfb\x19\x80\x09\x94\x94\xdf\x73\x45\x51\xb0\xaa\x97\xe0\x1a\x6b\x67\x00\x0e\x2b\x5a\x82\xb1\x4d\x14\x0a\x31\xc3\xe0\x33\x5f\x93\x8b\x1b\x5e\x4b\xc6\x7e\x16\x6b\x32\xea\x51\x19\x7c\x53\x2f\xe1\xc5\x7a\xab\xa1\x73\xba\x0b\xb8\x55\x96\x24\x96\xa3\xfc\x6d\x28\xfd\x95\xa3\xa4\x95\xda\x36\x01\xed\xde\x74\x12\x46\x76\x65\x63\x31\xec\xc4\x33\x80\x68\x7c\x4d\x43\xad\xb1\xc9\x43\x97\xcd\xce\x6e\x14\x94\x26\x2e\xe1\xdf\xff\x99\x01\x3c\xa1\xe5\x22\x45\xdb\x2e\xaa\xbb\xd7\xb7\xab\xaf\xef\xee\xcc\x86\x2a\x6c\x85\x00\x05\x45\x13\xb8\x4e\xfb\x7a\xe5\xc0\x11\x64\x43\xd0\xee\x84\xb5\x0f\xe9\x6f\xef\x22\x5c\xdf\xae\xba\xd3\x75\xf0\x35\x05\xe1\xde\x03\x7d\x06\x7d\xb1\x93\x1d\xd9\x39\x57\x47\xda\x3d\x50\x68\x27\x50\x6b\xb0\xab\x27\x15\x10\x5b\xd3\x7e\x0d\xb2\xe1\x08\x81\xea\x40\x91\x5c\xdb\x1b\x03\xb5\xa0\x5b\xd0\x81\xcf\xff\x49\x46\x32\xb8\xa3\xa0\x4a\x20\x6e\x7c\x63\x0b\x6d\x9f\x27\x0a\x02\x81\x8c\x2f\x1d\x7f\xdf\x69\x8e\x20\x3e\x99\xb4\x28\xd4\x95\xa2\x7f\xd8\x09\x05\x87\x56\x53\xd8\xd0\x05\xa0\x2b\xa0\xc2\x2d\x04\x52\x1b\xd0\xb8\x81\xb6\xb4\x25\x66\xf0\x77\x1f\x08\xd8\xad\xfd\x12\x36\x22\x75\x5c\x5e\x5e\x96\x2c\xfd\x24\x18\x5f\x55\x8d\x63\xd9\x5e\xa6\x7e\xe6\xbc\x11\x1f\xe2\x65\x41\x4f\x64\x2f\x23\x97\x73\x0c\x66\xc3\x42\x46\x9a\x40\x97\x58\xf3\x3c\x39\xee\xd2\x20\x64\x55\xf1\xa7\x5d\xa1\xcf\x07\x9e\xca\x56\x1b\x22\x4a\x60\x57\xee\xc4\xa9\xf7\x26\xf3\xae\x3d\xa8\xd5\xc5\xee\x58\xeb\xff\x3e\xbd\x2a\xd2\xac\x7c\xf9\xf9\xee\x1e\x7a\xa3\xa9\x04\x87\x39\x4f\xd9\xde\x1f\x8b\xfb\xc4\x6b\xa2\xd8\xad\x29\xb4\x85\x5b\x07\x5f\x25\x8d\xe4\x8a\xda\xb3\x93\xae\x93\x98\xdc\x61\xd2\x63\x93\x57\x2c\x5a\xe9\x7f\x35\x14\x45\xeb\x93\xc1\x4d\xc2\x03\xc8\x09\x9a\xba\x40\xa1\x22\x83\x95\x83\x1b\xac\xc8\xde\x60\xa4\xff\x7b\xda\x35\xc3\x71\xae\x29\x3d\x9d\xf8\x21\x8c\x1d\x6e\x6c\xb3\xb5\x13\xf7\x50\x32\x5a\xa1\x6e\x02\xef\x6a\x32\x07\x93\x51\x50\xe4\xa0\xdd\x2b\x28\xa4\x3d\x3f\x44\x97\xe9\x59\x4c\xf3\x68\xc2\x27\x5f\x21\xbb\x43\xf1\x44\x18\xd0\x4e\xf0\xca\xc9\xea\xf6\xed\x07\xbe\xff\xec\x9e\x38\x78\x57\x91\x93\x37\x9f\x2a\xfe\x98\x57\x6b\x42\xad\x53\x3c\x3e\x70\x90\xbf\x5f\xba\x4d\x07\x09\xbc\xfe\xf2\x59\xe1\x2f\xa0\xf8\xd0\xab\x81\x52\x07\xff\x48\xd5\x54\x0a\xf5\xa9\xd0\x61\x49\x77\x58\xd5\x96\xe2\xe7\x4e\xdb\xcb\x6d\x7d\x00\xb9\xf7\x96\xd0\xbd\x58\xaf\x15\xe2\xa2\x90\x93\xdb\xe0\x2b\x92\x0d\x35\x23\xc6\x5e\xd7\x32\xda\x56\xfa\x94\xe4\xe8\x09\x7f\xf5\x65\xc9\xae\x3c\xd6\xfa\x5a\x70\xc6\xbb\x35\x97\x23\xb0\xbd\x3b\x8c\xa2\xa0\xb8\x84\xf3\xdf\xae\xe6\x3f\xfd\xfe\xe7\xac\xfd\x39\x9f\xf4\x7c\xa4\x80\xfa\x54\xde\xb1\x78\x5d\xfa\xeb\xcd\xdd\x2b\x4d\xa3\x0f\xb9\xa6\x1a\x93\xcf\xe1\x13\x63\xe9\x7c\x14\x36\xf1\x36\xf8\x62\x74\xcf\xfd\x31\xac\x9f\xf4\x6e\x32\xad\xec\xca\x40\x31\xfe\x81\x81\x68\xaf\x10\x92\x9b\x0d\x99\x47\x7a\xd1\x26\xaf\x95\xa2\x09\x76\xb4\x21\x58\xa8\x1a\x5d\x38\x91\xf1\x7e\x19\x43\xc0\xed\x5b\x23\xb6\xde\x0c\xa8\xc3\x1b\x2c\xf5\x77\xc5\xaa\x78\x75\x3c\x7b\xfa\xb7\xfa\xd4\x73\x8c\xeb\xef\x3a\x8c\xfb\xe3\xed\x95\x4f\x03\xe2\xf3\x26\xfb\x4f\x8e\xe4\xa5\xed\x89\xed\xe3\xb0\xdc\x92\xa7\x53\xc0\x9c\x76\x1d\x40\xb3\xcf\xa3\xde\x7d\xff\x13\x36\x1b\xef\x0a\x1e\xd0\xdd\x29\xe3\xbb\x6d\xdd\xe5\x4d\x92\xec\xf4\x62\x60\x17\x05\x9d\xa1\x98\x1d\xa9\x99\xe8\x9a\x03\xed\x67\x7b\x3d\xfb\x1b\xbd\x25\x55\x1a\x59\x6a\x84\x03\x9a\x75\x1e\xdb\x58\x8f\x8d\xe9\x33\x70\x15\x03\xe9\x99\xdd\x8b\x01\x54\x64\x36\xe8\x38\x56\x69\x3e\x5c\x41\x85\xb2\x30\xbd\xdd\x23\x15\xf0\xbc\x21\xa7\x09\x1d\x51\x5a\x90\x20\xdb\xb8\x73\x62\xef\x96\xda\x50\x8a\x80\x50\x07\xf6\x81\xe1\xd1\xf9\x67\x07\x3e\xc0\x73\x22\x80\x69\xad\xae\xed\x71\xe7\xa7\x36\xf0\x80\xd6\xee\x73\x97\xd4\x43\xc9\x4f\xe4\x40\x89\x52\x06\x0f\x6e\x18\x4f\xc7\x29\x73\x02\x2c\x0a\x1a\x43\x1d\xf1\x40\xdf\x6a\xcb\x86\xc5\x6e\x5b\xf2\xb9\x1d\xd4\x1e\x64\x83\xa2\xc1\x86\x98\x48\xa5\xf1\x55\xed\x5d\xca\xb6\x49\xc9\xca\x7d\x33\x86\x59\x01\x65\x93\x08\x15\xba\xc4\x8f\x38\xb4\x3c\xcd\x47\x3a\xd0\x9e\x72\x99\xc8\x97\x52\x85\x44\xbd\xbc\x9e\x1c\x51\x39\xc8\x61\xcc\xe0\xb3\x33\xd4\xf5\x74\x71\x91\x9a\xba\x22\x74\x6a\x24\xa5\x64\xdf\x1f\x06\x1d\xb4\x8c\x6c\x44\xa7\x16\xb7\xa4\x02\x30\xe4\x2c\x01\x03\xdb\x2d\xcc\x81\x75\xb7\xf1\x15\x45\xa8\x31\x48\x3f\xdf\xd7\xb7\xab\x96\x59\x6f\xb0\x1d\xa3\x88\xd5\x98\xd2\x1c\xcd\xe3\x33\x86\x22\xce\xd3\xee\xb5\x0f\xed\x3f\xcd\x1d\x0a\xe7\x6c\x59\x52\xaa\x0d\x05\xd7\x75\xc8\xb6\x0d\x3b\xd9\x1b\x8b\x7d\xe7\x41\x76\xf6\xf2\x7e\x7e\x05\x9a\x01\x2c\x46\xb9\x0f\xe8\x22\xf7\xaf\x91\xe3\x88\xbc\xf6\xa1\x42\x59\x82\x92\xd6\xb9\xf0\x68\x64\x27\x71\xbb\xa2\x18\xb1\x9c\xb0\x70\xe2\x6c\x20\x8c\xe3\x37\xf9\x14\xb4\x7c\x49\x27\x14\x5f\x8e\x86\x13\xc1\x3b\x9a\x3f\xfb\x50\x5c\xec\xa9\xf7\xa8\x62\x38\x7a\x4f\xdb\x61\x39\x0a\x95\x3e\x6c\xf5\xbf\xc1\x26\xd2\x6e\xa1\x09\x81\x9c\x74\xd8\x3b\x06\x27\xfa\xac\x64\xc4\xab\x04\x19\xec\x52\xe5\x59\x35\x36\x52\x37\x72\x01\xb1\x31\x1b\xc0\x98\x7c\xb6\xec\xa6\x1c\x7d\x6c\x72\x32\x62\xa1\x54\x24\xed\x8e\x6a\x7f\xb1\x83\xd8\x54\x15\x06\xfe\x9e\xda\xdf\xb4\x2e\x76\xe8\x90\x9c\x9f\xf0\xf3\x44\x41\x5e\x5e\x2f\x6f\x3e\x9a\x96\x4f\x57\x72\x0f\xe3\xf7\xdb\x9a\xfa\xfb\x55\x0f\xef\xd2\xbd\x9b\xe3\x14\xea\x31\xfb\x1d\xd8\x63\x83\xd6\x6e\x75\xf4\xfb\x82\x17\xa0\x1d\xa0\xc0\x1a\x37\x3e\x08\xd4\x9b\x90\xde\xc0\x86\x10\x99\x8c\x4d\x69\xed\xd0\x93\x5d\xc1\xda\x0f\xdd\x6d\xc9\x09\xf2\xe1\xe1\x0c\x73\xa7\x33\x63\xe7\x12\x1a\x7a\x38\x83\xda\x5b\x0c\x2c\xdb\x0c\x7e\xf1\x63\x00\xa6\x0f\x7d\x4b\x6c\xfc\x02\xf8\x38\xbe\xde\x4a\x6c\x6f\x15\x54\x75\x6c\xb6\x6d\x1f\xa5\x2f\x23\x17\x53\xc1\x27\x6f\x38\xb6\xdf\x4f\x1e\xce\xc0\x60\x4c\xc9\xac\x83\xcf\x31\xb7\xdb\xb4\x43\x7d\xbd\x80\xe8\x0f\xcd\xbe\x1e\x79\xae\x83\x60\x2d\x15\xf0\x70\xb6\x72\x9d\xfa\x11\x04\x82\x53\x1d\xd1\x5e\x01\xf4\x82\xed\x28\xeb\x6d\xdb\x6c\x64\x41\x35\xbe\x10\x4f\xf2\xbf\x69\xd2\xd8\xbf\x47\x4d\xbc\x2b\xbc\x9d\x71\x1d\x89\xf6\x9f\xf2\x16\x68\xeb\x0d\x2e\xf6\xb2\x34\x35\xf3\xee\x13\xdd\x60\x19\xa0\x25\x5e\x4b\xd0\x9e\xe9\xbe\x80\xf9\xa0\x90\xd9\x4a\xf6\x33\x87\xc6\x50\x2d\x54\xfc\xe3\xf8\x23\xdd\xd9\xd9\xc1\x57\xb8\xf4\x77\x40\xca\xe0\xb7\xdf\x67\xad\x56\x2a\xbe\xf6\xde\xa8\xf0\xbf\x01\x00\x00\xff\xff\xf4\xe7\x50\xd5\x02\x15\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
