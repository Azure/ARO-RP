// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x6f\xe3\xc8\x11\xbe\xeb\x57\x14\x9c\x83\x0f\xb1\xe4\x19\x04\x01\x12\xdd\x0c\xcf\x6c\x22\xec\x26\x6b\x8c\x8d\xb9\xac\xf7\x50\x6a\x96\xa8\x8a\x9b\xdd\x4c\x75\x51\x1e\x4d\x90\xff\xbe\xa8\x26\xa9\x97\x49\xd9\x5e\x60\xfb\x22\xb0\x1f\xf5\xae\xaf\xbf\xd6\x64\x3a\x9d\x4e\xb0\xe6\xaf\x24\x89\x63\x98\x03\xd6\x4c\xdf\x94\x82\x7d\xa5\xd9\xd3\xdf\xd2\x8c\xe3\xf5\xe6\xe3\xe4\x89\x43\x31\x87\xdb\x26\x69\xac\xbe\x50\x8a\x8d\x38\xfa\x44\x2b\x0e\xac\x1c\xc3\xa4\x22\xc5\x02\x15\xe7\x13\x00\x0c\x21\x2a\xda\x74\xb2\x4f\x00\x17\x83\x4a\xf4\x9e\x64\x5a\x52\x98\x3d\x35\x4b\x5a\x36\xec\x0b\x92\x2c\xbc\x57\xbd\xf9\x30\xfb\xeb\xec\xc3\x04\xc0\x09\xe5\xe3\x0f\x5c\x51\x52\xac\xea\x39\x84\xc6\xfb\x09\x40\xc0\x8a\xe6\xe0\x7c\x93\x94\x24\xcd\x50\xe2\x2c\xd6\x14\xd2\x9a\x57\x3a\xe3\x38\x49\x35\x39\xd3\x59\x4a\x6c\xea\x39\xbc\x58\x6f\x25\x74\x66\x75\x2e\xb5\xc2\xf2\x8c\xe7\xa4\x3f\x1e\xce\xfe\xc4\x49\xf3\x4a\xed\x1b\x41\xbf\x57\x9d\x27\x13\x87\xb2\xf1\x28\xbb\xe9\x09\x40\x72\xb1\xa6\x43\xa9\x9d\x7b\x59\xe7\xb4\x73\x60\xf3\x11\x7d\xbd\xc6\x8f\xad\x14\xb7\xa6\x0a\x5b\x93\x00\xcc\xdc\x9b\xbb\xc5\xd7\xbf\xdc\x1f\x4d\x03\x14\x94\x9c\x70\xad\x39\x54\x9d\x78\xe0\x04\xba\x26\x68\xf7\xc2\x2a\x4a\xfe\xec\x8d\x84\x9b\xbb\xc5\xee\x7c\x2d\xb1\x26\x51\xee\xbd\x6f\xc7\x41\xea\x0f\x66\x4f\xb4\x5d\x9a\x41\xed\x2e\x28\x2c\xe7\xd4\xaa\xed\x5c\xa3\xa2\xf3\x01\xe2\x0a\x74\xcd\x09\x84\x6a\xa1\x44\xa1\xad\x82\x23\xc1\x60\x9b\x30\x40\x5c\xfe\x87\x9c\xce\xe0\x9e\xc4\xc4\x40\x5a\xc7\xc6\x17\x56\x2a\x1b\x12\x05\x21\x17\xcb\xc0\xdf\x77\xb2\x13\x68\xcc\x4a\x3d\x2a\x75\x49\xd9\x0f\x0e\x4a\x12\xd0\xc3\x06\x7d\x43\x57\x80\xa1\x80\x0a\xb7\x20\x64\x5a\xa0\x09\x07\xf2\xf2\x96\x34\x83\x7f\x45\x21\xe0\xb0\x8a\x73\x58\xab\xd6\x69\x7e\x7d\x5d\xb2\xf6\x25\xef\x62\x55\x35\x81\x75\x7b\x9d\xab\x97\x97\x8d\x46\x49\xd7\x05\x6d\xc8\x5f\x27\x2e\xa7\x28\x6e\xcd\x4a\x4e\x1b\xa1\x6b\xac\x79\x9a\x4d\x0f\xb9\xec\x67\x55\xf1\x27\xe9\x9a\x24\x5d\x1e\xd9\xaa\x5b\x2b\x8f\xa4\xc2\xa1\x3c\x58\xc8\xb5\x78\x26\x03\x56\x95\x96\x6d\xec\x8e\xb6\x5e\xec\x03\x6d\x53\x16\x9d\x2f\x9f\xef\x1f\xa0\x57\x9d\x93\x71\x1a\xfd\x1c\xf7\xfd\xc1\xb4\x4f\x81\x05\x8c\xc3\x8a\xa4\x4d\xe2\x4a\x62\x95\x65\x52\x28\xea\xc8\x41\xbb\xda\x62\x0a\xa7\xe1\x4f\xcd\xb2\x62\xb5\xbc\xff\xb7\xa1\xa4\x96\xab\x19\xdc\x66\x1c\x80\x25\x41\x53\x17\xa8\x54\xcc\x60\x11\xe0\x16\x2b\xf2\xb7\x98\xe8\x0f\x4f\x80\x45\x3a\x4d\x2d\xb0\x6f\x4b\xc1\x21\x84\x9d\x6e\x6e\xa3\x76\xb0\xd0\x03\xcd\x48\xbe\xba\xfe\xbc\xaf\xc9\x1d\x75\x4c\x41\x89\xc5\x6a\x5a\x51\xc9\x3a\xe1\x10\x7d\xfa\x31\xdc\xa9\x36\xd0\xc9\xa7\x58\x21\x87\xd3\x85\x51\xa7\xa0\xed\xf1\x45\xd0\xc5\xdd\xfb\x0e\x7d\xff\x1c\x36\x2c\x31\x54\x14\xf4\x5d\x27\x8b\xf7\x5b\xb8\x22\xb4\x2c\xbe\xf0\xf7\x24\xaa\x3f\x74\xdb\x8e\xc2\x7a\xf3\xe5\x67\x03\x4d\x41\x8d\xd2\x0b\x82\xd2\x40\x62\xc4\x82\x17\xb9\xb4\x61\x07\x9e\x71\xdb\x46\x77\xc0\x0e\x56\xaa\x06\xa6\xcf\x7a\xd5\x2f\xa2\x08\x6e\x87\xf5\xdd\x09\x6f\x50\xe9\x73\xd7\x61\xef\xcc\x51\x49\x81\x36\xf8\x53\x2c\x4b\x0e\xe5\xcb\x93\xe3\x75\x04\xed\xa5\xbc\xe2\x72\x10\xfc\x77\x02\x50\x0d\x56\xe7\x70\xf9\xcb\x87\xe9\xdf\x7f\xfd\xf3\xac\xfd\xb9\x1c\xdc\x7c\x36\x10\x00\x55\x0c\xac\xd1\x16\xff\x71\x7b\x7f\xb6\xb4\x6c\x50\x68\xaa\xe1\x95\x29\x7c\x62\x2c\x43\x4c\xca\x2e\xdd\x49\x2c\x46\x76\x3d\xbc\xbc\x24\xde\x60\xe7\x99\x0a\xe1\x50\x0a\xa5\xf4\xce\x14\xb5\x17\x13\xe9\xed\x9a\xdc\x13\xc9\x7b\x93\xd4\x88\x1f\x9c\x3f\x53\x90\xaf\xfa\x08\x67\x0b\xf3\x6c\x0c\x7c\x74\xf9\x46\x7f\x57\x08\xfa\xdb\x68\x51\xbc\xd2\xde\x3d\xad\x5c\x7c\xea\x79\xcd\xcd\x77\x6b\xe6\xbd\x80\x96\x60\xd0\x01\xdd\x7a\xb3\x15\x9b\x40\x3a\x64\xc1\xe8\x91\x31\xe0\x57\xd4\x26\xbd\x01\xfa\xf3\xbe\x23\xf0\x8f\xcb\x64\x37\xed\xef\x46\x7f\x17\x43\xc1\x07\xb4\x7a\xdc\x84\xdd\xc6\x8e\x32\x90\x66\x6d\xfd\x34\x70\x48\x8a\xc1\x51\x9a\xbd\x1d\xe8\x8e\x34\x5c\xec\x65\xed\x99\x44\x4b\xeb\xcc\xc7\x5c\x24\x47\x44\xef\xf2\x25\x1a\xf7\xd1\xa4\xd9\xa1\xc1\x28\x64\xa7\x76\x6f\x10\xa8\xc8\xad\x31\x70\xaa\x72\x2f\x85\x82\x0a\x63\x82\xc6\x2a\x12\x0d\x37\xff\xf3\x9a\x42\x77\xdb\x2a\xb2\x4f\x3b\x43\xf6\xa6\x99\x16\x23\x27\x08\xb5\x70\x14\x86\xa7\x10\x9f\x03\x44\x81\x67\xa3\xa1\x83\x62\xf3\xfe\xba\xf6\x5b\xd3\x8f\xde\xef\xa3\x98\x15\x40\xc9\x1b\x0a\x60\x44\x6d\x06\x8f\xe1\xd0\xa7\x96\xdb\x0e\x0a\x5d\x12\x60\xd1\xf9\x44\xdf\x6a\xcf\x8e\xd5\x6f\x5b\x1a\xbc\x3d\xa8\x05\xd0\x35\xaa\xb9\x2c\x29\x93\x5b\x17\xab\x3a\x06\x8b\xfa\xa0\x58\x97\xc3\xb8\x8c\x8d\x82\xa0\xae\x33\xa5\xc3\x90\xf9\x19\x4b\xcb\x15\x63\xa2\x23\xf9\x39\xa6\x99\xfe\xc9\x48\x5c\x33\x21\x8c\x59\xda\x41\x2c\xd3\x0c\x7e\x0e\x8e\xba\x4a\x2f\xae\x72\xe4\x2b\xc2\x60\x6a\x72\x60\x76\x91\x18\x31\x35\x40\xc7\x13\x2d\xd1\x25\x15\x80\xb2\x64\x15\x14\xf6\x5b\x98\x02\xdb\x9a\x8b\x15\x25\xa8\x51\xb4\xc7\x80\x9b\xbb\x45\xe6\xf9\x83\x42\xd7\xd8\xb6\x5c\xc2\x8a\x60\x89\xee\xe9\x19\xa5\x48\xd3\x1c\xba\x55\x94\xf6\xcb\x62\x88\xca\x4b\xf6\xac\x39\xe4\x8e\x24\x58\x32\x07\x45\x62\xd8\x76\xce\x9f\x58\x31\xbb\x18\xd8\x7f\x1e\xd6\x01\x3c\x26\x7d\x10\x0c\x89\xfb\x87\xee\x18\x96\xaf\xa2\x54\xa8\x73\x30\x0a\x3d\x55\xae\xe8\xf7\x62\x7e\x45\x29\x61\x39\xaa\xe7\xd5\xf3\x42\x98\xc6\x98\xc2\x18\x00\x7d\xc9\x67\x0c\x85\x4e\x9a\x17\x21\x06\x9a\x3e\x47\x29\xae\xf6\x4f\x82\x11\xd1\x70\xf2\x9e\xdc\xdd\x02\xa8\x54\x46\xd9\xda\xb7\xc3\x26\xd1\x6e\xa1\x11\xa1\xa0\x1d\x56\xbf\xc4\xb8\x7e\x2c\x74\xc0\x32\x83\x15\xe0\x90\xeb\x81\x4d\x66\xa3\x75\xa3\x57\x90\x1a\xb7\x06\x4c\xd9\x6e\xcf\x61\xdc\xd8\xa7\x66\x49\x4e\x3d\x94\x86\xba\xdd\x61\xab\x3b\x0e\x90\x9a\xaa\x42\xe1\xef\xb9\x35\x5c\x6b\x66\x87\x1f\xd9\x81\x51\x5b\x5f\x4d\xce\xd0\xb5\xf4\x8e\xe3\x79\xc3\x5b\x32\xbb\x07\xfe\x87\x6d\x4d\xfd\x3d\x6d\xc7\x77\xc1\xdf\xdd\x0c\x63\xcd\x69\xc3\x0e\x6e\x6b\x76\xe8\xfd\xd6\x20\xa2\x2f\x81\x02\xac\x26\x0c\x88\xd3\x3a\x8a\x42\xbd\x96\xfc\x56\x3c\x04\xd4\x51\xa1\xf9\xc5\xd7\xff\x93\xc0\xa1\x60\xab\x90\xee\xb6\xe5\xf6\x4a\x78\xbc\xc0\x65\xb0\x8e\xf2\x53\x95\x86\x1e\x2f\xa0\x8e\x1e\x85\x75\x3b\x5e\x26\x3f\x44\x01\xfa\x86\x55\xed\xe9\x0a\xf8\xd4\xcb\x5e\x4f\x6a\xef\x1d\x34\x81\xec\xb6\x6d\x65\x6d\xd0\x73\x71\x35\x6e\x70\xb6\x88\x13\xe4\x7d\x8f\x17\xe0\x30\xe5\xa0\xd6\x12\x97\xb8\xb4\xab\x66\x6d\x17\x95\x54\x57\x90\xe2\xb1\xe2\x51\xa1\x9d\xff\x86\xa7\xe8\x3d\x15\xf0\x78\xb1\x08\x9d\x82\x41\xac\x82\xd7\x2b\xa4\xbd\x38\x68\x80\x3f\x19\xd7\x6e\x8b\x6f\x70\xc9\xe4\x8e\xbe\x9a\x06\x39\xe6\x39\x72\xda\xbf\xf3\x46\x5f\x2d\x67\x69\x68\xf1\x4f\xd4\x1f\x69\x9b\xee\x5a\x2c\xf9\xa3\x1f\x79\x83\x3e\xbe\x98\x6c\x29\xe1\x1c\xac\x1a\xdb\x09\x8d\x62\x30\x7d\x30\xd3\x2c\x77\x7f\x26\xf5\xd6\x75\xfd\x0e\xff\xfb\xff\x64\xdf\xfa\xe8\x1c\xd5\x4a\xc5\xbf\x4f\xff\xe3\xbc\xb8\x38\xfa\x13\x33\x7f\x1e\xb0\x49\xf8\xe5\xd7\x49\xab\x98\x8a\xaf\xfd\xdf\x95\x36\xf9\x5b\x00\x00\x00\xff\xff\x53\x2e\x5e\xcb\x1e\x16\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
