// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/staticresources/aro.openshift.io_clusters.yaml
// deploy/staticresources/master/deployment.yaml
// deploy/staticresources/master/rolebinding.yaml
// deploy/staticresources/master/service.yaml
// deploy/staticresources/master/serviceaccount.yaml
// deploy/staticresources/namespace.yaml
// deploy/staticresources/worker/deployment.yaml
// deploy/staticresources/worker/role.yaml
// deploy/staticresources/worker/rolebinding.yaml
// deploy/staticresources/worker/serviceaccount.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aroOpenshiftIo_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4b\x6f\xe3\xc8\x11\xbe\xeb\x57\x14\x9c\x83\x0f\xb1\xe4\x19\x04\x01\x12\xdd\x0c\x7b\x67\x22\xec\x8e\xc7\xb0\x8d\xd9\xc3\x7a\x0f\xc5\x66\x89\xaa\xb8\xd9\xcd\xad\x2e\xca\xd6\x04\xf9\xef\x41\x37\x49\xbd\x4c\xca\xd6\x18\xb9\x6c\x5f\x04\xf6\xe3\xab\x77\x75\x55\x6b\x34\x1e\x8f\x47\x58\xf1\x37\x92\xc0\xde\x4d\x01\x2b\xa6\x67\x25\x17\xbf\xc2\xe4\xf1\x1f\x61\xc2\xfe\x7c\xf9\x71\xf4\xc8\x2e\x9f\xc2\x65\x1d\xd4\x97\xb7\x14\x7c\x2d\x86\xae\x68\xce\x8e\x95\xbd\x1b\x95\xa4\x98\xa3\xe2\x74\x04\x80\xce\x79\xc5\x38\x1d\xe2\x27\x80\xf1\x4e\xc5\x5b\x4b\x32\x2e\xc8\x4d\x1e\xeb\x8c\xb2\x9a\x6d\x4e\x92\xc0\x3b\xd2\xcb\x0f\x93\xbf\x4f\x3e\x8c\x00\x8c\x50\x3a\x7e\xcf\x25\x05\xc5\xb2\x9a\x82\xab\xad\x1d\x01\x38\x2c\x69\x0a\xc6\xd6\x41\x49\xc2\x04\xc5\x4f\x7c\x45\x2e\x2c\x78\xae\x13\xf6\xa3\x50\x91\x89\x34\x0b\xf1\x75\x35\x85\x17\xeb\x0d\x42\xcb\x56\x2b\x52\x03\x96\x66\x2c\x07\xfd\x79\x7b\xf6\x17\x0e\x9a\x56\x2a\x5b\x0b\xda\x0d\xe9\x34\x19\xd8\x15\xb5\x45\x59\x4f\x8f\x00\x82\xf1\x15\x6d\xa3\xb6\xe2\x25\x9a\xe3\x56\x80\xe5\x47\xb4\xd5\x02\x3f\x36\x28\x66\x41\x25\x36\x2c\x01\x44\x76\x2f\x6e\x66\xdf\xfe\x76\xb7\x33\x0d\x90\x53\x30\xc2\x95\x26\x55\xb5\xf0\xc0\x01\x74\x41\xd0\xec\x85\xb9\x97\xf4\xd9\x31\x09\x17\x37\xb3\xf5\xf9\x4a\x7c\x45\xa2\xdc\x49\xdf\x8c\x2d\xd3\x6f\xcd\xee\x51\x3b\x8d\x0c\x35\xbb\x20\x8f\x36\xa7\x86\x6c\x2b\x1a\xe5\xad\x0c\xe0\xe7\xa0\x0b\x0e\x20\x54\x09\x05\x72\x8d\x17\xec\x00\x43\xdc\x84\x0e\x7c\xf6\x6f\x32\x3a\x81\x3b\x92\x08\x03\x61\xe1\x6b\x9b\x47\x57\x59\x92\x28\x08\x19\x5f\x38\xfe\xbe\xc6\x0e\xa0\x3e\x11\xb5\xa8\xd4\x1a\x65\x33\xd8\x29\x89\x43\x0b\x4b\xb4\x35\x9d\x01\xba\x1c\x4a\x5c\x81\x50\xa4\x02\xb5\xdb\xc2\x4b\x5b\xc2\x04\xbe\x78\x21\x60\x37\xf7\x53\x58\xa8\x56\x61\x7a\x7e\x5e\xb0\x76\x2e\x6f\x7c\x59\xd6\x8e\x75\x75\x9e\xbc\x97\xb3\x5a\xbd\x84\xf3\x9c\x96\x64\xcf\x03\x17\x63\x14\xb3\x60\x25\xa3\xb5\xd0\x39\x56\x3c\x4e\xac\xbb\xe4\xf6\x93\x32\xff\x8b\xb4\x41\x12\x4e\x77\x78\xd5\x55\x74\x8f\xa0\xc2\xae\xd8\x5a\x48\xbe\x78\xc0\x02\xd1\x2b\xa3\xb5\xb1\x3d\xda\x48\xb1\x51\x74\x9c\x8a\xda\xb9\xfd\xe9\xee\x1e\x3a\xd2\xc9\x18\xfb\xda\x4f\x7a\xdf\x1c\x0c\x1b\x13\x44\x85\xb1\x9b\x93\x34\x46\x9c\x8b\x2f\x13\x26\xb9\xbc\xf2\xec\xb4\xf5\x2d\x26\xb7\xaf\xfe\x50\x67\x25\x6b\xb4\xfb\x1f\x35\x05\x8d\xb6\x9a\xc0\x65\xca\x03\x90\x11\xd4\x55\x8e\x4a\xf9\x04\x66\x0e\x2e\xb1\x24\x7b\x89\x81\xfe\xef\x06\x88\x9a\x0e\xe3\xa8\xd8\xb7\x99\x60\x3b\x85\xed\x6f\x6e\xb4\xb6\xb5\xd0\x25\x9a\x01\x7b\xb5\xf1\x79\x57\x91\xd9\x89\x98\x9c\x02\x4b\xf4\x69\x45\xa5\x18\x09\xdb\xd9\xa7\x1b\xfd\x91\x1a\x07\x1a\xb9\xf2\x25\xb2\xdb\x5f\x18\x14\x0a\x9a\x18\x9f\x39\x9d\xdd\x1c\x77\x68\x4b\xbb\xbd\x19\x62\x73\x3e\x06\x5f\xb1\x27\x03\x00\x7e\xff\xc9\x2d\x59\xbc\x2b\xc9\xe9\x51\xa4\xdb\xf4\xd5\xdd\x32\x9f\x63\x2e\x9f\xe5\x47\x41\xe4\xc7\x6b\x69\x4e\x18\x65\x7d\xa1\xf3\x3d\xcb\x7e\x6a\xb7\xed\x98\xf6\xe2\xf6\x6b\x4c\xdc\x82\xea\xa5\x03\x82\x22\x26\xaa\x17\x60\xc3\xc6\x8d\x23\xa6\x29\x67\xd8\xd2\x85\x25\xd1\x5f\x29\x5b\x78\xff\xd8\xb7\xb1\x13\x25\xf3\xde\x12\xee\xa7\xd8\x1d\xa8\xab\xeb\xbb\x2f\x18\xfe\x78\x27\xca\x67\x72\xb4\xc4\x5f\x7c\x51\xb0\x2b\xde\x89\xf5\xc5\x3b\x56\x1f\x6d\x70\xe9\xdd\x9c\xdf\x0b\x77\xed\x73\xba\x12\x64\x47\xf2\x4e\xa4\x9b\xda\xda\x3b\x32\x42\x3d\x0e\x7b\x14\xd0\xad\xaf\x95\x3e\xf1\xf3\x3b\x61\xee\xd4\x0b\x16\x74\x61\x8c\xaf\x9d\xf6\x7a\xcc\x31\x68\x75\xe6\xe8\xdd\x28\xbf\x7a\x79\x44\xf1\xb5\xcb\xc3\xe5\xba\xae\xfb\x11\xcc\x81\xcc\x1a\x47\x71\xd8\xd9\x0e\xc7\x90\x49\x3e\x35\x98\xb3\x12\x00\x6a\xac\x17\xa6\x70\xfa\xdb\x87\xf1\x3f\x7f\xff\xeb\xa4\xf9\x39\x3d\x20\x45\x6f\xce\x88\xa3\x5c\x3b\xf3\xe7\xcb\xbb\xd6\x52\xfd\x54\xc9\xd5\x65\xff\xca\x38\x66\x90\xae\xe4\xf4\x45\x98\x5d\xdf\xbf\x69\xdf\xcd\xed\xd7\xab\x37\x6d\x7c\xb7\x60\x07\x73\xf9\x6b\xc2\x5d\x31\x16\xce\x07\x65\x13\x6e\xc4\xe7\x03\xbb\xee\x5f\x96\x75\xdd\xd2\x25\x7e\x42\x96\x39\x3e\xbf\x5b\x8e\xeb\x58\xfe\x57\x68\xe8\x4f\x60\xa2\x03\x01\xc4\x6e\x2e\x78\xe4\x9d\xc9\xae\x10\x0a\xe1\xc8\x3a\xa1\xa9\xbc\x49\x2f\x17\x64\x1e\xfb\x12\xc1\xe1\x60\xad\xc5\x0e\x24\x24\x56\x2a\x07\x96\x5e\x35\x79\xb7\x01\x45\x70\x75\x8c\xde\xac\x37\xa9\x65\x39\x4a\x05\x5d\xb9\xdd\xa7\xef\x9d\xda\xa1\xab\x68\x66\x57\x5d\xe3\x76\xf1\x3d\x56\x0a\x1b\x80\xa6\x83\xa2\xad\x7e\xf2\xcd\x5c\x84\xe6\xae\xb8\xab\xe7\xf3\xbe\x7b\xe7\xc0\xc9\xa5\x23\x3d\xca\x57\x86\x6a\x62\x45\xad\xc3\x1b\xaa\xe2\xb4\x6f\xa7\x2e\xf6\x59\x88\x4d\xc8\x0f\x17\xc6\xc6\xbb\x9c\xb7\x5e\x1c\x86\x59\x58\x6f\x6c\xbb\x29\xd2\x44\xad\x9b\x06\x76\x41\xd1\x19\x0a\x93\x17\x40\x83\x1e\xb9\x43\xe1\x64\x83\xb5\x69\xb2\x9a\x8e\x37\xca\x98\xdc\x6b\xa7\x07\x3e\xed\x0f\xfd\xa4\x89\xc9\x36\xc3\x28\x14\x4f\xad\x9f\x67\xa0\x24\xb3\x40\xc7\xa1\x4c\x51\xe8\x72\xca\x63\x93\x1c\x1b\xae\x40\xfd\x59\xf6\x69\x41\xae\x6d\x44\x14\xd9\x86\x35\x23\x1b\xd6\x22\x95\xd8\xb7\x21\x54\xc2\x5e\x18\x1e\x9d\x7f\x72\xe0\x05\x9e\x62\x87\xde\x0b\x9b\xf6\x57\x95\x5d\x45\xfa\x68\xed\x46\x8b\x89\x00\x14\xbc\x24\x07\xb1\x87\x9d\xc0\x83\xdb\x96\xa9\x69\xfb\x7b\x41\x33\x02\xcc\x5b\x99\xe8\xb9\xb2\x6c\x58\xed\xaa\x79\x21\x58\x6d\xf9\x02\xe8\x02\x35\x8a\x2c\x21\xf5\xfd\xc6\x97\x95\x77\x51\xeb\xbd\xb0\x26\xa9\x31\xf3\xb5\x82\xa0\x2e\x52\xb7\x8b\x2e\xb5\xae\x2c\x4d\x1b\xed\x03\xed\xe0\x27\x9d\xa6\xce\x58\x06\xf4\x9a\x7a\x65\x9f\xd0\xb6\x74\x19\x26\xf0\xd5\x19\x6a\x3d\x3d\x3f\x4b\x9a\x2f\x09\x5d\x24\x93\x14\xb3\xd6\xc4\x00\xab\x0e\xda\x16\x3a\x1a\xba\xa0\x1c\x50\x32\x56\x41\x61\xbb\x82\x31\x70\x5c\x33\xbe\xa4\x00\x15\x8a\x76\xd9\xe3\xe2\x66\x96\x9e\x40\x7a\x41\x17\xd8\x84\x5c\xc0\x92\x20\x43\xf3\xf8\x84\x92\x87\x71\x52\xdd\xdc\x4b\xf3\x15\x75\x88\xca\x19\x5b\xd6\xa4\x72\x43\xe2\xa2\x31\x7b\x21\xd1\xad\x5a\xe1\xf7\xb8\x98\x9c\xf4\xec\x3f\x7c\x21\x00\x58\x0c\x7a\x2f\xe8\x02\x77\x6f\x80\x43\xb7\xc0\xdc\x4b\x89\x3a\x85\x1c\x95\xc6\xca\x25\xfd\xe8\x6d\x51\x52\x08\x58\x0c\xd2\x79\xf5\xbc\x10\x86\xa1\x5a\x73\x28\x01\xdd\xa6\x33\x31\x0b\xed\x05\x2f\x82\x77\x34\x7e\xf2\x92\x9f\x6d\x5e\x4b\x06\xa0\x61\xef\xa9\x6d\x7d\x7f\xa0\x52\xe1\x65\x15\xbf\x0d\xd6\x81\xd6\x0b\xb5\x08\x39\x6d\x73\xf5\xcb\x1c\xd7\x8d\x99\xf6\x70\x16\xd3\x0a\xb0\x4b\xfe\xc0\x11\xb3\xd6\xaa\xd6\x33\x08\xb5\x59\x00\x86\xc4\xb7\x65\x37\xcc\xec\x63\x9d\x91\x51\x0b\x45\xcc\xba\xed\xe1\xe8\x77\xec\x20\xd4\x65\x89\xc2\xdf\x53\x68\x98\x86\xcd\x36\x7f\x24\x01\x06\x79\x7d\xd5\x38\x7d\xd7\xd2\x11\xc7\xd3\x86\xb7\x58\x76\x93\xf8\xef\x57\x15\x75\x37\x7c\x3c\xbe\x56\xfe\xfa\x66\x18\x0a\xce\x38\xe2\xc1\x55\xc5\x06\xad\x5d\xc5\x14\xd1\xb9\x40\x0e\xd1\x27\x62\x22\x0e\x0b\x2f\x0a\xd5\x42\xd2\x33\xda\x76\x42\x1d\x04\x4d\x8f\x61\xdd\x23\x2b\xbb\x9c\xa3\x87\xb4\xb7\x2d\x37\x57\xc2\xc3\x09\x66\x2e\x46\x94\x1d\xab\xd4\xf4\x70\x02\x95\xb7\x28\xac\xab\x61\x37\xf9\xe4\x05\xe8\x19\xcb\xca\xd2\x19\xf0\xbe\x94\x1d\x9d\xd0\xdc\x3b\x18\x01\xd9\xac\x1a\xcf\x5a\xa2\xe5\xfc\x6c\x98\xe1\xc4\x11\x07\x48\xfb\x1e\x4e\xc0\x60\x48\x4a\xad\xc4\x67\x98\xc5\xab\x66\x11\x2f\x2a\x29\xcf\x20\xf8\x5d\xc2\x83\xa0\xad\xfc\x31\x9f\xa2\xb5\x94\xc3\xc3\xc9\xcc\xb5\x04\x7a\x73\x15\xbc\xee\x21\xcd\xc5\x41\x3d\xf5\x53\xac\xf1\x1b\xe7\xeb\x5d\x8a\xb8\x3d\x0b\x07\xaa\xd3\x43\x65\x6d\xf7\xfc\xf4\xca\x5b\xdd\x40\x01\x9b\xff\x0b\xf5\x67\x5a\x85\x9b\x26\x97\xbc\x3c\x3d\x58\xfb\xbc\xa1\x43\x79\xc9\x6e\xaf\x8c\x2f\x26\x9b\x92\x70\x0a\xd1\x1b\x9b\x89\xa6\xc4\xdd\x9e\xa9\xb3\xf5\x3b\x7b\xc7\x5d\x1b\xef\xf0\x9f\xff\x8e\x36\xa1\x8f\xc6\x50\xa5\x94\x5f\xef\xff\xfd\x73\xd2\x98\xbd\xfb\x7f\x27\x7d\x6e\x55\x93\xf0\xdb\xef\xa3\x86\x30\xe5\xdf\xba\x7f\x72\xe2\xe4\xff\x02\x00\x00\xff\xff\x65\x8c\xca\x75\x39\x1b\x00\x00")

func aroOpenshiftIo_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_aroOpenshiftIo_clustersYaml,
		"aro.openshift.io_clusters.yaml",
	)
}

func aroOpenshiftIo_clustersYaml() (*asset, error) {
	bytes, err := aroOpenshiftIo_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aro.openshift.io_clusters.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x88\xde\xdd\xa4\xb7\x42\xb7\x62\x0d\x7a\x19\x82\x62\x59\x77\x67\x64\x26\x16\x22\x8b\x02\x49\x07\x75\xbf\x7e\x10\x92\x28\xce\x0a\x64\x3a\x19\x7c\x8f\xef\x3d\xd2\xc4\x1c\xfe\x90\x68\xe0\xe4\x00\x73\xd6\xc5\xf1\xa9\x39\x84\xd4\x39\x78\xa5\x1c\x79\x1a\x28\x59\x33\x90\x61\x87\x86\xae\x01\x88\xb8\xa5\xa8\xe5\x0b\x4a\x83\x03\x14\x6e\x39\x93\xa0\xb1\xb4\x03\xaa\x91\x34\x00\x09\x07\xba\x87\x69\x46\x4f\x0e\x38\x53\xd2\x3e\xec\xac\xc5\xaf\x51\xa8\x92\x1b\xcd\xe4\x8b\x89\x50\x8e\xc1\xa3\x3a\x78\x6a\x00\x94\x22\x79\x63\x39\xd9\x0f\x68\xbe\xff\x39\xcb\x73\x37\x91\x9a\xa0\xd1\x7e\x3a\x51\x85\x63\x0c\x69\xff\x91\x3b\x34\xba\x74\x0f\xf8\xb9\x19\x65\x4f\x27\xb3\x73\xe5\x23\xe1\x11\x43\xc4\x6d\x24\x07\xcb\x06\xc0\x68\xc8\xb1\x76\xcd\x77\x53\x5e\xbc\xc9\x73\x37\x11\xc0\x65\xca\xf2\x3c\x27\xc3\x90\x48\x6a\x73\x0b\x9e\x87\x01\x53\x77\x55\x6b\x8b\xd4\x55\x5b\xf6\x3a\xc7\xea\xf6\xae\xa5\x99\x59\x79\x61\xc0\x32\xde\xdb\x6a\xbd\xfa\xf5\xf2\x7b\xf5\x5a\x81\xef\xff\xab\x42\x99\xc5\x6e\x6c\x6a\xd2\x77\x16\x73\xf0\xbc\x7c\x5e\x56\xf4\xa2\xd4\x9b\xe5\x5a\x8c\xe1\x48\x89\x54\xdf\x85\xb7\xe4\x66\xdc\xc2\x7a\x23\x9b\x97\x00\x32\x5a\xef\x60\xd1\x13\x46\xeb\xbf\x16\x42\xd8\x4d\xb7\x84\x7f\x6d\x13\x77\xb4\xb9\x39\x8d\x4b\xb5\x15\x8e\xf4\x78\x18\xb7\x24\x89\x8c\xf4\x31\xf0\xe2\xb4\x12\x07\x0f\x0f\x67\xaa\x92\x1c\x83\xa7\x17\xef\x79\x4c\xb6\xbe\x73\xb9\xdf\xd9\xf7\x98\x59\x02\x4b\xb0\xe9\x47\x44\xd5\x93\xac\x4e\x6a\x34\xb4\x3e\x8e\x85\xd7\x7a\x09\x16\x3c\xc6\x73\x83\x71\x2c\x3a\x81\xd3\xec\x06\x0e\x34\xb9\xff\xcc\x52\x47\xbe\xe4\x70\xb0\xfa\x0c\x6a\x5a\x01\xda\xed\xc8\x9b\x83\x35\x6f\x7c\x4f\xdd\x18\xa9\xf9\x1b\x00\x00\xff\xff\x57\x5c\x5d\xa2\xfa\x03\x00\x00")

func masterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterDeploymentYaml,
		"master/deployment.yaml",
	)
}

func masterDeploymentYaml() (*asset, error) {
	bytes, err := masterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x4e\x03\x31\x0c\x40\x77\x7f\x85\x7f\x20\x87\xd8\x50\x36\x60\x60\x2f\x12\xbb\x9b\xb8\xd4\xf4\x62\x47\x8e\xd3\xa1\x5f\x8f\xaa\xa2\x5b\x90\x6e\xb5\xdf\xf3\x33\x75\xf9\x62\x1f\x62\x9a\xd1\x8f\x54\x16\x9a\x71\x36\x97\x1b\x85\x98\x2e\x97\x97\xb1\x88\x3d\x5d\x9f\xe1\x22\x5a\x33\xbe\xaf\x73\x04\xfb\xc1\x56\x7e\x13\xad\xa2\xdf\xd0\x38\xa8\x52\x50\x06\x44\xa5\xc6\x19\xc9\x2d\x59\x67\xa7\x30\x4f\x8d\xee\x02\xb8\xad\x7c\xe0\xd3\x1d\xa2\x2e\x1f\x6e\xb3\xef\x04\x01\xf1\x5f\x6f\x3b\x5f\x1e\xb3\x44\xb5\x89\xc2\x98\xc7\x1f\x2e\x31\x32\xa4\x3f\xe7\x93\xfd\x2a\x85\x5f\x4b\xb1\xa9\xb1\xfb\xd5\x63\x37\x3a\x15\xce\x68\x9d\x75\x9c\xe5\x14\x89\x6e\xd3\x79\x83\xe1\x37\x00\x00\xff\xff\x4f\x98\xa4\x7c\x24\x01\x00\x00")

func masterRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterRolebindingYaml,
		"master/rolebinding.yaml",
	)
}

func masterRolebindingYaml() (*asset, error) {
	bytes, err := masterRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x41\xca\xc2\x40\x0c\x46\xf7\x73\x8a\x5c\x60\xa0\xff\xae\xcc\x29\x7e\x10\xdc\x87\xe9\xa7\x1d\xb4\x93\x90\xc4\x2e\x3c\xbd\xd4\x16\x5d\xb9\x0b\xef\x7b\xbc\xb0\xb6\x33\xcc\x9b\xf4\x42\xeb\x5f\xba\xb5\x3e\x15\x3a\xc1\xd6\x56\x91\x16\x04\x4f\x1c\x5c\x12\x51\xe7\x05\x85\xd8\x24\x8b\xc2\x38\xc4\xf2\xc2\x1e\xb0\x63\x73\xe5\x8a\x42\xa2\xe8\x3e\xb7\x4b\x64\x7e\x3e\x0c\x1f\x39\xb9\xa2\x6e\x1d\xc7\x1d\x35\xc4\xb6\x9b\x88\x55\x7f\x45\x55\x2c\x7c\xb7\xf2\xf1\x7d\x8e\xd0\x37\xd8\xd7\x42\xe3\x30\x0e\x07\x08\xb6\x2b\xe2\xff\x8b\x5f\x01\x00\x00\xff\xff\x10\x70\xf6\x36\xda\x00\x00\x00")

func masterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceYaml,
		"master/service.yaml",
	)
}

func masterServiceYaml() (*asset, error) {
	bytes, err := masterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8e\x02\x31\x0c\x05\xd0\x3e\xa7\xf0\x05\x52\x6c\xeb\x6e\xcf\x80\x44\xff\x95\xf9\x08\x0b\xc5\x8e\x1c\xcf\x14\x9c\x9e\x06\x51\xbf\x87\x65\x77\xe6\xb6\x70\x95\xeb\xaf\xbd\xcc\x0f\x95\x1b\xf3\xb2\xc1\xff\x31\xe2\xf4\x6a\x93\x85\x03\x05\x6d\x22\x8e\x49\x15\x64\xf4\x58\x4c\x54\x64\x9f\xd8\xc5\xfc\xda\x5e\x18\x54\x89\x45\xdf\x4f\x7b\x54\xc7\xfb\x4c\xfe\x72\xfb\x04\x00\x00\xff\xff\xe4\xf5\x04\x25\x70\x00\x00\x00")

func masterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterServiceaccountYaml,
		"master/serviceaccount.yaml",
	)
}

func masterServiceaccountYaml() (*asset, error) {
	bytes, err := masterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x0d\x02\x31\x0c\x05\xd0\x3e\x53\x58\xd7\x07\x44\x9b\x21\x28\xe9\xbf\x2e\x1f\x61\x41\xec\x28\x36\x14\x4c\x8f\xa8\xae\x7f\x98\x7a\xe3\x0a\x75\x6b\xf2\xb9\x94\xa7\x5a\x6f\x72\xc5\x60\x4c\xec\x2c\x83\x89\x8e\x44\x2b\x22\x86\xc1\x26\x3e\x69\xf1\xd0\x7b\x56\x7c\xdf\x8b\xd5\x27\x17\xd2\x57\x11\x81\x99\x27\x52\xdd\xe2\xef\xe5\xb0\x27\xf5\xb3\x79\x67\x0d\xbe\xb8\xa7\xaf\x26\xdb\x56\x7e\x01\x00\x00\xff\xff\xc1\xaf\xa6\x4c\x7c\x00\x00\x00")

func namespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespaceYaml,
		"namespace.yaml",
	)
}

func namespaceYaml() (*asset, error) {
	bytes, err := namespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcb\x6e\xdb\x40\x0c\xbc\xeb\x2b\x88\xdc\x15\x27\xb7\x60\x6f\x41\x63\xe4\x52\x04\x45\xd3\xf4\x4e\xaf\xa6\xd6\xc2\xfb\x02\x49\xbb\x55\xbe\xbe\x10\x64\xcb\x32\x02\x88\x27\x61\x38\x9c\x19\x2e\xc5\x35\xfc\x86\x68\x28\xd9\x11\xd7\xaa\x9b\xd3\x63\x73\x08\xb9\x73\xf4\x82\x1a\xcb\x90\x90\xad\x49\x30\xee\xd8\xd8\x35\x44\x91\x77\x88\x3a\x7e\xd1\x38\xe0\x88\xa5\xb4\xa5\x42\xd8\x8a\xb4\x7f\x8b\x1c\x20\x0d\x51\xe6\x84\xb5\x9e\x56\xf6\x70\x54\x2a\xb2\xf6\xe1\x8f\xb5\xfc\x79\x14\xcc\xe4\x46\x2b\xfc\x68\x22\xa8\x31\x78\x56\x47\x8f\x0d\x91\x22\xc2\x5b\x91\xc9\x3e\xb1\xf9\xfe\xfb\x22\xcf\x6a\x22\x35\x61\xc3\x7e\x98\xa8\x52\x62\x0c\x79\xff\x51\x3b\x36\x5c\xa6\x13\xff\x7b\x3f\xca\x1e\x93\xd9\x19\xf9\xc8\x7c\xe2\x10\x79\x17\xe1\xe8\xa1\x21\x32\xa4\x1a\xe7\xa9\xe5\xdb\x8c\x15\x6f\xf2\xac\x26\x22\xba\x6c\x39\x96\x2f\xd9\x38\x64\xc8\x3c\xdc\x92\x2f\x29\x71\xee\xae\x6a\xed\x28\x75\xd5\x96\xbd\x2e\x7b\xf3\xeb\x5d\xa1\x85\xd9\x58\x21\xf1\xb8\xde\xeb\xf6\x6d\xfb\xf3\xf9\xd7\xf6\x65\x6e\x7c\xbd\xd7\xdc\x8a\xe1\x84\x0c\xd5\x1f\x52\x76\xb8\xda\x11\xf5\x66\xf5\x15\xb6\x84\x88\x2a\x5b\xef\x68\xd3\x83\xa3\xf5\x9f\x1b\x01\x77\xc3\x2d\xa1\x88\x39\x7a\x7a\x78\x7a\x38\xc3\xb9\x74\x78\xbf\x39\xec\x05\x6d\xa5\x44\xdc\x1f\x8e\x3b\x48\x86\x41\xef\x43\xd9\x4c\x0b\x39\xba\xbb\x3b\x53\x15\x72\x0a\x1e\xcf\xde\x97\x63\xb6\xb7\x95\xff\xee\x2b\x7b\x8d\x59\x25\x14\x09\x36\x7c\x8b\xac\x3a\xc9\xea\xa0\x86\xd4\xfa\x78\x54\x83\xb4\x5e\x82\x05\xcf\xb1\xf9\x1f\x00\x00\xff\xff\x4f\x57\x4a\x02\x45\x03\x00\x00")

func workerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerDeploymentYaml,
		"worker/deployment.yaml",
	)
}

func workerDeploymentYaml() (*asset, error) {
	bytes, err := workerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x8e\xb1\x6e\x2c\x31\x08\x45\x7b\xbe\x82\x1f\xb0\x57\xaf\x7b\x72\x9b\x22\x7d\x14\xa5\x67\x3d\x24\x83\xc6\x63\x2c\xc0\xbb\x52\xbe\x3e\x9a\xd9\x6d\x53\xa5\xe2\x0a\x1d\x0e\x17\x52\x4a\x40\x43\x3e\xd8\x5c\xb4\x17\xb4\x2b\xd5\x4c\x33\x56\x35\xf9\xa6\x10\xed\x79\xfb\xef\x59\xf4\x72\xfb\x07\x9b\xf4\xa5\xe0\x4b\x9b\x1e\x6c\x6f\xda\x18\x76\x0e\x5a\x28\xa8\x00\x62\x35\x3e\x0f\xde\x65\x67\x0f\xda\x47\xc1\x3e\x5b\x03\xc4\x4e\x3b\x17\x24\xd3\xa4\x83\x8d\x42\x2d\xdd\xd5\x36\x36\xb0\xd9\xd8\x0b\x24\xa4\x21\xaf\xa6\x73\xf8\x61\x4a\x07\x9b\x75\x70\xf7\x55\x3e\x23\x8b\x02\xa2\xb1\xeb\xb4\xca\x4f\xa2\x3e\x5a\x38\x20\xde\xd8\xae\xcf\xed\x17\xc7\x39\x9b\xf8\x23\xdc\x29\xea\xfa\x17\xff\xc5\x83\x62\xfe\xf2\x66\x9c\xf6\x23\xcd\xb1\x50\x30\xfc\x04\x00\x00\xff\xff\x30\x78\x19\x41\x50\x01\x00\x00")

func workerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRoleYaml,
		"worker/role.yaml",
	)
}

func workerRoleYaml() (*asset, error) {
	bytes, err := workerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x90\x8b\x6e\x85\xb6\xb6\x43\x77\x17\xe8\x4e\xcb\x74\xcd\xda\x26\x05\x8a\x72\x01\x9f\x3e\x08\x12\x64\x09\xe0\xf9\xbf\xf7\x1f\x16\xfe\x21\xab\xac\x92\xc0\x06\xcc\x1d\x36\x9f\xd5\xf8\x40\x67\x95\x6e\x79\xab\x1d\xeb\xcb\xfe\x1a\x16\x96\x31\xc1\xe7\xda\xaa\x93\xf5\xba\xd2\x07\xcb\xc8\xf2\x1b\x36\x72\x1c\xd1\x31\x05\x00\xc1\x8d\x12\xa0\x69\xd4\x42\x86\xae\x16\xff\xd5\x16\xb2\x60\xba\x52\x4f\xd3\x15\xc2\xc2\x5f\xa6\xad\x9c\x04\x03\xc0\x53\xef\xf4\xbe\xb6\xe1\x8f\xb2\xd7\x14\xe2\xdd\xfc\x26\xdb\x39\xd3\x7b\xce\xda\xc4\x4f\xe5\xdb\x56\x0b\x66\x4a\xa0\x85\xa4\xce\x3c\x79\xc4\xa3\x19\x3d\xe0\x70\x09\x00\x00\xff\xff\x73\xce\x57\x9b\x2a\x01\x00\x00")

func workerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerRolebindingYaml,
		"worker/rolebinding.yaml",
	)
}

func workerRolebindingYaml() (*asset, error) {
	bytes, err := workerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/rolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x31\x8a\xc3\x40\x0c\x05\xd0\x7e\x4e\xa1\x0b\x4c\xb1\xad\xba\x3d\x43\x20\xfd\x67\xfc\x43\x84\xb1\x34\x68\x64\x07\x72\xfa\x34\x21\xf5\x7b\x98\x76\x67\x2e\x0b\x57\xb9\xfe\xda\x6e\xbe\xa9\xdc\x98\x97\x0d\xfe\x8f\x11\xa7\x57\x3b\x58\xd8\x50\xd0\x26\xe2\x38\xa8\x82\x8c\x1e\x93\x89\x8a\xec\xaf\xc8\x9d\xf9\xb5\x35\x31\xa8\x12\x93\xbe\x9e\xf6\xa8\x8e\xf7\x99\xfc\xe5\xf6\x09\x00\x00\xff\xff\xe3\x3c\x43\x66\x70\x00\x00\x00")

func workerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerServiceaccountYaml,
		"worker/serviceaccount.yaml",
	)
}

func workerServiceaccountYaml() (*asset, error) {
	bytes, err := workerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/serviceaccount.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aro.openshift.io_clusters.yaml": aroOpenshiftIo_clustersYaml,
	"master/deployment.yaml":         masterDeploymentYaml,
	"master/rolebinding.yaml":        masterRolebindingYaml,
	"master/service.yaml":            masterServiceYaml,
	"master/serviceaccount.yaml":     masterServiceaccountYaml,
	"namespace.yaml":                 namespaceYaml,
	"worker/deployment.yaml":         workerDeploymentYaml,
	"worker/role.yaml":               workerRoleYaml,
	"worker/rolebinding.yaml":        workerRolebindingYaml,
	"worker/serviceaccount.yaml":     workerServiceaccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aro.openshift.io_clusters.yaml": {aroOpenshiftIo_clustersYaml, map[string]*bintree{}},
	"master": {nil, map[string]*bintree{
		"deployment.yaml":     {masterDeploymentYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {masterRolebindingYaml, map[string]*bintree{}},
		"service.yaml":        {masterServiceYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {masterServiceaccountYaml, map[string]*bintree{}},
	}},
	"namespace.yaml": {namespaceYaml, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"deployment.yaml":     {workerDeploymentYaml, map[string]*bintree{}},
		"role.yaml":           {workerRoleYaml, map[string]*bintree{}},
		"rolebinding.yaml":    {workerRolebindingYaml, map[string]*bintree{}},
		"serviceaccount.yaml": {workerServiceaccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
