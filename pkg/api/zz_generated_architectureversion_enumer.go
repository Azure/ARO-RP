// Code generated by "enumer -type ArchitectureVersion -output zz_generated_architectureversion_enumer.go"; DO NOT EDIT.

//
package api

import (
	"fmt"
)

const _ArchitectureVersionName = "ArchitectureVersionV1ArchitectureVersionV2"

var _ArchitectureVersionIndex = [...]uint8{0, 21, 42}

func (i ArchitectureVersion) String() string {
	if i < 0 || i >= ArchitectureVersion(len(_ArchitectureVersionIndex)-1) {
		return fmt.Sprintf("ArchitectureVersion(%d)", i)
	}
	return _ArchitectureVersionName[_ArchitectureVersionIndex[i]:_ArchitectureVersionIndex[i+1]]
}

var _ArchitectureVersionValues = []ArchitectureVersion{0, 1}

var _ArchitectureVersionNameToValueMap = map[string]ArchitectureVersion{
	_ArchitectureVersionName[0:21]:  0,
	_ArchitectureVersionName[21:42]: 1,
}

// ArchitectureVersionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ArchitectureVersionString(s string) (ArchitectureVersion, error) {
	if val, ok := _ArchitectureVersionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ArchitectureVersion values", s)
}

// ArchitectureVersionValues returns all values of the enum
func ArchitectureVersionValues() []ArchitectureVersion {
	return _ArchitectureVersionValues
}

// IsAArchitectureVersion returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ArchitectureVersion) IsAArchitectureVersion() bool {
	for _, v := range _ArchitectureVersionValues {
		if i == v {
			return true
		}
	}
	return false
}
