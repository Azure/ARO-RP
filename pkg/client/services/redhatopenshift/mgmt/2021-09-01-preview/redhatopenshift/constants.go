//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.
// DO NOT EDIT.

package redhatopenshift

const host = "https://management.azure.com"

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// EncryptionAtHost - EncryptionAtHost represents encryption at host state
type EncryptionAtHost string

const (
	EncryptionAtHostDisabled EncryptionAtHost = "Disabled"
	EncryptionAtHostEnabled  EncryptionAtHost = "Enabled"
)

// PossibleEncryptionAtHostValues returns the possible values for the EncryptionAtHost const type.
func PossibleEncryptionAtHostValues() []EncryptionAtHost {
	return []EncryptionAtHost{
		EncryptionAtHostDisabled,
		EncryptionAtHostEnabled,
	}
}

// ProvisioningState - ProvisioningState represents a provisioning state.
type ProvisioningState string

const (
	ProvisioningStateAdminUpdating ProvisioningState = "AdminUpdating"
	ProvisioningStateCreating      ProvisioningState = "Creating"
	ProvisioningStateDeleting      ProvisioningState = "Deleting"
	ProvisioningStateFailed        ProvisioningState = "Failed"
	ProvisioningStateSucceeded     ProvisioningState = "Succeeded"
	ProvisioningStateUpdating      ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateAdminUpdating,
		ProvisioningStateCreating,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

// SoftwareDefinedNetwork - SoftwareDefinedNetwork constants.
type SoftwareDefinedNetwork string

const (
	SoftwareDefinedNetworkOVNKubernetes SoftwareDefinedNetwork = "OVNKubernetes"
	SoftwareDefinedNetworkOpenShiftSDN  SoftwareDefinedNetwork = "OpenShiftSDN"
)

// PossibleSoftwareDefinedNetworkValues returns the possible values for the SoftwareDefinedNetwork const type.
func PossibleSoftwareDefinedNetworkValues() []SoftwareDefinedNetwork {
	return []SoftwareDefinedNetwork{
		SoftwareDefinedNetworkOVNKubernetes,
		SoftwareDefinedNetworkOpenShiftSDN,
	}
}

// VMSize - VMSize represents a VM size.
type VMSize string

const (
	VMSizeStandardD16AsV4 VMSize = "Standard_D16as_v4"
	VMSizeStandardD16SV3  VMSize = "Standard_D16s_v3"
	VMSizeStandardD2SV3   VMSize = "Standard_D2s_v3"
	VMSizeStandardD32AsV4 VMSize = "Standard_D32as_v4"
	VMSizeStandardD32SV3  VMSize = "Standard_D32s_v3"
	VMSizeStandardD4AsV4  VMSize = "Standard_D4as_v4"
	VMSizeStandardD4SV3   VMSize = "Standard_D4s_v3"
	VMSizeStandardD8AsV4  VMSize = "Standard_D8as_v4"
	VMSizeStandardD8SV3   VMSize = "Standard_D8s_v3"
	VMSizeStandardE16SV3  VMSize = "Standard_E16s_v3"
	VMSizeStandardE32SV3  VMSize = "Standard_E32s_v3"
	VMSizeStandardE4SV3   VMSize = "Standard_E4s_v3"
	VMSizeStandardE64IV3  VMSize = "Standard_E64i_v3"
	VMSizeStandardE64IsV3 VMSize = "Standard_E64is_v3"
	VMSizeStandardE8SV3   VMSize = "Standard_E8s_v3"
	VMSizeStandardF16SV2  VMSize = "Standard_F16s_v2"
	VMSizeStandardF32SV2  VMSize = "Standard_F32s_v2"
	VMSizeStandardF4SV2   VMSize = "Standard_F4s_v2"
	VMSizeStandardF72SV2  VMSize = "Standard_F72s_v2"
	VMSizeStandardF8SV2   VMSize = "Standard_F8s_v2"
	VMSizeStandardG5      VMSize = "Standard_G5"
	VMSizeStandardGS5     VMSize = "Standard_GS5"
	VMSizeStandardM128Ms  VMSize = "Standard_M128ms"
)

// PossibleVMSizeValues returns the possible values for the VMSize const type.
func PossibleVMSizeValues() []VMSize {
	return []VMSize{
		VMSizeStandardD16AsV4,
		VMSizeStandardD16SV3,
		VMSizeStandardD2SV3,
		VMSizeStandardD32AsV4,
		VMSizeStandardD32SV3,
		VMSizeStandardD4AsV4,
		VMSizeStandardD4SV3,
		VMSizeStandardD8AsV4,
		VMSizeStandardD8SV3,
		VMSizeStandardE16SV3,
		VMSizeStandardE32SV3,
		VMSizeStandardE4SV3,
		VMSizeStandardE64IV3,
		VMSizeStandardE64IsV3,
		VMSizeStandardE8SV3,
		VMSizeStandardF16SV2,
		VMSizeStandardF32SV2,
		VMSizeStandardF4SV2,
		VMSizeStandardF72SV2,
		VMSizeStandardF8SV2,
		VMSizeStandardG5,
		VMSizeStandardGS5,
		VMSizeStandardM128Ms,
	}
}

// Visibility - Visibility represents visibility.
type Visibility string

const (
	VisibilityPrivate Visibility = "Private"
	VisibilityPublic  Visibility = "Public"
)

// PossibleVisibilityValues returns the possible values for the Visibility const type.
func PossibleVisibilityValues() []Visibility {
	return []Visibility{
		VisibilityPrivate,
		VisibilityPublic,
	}
}
