// Code generated by "enumer -type Feature -output zz_generated_feature_enumer.go"; DO NOT EDIT.

package env

import (
	"fmt"
	"strings"
)

const _FeatureName = "FeatureDisableDenyAssignmentsFeatureDisableSignedCertificatesFeatureEnableDevelopmentAuthorizerFeatureRequireD2sWorkersFeatureDisableReadinessDelayFeatureEnableOCMEndpointsFeatureRequireOIDCStorageWebEndpointFeatureUseMockMsiRpFeatureEnableMISEFeatureEnforceMISE"

var _FeatureIndex = [...]uint16{0, 29, 61, 95, 119, 147, 172, 208, 227, 244, 262}

const _FeatureLowerName = "featuredisabledenyassignmentsfeaturedisablesignedcertificatesfeatureenabledevelopmentauthorizerfeaturerequired2sworkersfeaturedisablereadinessdelayfeatureenableocmendpointsfeaturerequireoidcstoragewebendpointfeatureusemockmsirpfeatureenablemisefeatureenforcemise"

func (i Feature) String() string {
	if i < 0 || i >= Feature(len(_FeatureIndex)-1) {
		return fmt.Sprintf("Feature(%d)", i)
	}
	return _FeatureName[_FeatureIndex[i]:_FeatureIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FeatureNoOp() {
	var x [1]struct{}
	_ = x[FeatureDisableDenyAssignments-(0)]
	_ = x[FeatureDisableSignedCertificates-(1)]
	_ = x[FeatureEnableDevelopmentAuthorizer-(2)]
	_ = x[FeatureRequireD2sWorkers-(3)]
	_ = x[FeatureDisableReadinessDelay-(4)]
	_ = x[FeatureEnableOCMEndpoints-(5)]
	_ = x[FeatureRequireOIDCStorageWebEndpoint-(6)]
	_ = x[FeatureUseMockMsiRp-(7)]
	_ = x[FeatureEnableMISE-(8)]
	_ = x[FeatureEnforceMISE-(9)]
}

var _FeatureValues = []Feature{FeatureDisableDenyAssignments, FeatureDisableSignedCertificates, FeatureEnableDevelopmentAuthorizer, FeatureRequireD2sWorkers, FeatureDisableReadinessDelay, FeatureEnableOCMEndpoints, FeatureRequireOIDCStorageWebEndpoint, FeatureUseMockMsiRp, FeatureEnableMISE, FeatureEnforceMISE}

var _FeatureNameToValueMap = map[string]Feature{
	_FeatureName[0:29]:         FeatureDisableDenyAssignments,
	_FeatureLowerName[0:29]:    FeatureDisableDenyAssignments,
	_FeatureName[29:61]:        FeatureDisableSignedCertificates,
	_FeatureLowerName[29:61]:   FeatureDisableSignedCertificates,
	_FeatureName[61:95]:        FeatureEnableDevelopmentAuthorizer,
	_FeatureLowerName[61:95]:   FeatureEnableDevelopmentAuthorizer,
	_FeatureName[95:119]:       FeatureRequireD2sWorkers,
	_FeatureLowerName[95:119]:  FeatureRequireD2sWorkers,
	_FeatureName[119:147]:      FeatureDisableReadinessDelay,
	_FeatureLowerName[119:147]: FeatureDisableReadinessDelay,
	_FeatureName[147:172]:      FeatureEnableOCMEndpoints,
	_FeatureLowerName[147:172]: FeatureEnableOCMEndpoints,
	_FeatureName[172:208]:      FeatureRequireOIDCStorageWebEndpoint,
	_FeatureLowerName[172:208]: FeatureRequireOIDCStorageWebEndpoint,
	_FeatureName[208:227]:      FeatureUseMockMsiRp,
	_FeatureLowerName[208:227]: FeatureUseMockMsiRp,
	_FeatureName[227:244]:      FeatureEnableMISE,
	_FeatureLowerName[227:244]: FeatureEnableMISE,
	_FeatureName[244:262]:      FeatureEnforceMISE,
	_FeatureLowerName[244:262]: FeatureEnforceMISE,
}

var _FeatureNames = []string{
	_FeatureName[0:29],
	_FeatureName[29:61],
	_FeatureName[61:95],
	_FeatureName[95:119],
	_FeatureName[119:147],
	_FeatureName[147:172],
	_FeatureName[172:208],
	_FeatureName[208:227],
	_FeatureName[227:244],
	_FeatureName[244:262],
}

// FeatureString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FeatureString(s string) (Feature, error) {
	if val, ok := _FeatureNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FeatureNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Feature values", s)
}

// FeatureValues returns all values of the enum
func FeatureValues() []Feature {
	return _FeatureValues
}

// FeatureStrings returns a slice of all String values of the enum
func FeatureStrings() []string {
	strs := make([]string, len(_FeatureNames))
	copy(strs, _FeatureNames)
	return strs
}

// IsAFeature returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Feature) IsAFeature() bool {
	for _, v := range _FeatureValues {
		if i == v {
			return true
		}
	}
	return false
}
