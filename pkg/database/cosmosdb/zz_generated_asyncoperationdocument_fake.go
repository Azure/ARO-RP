// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakeAsyncOperationDocumentTriggerHandler func(context.Context, *pkg.AsyncOperationDocument) error
type fakeAsyncOperationDocumentQueryHandler func(AsyncOperationDocumentClient, *Query, *Options) AsyncOperationDocumentRawIterator

var _ AsyncOperationDocumentClient = &FakeAsyncOperationDocumentClient{}

// NewFakeAsyncOperationDocumentClient returns a FakeAsyncOperationDocumentClient
func NewFakeAsyncOperationDocumentClient(h *codec.JsonHandle) *FakeAsyncOperationDocumentClient {
	return &FakeAsyncOperationDocumentClient{
		jsonHandle:              h,
		asyncOperationDocuments: make(map[string]*pkg.AsyncOperationDocument),
		triggerHandlers:         make(map[string]fakeAsyncOperationDocumentTriggerHandler),
		queryHandlers:           make(map[string]fakeAsyncOperationDocumentQueryHandler),
	}
}

// FakeAsyncOperationDocumentClient is a FakeAsyncOperationDocumentClient
type FakeAsyncOperationDocumentClient struct {
	lock                    sync.RWMutex
	jsonHandle              *codec.JsonHandle
	asyncOperationDocuments map[string]*pkg.AsyncOperationDocument
	triggerHandlers         map[string]fakeAsyncOperationDocumentTriggerHandler
	queryHandlers           map[string]fakeAsyncOperationDocumentQueryHandler
	sorter                  func([]*pkg.AsyncOperationDocument)
	etag                    int

	// returns true if documents conflict
	conflictChecker func(*pkg.AsyncOperationDocument, *pkg.AsyncOperationDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

// SetError sets or unsets an error that will be returned on any
// FakeAsyncOperationDocumentClient method invocation
func (c *FakeAsyncOperationDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakeAsyncOperationDocumentClient) SetSorter(sorter func([]*pkg.AsyncOperationDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a AsyncOperationDocument
func (c *FakeAsyncOperationDocumentClient) SetConflictChecker(conflictChecker func(*pkg.AsyncOperationDocument, *pkg.AsyncOperationDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakeAsyncOperationDocumentClient) SetTriggerHandler(triggerName string, trigger fakeAsyncOperationDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakeAsyncOperationDocumentClient) SetQueryHandler(queryName string, query fakeAsyncOperationDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakeAsyncOperationDocumentClient) deepCopy(asyncOperationDocument *pkg.AsyncOperationDocument) (*pkg.AsyncOperationDocument, error) {
	var b []byte
	err := codec.NewEncoderBytes(&b, c.jsonHandle).Encode(asyncOperationDocument)
	if err != nil {
		return nil, err
	}

	asyncOperationDocument = nil
	err = codec.NewDecoderBytes(b, c.jsonHandle).Decode(&asyncOperationDocument)
	if err != nil {
		return nil, err
	}

	return asyncOperationDocument, nil
}

func (c *FakeAsyncOperationDocumentClient) apply(ctx context.Context, partitionkey string, asyncOperationDocument *pkg.AsyncOperationDocument, options *Options, isCreate bool) (*pkg.AsyncOperationDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	asyncOperationDocument, err := c.deepCopy(asyncOperationDocument) // copy now because pretriggers can mutate asyncOperationDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, asyncOperationDocument, options)
		if err != nil {
			return nil, err
		}
	}

	existingAsyncOperationDocument, exists := c.asyncOperationDocuments[asyncOperationDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate {
		if !exists {
			return nil, &Error{StatusCode: http.StatusNotFound}
		}

		if asyncOperationDocument.ETag != existingAsyncOperationDocument.ETag {
			return nil, &Error{StatusCode: http.StatusPreconditionFailed}
		}
	}

	if c.conflictChecker != nil {
		for _, asyncOperationDocumentToCheck := range c.asyncOperationDocuments {
			if c.conflictChecker(asyncOperationDocumentToCheck, asyncOperationDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	asyncOperationDocument.ETag = fmt.Sprint(c.etag)
	c.etag++

	c.asyncOperationDocuments[asyncOperationDocument.ID] = asyncOperationDocument

	return c.deepCopy(asyncOperationDocument)
}

// Create creates a AsyncOperationDocument in the database
func (c *FakeAsyncOperationDocumentClient) Create(ctx context.Context, partitionkey string, asyncOperationDocument *pkg.AsyncOperationDocument, options *Options) (*pkg.AsyncOperationDocument, error) {
	return c.apply(ctx, partitionkey, asyncOperationDocument, options, true)
}

// Replace replaces a AsyncOperationDocument in the database
func (c *FakeAsyncOperationDocumentClient) Replace(ctx context.Context, partitionkey string, asyncOperationDocument *pkg.AsyncOperationDocument, options *Options) (*pkg.AsyncOperationDocument, error) {
	return c.apply(ctx, partitionkey, asyncOperationDocument, options, false)
}

// List returns a AsyncOperationDocumentIterator to list all AsyncOperationDocuments in the database
func (c *FakeAsyncOperationDocumentClient) List(*Options) AsyncOperationDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeAsyncOperationDocumentErroringRawIterator(c.err)
	}

	asyncOperationDocuments := make([]*pkg.AsyncOperationDocument, 0, len(c.asyncOperationDocuments))
	for _, asyncOperationDocument := range c.asyncOperationDocuments {
		asyncOperationDocument, err := c.deepCopy(asyncOperationDocument)
		if err != nil {
			return NewFakeAsyncOperationDocumentErroringRawIterator(err)
		}
		asyncOperationDocuments = append(asyncOperationDocuments, asyncOperationDocument)
	}

	if c.sorter != nil {
		c.sorter(asyncOperationDocuments)
	}

	return NewFakeAsyncOperationDocumentIterator(asyncOperationDocuments, 0)
}

// ListAll lists all AsyncOperationDocuments in the database
func (c *FakeAsyncOperationDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.AsyncOperationDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a AsyncOperationDocument from the database
func (c *FakeAsyncOperationDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.AsyncOperationDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	asyncOperationDocument, exists := c.asyncOperationDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.deepCopy(asyncOperationDocument)
}

// Delete deletes a AsyncOperationDocument from the database
func (c *FakeAsyncOperationDocumentClient) Delete(ctx context.Context, partitionKey string, asyncOperationDocument *pkg.AsyncOperationDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.asyncOperationDocuments[asyncOperationDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.asyncOperationDocuments, asyncOperationDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakeAsyncOperationDocumentClient) ChangeFeed(*Options) AsyncOperationDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeAsyncOperationDocumentErroringRawIterator(c.err)
	}

	return NewFakeAsyncOperationDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakeAsyncOperationDocumentClient) processPreTriggers(ctx context.Context, asyncOperationDocument *pkg.AsyncOperationDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			c.lock.Unlock()
			err := triggerHandler(ctx, asyncOperationDocument)
			c.lock.Lock()
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakeAsyncOperationDocumentClient) Query(name string, query *Query, options *Options) AsyncOperationDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeAsyncOperationDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		c.lock.RUnlock()
		i := queryHandler(c, query, options)
		c.lock.RLock()
		return i
	}

	return NewFakeAsyncOperationDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakeAsyncOperationDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.AsyncOperationDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakeAsyncOperationDocumentIterator(asyncOperationDocuments []*pkg.AsyncOperationDocument, continuation int) AsyncOperationDocumentRawIterator {
	return &fakeAsyncOperationDocumentIterator{asyncOperationDocuments: asyncOperationDocuments, continuation: continuation}
}

type fakeAsyncOperationDocumentIterator struct {
	asyncOperationDocuments []*pkg.AsyncOperationDocument
	continuation            int
	done                    bool
}

func (i *fakeAsyncOperationDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakeAsyncOperationDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.AsyncOperationDocuments, error) {
	if i.done {
		return nil, nil
	}

	var asyncOperationDocuments []*pkg.AsyncOperationDocument
	if maxItemCount == -1 {
		asyncOperationDocuments = i.asyncOperationDocuments[i.continuation:]
		i.continuation = len(i.asyncOperationDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.asyncOperationDocuments) {
			max = len(i.asyncOperationDocuments)
		}
		asyncOperationDocuments = i.asyncOperationDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.AsyncOperationDocuments{
		AsyncOperationDocuments: asyncOperationDocuments,
		Count:                   len(asyncOperationDocuments),
	}, nil
}

func (i *fakeAsyncOperationDocumentIterator) Continuation() string {
	if i.continuation >= len(i.asyncOperationDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakeAsyncOperationDocumentErroringRawIterator returns a AsyncOperationDocumentRawIterator which
// whose methods return the given error
func NewFakeAsyncOperationDocumentErroringRawIterator(err error) AsyncOperationDocumentRawIterator {
	return &fakeAsyncOperationDocumentErroringRawIterator{err: err}
}

type fakeAsyncOperationDocumentErroringRawIterator struct {
	err error
}

func (i *fakeAsyncOperationDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.AsyncOperationDocuments, error) {
	return nil, i.err
}

func (i *fakeAsyncOperationDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeAsyncOperationDocumentErroringRawIterator) Continuation() string {
	return ""
}
