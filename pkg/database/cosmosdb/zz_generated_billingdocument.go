// Code generated by github.com/jim-minter/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"net/http"
	"strings"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type billingDocumentClient struct {
	*databaseClient
	path string
}

// BillingDocumentClient is a billingDocument client
type BillingDocumentClient interface {
	Create(context.Context, string, *pkg.BillingDocument, *Options) (*pkg.BillingDocument, error)
	List(*Options) BillingDocumentRawIterator
	ListAll(context.Context, *Options) (*pkg.BillingDocuments, error)
	Get(context.Context, string, string, *Options) (*pkg.BillingDocument, error)
	Replace(context.Context, string, *pkg.BillingDocument, *Options) (*pkg.BillingDocument, error)
	Delete(context.Context, string, *pkg.BillingDocument, *Options) error
	Query(string, *Query, *Options) BillingDocumentRawIterator
	QueryAll(context.Context, string, *Query, *Options) (*pkg.BillingDocuments, error)
	ChangeFeed(*Options) BillingDocumentIterator
}

type billingDocumentChangeFeedIterator struct {
	*billingDocumentClient
	continuation string
	options      *Options
}

type billingDocumentListIterator struct {
	*billingDocumentClient
	continuation string
	done         bool
	options      *Options
}

type billingDocumentQueryIterator struct {
	*billingDocumentClient
	partitionkey string
	query        *Query
	continuation string
	done         bool
	options      *Options
}

// BillingDocumentIterator is a billingDocument iterator
type BillingDocumentIterator interface {
	Next(context.Context) (*pkg.BillingDocuments, error)
}

// BillingDocumentRawIterator is a billingDocument raw iterator
type BillingDocumentRawIterator interface {
	BillingDocumentIterator
	NextRaw(context.Context, interface{}) error
}

// NewBillingDocumentClient returns a new billingDocument client
func NewBillingDocumentClient(collc CollectionClient, collid string) BillingDocumentClient {
	return &billingDocumentClient{
		databaseClient: collc.(*collectionClient).databaseClient,
		path:           collc.(*collectionClient).path + "/colls/" + collid,
	}
}

func (c *billingDocumentClient) all(ctx context.Context, i BillingDocumentIterator) (*pkg.BillingDocuments, error) {
	allbillingDocuments := &pkg.BillingDocuments{}

	for {
		billingDocuments, err := i.Next(ctx)
		if err != nil {
			return nil, err
		}
		if billingDocuments == nil {
			break
		}

		allbillingDocuments.Count += billingDocuments.Count
		allbillingDocuments.ResourceID = billingDocuments.ResourceID
		allbillingDocuments.BillingDocuments = append(allbillingDocuments.BillingDocuments, billingDocuments.BillingDocuments...)
	}

	return allbillingDocuments, nil
}

func (c *billingDocumentClient) Create(ctx context.Context, partitionkey string, newbillingDocument *pkg.BillingDocument, options *Options) (billingDocument *pkg.BillingDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	if options == nil {
		options = &Options{}
	}
	options.NoETag = true

	err = c.setOptions(options, newbillingDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPost, c.path+"/docs", "docs", c.path, http.StatusCreated, &newbillingDocument, &billingDocument, headers)
	return
}

func (c *billingDocumentClient) List(options *Options) BillingDocumentRawIterator {
	return &billingDocumentListIterator{billingDocumentClient: c, options: options}
}

func (c *billingDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.BillingDocuments, error) {
	return c.all(ctx, c.List(options))
}

func (c *billingDocumentClient) Get(ctx context.Context, partitionkey, billingDocumentid string, options *Options) (billingDocument *pkg.BillingDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, nil, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodGet, c.path+"/docs/"+billingDocumentid, "docs", c.path+"/docs/"+billingDocumentid, http.StatusOK, nil, &billingDocument, headers)
	return
}

func (c *billingDocumentClient) Replace(ctx context.Context, partitionkey string, newbillingDocument *pkg.BillingDocument, options *Options) (billingDocument *pkg.BillingDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, newbillingDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPut, c.path+"/docs/"+newbillingDocument.ID, "docs", c.path+"/docs/"+newbillingDocument.ID, http.StatusOK, &newbillingDocument, &billingDocument, headers)
	return
}

func (c *billingDocumentClient) Delete(ctx context.Context, partitionkey string, billingDocument *pkg.BillingDocument, options *Options) (err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, billingDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodDelete, c.path+"/docs/"+billingDocument.ID, "docs", c.path+"/docs/"+billingDocument.ID, http.StatusNoContent, nil, nil, headers)
	return
}

func (c *billingDocumentClient) Query(partitionkey string, query *Query, options *Options) BillingDocumentRawIterator {
	return &billingDocumentQueryIterator{billingDocumentClient: c, partitionkey: partitionkey, query: query, options: options}
}

func (c *billingDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.BillingDocuments, error) {
	return c.all(ctx, c.Query(partitionkey, query, options))
}

func (c *billingDocumentClient) ChangeFeed(options *Options) BillingDocumentIterator {
	return &billingDocumentChangeFeedIterator{billingDocumentClient: c}
}

func (c *billingDocumentClient) setOptions(options *Options, billingDocument *pkg.BillingDocument, headers http.Header) error {
	if options == nil {
		return nil
	}

	if billingDocument != nil && !options.NoETag {
		if billingDocument.ETag == "" {
			return ErrETagRequired
		}
		headers.Set("If-Match", billingDocument.ETag)
	}
	if len(options.PreTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Pre-Trigger-Include", strings.Join(options.PreTriggers, ","))
	}
	if len(options.PostTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Post-Trigger-Include", strings.Join(options.PostTriggers, ","))
	}
	if len(options.PartitionKeyRangeID) > 0 {
		headers.Set("X-Ms-Documentdb-PartitionKeyRangeID", options.PartitionKeyRangeID)
	}

	return nil
}

func (i *billingDocumentChangeFeedIterator) Next(ctx context.Context) (billingDocuments *pkg.BillingDocuments, err error) {
	headers := http.Header{}
	headers.Set("A-IM", "Incremental feed")

	headers.Set("X-Ms-Max-Item-Count", "-1")
	if i.continuation != "" {
		headers.Set("If-None-Match", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &billingDocuments, headers)
	if IsErrorStatusCode(err, http.StatusNotModified) {
		err = nil
	}
	if err != nil {
		return
	}

	i.continuation = headers.Get("Etag")

	return
}

func (i *billingDocumentListIterator) Next(ctx context.Context) (billingDocuments *pkg.BillingDocuments, err error) {
	err = i.NextRaw(ctx, &billingDocuments)
	return
}

func (i *billingDocumentListIterator) NextRaw(ctx context.Context, raw interface{}) (err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", "-1")
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &raw, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *billingDocumentQueryIterator) Next(ctx context.Context) (billingDocuments *pkg.BillingDocuments, err error) {
	err = i.NextRaw(ctx, &billingDocuments)
	return
}

func (i *billingDocumentQueryIterator) NextRaw(ctx context.Context, raw interface{}) (err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", "-1")
	headers.Set("X-Ms-Documentdb-Isquery", "True")
	headers.Set("Content-Type", "application/query+json")
	if i.partitionkey != "" {
		headers.Set("X-Ms-Documentdb-Partitionkey", `["`+i.partitionkey+`"]`)
	} else {
		headers.Set("X-Ms-Documentdb-Query-Enablecrosspartition", "True")
	}
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodPost, i.path+"/docs", "docs", i.path, http.StatusOK, &i.query, &raw, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}
