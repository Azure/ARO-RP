// Code generated by github.com/jim-minter/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakePortalDocumentTriggerHandler func(context.Context, *pkg.PortalDocument) error
type fakePortalDocumentQueryHandler func(PortalDocumentClient, *Query, *Options) PortalDocumentRawIterator

var _ PortalDocumentClient = &FakePortalDocumentClient{}

// NewFakePortalDocumentClient returns a FakePortalDocumentClient
func NewFakePortalDocumentClient(h *codec.JsonHandle) *FakePortalDocumentClient {
	return &FakePortalDocumentClient{
		portalDocuments: make(map[string][]byte),
		triggerHandlers: make(map[string]fakePortalDocumentTriggerHandler),
		queryHandlers:   make(map[string]fakePortalDocumentQueryHandler),
		jsonHandle:      h,
		lock:            &sync.RWMutex{},
	}
}

// FakePortalDocumentClient is a FakePortalDocumentClient
type FakePortalDocumentClient struct {
	portalDocuments map[string][]byte
	jsonHandle      *codec.JsonHandle
	lock            *sync.RWMutex
	triggerHandlers map[string]fakePortalDocumentTriggerHandler
	queryHandlers   map[string]fakePortalDocumentQueryHandler
	sorter          func([]*pkg.PortalDocument)

	// returns true if documents conflict
	conflictChecker func(*pkg.PortalDocument, *pkg.PortalDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

func (c *FakePortalDocumentClient) decodePortalDocument(s []byte) (portalDocument *pkg.PortalDocument, err error) {
	err = codec.NewDecoderBytes(s, c.jsonHandle).Decode(&portalDocument)
	return
}

func (c *FakePortalDocumentClient) encodePortalDocument(portalDocument *pkg.PortalDocument) (b []byte, err error) {
	err = codec.NewEncoderBytes(&b, c.jsonHandle).Encode(portalDocument)
	return
}

// SetError sets or unsets an error that will be returned on any
// FakePortalDocumentClient method invocation
func (c *FakePortalDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakePortalDocumentClient) SetSorter(sorter func([]*pkg.PortalDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a PortalDocument
func (c *FakePortalDocumentClient) SetConflictChecker(conflictChecker func(*pkg.PortalDocument, *pkg.PortalDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakePortalDocumentClient) SetTriggerHandler(triggerName string, trigger fakePortalDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakePortalDocumentClient) SetQueryHandler(queryName string, query fakePortalDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakePortalDocumentClient) deepCopy(portalDocument *pkg.PortalDocument) (*pkg.PortalDocument, error) {
	b, err := c.encodePortalDocument(portalDocument)
	if err != nil {
		return nil, err
	}

	return c.decodePortalDocument(b)
}

func (c *FakePortalDocumentClient) apply(ctx context.Context, partitionkey string, portalDocument *pkg.PortalDocument, options *Options, isCreate bool) (*pkg.PortalDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	portalDocument, err := c.deepCopy(portalDocument) // copy now because pretriggers can mutate portalDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, portalDocument, options)
		if err != nil {
			return nil, err
		}
	}

	_, exists := c.portalDocuments[portalDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate && !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	if c.conflictChecker != nil {
		for id := range c.portalDocuments {
			portalDocumentToCheck, err := c.decodePortalDocument(c.portalDocuments[id])
			if err != nil {
				return nil, err
			}

			if c.conflictChecker(portalDocumentToCheck, portalDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	b, err := c.encodePortalDocument(portalDocument)
	if err != nil {
		return nil, err
	}

	c.portalDocuments[portalDocument.ID] = b

	return portalDocument, nil
}

// Create creates a PortalDocument in the database
func (c *FakePortalDocumentClient) Create(ctx context.Context, partitionkey string, portalDocument *pkg.PortalDocument, options *Options) (*pkg.PortalDocument, error) {
	return c.apply(ctx, partitionkey, portalDocument, options, true)
}

// Replace replaces a PortalDocument in the database
func (c *FakePortalDocumentClient) Replace(ctx context.Context, partitionkey string, portalDocument *pkg.PortalDocument, options *Options) (*pkg.PortalDocument, error) {
	return c.apply(ctx, partitionkey, portalDocument, options, false)
}

// List returns a PortalDocumentIterator to list all PortalDocuments in the database
func (c *FakePortalDocumentClient) List(*Options) PortalDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakePortalDocumentErroringRawIterator(c.err)
	}

	portalDocuments := make([]*pkg.PortalDocument, 0, len(c.portalDocuments))
	for _, d := range c.portalDocuments {
		r, err := c.decodePortalDocument(d)
		if err != nil {
			return NewFakePortalDocumentErroringRawIterator(err)
		}
		portalDocuments = append(portalDocuments, r)
	}

	if c.sorter != nil {
		c.sorter(portalDocuments)
	}

	return NewFakePortalDocumentIterator(portalDocuments, 0)
}

// ListAll lists all PortalDocuments in the database
func (c *FakePortalDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.PortalDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a PortalDocument from the database
func (c *FakePortalDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.PortalDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	portalDocument, exists := c.portalDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.decodePortalDocument(portalDocument)
}

// Delete deletes a PortalDocument from the database
func (c *FakePortalDocumentClient) Delete(ctx context.Context, partitionKey string, portalDocument *pkg.PortalDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.portalDocuments[portalDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.portalDocuments, portalDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakePortalDocumentClient) ChangeFeed(*Options) PortalDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakePortalDocumentErroringRawIterator(c.err)
	}

	return NewFakePortalDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakePortalDocumentClient) processPreTriggers(ctx context.Context, portalDocument *pkg.PortalDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			err := triggerHandler(ctx, portalDocument)
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakePortalDocumentClient) Query(name string, query *Query, options *Options) PortalDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakePortalDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		return queryHandler(c, query, options)
	}

	return NewFakePortalDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakePortalDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.PortalDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakePortalDocumentIterator(portalDocuments []*pkg.PortalDocument, continuation int) PortalDocumentRawIterator {
	return &fakePortalDocumentIterator{portalDocuments: portalDocuments, continuation: continuation}
}

type fakePortalDocumentIterator struct {
	portalDocuments []*pkg.PortalDocument
	continuation    int
	done            bool
}

func (i *fakePortalDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakePortalDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.PortalDocuments, error) {
	if i.done {
		return nil, nil
	}

	var portalDocuments []*pkg.PortalDocument
	if maxItemCount == -1 {
		portalDocuments = i.portalDocuments[i.continuation:]
		i.continuation = len(i.portalDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.portalDocuments) {
			max = len(i.portalDocuments)
		}
		portalDocuments = i.portalDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.PortalDocuments{
		PortalDocuments: portalDocuments,
		Count:           len(portalDocuments),
	}, nil
}

func (i *fakePortalDocumentIterator) Continuation() string {
	if i.continuation >= len(i.portalDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakePortalDocumentErroringRawIterator returns a PortalDocumentRawIterator which
// whose methods return the given error
func NewFakePortalDocumentErroringRawIterator(err error) PortalDocumentRawIterator {
	return &fakePortalDocumentErroringRawIterator{err: err}
}

type fakePortalDocumentErroringRawIterator struct {
	err error
}

func (i *fakePortalDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.PortalDocuments, error) {
	return nil, i.err
}

func (i *fakePortalDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakePortalDocumentErroringRawIterator) Continuation() string {
	return ""
}
