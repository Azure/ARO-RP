// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakeSubscriptionDocumentTriggerHandler func(context.Context, *pkg.SubscriptionDocument) error
type fakeSubscriptionDocumentQueryHandler func(SubscriptionDocumentClient, *Query, *Options) SubscriptionDocumentRawIterator

var _ SubscriptionDocumentClient = &FakeSubscriptionDocumentClient{}

// NewFakeSubscriptionDocumentClient returns a FakeSubscriptionDocumentClient
func NewFakeSubscriptionDocumentClient(h *codec.JsonHandle) *FakeSubscriptionDocumentClient {
	return &FakeSubscriptionDocumentClient{
		jsonHandle:            h,
		subscriptionDocuments: make(map[string]*pkg.SubscriptionDocument),
		triggerHandlers:       make(map[string]fakeSubscriptionDocumentTriggerHandler),
		queryHandlers:         make(map[string]fakeSubscriptionDocumentQueryHandler),
	}
}

// FakeSubscriptionDocumentClient is a FakeSubscriptionDocumentClient
type FakeSubscriptionDocumentClient struct {
	lock                  sync.RWMutex
	jsonHandle            *codec.JsonHandle
	subscriptionDocuments map[string]*pkg.SubscriptionDocument
	triggerHandlers       map[string]fakeSubscriptionDocumentTriggerHandler
	queryHandlers         map[string]fakeSubscriptionDocumentQueryHandler
	sorter                func([]*pkg.SubscriptionDocument)
	etag                  int

	// returns true if documents conflict
	conflictChecker func(*pkg.SubscriptionDocument, *pkg.SubscriptionDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

// SetError sets or unsets an error that will be returned on any
// FakeSubscriptionDocumentClient method invocation
func (c *FakeSubscriptionDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakeSubscriptionDocumentClient) SetSorter(sorter func([]*pkg.SubscriptionDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a SubscriptionDocument
func (c *FakeSubscriptionDocumentClient) SetConflictChecker(conflictChecker func(*pkg.SubscriptionDocument, *pkg.SubscriptionDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakeSubscriptionDocumentClient) SetTriggerHandler(triggerName string, trigger fakeSubscriptionDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakeSubscriptionDocumentClient) SetQueryHandler(queryName string, query fakeSubscriptionDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakeSubscriptionDocumentClient) deepCopy(subscriptionDocument *pkg.SubscriptionDocument) (*pkg.SubscriptionDocument, error) {
	var b []byte
	err := codec.NewEncoderBytes(&b, c.jsonHandle).Encode(subscriptionDocument)
	if err != nil {
		return nil, err
	}

	subscriptionDocument = nil
	err = codec.NewDecoderBytes(b, c.jsonHandle).Decode(&subscriptionDocument)
	if err != nil {
		return nil, err
	}

	return subscriptionDocument, nil
}

func (c *FakeSubscriptionDocumentClient) apply(ctx context.Context, partitionkey string, subscriptionDocument *pkg.SubscriptionDocument, options *Options, isCreate bool) (*pkg.SubscriptionDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	subscriptionDocument, err := c.deepCopy(subscriptionDocument) // copy now because pretriggers can mutate subscriptionDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, subscriptionDocument, options)
		if err != nil {
			return nil, err
		}
	}

	existingSubscriptionDocument, exists := c.subscriptionDocuments[subscriptionDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate {
		if !exists {
			return nil, &Error{StatusCode: http.StatusNotFound}
		}

		if subscriptionDocument.ETag != existingSubscriptionDocument.ETag {
			return nil, &Error{StatusCode: http.StatusPreconditionFailed}
		}
	}

	if c.conflictChecker != nil {
		for _, subscriptionDocumentToCheck := range c.subscriptionDocuments {
			if c.conflictChecker(subscriptionDocumentToCheck, subscriptionDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	subscriptionDocument.ETag = fmt.Sprint(c.etag)
	c.etag++

	c.subscriptionDocuments[subscriptionDocument.ID] = subscriptionDocument

	return c.deepCopy(subscriptionDocument)
}

// Create creates a SubscriptionDocument in the database
func (c *FakeSubscriptionDocumentClient) Create(ctx context.Context, partitionkey string, subscriptionDocument *pkg.SubscriptionDocument, options *Options) (*pkg.SubscriptionDocument, error) {
	return c.apply(ctx, partitionkey, subscriptionDocument, options, true)
}

// Replace replaces a SubscriptionDocument in the database
func (c *FakeSubscriptionDocumentClient) Replace(ctx context.Context, partitionkey string, subscriptionDocument *pkg.SubscriptionDocument, options *Options) (*pkg.SubscriptionDocument, error) {
	return c.apply(ctx, partitionkey, subscriptionDocument, options, false)
}

// List returns a SubscriptionDocumentIterator to list all SubscriptionDocuments in the database
func (c *FakeSubscriptionDocumentClient) List(*Options) SubscriptionDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeSubscriptionDocumentErroringRawIterator(c.err)
	}

	subscriptionDocuments := make([]*pkg.SubscriptionDocument, 0, len(c.subscriptionDocuments))
	for _, subscriptionDocument := range c.subscriptionDocuments {
		subscriptionDocument, err := c.deepCopy(subscriptionDocument)
		if err != nil {
			return NewFakeSubscriptionDocumentErroringRawIterator(err)
		}
		subscriptionDocuments = append(subscriptionDocuments, subscriptionDocument)
	}

	if c.sorter != nil {
		c.sorter(subscriptionDocuments)
	}

	return NewFakeSubscriptionDocumentIterator(subscriptionDocuments, 0)
}

// ListAll lists all SubscriptionDocuments in the database
func (c *FakeSubscriptionDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.SubscriptionDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a SubscriptionDocument from the database
func (c *FakeSubscriptionDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.SubscriptionDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	subscriptionDocument, exists := c.subscriptionDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.deepCopy(subscriptionDocument)
}

// Delete deletes a SubscriptionDocument from the database
func (c *FakeSubscriptionDocumentClient) Delete(ctx context.Context, partitionKey string, subscriptionDocument *pkg.SubscriptionDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.subscriptionDocuments[subscriptionDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.subscriptionDocuments, subscriptionDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakeSubscriptionDocumentClient) ChangeFeed(*Options) SubscriptionDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeSubscriptionDocumentErroringRawIterator(c.err)
	}

	return NewFakeSubscriptionDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakeSubscriptionDocumentClient) processPreTriggers(ctx context.Context, subscriptionDocument *pkg.SubscriptionDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			c.lock.Unlock()
			err := triggerHandler(ctx, subscriptionDocument)
			c.lock.Lock()
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakeSubscriptionDocumentClient) Query(name string, query *Query, options *Options) SubscriptionDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeSubscriptionDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		c.lock.RUnlock()
		i := queryHandler(c, query, options)
		c.lock.RLock()
		return i
	}

	return NewFakeSubscriptionDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakeSubscriptionDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.SubscriptionDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakeSubscriptionDocumentIterator(subscriptionDocuments []*pkg.SubscriptionDocument, continuation int) SubscriptionDocumentRawIterator {
	return &fakeSubscriptionDocumentIterator{subscriptionDocuments: subscriptionDocuments, continuation: continuation}
}

type fakeSubscriptionDocumentIterator struct {
	subscriptionDocuments []*pkg.SubscriptionDocument
	continuation          int
	done                  bool
}

func (i *fakeSubscriptionDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakeSubscriptionDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.SubscriptionDocuments, error) {
	if i.done {
		return nil, nil
	}

	var subscriptionDocuments []*pkg.SubscriptionDocument
	if maxItemCount == -1 {
		subscriptionDocuments = i.subscriptionDocuments[i.continuation:]
		i.continuation = len(i.subscriptionDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.subscriptionDocuments) {
			max = len(i.subscriptionDocuments)
		}
		subscriptionDocuments = i.subscriptionDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.SubscriptionDocuments{
		SubscriptionDocuments: subscriptionDocuments,
		Count:                 len(subscriptionDocuments),
	}, nil
}

func (i *fakeSubscriptionDocumentIterator) Continuation() string {
	if i.continuation >= len(i.subscriptionDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakeSubscriptionDocumentErroringRawIterator returns a SubscriptionDocumentRawIterator which
// whose methods return the given error
func NewFakeSubscriptionDocumentErroringRawIterator(err error) SubscriptionDocumentRawIterator {
	return &fakeSubscriptionDocumentErroringRawIterator{err: err}
}

type fakeSubscriptionDocumentErroringRawIterator struct {
	err error
}

func (i *fakeSubscriptionDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.SubscriptionDocuments, error) {
	return nil, i.err
}

func (i *fakeSubscriptionDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeSubscriptionDocumentErroringRawIterator) Continuation() string {
	return ""
}
