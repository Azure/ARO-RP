// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type openShiftVersionDocumentClient struct {
	*databaseClient
	path string
}

// OpenShiftVersionDocumentClient is a openShiftVersionDocument client
type OpenShiftVersionDocumentClient interface {
	Create(context.Context, string, *pkg.OpenShiftVersionDocument, *Options) (*pkg.OpenShiftVersionDocument, error)
	List(*Options) OpenShiftVersionDocumentIterator
	ListAll(context.Context, *Options) (*pkg.OpenShiftVersionDocuments, error)
	Get(context.Context, string, string, *Options) (*pkg.OpenShiftVersionDocument, error)
	Replace(context.Context, string, *pkg.OpenShiftVersionDocument, *Options) (*pkg.OpenShiftVersionDocument, error)
	Delete(context.Context, string, *pkg.OpenShiftVersionDocument, *Options) error
	Query(string, *Query, *Options) OpenShiftVersionDocumentRawIterator
	QueryAll(context.Context, string, *Query, *Options) (*pkg.OpenShiftVersionDocuments, error)
	ChangeFeed(*Options) OpenShiftVersionDocumentIterator
}

type openShiftVersionDocumentChangeFeedIterator struct {
	*openShiftVersionDocumentClient
	continuation string
	options      *Options
}

type openShiftVersionDocumentListIterator struct {
	*openShiftVersionDocumentClient
	continuation string
	done         bool
	options      *Options
}

type openShiftVersionDocumentQueryIterator struct {
	*openShiftVersionDocumentClient
	partitionkey string
	query        *Query
	continuation string
	done         bool
	options      *Options
}

// OpenShiftVersionDocumentIterator is a openShiftVersionDocument iterator
type OpenShiftVersionDocumentIterator interface {
	Next(context.Context, int) (*pkg.OpenShiftVersionDocuments, error)
	Continuation() string
}

// OpenShiftVersionDocumentRawIterator is a openShiftVersionDocument raw iterator
type OpenShiftVersionDocumentRawIterator interface {
	OpenShiftVersionDocumentIterator
	NextRaw(context.Context, int, interface{}) error
}

// NewOpenShiftVersionDocumentClient returns a new openShiftVersionDocument client
func NewOpenShiftVersionDocumentClient(collc CollectionClient, collid string) OpenShiftVersionDocumentClient {
	return &openShiftVersionDocumentClient{
		databaseClient: collc.(*collectionClient).databaseClient,
		path:           collc.(*collectionClient).path + "/colls/" + collid,
	}
}

func (c *openShiftVersionDocumentClient) all(ctx context.Context, i OpenShiftVersionDocumentIterator) (*pkg.OpenShiftVersionDocuments, error) {
	allopenShiftVersionDocuments := &pkg.OpenShiftVersionDocuments{}

	for {
		openShiftVersionDocuments, err := i.Next(ctx, -1)
		if err != nil {
			return nil, err
		}
		if openShiftVersionDocuments == nil {
			break
		}

		allopenShiftVersionDocuments.Count += openShiftVersionDocuments.Count
		allopenShiftVersionDocuments.ResourceID = openShiftVersionDocuments.ResourceID
		allopenShiftVersionDocuments.OpenShiftVersionDocuments = append(allopenShiftVersionDocuments.OpenShiftVersionDocuments, openShiftVersionDocuments.OpenShiftVersionDocuments...)
	}

	return allopenShiftVersionDocuments, nil
}

func (c *openShiftVersionDocumentClient) Create(ctx context.Context, partitionkey string, newopenShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options) (openShiftVersionDocument *pkg.OpenShiftVersionDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	if options == nil {
		options = &Options{}
	}
	options.NoETag = true

	err = c.setOptions(options, newopenShiftVersionDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPost, c.path+"/docs", "docs", c.path, http.StatusCreated, &newopenShiftVersionDocument, &openShiftVersionDocument, headers)
	return
}

func (c *openShiftVersionDocumentClient) List(options *Options) OpenShiftVersionDocumentIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &openShiftVersionDocumentListIterator{openShiftVersionDocumentClient: c, options: options, continuation: continuation}
}

func (c *openShiftVersionDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.OpenShiftVersionDocuments, error) {
	return c.all(ctx, c.List(options))
}

func (c *openShiftVersionDocumentClient) Get(ctx context.Context, partitionkey, openShiftVersionDocumentid string, options *Options) (openShiftVersionDocument *pkg.OpenShiftVersionDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, nil, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodGet, c.path+"/docs/"+openShiftVersionDocumentid, "docs", c.path+"/docs/"+openShiftVersionDocumentid, http.StatusOK, nil, &openShiftVersionDocument, headers)
	return
}

func (c *openShiftVersionDocumentClient) Replace(ctx context.Context, partitionkey string, newopenShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options) (openShiftVersionDocument *pkg.OpenShiftVersionDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, newopenShiftVersionDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPut, c.path+"/docs/"+newopenShiftVersionDocument.ID, "docs", c.path+"/docs/"+newopenShiftVersionDocument.ID, http.StatusOK, &newopenShiftVersionDocument, &openShiftVersionDocument, headers)
	return
}

func (c *openShiftVersionDocumentClient) Delete(ctx context.Context, partitionkey string, openShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options) (err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, openShiftVersionDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodDelete, c.path+"/docs/"+openShiftVersionDocument.ID, "docs", c.path+"/docs/"+openShiftVersionDocument.ID, http.StatusNoContent, nil, nil, headers)
	return
}

func (c *openShiftVersionDocumentClient) Query(partitionkey string, query *Query, options *Options) OpenShiftVersionDocumentRawIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &openShiftVersionDocumentQueryIterator{openShiftVersionDocumentClient: c, partitionkey: partitionkey, query: query, options: options, continuation: continuation}
}

func (c *openShiftVersionDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.OpenShiftVersionDocuments, error) {
	return c.all(ctx, c.Query(partitionkey, query, options))
}

func (c *openShiftVersionDocumentClient) ChangeFeed(options *Options) OpenShiftVersionDocumentIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &openShiftVersionDocumentChangeFeedIterator{openShiftVersionDocumentClient: c, options: options, continuation: continuation}
}

func (c *openShiftVersionDocumentClient) setOptions(options *Options, openShiftVersionDocument *pkg.OpenShiftVersionDocument, headers http.Header) error {
	if options == nil {
		return nil
	}

	if openShiftVersionDocument != nil && !options.NoETag {
		if openShiftVersionDocument.ETag == "" {
			return ErrETagRequired
		}
		headers.Set("If-Match", openShiftVersionDocument.ETag)
	}
	if len(options.PreTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Pre-Trigger-Include", strings.Join(options.PreTriggers, ","))
	}
	if len(options.PostTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Post-Trigger-Include", strings.Join(options.PostTriggers, ","))
	}
	if len(options.PartitionKeyRangeID) > 0 {
		headers.Set("X-Ms-Documentdb-PartitionKeyRangeID", options.PartitionKeyRangeID)
	}

	return nil
}

func (i *openShiftVersionDocumentChangeFeedIterator) Next(ctx context.Context, maxItemCount int) (openShiftVersionDocuments *pkg.OpenShiftVersionDocuments, err error) {
	headers := http.Header{}
	headers.Set("A-IM", "Incremental feed")

	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	if i.continuation != "" {
		headers.Set("If-None-Match", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &openShiftVersionDocuments, headers)
	if IsErrorStatusCode(err, http.StatusNotModified) {
		err = nil
	}
	if err != nil {
		return
	}

	i.continuation = headers.Get("Etag")

	return
}

func (i *openShiftVersionDocumentChangeFeedIterator) Continuation() string {
	return i.continuation
}

func (i *openShiftVersionDocumentListIterator) Next(ctx context.Context, maxItemCount int) (openShiftVersionDocuments *pkg.OpenShiftVersionDocuments, err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &openShiftVersionDocuments, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *openShiftVersionDocumentListIterator) Continuation() string {
	return i.continuation
}

func (i *openShiftVersionDocumentQueryIterator) Next(ctx context.Context, maxItemCount int) (openShiftVersionDocuments *pkg.OpenShiftVersionDocuments, err error) {
	err = i.NextRaw(ctx, maxItemCount, &openShiftVersionDocuments)
	return
}

func (i *openShiftVersionDocumentQueryIterator) NextRaw(ctx context.Context, maxItemCount int, raw interface{}) (err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	headers.Set("X-Ms-Documentdb-Isquery", "True")
	headers.Set("Content-Type", "application/query+json")
	if i.partitionkey != "" {
		headers.Set("X-Ms-Documentdb-Partitionkey", `["`+i.partitionkey+`"]`)
	} else {
		headers.Set("X-Ms-Documentdb-Query-Enablecrosspartition", "True")
	}
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodPost, i.path+"/docs", "docs", i.path, http.StatusOK, &i.query, &raw, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *openShiftVersionDocumentQueryIterator) Continuation() string {
	return i.continuation
}
