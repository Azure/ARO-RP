// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakeBucketServiceDocumentTriggerHandler func(context.Context, *pkg.BucketServiceDocument) error
type fakeBucketServiceDocumentQueryHandler func(BucketServiceDocumentClient, *Query, *Options) BucketServiceDocumentRawIterator

var _ BucketServiceDocumentClient = &FakeBucketServiceDocumentClient{}

// NewFakeBucketServiceDocumentClient returns a FakeBucketServiceDocumentClient
func NewFakeBucketServiceDocumentClient(h *codec.JsonHandle) *FakeBucketServiceDocumentClient {
	return &FakeBucketServiceDocumentClient{
		jsonHandle:             h,
		bucketServiceDocuments: make(map[string]*pkg.BucketServiceDocument),
		triggerHandlers:        make(map[string]fakeBucketServiceDocumentTriggerHandler),
		queryHandlers:          make(map[string]fakeBucketServiceDocumentQueryHandler),
	}
}

// FakeBucketServiceDocumentClient is a FakeBucketServiceDocumentClient
type FakeBucketServiceDocumentClient struct {
	lock                   sync.RWMutex
	jsonHandle             *codec.JsonHandle
	bucketServiceDocuments map[string]*pkg.BucketServiceDocument
	triggerHandlers        map[string]fakeBucketServiceDocumentTriggerHandler
	queryHandlers          map[string]fakeBucketServiceDocumentQueryHandler
	sorter                 func([]*pkg.BucketServiceDocument)
	etag                   int

	// returns true if documents conflict
	conflictChecker func(*pkg.BucketServiceDocument, *pkg.BucketServiceDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

// SetError sets or unsets an error that will be returned on any
// FakeBucketServiceDocumentClient method invocation
func (c *FakeBucketServiceDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakeBucketServiceDocumentClient) SetSorter(sorter func([]*pkg.BucketServiceDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a BucketServiceDocument
func (c *FakeBucketServiceDocumentClient) SetConflictChecker(conflictChecker func(*pkg.BucketServiceDocument, *pkg.BucketServiceDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakeBucketServiceDocumentClient) SetTriggerHandler(triggerName string, trigger fakeBucketServiceDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakeBucketServiceDocumentClient) SetQueryHandler(queryName string, query fakeBucketServiceDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakeBucketServiceDocumentClient) deepCopy(bucketServiceDocument *pkg.BucketServiceDocument) (*pkg.BucketServiceDocument, error) {
	var b []byte
	err := codec.NewEncoderBytes(&b, c.jsonHandle).Encode(bucketServiceDocument)
	if err != nil {
		return nil, err
	}

	bucketServiceDocument = nil
	err = codec.NewDecoderBytes(b, c.jsonHandle).Decode(&bucketServiceDocument)
	if err != nil {
		return nil, err
	}

	return bucketServiceDocument, nil
}

func (c *FakeBucketServiceDocumentClient) apply(ctx context.Context, partitionkey string, bucketServiceDocument *pkg.BucketServiceDocument, options *Options, isCreate bool) (*pkg.BucketServiceDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	bucketServiceDocument, err := c.deepCopy(bucketServiceDocument) // copy now because pretriggers can mutate bucketServiceDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, bucketServiceDocument, options)
		if err != nil {
			return nil, err
		}
	}

	existingBucketServiceDocument, exists := c.bucketServiceDocuments[bucketServiceDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate {
		if !exists {
			return nil, &Error{StatusCode: http.StatusNotFound}
		}

		if bucketServiceDocument.ETag != existingBucketServiceDocument.ETag {
			return nil, &Error{StatusCode: http.StatusPreconditionFailed}
		}
	}

	if c.conflictChecker != nil {
		for _, bucketServiceDocumentToCheck := range c.bucketServiceDocuments {
			if c.conflictChecker(bucketServiceDocumentToCheck, bucketServiceDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	bucketServiceDocument.ETag = fmt.Sprint(c.etag)
	c.etag++

	c.bucketServiceDocuments[bucketServiceDocument.ID] = bucketServiceDocument

	return c.deepCopy(bucketServiceDocument)
}

// Create creates a BucketServiceDocument in the database
func (c *FakeBucketServiceDocumentClient) Create(ctx context.Context, partitionkey string, bucketServiceDocument *pkg.BucketServiceDocument, options *Options) (*pkg.BucketServiceDocument, error) {
	return c.apply(ctx, partitionkey, bucketServiceDocument, options, true)
}

// Replace replaces a BucketServiceDocument in the database
func (c *FakeBucketServiceDocumentClient) Replace(ctx context.Context, partitionkey string, bucketServiceDocument *pkg.BucketServiceDocument, options *Options) (*pkg.BucketServiceDocument, error) {
	return c.apply(ctx, partitionkey, bucketServiceDocument, options, false)
}

// List returns a BucketServiceDocumentIterator to list all BucketServiceDocuments in the database
func (c *FakeBucketServiceDocumentClient) List(*Options) BucketServiceDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeBucketServiceDocumentErroringRawIterator(c.err)
	}

	bucketServiceDocuments := make([]*pkg.BucketServiceDocument, 0, len(c.bucketServiceDocuments))
	for _, bucketServiceDocument := range c.bucketServiceDocuments {
		bucketServiceDocument, err := c.deepCopy(bucketServiceDocument)
		if err != nil {
			return NewFakeBucketServiceDocumentErroringRawIterator(err)
		}
		bucketServiceDocuments = append(bucketServiceDocuments, bucketServiceDocument)
	}

	if c.sorter != nil {
		c.sorter(bucketServiceDocuments)
	}

	return NewFakeBucketServiceDocumentIterator(bucketServiceDocuments, 0)
}

// ListAll lists all BucketServiceDocuments in the database
func (c *FakeBucketServiceDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.BucketServiceDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a BucketServiceDocument from the database
func (c *FakeBucketServiceDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.BucketServiceDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	bucketServiceDocument, exists := c.bucketServiceDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.deepCopy(bucketServiceDocument)
}

// Delete deletes a BucketServiceDocument from the database
func (c *FakeBucketServiceDocumentClient) Delete(ctx context.Context, partitionKey string, bucketServiceDocument *pkg.BucketServiceDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.bucketServiceDocuments[bucketServiceDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.bucketServiceDocuments, bucketServiceDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakeBucketServiceDocumentClient) ChangeFeed(*Options) BucketServiceDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeBucketServiceDocumentErroringRawIterator(c.err)
	}

	return NewFakeBucketServiceDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakeBucketServiceDocumentClient) processPreTriggers(ctx context.Context, bucketServiceDocument *pkg.BucketServiceDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			c.lock.Unlock()
			err := triggerHandler(ctx, bucketServiceDocument)
			c.lock.Lock()
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakeBucketServiceDocumentClient) Query(name string, query *Query, options *Options) BucketServiceDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeBucketServiceDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		c.lock.RUnlock()
		i := queryHandler(c, query, options)
		c.lock.RLock()
		return i
	}

	return NewFakeBucketServiceDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakeBucketServiceDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.BucketServiceDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakeBucketServiceDocumentIterator(bucketServiceDocuments []*pkg.BucketServiceDocument, continuation int) BucketServiceDocumentRawIterator {
	return &fakeBucketServiceDocumentIterator{bucketServiceDocuments: bucketServiceDocuments, continuation: continuation}
}

type fakeBucketServiceDocumentIterator struct {
	bucketServiceDocuments []*pkg.BucketServiceDocument
	continuation           int
	done                   bool
}

func (i *fakeBucketServiceDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakeBucketServiceDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.BucketServiceDocuments, error) {
	if i.done {
		return nil, nil
	}

	var bucketServiceDocuments []*pkg.BucketServiceDocument
	if maxItemCount == -1 {
		bucketServiceDocuments = i.bucketServiceDocuments[i.continuation:]
		i.continuation = len(i.bucketServiceDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.bucketServiceDocuments) {
			max = len(i.bucketServiceDocuments)
		}
		bucketServiceDocuments = i.bucketServiceDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.BucketServiceDocuments{
		BucketServiceDocuments: bucketServiceDocuments,
		Count:                  len(bucketServiceDocuments),
	}, nil
}

func (i *fakeBucketServiceDocumentIterator) Continuation() string {
	if i.continuation >= len(i.bucketServiceDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakeBucketServiceDocumentErroringRawIterator returns a BucketServiceDocumentRawIterator which
// whose methods return the given error
func NewFakeBucketServiceDocumentErroringRawIterator(err error) BucketServiceDocumentRawIterator {
	return &fakeBucketServiceDocumentErroringRawIterator{err: err}
}

type fakeBucketServiceDocumentErroringRawIterator struct {
	err error
}

func (i *fakeBucketServiceDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.BucketServiceDocuments, error) {
	return nil, i.err
}

func (i *fakeBucketServiceDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeBucketServiceDocumentErroringRawIterator) Continuation() string {
	return ""
}
