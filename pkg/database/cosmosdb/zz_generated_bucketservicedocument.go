// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type bucketServiceDocumentClient struct {
	*databaseClient
	path string
}

// BucketServiceDocumentClient is a bucketServiceDocument client
type BucketServiceDocumentClient interface {
	Create(context.Context, string, *pkg.BucketServiceDocument, *Options) (*pkg.BucketServiceDocument, error)
	List(*Options) BucketServiceDocumentIterator
	ListAll(context.Context, *Options) (*pkg.BucketServiceDocuments, error)
	Get(context.Context, string, string, *Options) (*pkg.BucketServiceDocument, error)
	Replace(context.Context, string, *pkg.BucketServiceDocument, *Options) (*pkg.BucketServiceDocument, error)
	Delete(context.Context, string, *pkg.BucketServiceDocument, *Options) error
	Query(string, *Query, *Options) BucketServiceDocumentRawIterator
	QueryAll(context.Context, string, *Query, *Options) (*pkg.BucketServiceDocuments, error)
	ChangeFeed(*Options) BucketServiceDocumentIterator
}

type bucketServiceDocumentChangeFeedIterator struct {
	*bucketServiceDocumentClient
	continuation string
	options      *Options
}

type bucketServiceDocumentListIterator struct {
	*bucketServiceDocumentClient
	continuation string
	done         bool
	options      *Options
}

type bucketServiceDocumentQueryIterator struct {
	*bucketServiceDocumentClient
	partitionkey string
	query        *Query
	continuation string
	done         bool
	options      *Options
}

// BucketServiceDocumentIterator is a bucketServiceDocument iterator
type BucketServiceDocumentIterator interface {
	Next(context.Context, int) (*pkg.BucketServiceDocuments, error)
	Continuation() string
}

// BucketServiceDocumentRawIterator is a bucketServiceDocument raw iterator
type BucketServiceDocumentRawIterator interface {
	BucketServiceDocumentIterator
	NextRaw(context.Context, int, interface{}) error
}

// NewBucketServiceDocumentClient returns a new bucketServiceDocument client
func NewBucketServiceDocumentClient(collc CollectionClient, collid string) BucketServiceDocumentClient {
	return &bucketServiceDocumentClient{
		databaseClient: collc.(*collectionClient).databaseClient,
		path:           collc.(*collectionClient).path + "/colls/" + collid,
	}
}

func (c *bucketServiceDocumentClient) all(ctx context.Context, i BucketServiceDocumentIterator) (*pkg.BucketServiceDocuments, error) {
	allbucketServiceDocuments := &pkg.BucketServiceDocuments{}

	for {
		bucketServiceDocuments, err := i.Next(ctx, -1)
		if err != nil {
			return nil, err
		}
		if bucketServiceDocuments == nil {
			break
		}

		allbucketServiceDocuments.Count += bucketServiceDocuments.Count
		allbucketServiceDocuments.ResourceID = bucketServiceDocuments.ResourceID
		allbucketServiceDocuments.BucketServiceDocuments = append(allbucketServiceDocuments.BucketServiceDocuments, bucketServiceDocuments.BucketServiceDocuments...)
	}

	return allbucketServiceDocuments, nil
}

func (c *bucketServiceDocumentClient) Create(ctx context.Context, partitionkey string, newbucketServiceDocument *pkg.BucketServiceDocument, options *Options) (bucketServiceDocument *pkg.BucketServiceDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	if options == nil {
		options = &Options{}
	}
	options.NoETag = true

	err = c.setOptions(options, newbucketServiceDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPost, c.path+"/docs", "docs", c.path, http.StatusCreated, &newbucketServiceDocument, &bucketServiceDocument, headers)
	return
}

func (c *bucketServiceDocumentClient) List(options *Options) BucketServiceDocumentIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &bucketServiceDocumentListIterator{bucketServiceDocumentClient: c, options: options, continuation: continuation}
}

func (c *bucketServiceDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.BucketServiceDocuments, error) {
	return c.all(ctx, c.List(options))
}

func (c *bucketServiceDocumentClient) Get(ctx context.Context, partitionkey, bucketServiceDocumentid string, options *Options) (bucketServiceDocument *pkg.BucketServiceDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, nil, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodGet, c.path+"/docs/"+bucketServiceDocumentid, "docs", c.path+"/docs/"+bucketServiceDocumentid, http.StatusOK, nil, &bucketServiceDocument, headers)
	return
}

func (c *bucketServiceDocumentClient) Replace(ctx context.Context, partitionkey string, newbucketServiceDocument *pkg.BucketServiceDocument, options *Options) (bucketServiceDocument *pkg.BucketServiceDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, newbucketServiceDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPut, c.path+"/docs/"+newbucketServiceDocument.ID, "docs", c.path+"/docs/"+newbucketServiceDocument.ID, http.StatusOK, &newbucketServiceDocument, &bucketServiceDocument, headers)
	return
}

func (c *bucketServiceDocumentClient) Delete(ctx context.Context, partitionkey string, bucketServiceDocument *pkg.BucketServiceDocument, options *Options) (err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, bucketServiceDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodDelete, c.path+"/docs/"+bucketServiceDocument.ID, "docs", c.path+"/docs/"+bucketServiceDocument.ID, http.StatusNoContent, nil, nil, headers)
	return
}

func (c *bucketServiceDocumentClient) Query(partitionkey string, query *Query, options *Options) BucketServiceDocumentRawIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &bucketServiceDocumentQueryIterator{bucketServiceDocumentClient: c, partitionkey: partitionkey, query: query, options: options, continuation: continuation}
}

func (c *bucketServiceDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.BucketServiceDocuments, error) {
	return c.all(ctx, c.Query(partitionkey, query, options))
}

func (c *bucketServiceDocumentClient) ChangeFeed(options *Options) BucketServiceDocumentIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &bucketServiceDocumentChangeFeedIterator{bucketServiceDocumentClient: c, options: options, continuation: continuation}
}

func (c *bucketServiceDocumentClient) setOptions(options *Options, bucketServiceDocument *pkg.BucketServiceDocument, headers http.Header) error {
	if options == nil {
		return nil
	}

	if bucketServiceDocument != nil && !options.NoETag {
		if bucketServiceDocument.ETag == "" {
			return ErrETagRequired
		}
		headers.Set("If-Match", bucketServiceDocument.ETag)
	}
	if len(options.PreTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Pre-Trigger-Include", strings.Join(options.PreTriggers, ","))
	}
	if len(options.PostTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Post-Trigger-Include", strings.Join(options.PostTriggers, ","))
	}
	if len(options.PartitionKeyRangeID) > 0 {
		headers.Set("X-Ms-Documentdb-PartitionKeyRangeID", options.PartitionKeyRangeID)
	}

	return nil
}

func (i *bucketServiceDocumentChangeFeedIterator) Next(ctx context.Context, maxItemCount int) (bucketServiceDocuments *pkg.BucketServiceDocuments, err error) {
	headers := http.Header{}
	headers.Set("A-IM", "Incremental feed")

	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	if i.continuation != "" {
		headers.Set("If-None-Match", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &bucketServiceDocuments, headers)
	if IsErrorStatusCode(err, http.StatusNotModified) {
		err = nil
	}
	if err != nil {
		return
	}

	i.continuation = headers.Get("Etag")

	return
}

func (i *bucketServiceDocumentChangeFeedIterator) Continuation() string {
	return i.continuation
}

func (i *bucketServiceDocumentListIterator) Next(ctx context.Context, maxItemCount int) (bucketServiceDocuments *pkg.BucketServiceDocuments, err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &bucketServiceDocuments, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *bucketServiceDocumentListIterator) Continuation() string {
	return i.continuation
}

func (i *bucketServiceDocumentQueryIterator) Next(ctx context.Context, maxItemCount int) (bucketServiceDocuments *pkg.BucketServiceDocuments, err error) {
	err = i.NextRaw(ctx, maxItemCount, &bucketServiceDocuments)
	return
}

func (i *bucketServiceDocumentQueryIterator) NextRaw(ctx context.Context, maxItemCount int, raw interface{}) (err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	headers.Set("X-Ms-Documentdb-Isquery", "True")
	headers.Set("Content-Type", "application/query+json")
	if i.partitionkey != "" {
		headers.Set("X-Ms-Documentdb-Partitionkey", `["`+i.partitionkey+`"]`)
	} else {
		headers.Set("X-Ms-Documentdb-Query-Enablecrosspartition", "True")
	}
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodPost, i.path+"/docs", "docs", i.path, http.StatusOK, &i.query, &raw, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *bucketServiceDocumentQueryIterator) Continuation() string {
	return i.continuation
}
