// Code generated by github.com/mjudeikis/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type gatewayDocumentClient struct {
	*databaseClient
	path string
}

// GatewayDocumentClient is a gatewayDocument client
type GatewayDocumentClient interface {
	Create(context.Context, string, *pkg.GatewayDocument, *Options) (*pkg.GatewayDocument, error)
	List(*Options) GatewayDocumentIterator
	ListAll(context.Context, *Options) (*pkg.GatewayDocuments, error)
	Get(context.Context, string, string, *Options) (*pkg.GatewayDocument, error)
	Replace(context.Context, string, *pkg.GatewayDocument, *Options) (*pkg.GatewayDocument, error)
	Delete(context.Context, string, *pkg.GatewayDocument, *Options) error
	Query(string, *Query, *Options) GatewayDocumentRawIterator
	QueryAll(context.Context, string, *Query, *Options) (*pkg.GatewayDocuments, error)
	ChangeFeed(*Options) GatewayDocumentIterator
}

type gatewayDocumentChangeFeedIterator struct {
	*gatewayDocumentClient
	continuation string
	options      *Options
}

type gatewayDocumentListIterator struct {
	*gatewayDocumentClient
	continuation string
	done         bool
	options      *Options
}

type gatewayDocumentQueryIterator struct {
	*gatewayDocumentClient
	partitionkey string
	query        *Query
	continuation string
	done         bool
	options      *Options
}

// GatewayDocumentIterator is a gatewayDocument iterator
type GatewayDocumentIterator interface {
	Next(context.Context, int) (*pkg.GatewayDocuments, error)
	Continuation() string
}

// GatewayDocumentRawIterator is a gatewayDocument raw iterator
type GatewayDocumentRawIterator interface {
	GatewayDocumentIterator
	NextRaw(context.Context, int, interface{}) error
}

// NewGatewayDocumentClient returns a new gatewayDocument client
func NewGatewayDocumentClient(collc CollectionClient, collid string) GatewayDocumentClient {
	return &gatewayDocumentClient{
		databaseClient: collc.(*collectionClient).databaseClient,
		path:           collc.(*collectionClient).path + "/colls/" + collid,
	}
}

func (c *gatewayDocumentClient) all(ctx context.Context, i GatewayDocumentIterator) (*pkg.GatewayDocuments, error) {
	allgatewayDocuments := &pkg.GatewayDocuments{}

	for {
		gatewayDocuments, err := i.Next(ctx, -1)
		if err != nil {
			return nil, err
		}
		if gatewayDocuments == nil {
			break
		}

		allgatewayDocuments.Count += gatewayDocuments.Count
		allgatewayDocuments.ResourceID = gatewayDocuments.ResourceID
		allgatewayDocuments.GatewayDocuments = append(allgatewayDocuments.GatewayDocuments, gatewayDocuments.GatewayDocuments...)
	}

	return allgatewayDocuments, nil
}

func (c *gatewayDocumentClient) Create(ctx context.Context, partitionkey string, newgatewayDocument *pkg.GatewayDocument, options *Options) (gatewayDocument *pkg.GatewayDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	if options == nil {
		options = &Options{}
	}
	options.NoETag = true

	err = c.setOptions(options, newgatewayDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPost, c.path+"/docs", "docs", c.path, http.StatusCreated, &newgatewayDocument, &gatewayDocument, headers)
	return
}

func (c *gatewayDocumentClient) List(options *Options) GatewayDocumentIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &gatewayDocumentListIterator{gatewayDocumentClient: c, options: options, continuation: continuation}
}

func (c *gatewayDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.GatewayDocuments, error) {
	return c.all(ctx, c.List(options))
}

func (c *gatewayDocumentClient) Get(ctx context.Context, partitionkey, gatewayDocumentid string, options *Options) (gatewayDocument *pkg.GatewayDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, nil, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodGet, c.path+"/docs/"+gatewayDocumentid, "docs", c.path+"/docs/"+gatewayDocumentid, http.StatusOK, nil, &gatewayDocument, headers)
	return
}

func (c *gatewayDocumentClient) Replace(ctx context.Context, partitionkey string, newgatewayDocument *pkg.GatewayDocument, options *Options) (gatewayDocument *pkg.GatewayDocument, err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, newgatewayDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodPut, c.path+"/docs/"+newgatewayDocument.ID, "docs", c.path+"/docs/"+newgatewayDocument.ID, http.StatusOK, &newgatewayDocument, &gatewayDocument, headers)
	return
}

func (c *gatewayDocumentClient) Delete(ctx context.Context, partitionkey string, gatewayDocument *pkg.GatewayDocument, options *Options) (err error) {
	headers := http.Header{}
	headers.Set("X-Ms-Documentdb-Partitionkey", `["`+partitionkey+`"]`)

	err = c.setOptions(options, gatewayDocument, headers)
	if err != nil {
		return
	}

	err = c.do(ctx, http.MethodDelete, c.path+"/docs/"+gatewayDocument.ID, "docs", c.path+"/docs/"+gatewayDocument.ID, http.StatusNoContent, nil, nil, headers)
	return
}

func (c *gatewayDocumentClient) Query(partitionkey string, query *Query, options *Options) GatewayDocumentRawIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &gatewayDocumentQueryIterator{gatewayDocumentClient: c, partitionkey: partitionkey, query: query, options: options, continuation: continuation}
}

func (c *gatewayDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.GatewayDocuments, error) {
	return c.all(ctx, c.Query(partitionkey, query, options))
}

func (c *gatewayDocumentClient) ChangeFeed(options *Options) GatewayDocumentIterator {
	continuation := ""
	if options != nil {
		continuation = options.Continuation
	}

	return &gatewayDocumentChangeFeedIterator{gatewayDocumentClient: c, options: options, continuation: continuation}
}

func (c *gatewayDocumentClient) setOptions(options *Options, gatewayDocument *pkg.GatewayDocument, headers http.Header) error {
	if options == nil {
		return nil
	}

	if gatewayDocument != nil && !options.NoETag {
		if gatewayDocument.ETag == "" {
			return ErrETagRequired
		}
		headers.Set("If-Match", gatewayDocument.ETag)
	}
	if len(options.PreTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Pre-Trigger-Include", strings.Join(options.PreTriggers, ","))
	}
	if len(options.PostTriggers) > 0 {
		headers.Set("X-Ms-Documentdb-Post-Trigger-Include", strings.Join(options.PostTriggers, ","))
	}
	if len(options.PartitionKeyRangeID) > 0 {
		headers.Set("X-Ms-Documentdb-PartitionKeyRangeID", options.PartitionKeyRangeID)
	}

	return nil
}

func (i *gatewayDocumentChangeFeedIterator) Next(ctx context.Context, maxItemCount int) (gatewayDocuments *pkg.GatewayDocuments, err error) {
	headers := http.Header{}
	headers.Set("A-IM", "Incremental feed")

	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	if i.continuation != "" {
		headers.Set("If-None-Match", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &gatewayDocuments, headers)
	if IsErrorStatusCode(err, http.StatusNotModified) {
		err = nil
	}
	if err != nil {
		return
	}

	i.continuation = headers.Get("Etag")

	return
}

func (i *gatewayDocumentChangeFeedIterator) Continuation() string {
	return i.continuation
}

func (i *gatewayDocumentListIterator) Next(ctx context.Context, maxItemCount int) (gatewayDocuments *pkg.GatewayDocuments, err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodGet, i.path+"/docs", "docs", i.path, http.StatusOK, nil, &gatewayDocuments, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *gatewayDocumentListIterator) Continuation() string {
	return i.continuation
}

func (i *gatewayDocumentQueryIterator) Next(ctx context.Context, maxItemCount int) (gatewayDocuments *pkg.GatewayDocuments, err error) {
	err = i.NextRaw(ctx, maxItemCount, &gatewayDocuments)
	return
}

func (i *gatewayDocumentQueryIterator) NextRaw(ctx context.Context, maxItemCount int, raw interface{}) (err error) {
	if i.done {
		return
	}

	headers := http.Header{}
	headers.Set("X-Ms-Max-Item-Count", strconv.Itoa(maxItemCount))
	headers.Set("X-Ms-Documentdb-Isquery", "True")
	headers.Set("Content-Type", "application/query+json")
	if i.partitionkey != "" {
		headers.Set("X-Ms-Documentdb-Partitionkey", `["`+i.partitionkey+`"]`)
	} else {
		headers.Set("X-Ms-Documentdb-Query-Enablecrosspartition", "True")
	}
	if i.continuation != "" {
		headers.Set("X-Ms-Continuation", i.continuation)
	}

	err = i.setOptions(i.options, nil, headers)
	if err != nil {
		return
	}

	err = i.do(ctx, http.MethodPost, i.path+"/docs", "docs", i.path, http.StatusOK, &i.query, &raw, headers)
	if err != nil {
		return
	}

	i.continuation = headers.Get("X-Ms-Continuation")
	i.done = i.continuation == ""

	return
}

func (i *gatewayDocumentQueryIterator) Continuation() string {
	return i.continuation
}
