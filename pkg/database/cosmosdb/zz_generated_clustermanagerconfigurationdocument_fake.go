// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakeClusterManagerConfigurationDocumentTriggerHandler func(context.Context, *pkg.ClusterManagerConfigurationDocument) error
type fakeClusterManagerConfigurationDocumentQueryHandler func(ClusterManagerConfigurationDocumentClient, *Query, *Options) ClusterManagerConfigurationDocumentRawIterator

var _ ClusterManagerConfigurationDocumentClient = &FakeClusterManagerConfigurationDocumentClient{}

// NewFakeClusterManagerConfigurationDocumentClient returns a FakeClusterManagerConfigurationDocumentClient
func NewFakeClusterManagerConfigurationDocumentClient(h *codec.JsonHandle) *FakeClusterManagerConfigurationDocumentClient {
	return &FakeClusterManagerConfigurationDocumentClient{
		jsonHandle:                           h,
		clusterManagerConfigurationDocuments: make(map[string]*pkg.ClusterManagerConfigurationDocument),
		triggerHandlers:                      make(map[string]fakeClusterManagerConfigurationDocumentTriggerHandler),
		queryHandlers:                        make(map[string]fakeClusterManagerConfigurationDocumentQueryHandler),
	}
}

// FakeClusterManagerConfigurationDocumentClient is a FakeClusterManagerConfigurationDocumentClient
type FakeClusterManagerConfigurationDocumentClient struct {
	lock                                 sync.RWMutex
	jsonHandle                           *codec.JsonHandle
	clusterManagerConfigurationDocuments map[string]*pkg.ClusterManagerConfigurationDocument
	triggerHandlers                      map[string]fakeClusterManagerConfigurationDocumentTriggerHandler
	queryHandlers                        map[string]fakeClusterManagerConfigurationDocumentQueryHandler
	sorter                               func([]*pkg.ClusterManagerConfigurationDocument)
	etag                                 int

	// returns true if documents conflict
	conflictChecker func(*pkg.ClusterManagerConfigurationDocument, *pkg.ClusterManagerConfigurationDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

// SetError sets or unsets an error that will be returned on any
// FakeClusterManagerConfigurationDocumentClient method invocation
func (c *FakeClusterManagerConfigurationDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakeClusterManagerConfigurationDocumentClient) SetSorter(sorter func([]*pkg.ClusterManagerConfigurationDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a ClusterManagerConfigurationDocument
func (c *FakeClusterManagerConfigurationDocumentClient) SetConflictChecker(conflictChecker func(*pkg.ClusterManagerConfigurationDocument, *pkg.ClusterManagerConfigurationDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakeClusterManagerConfigurationDocumentClient) SetTriggerHandler(triggerName string, trigger fakeClusterManagerConfigurationDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakeClusterManagerConfigurationDocumentClient) SetQueryHandler(queryName string, query fakeClusterManagerConfigurationDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakeClusterManagerConfigurationDocumentClient) deepCopy(clusterManagerConfigurationDocument *pkg.ClusterManagerConfigurationDocument) (*pkg.ClusterManagerConfigurationDocument, error) {
	var b []byte
	err := codec.NewEncoderBytes(&b, c.jsonHandle).Encode(clusterManagerConfigurationDocument)
	if err != nil {
		return nil, err
	}

	clusterManagerConfigurationDocument = nil
	err = codec.NewDecoderBytes(b, c.jsonHandle).Decode(&clusterManagerConfigurationDocument)
	if err != nil {
		return nil, err
	}

	return clusterManagerConfigurationDocument, nil
}

func (c *FakeClusterManagerConfigurationDocumentClient) apply(ctx context.Context, partitionkey string, clusterManagerConfigurationDocument *pkg.ClusterManagerConfigurationDocument, options *Options, isCreate bool) (*pkg.ClusterManagerConfigurationDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	clusterManagerConfigurationDocument, err := c.deepCopy(clusterManagerConfigurationDocument) // copy now because pretriggers can mutate clusterManagerConfigurationDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, clusterManagerConfigurationDocument, options)
		if err != nil {
			return nil, err
		}
	}

	existingClusterManagerConfigurationDocument, exists := c.clusterManagerConfigurationDocuments[clusterManagerConfigurationDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate {
		if !exists {
			return nil, &Error{StatusCode: http.StatusNotFound}
		}

		if clusterManagerConfigurationDocument.ETag != existingClusterManagerConfigurationDocument.ETag {
			return nil, &Error{StatusCode: http.StatusPreconditionFailed}
		}
	}

	if c.conflictChecker != nil {
		for _, clusterManagerConfigurationDocumentToCheck := range c.clusterManagerConfigurationDocuments {
			if c.conflictChecker(clusterManagerConfigurationDocumentToCheck, clusterManagerConfigurationDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	clusterManagerConfigurationDocument.ETag = fmt.Sprint(c.etag)
	c.etag++

	c.clusterManagerConfigurationDocuments[clusterManagerConfigurationDocument.ID] = clusterManagerConfigurationDocument

	return c.deepCopy(clusterManagerConfigurationDocument)
}

// Create creates a ClusterManagerConfigurationDocument in the database
func (c *FakeClusterManagerConfigurationDocumentClient) Create(ctx context.Context, partitionkey string, clusterManagerConfigurationDocument *pkg.ClusterManagerConfigurationDocument, options *Options) (*pkg.ClusterManagerConfigurationDocument, error) {
	return c.apply(ctx, partitionkey, clusterManagerConfigurationDocument, options, true)
}

// Replace replaces a ClusterManagerConfigurationDocument in the database
func (c *FakeClusterManagerConfigurationDocumentClient) Replace(ctx context.Context, partitionkey string, clusterManagerConfigurationDocument *pkg.ClusterManagerConfigurationDocument, options *Options) (*pkg.ClusterManagerConfigurationDocument, error) {
	return c.apply(ctx, partitionkey, clusterManagerConfigurationDocument, options, false)
}

// List returns a ClusterManagerConfigurationDocumentIterator to list all ClusterManagerConfigurationDocuments in the database
func (c *FakeClusterManagerConfigurationDocumentClient) List(*Options) ClusterManagerConfigurationDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeClusterManagerConfigurationDocumentErroringRawIterator(c.err)
	}

	clusterManagerConfigurationDocuments := make([]*pkg.ClusterManagerConfigurationDocument, 0, len(c.clusterManagerConfigurationDocuments))
	for _, clusterManagerConfigurationDocument := range c.clusterManagerConfigurationDocuments {
		clusterManagerConfigurationDocument, err := c.deepCopy(clusterManagerConfigurationDocument)
		if err != nil {
			return NewFakeClusterManagerConfigurationDocumentErroringRawIterator(err)
		}
		clusterManagerConfigurationDocuments = append(clusterManagerConfigurationDocuments, clusterManagerConfigurationDocument)
	}

	if c.sorter != nil {
		c.sorter(clusterManagerConfigurationDocuments)
	}

	return NewFakeClusterManagerConfigurationDocumentIterator(clusterManagerConfigurationDocuments, 0)
}

// ListAll lists all ClusterManagerConfigurationDocuments in the database
func (c *FakeClusterManagerConfigurationDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.ClusterManagerConfigurationDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a ClusterManagerConfigurationDocument from the database
func (c *FakeClusterManagerConfigurationDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.ClusterManagerConfigurationDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	clusterManagerConfigurationDocument, exists := c.clusterManagerConfigurationDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.deepCopy(clusterManagerConfigurationDocument)
}

// Delete deletes a ClusterManagerConfigurationDocument from the database
func (c *FakeClusterManagerConfigurationDocumentClient) Delete(ctx context.Context, partitionKey string, clusterManagerConfigurationDocument *pkg.ClusterManagerConfigurationDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.clusterManagerConfigurationDocuments[clusterManagerConfigurationDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.clusterManagerConfigurationDocuments, clusterManagerConfigurationDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakeClusterManagerConfigurationDocumentClient) ChangeFeed(*Options) ClusterManagerConfigurationDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeClusterManagerConfigurationDocumentErroringRawIterator(c.err)
	}

	return NewFakeClusterManagerConfigurationDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakeClusterManagerConfigurationDocumentClient) processPreTriggers(ctx context.Context, clusterManagerConfigurationDocument *pkg.ClusterManagerConfigurationDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			c.lock.Unlock()
			err := triggerHandler(ctx, clusterManagerConfigurationDocument)
			c.lock.Lock()
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakeClusterManagerConfigurationDocumentClient) Query(name string, query *Query, options *Options) ClusterManagerConfigurationDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeClusterManagerConfigurationDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		c.lock.RUnlock()
		i := queryHandler(c, query, options)
		c.lock.RLock()
		return i
	}

	return NewFakeClusterManagerConfigurationDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakeClusterManagerConfigurationDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.ClusterManagerConfigurationDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakeClusterManagerConfigurationDocumentIterator(clusterManagerConfigurationDocuments []*pkg.ClusterManagerConfigurationDocument, continuation int) ClusterManagerConfigurationDocumentRawIterator {
	return &fakeClusterManagerConfigurationDocumentIterator{clusterManagerConfigurationDocuments: clusterManagerConfigurationDocuments, continuation: continuation}
}

type fakeClusterManagerConfigurationDocumentIterator struct {
	clusterManagerConfigurationDocuments []*pkg.ClusterManagerConfigurationDocument
	continuation                         int
	done                                 bool
}

func (i *fakeClusterManagerConfigurationDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakeClusterManagerConfigurationDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.ClusterManagerConfigurationDocuments, error) {
	if i.done {
		return nil, nil
	}

	var clusterManagerConfigurationDocuments []*pkg.ClusterManagerConfigurationDocument
	if maxItemCount == -1 {
		clusterManagerConfigurationDocuments = i.clusterManagerConfigurationDocuments[i.continuation:]
		i.continuation = len(i.clusterManagerConfigurationDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.clusterManagerConfigurationDocuments) {
			max = len(i.clusterManagerConfigurationDocuments)
		}
		clusterManagerConfigurationDocuments = i.clusterManagerConfigurationDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.ClusterManagerConfigurationDocuments{
		ClusterManagerConfigurationDocuments: clusterManagerConfigurationDocuments,
		Count:                                len(clusterManagerConfigurationDocuments),
	}, nil
}

func (i *fakeClusterManagerConfigurationDocumentIterator) Continuation() string {
	if i.continuation >= len(i.clusterManagerConfigurationDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakeClusterManagerConfigurationDocumentErroringRawIterator returns a ClusterManagerConfigurationDocumentRawIterator which
// whose methods return the given error
func NewFakeClusterManagerConfigurationDocumentErroringRawIterator(err error) ClusterManagerConfigurationDocumentRawIterator {
	return &fakeClusterManagerConfigurationDocumentErroringRawIterator{err: err}
}

type fakeClusterManagerConfigurationDocumentErroringRawIterator struct {
	err error
}

func (i *fakeClusterManagerConfigurationDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.ClusterManagerConfigurationDocuments, error) {
	return nil, i.err
}

func (i *fakeClusterManagerConfigurationDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeClusterManagerConfigurationDocumentErroringRawIterator) Continuation() string {
	return ""
}
