// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakeOpenShiftVersionDocumentTriggerHandler func(context.Context, *pkg.OpenShiftVersionDocument) error
type fakeOpenShiftVersionDocumentQueryHandler func(OpenShiftVersionDocumentClient, *Query, *Options) OpenShiftVersionDocumentRawIterator

var _ OpenShiftVersionDocumentClient = &FakeOpenShiftVersionDocumentClient{}

// NewFakeOpenShiftVersionDocumentClient returns a FakeOpenShiftVersionDocumentClient
func NewFakeOpenShiftVersionDocumentClient(h *codec.JsonHandle) *FakeOpenShiftVersionDocumentClient {
	return &FakeOpenShiftVersionDocumentClient{
		jsonHandle:                h,
		openShiftVersionDocuments: make(map[string]*pkg.OpenShiftVersionDocument),
		triggerHandlers:           make(map[string]fakeOpenShiftVersionDocumentTriggerHandler),
		queryHandlers:             make(map[string]fakeOpenShiftVersionDocumentQueryHandler),
	}
}

// FakeOpenShiftVersionDocumentClient is a FakeOpenShiftVersionDocumentClient
type FakeOpenShiftVersionDocumentClient struct {
	lock                      sync.RWMutex
	jsonHandle                *codec.JsonHandle
	openShiftVersionDocuments map[string]*pkg.OpenShiftVersionDocument
	triggerHandlers           map[string]fakeOpenShiftVersionDocumentTriggerHandler
	queryHandlers             map[string]fakeOpenShiftVersionDocumentQueryHandler
	sorter                    func([]*pkg.OpenShiftVersionDocument)
	etag                      int

	// returns true if documents conflict
	conflictChecker func(*pkg.OpenShiftVersionDocument, *pkg.OpenShiftVersionDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

// SetError sets or unsets an error that will be returned on any
// FakeOpenShiftVersionDocumentClient method invocation
func (c *FakeOpenShiftVersionDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakeOpenShiftVersionDocumentClient) SetSorter(sorter func([]*pkg.OpenShiftVersionDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a OpenShiftVersionDocument
func (c *FakeOpenShiftVersionDocumentClient) SetConflictChecker(conflictChecker func(*pkg.OpenShiftVersionDocument, *pkg.OpenShiftVersionDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakeOpenShiftVersionDocumentClient) SetTriggerHandler(triggerName string, trigger fakeOpenShiftVersionDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakeOpenShiftVersionDocumentClient) SetQueryHandler(queryName string, query fakeOpenShiftVersionDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakeOpenShiftVersionDocumentClient) deepCopy(openShiftVersionDocument *pkg.OpenShiftVersionDocument) (*pkg.OpenShiftVersionDocument, error) {
	var b []byte
	err := codec.NewEncoderBytes(&b, c.jsonHandle).Encode(openShiftVersionDocument)
	if err != nil {
		return nil, err
	}

	openShiftVersionDocument = nil
	err = codec.NewDecoderBytes(b, c.jsonHandle).Decode(&openShiftVersionDocument)
	if err != nil {
		return nil, err
	}

	return openShiftVersionDocument, nil
}

func (c *FakeOpenShiftVersionDocumentClient) apply(ctx context.Context, partitionkey string, openShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options, isCreate bool) (*pkg.OpenShiftVersionDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	openShiftVersionDocument, err := c.deepCopy(openShiftVersionDocument) // copy now because pretriggers can mutate openShiftVersionDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, openShiftVersionDocument, options)
		if err != nil {
			return nil, err
		}
	}

	existingOpenShiftVersionDocument, exists := c.openShiftVersionDocuments[openShiftVersionDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate {
		if !exists {
			return nil, &Error{StatusCode: http.StatusNotFound}
		}

		if openShiftVersionDocument.ETag != existingOpenShiftVersionDocument.ETag {
			return nil, &Error{StatusCode: http.StatusPreconditionFailed}
		}
	}

	if c.conflictChecker != nil {
		for _, openShiftVersionDocumentToCheck := range c.openShiftVersionDocuments {
			if c.conflictChecker(openShiftVersionDocumentToCheck, openShiftVersionDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	openShiftVersionDocument.ETag = fmt.Sprint(c.etag)
	c.etag++

	c.openShiftVersionDocuments[openShiftVersionDocument.ID] = openShiftVersionDocument

	return c.deepCopy(openShiftVersionDocument)
}

// Create creates a OpenShiftVersionDocument in the database
func (c *FakeOpenShiftVersionDocumentClient) Create(ctx context.Context, partitionkey string, openShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options) (*pkg.OpenShiftVersionDocument, error) {
	return c.apply(ctx, partitionkey, openShiftVersionDocument, options, true)
}

// Replace replaces a OpenShiftVersionDocument in the database
func (c *FakeOpenShiftVersionDocumentClient) Replace(ctx context.Context, partitionkey string, openShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options) (*pkg.OpenShiftVersionDocument, error) {
	return c.apply(ctx, partitionkey, openShiftVersionDocument, options, false)
}

// List returns a OpenShiftVersionDocumentIterator to list all OpenShiftVersionDocuments in the database
func (c *FakeOpenShiftVersionDocumentClient) List(*Options) OpenShiftVersionDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeOpenShiftVersionDocumentErroringRawIterator(c.err)
	}

	openShiftVersionDocuments := make([]*pkg.OpenShiftVersionDocument, 0, len(c.openShiftVersionDocuments))
	for _, openShiftVersionDocument := range c.openShiftVersionDocuments {
		openShiftVersionDocument, err := c.deepCopy(openShiftVersionDocument)
		if err != nil {
			return NewFakeOpenShiftVersionDocumentErroringRawIterator(err)
		}
		openShiftVersionDocuments = append(openShiftVersionDocuments, openShiftVersionDocument)
	}

	if c.sorter != nil {
		c.sorter(openShiftVersionDocuments)
	}

	return NewFakeOpenShiftVersionDocumentIterator(openShiftVersionDocuments, 0)
}

// ListAll lists all OpenShiftVersionDocuments in the database
func (c *FakeOpenShiftVersionDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.OpenShiftVersionDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a OpenShiftVersionDocument from the database
func (c *FakeOpenShiftVersionDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.OpenShiftVersionDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	openShiftVersionDocument, exists := c.openShiftVersionDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.deepCopy(openShiftVersionDocument)
}

// Delete deletes a OpenShiftVersionDocument from the database
func (c *FakeOpenShiftVersionDocumentClient) Delete(ctx context.Context, partitionKey string, openShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.openShiftVersionDocuments[openShiftVersionDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.openShiftVersionDocuments, openShiftVersionDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakeOpenShiftVersionDocumentClient) ChangeFeed(*Options) OpenShiftVersionDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeOpenShiftVersionDocumentErroringRawIterator(c.err)
	}

	return NewFakeOpenShiftVersionDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakeOpenShiftVersionDocumentClient) processPreTriggers(ctx context.Context, openShiftVersionDocument *pkg.OpenShiftVersionDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			c.lock.Unlock()
			err := triggerHandler(ctx, openShiftVersionDocument)
			c.lock.Lock()
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakeOpenShiftVersionDocumentClient) Query(name string, query *Query, options *Options) OpenShiftVersionDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeOpenShiftVersionDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		c.lock.RUnlock()
		i := queryHandler(c, query, options)
		c.lock.RLock()
		return i
	}

	return NewFakeOpenShiftVersionDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakeOpenShiftVersionDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.OpenShiftVersionDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakeOpenShiftVersionDocumentIterator(openShiftVersionDocuments []*pkg.OpenShiftVersionDocument, continuation int) OpenShiftVersionDocumentRawIterator {
	return &fakeOpenShiftVersionDocumentIterator{openShiftVersionDocuments: openShiftVersionDocuments, continuation: continuation}
}

type fakeOpenShiftVersionDocumentIterator struct {
	openShiftVersionDocuments []*pkg.OpenShiftVersionDocument
	continuation              int
	done                      bool
}

func (i *fakeOpenShiftVersionDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakeOpenShiftVersionDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.OpenShiftVersionDocuments, error) {
	if i.done {
		return nil, nil
	}

	var openShiftVersionDocuments []*pkg.OpenShiftVersionDocument
	if maxItemCount == -1 {
		openShiftVersionDocuments = i.openShiftVersionDocuments[i.continuation:]
		i.continuation = len(i.openShiftVersionDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.openShiftVersionDocuments) {
			max = len(i.openShiftVersionDocuments)
		}
		openShiftVersionDocuments = i.openShiftVersionDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.OpenShiftVersionDocuments{
		OpenShiftVersionDocuments: openShiftVersionDocuments,
		Count:                     len(openShiftVersionDocuments),
	}, nil
}

func (i *fakeOpenShiftVersionDocumentIterator) Continuation() string {
	if i.continuation >= len(i.openShiftVersionDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakeOpenShiftVersionDocumentErroringRawIterator returns a OpenShiftVersionDocumentRawIterator which
// whose methods return the given error
func NewFakeOpenShiftVersionDocumentErroringRawIterator(err error) OpenShiftVersionDocumentRawIterator {
	return &fakeOpenShiftVersionDocumentErroringRawIterator{err: err}
}

type fakeOpenShiftVersionDocumentErroringRawIterator struct {
	err error
}

func (i *fakeOpenShiftVersionDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.OpenShiftVersionDocuments, error) {
	return nil, i.err
}

func (i *fakeOpenShiftVersionDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeOpenShiftVersionDocumentErroringRawIterator) Continuation() string {
	return ""
}
