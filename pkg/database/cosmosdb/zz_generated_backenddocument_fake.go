// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakeBackendDocumentTriggerHandler func(context.Context, *pkg.BackendDocument) error
type fakeBackendDocumentQueryHandler func(BackendDocumentClient, *Query, *Options) BackendDocumentRawIterator

var _ BackendDocumentClient = &FakeBackendDocumentClient{}

// NewFakeBackendDocumentClient returns a FakeBackendDocumentClient
func NewFakeBackendDocumentClient(h *codec.JsonHandle) *FakeBackendDocumentClient {
	return &FakeBackendDocumentClient{
		jsonHandle:       h,
		backendDocuments: make(map[string]*pkg.BackendDocument),
		triggerHandlers:  make(map[string]fakeBackendDocumentTriggerHandler),
		queryHandlers:    make(map[string]fakeBackendDocumentQueryHandler),
	}
}

// FakeBackendDocumentClient is a FakeBackendDocumentClient
type FakeBackendDocumentClient struct {
	lock             sync.RWMutex
	jsonHandle       *codec.JsonHandle
	backendDocuments map[string]*pkg.BackendDocument
	triggerHandlers  map[string]fakeBackendDocumentTriggerHandler
	queryHandlers    map[string]fakeBackendDocumentQueryHandler
	sorter           func([]*pkg.BackendDocument)
	etag             int

	// returns true if documents conflict
	conflictChecker func(*pkg.BackendDocument, *pkg.BackendDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

// SetError sets or unsets an error that will be returned on any
// FakeBackendDocumentClient method invocation
func (c *FakeBackendDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakeBackendDocumentClient) SetSorter(sorter func([]*pkg.BackendDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a BackendDocument
func (c *FakeBackendDocumentClient) SetConflictChecker(conflictChecker func(*pkg.BackendDocument, *pkg.BackendDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakeBackendDocumentClient) SetTriggerHandler(triggerName string, trigger fakeBackendDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakeBackendDocumentClient) SetQueryHandler(queryName string, query fakeBackendDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakeBackendDocumentClient) deepCopy(backendDocument *pkg.BackendDocument) (*pkg.BackendDocument, error) {
	var b []byte
	err := codec.NewEncoderBytes(&b, c.jsonHandle).Encode(backendDocument)
	if err != nil {
		return nil, err
	}

	backendDocument = nil
	err = codec.NewDecoderBytes(b, c.jsonHandle).Decode(&backendDocument)
	if err != nil {
		return nil, err
	}

	return backendDocument, nil
}

func (c *FakeBackendDocumentClient) apply(ctx context.Context, partitionkey string, backendDocument *pkg.BackendDocument, options *Options, isCreate bool) (*pkg.BackendDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	backendDocument, err := c.deepCopy(backendDocument) // copy now because pretriggers can mutate backendDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, backendDocument, options)
		if err != nil {
			return nil, err
		}
	}

	existingBackendDocument, exists := c.backendDocuments[backendDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate {
		if !exists {
			return nil, &Error{StatusCode: http.StatusNotFound}
		}

		if backendDocument.ETag != existingBackendDocument.ETag {
			return nil, &Error{StatusCode: http.StatusPreconditionFailed}
		}
	}

	if c.conflictChecker != nil {
		for _, backendDocumentToCheck := range c.backendDocuments {
			if c.conflictChecker(backendDocumentToCheck, backendDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	backendDocument.ETag = fmt.Sprint(c.etag)
	c.etag++

	c.backendDocuments[backendDocument.ID] = backendDocument

	return c.deepCopy(backendDocument)
}

// Create creates a BackendDocument in the database
func (c *FakeBackendDocumentClient) Create(ctx context.Context, partitionkey string, backendDocument *pkg.BackendDocument, options *Options) (*pkg.BackendDocument, error) {
	return c.apply(ctx, partitionkey, backendDocument, options, true)
}

// Replace replaces a BackendDocument in the database
func (c *FakeBackendDocumentClient) Replace(ctx context.Context, partitionkey string, backendDocument *pkg.BackendDocument, options *Options) (*pkg.BackendDocument, error) {
	return c.apply(ctx, partitionkey, backendDocument, options, false)
}

// List returns a BackendDocumentIterator to list all BackendDocuments in the database
func (c *FakeBackendDocumentClient) List(*Options) BackendDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeBackendDocumentErroringRawIterator(c.err)
	}

	backendDocuments := make([]*pkg.BackendDocument, 0, len(c.backendDocuments))
	for _, backendDocument := range c.backendDocuments {
		backendDocument, err := c.deepCopy(backendDocument)
		if err != nil {
			return NewFakeBackendDocumentErroringRawIterator(err)
		}
		backendDocuments = append(backendDocuments, backendDocument)
	}

	if c.sorter != nil {
		c.sorter(backendDocuments)
	}

	return NewFakeBackendDocumentIterator(backendDocuments, 0)
}

// ListAll lists all BackendDocuments in the database
func (c *FakeBackendDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.BackendDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a BackendDocument from the database
func (c *FakeBackendDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.BackendDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	backendDocument, exists := c.backendDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.deepCopy(backendDocument)
}

// Delete deletes a BackendDocument from the database
func (c *FakeBackendDocumentClient) Delete(ctx context.Context, partitionKey string, backendDocument *pkg.BackendDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.backendDocuments[backendDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.backendDocuments, backendDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakeBackendDocumentClient) ChangeFeed(*Options) BackendDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeBackendDocumentErroringRawIterator(c.err)
	}

	return NewFakeBackendDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakeBackendDocumentClient) processPreTriggers(ctx context.Context, backendDocument *pkg.BackendDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			c.lock.Unlock()
			err := triggerHandler(ctx, backendDocument)
			c.lock.Lock()
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakeBackendDocumentClient) Query(name string, query *Query, options *Options) BackendDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeBackendDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		c.lock.RUnlock()
		i := queryHandler(c, query, options)
		c.lock.RLock()
		return i
	}

	return NewFakeBackendDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakeBackendDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.BackendDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakeBackendDocumentIterator(backendDocuments []*pkg.BackendDocument, continuation int) BackendDocumentRawIterator {
	return &fakeBackendDocumentIterator{backendDocuments: backendDocuments, continuation: continuation}
}

type fakeBackendDocumentIterator struct {
	backendDocuments []*pkg.BackendDocument
	continuation     int
	done             bool
}

func (i *fakeBackendDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakeBackendDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.BackendDocuments, error) {
	if i.done {
		return nil, nil
	}

	var backendDocuments []*pkg.BackendDocument
	if maxItemCount == -1 {
		backendDocuments = i.backendDocuments[i.continuation:]
		i.continuation = len(i.backendDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.backendDocuments) {
			max = len(i.backendDocuments)
		}
		backendDocuments = i.backendDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.BackendDocuments{
		BackendDocuments: backendDocuments,
		Count:            len(backendDocuments),
	}, nil
}

func (i *fakeBackendDocumentIterator) Continuation() string {
	if i.continuation >= len(i.backendDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakeBackendDocumentErroringRawIterator returns a BackendDocumentRawIterator which
// whose methods return the given error
func NewFakeBackendDocumentErroringRawIterator(err error) BackendDocumentRawIterator {
	return &fakeBackendDocumentErroringRawIterator{err: err}
}

type fakeBackendDocumentErroringRawIterator struct {
	err error
}

func (i *fakeBackendDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.BackendDocuments, error) {
	return nil, i.err
}

func (i *fakeBackendDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeBackendDocumentErroringRawIterator) Continuation() string {
	return ""
}
