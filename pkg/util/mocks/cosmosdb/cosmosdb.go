// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/database/cosmosdb (interfaces: PermissionClient)
//
// Generated by this command:
//
//	mockgen -destination=../../util/mocks/cosmosdb/cosmosdb.go github.com/Azure/ARO-RP/pkg/database/cosmosdb PermissionClient
//

// Package mock_cosmosdb is a generated GoMock package.
package mock_cosmosdb

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	cosmosdb "github.com/Azure/ARO-RP/pkg/database/cosmosdb"
)

// MockPermissionClient is a mock of PermissionClient interface.
type MockPermissionClient struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionClientMockRecorder
}

// MockPermissionClientMockRecorder is the mock recorder for MockPermissionClient.
type MockPermissionClientMockRecorder struct {
	mock *MockPermissionClient
}

// NewMockPermissionClient creates a new mock instance.
func NewMockPermissionClient(ctrl *gomock.Controller) *MockPermissionClient {
	mock := &MockPermissionClient{ctrl: ctrl}
	mock.recorder = &MockPermissionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionClient) EXPECT() *MockPermissionClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionClient) Create(arg0 context.Context, arg1 *cosmosdb.Permission) (*cosmosdb.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*cosmosdb.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPermissionClientMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionClient)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPermissionClient) Delete(arg0 context.Context, arg1 *cosmosdb.Permission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionClientMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionClient)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPermissionClient) Get(arg0 context.Context, arg1 string) (*cosmosdb.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*cosmosdb.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPermissionClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPermissionClient)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockPermissionClient) List() cosmosdb.PermissionIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(cosmosdb.PermissionIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockPermissionClientMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionClient)(nil).List))
}

// ListAll mocks base method.
func (m *MockPermissionClient) ListAll(arg0 context.Context) (*cosmosdb.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].(*cosmosdb.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockPermissionClientMockRecorder) ListAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockPermissionClient)(nil).ListAll), arg0)
}

// Replace mocks base method.
func (m *MockPermissionClient) Replace(arg0 context.Context, arg1 *cosmosdb.Permission) (*cosmosdb.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(*cosmosdb.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockPermissionClientMockRecorder) Replace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockPermissionClient)(nil).Replace), arg0, arg1)
}
