// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/portforward (interfaces: Exec)

// Package mock_portforward is a generated GoMock package.
package mock_portforward

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExec is a mock of Exec interface
type MockExec struct {
	ctrl     *gomock.Controller
	recorder *MockExecMockRecorder
}

// MockExecMockRecorder is the mock recorder for MockExec
type MockExecMockRecorder struct {
	mock *MockExec
}

// NewMockExec creates a new mock instance
func NewMockExec(ctrl *gomock.Controller) *MockExec {
	mock := &MockExec{ctrl: ctrl}
	mock.recorder = &MockExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExec) EXPECT() *MockExecMockRecorder {
	return m.recorder
}

// Stdout mocks base method
func (m *MockExec) Stdout(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stdout indicates an expected call of Stdout
func (mr *MockExecMockRecorder) Stdout(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockExec)(nil).Stdout), arg0, arg1, arg2, arg3, arg4)
}
