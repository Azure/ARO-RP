// Code generated by MockGen. DO NOT EDIT.
// Source: kubeactions.go
//
// Generated by this command:
//
//	mockgen -source kubeactions.go -destination=../../util/mocks/adminactions/kubeactions.go github.com/Azure/ARO-RP/pkg/frontend/adminactions KubeActions
//

// Package mock_adminactions is a generated GoMock package.
package mock_adminactions

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockKubeActions is a mock of KubeActions interface.
type MockKubeActions struct {
	ctrl     *gomock.Controller
	recorder *MockKubeActionsMockRecorder
}

// MockKubeActionsMockRecorder is the mock recorder for MockKubeActions.
type MockKubeActionsMockRecorder struct {
	mock *MockKubeActions
}

// NewMockKubeActions creates a new mock instance.
func NewMockKubeActions(ctrl *gomock.Controller) *MockKubeActions {
	mock := &MockKubeActions{ctrl: ctrl}
	mock.recorder = &MockKubeActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeActions) EXPECT() *MockKubeActionsMockRecorder {
	return m.recorder
}

// ApproveAllCsrs mocks base method.
func (m *MockKubeActions) ApproveAllCsrs(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveAllCsrs", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveAllCsrs indicates an expected call of ApproveAllCsrs.
func (mr *MockKubeActionsMockRecorder) ApproveAllCsrs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveAllCsrs", reflect.TypeOf((*MockKubeActions)(nil).ApproveAllCsrs), ctx)
}

// ApproveCsr mocks base method.
func (m *MockKubeActions) ApproveCsr(ctx context.Context, csrName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveCsr", ctx, csrName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveCsr indicates an expected call of ApproveCsr.
func (mr *MockKubeActionsMockRecorder) ApproveCsr(ctx, csrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveCsr", reflect.TypeOf((*MockKubeActions)(nil).ApproveCsr), ctx, csrName)
}

// CordonNode mocks base method.
func (m *MockKubeActions) CordonNode(ctx context.Context, nodeName string, unschedulable bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CordonNode", ctx, nodeName, unschedulable)
	ret0, _ := ret[0].(error)
	return ret0
}

// CordonNode indicates an expected call of CordonNode.
func (mr *MockKubeActionsMockRecorder) CordonNode(ctx, nodeName, unschedulable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CordonNode", reflect.TypeOf((*MockKubeActions)(nil).CordonNode), ctx, nodeName, unschedulable)
}

// DrainNode mocks base method.
func (m *MockKubeActions) DrainNode(ctx context.Context, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrainNode", ctx, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DrainNode indicates an expected call of DrainNode.
func (mr *MockKubeActionsMockRecorder) DrainNode(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainNode", reflect.TypeOf((*MockKubeActions)(nil).DrainNode), ctx, nodeName)
}

// KubeCreateOrUpdate mocks base method.
func (m *MockKubeActions) KubeCreateOrUpdate(ctx context.Context, obj *unstructured.Unstructured) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeCreateOrUpdate", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// KubeCreateOrUpdate indicates an expected call of KubeCreateOrUpdate.
func (mr *MockKubeActionsMockRecorder) KubeCreateOrUpdate(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeCreateOrUpdate", reflect.TypeOf((*MockKubeActions)(nil).KubeCreateOrUpdate), ctx, obj)
}

// KubeDelete mocks base method.
func (m *MockKubeActions) KubeDelete(ctx context.Context, groupKind, namespace, name string, force bool, propagationPolicy *v1.DeletionPropagation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeDelete", ctx, groupKind, namespace, name, force, propagationPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// KubeDelete indicates an expected call of KubeDelete.
func (mr *MockKubeActionsMockRecorder) KubeDelete(ctx, groupKind, namespace, name, force, propagationPolicy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeDelete", reflect.TypeOf((*MockKubeActions)(nil).KubeDelete), ctx, groupKind, namespace, name, force, propagationPolicy)
}

// KubeGet mocks base method.
func (m *MockKubeActions) KubeGet(ctx context.Context, groupKind, namespace, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeGet", ctx, groupKind, namespace, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubeGet indicates an expected call of KubeGet.
func (mr *MockKubeActionsMockRecorder) KubeGet(ctx, groupKind, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeGet", reflect.TypeOf((*MockKubeActions)(nil).KubeGet), ctx, groupKind, namespace, name)
}

// KubeGetPodLogs mocks base method.
func (m *MockKubeActions) KubeGetPodLogs(ctx context.Context, namespace, name, containerName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeGetPodLogs", ctx, namespace, name, containerName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubeGetPodLogs indicates an expected call of KubeGetPodLogs.
func (mr *MockKubeActionsMockRecorder) KubeGetPodLogs(ctx, namespace, name, containerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeGetPodLogs", reflect.TypeOf((*MockKubeActions)(nil).KubeGetPodLogs), ctx, namespace, name, containerName)
}

// KubeList mocks base method.
func (m *MockKubeActions) KubeList(ctx context.Context, groupKind, namespace string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeList", ctx, groupKind, namespace)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubeList indicates an expected call of KubeList.
func (mr *MockKubeActionsMockRecorder) KubeList(ctx, groupKind, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeList", reflect.TypeOf((*MockKubeActions)(nil).KubeList), ctx, groupKind, namespace)
}

// KubeWatch mocks base method.
func (m *MockKubeActions) KubeWatch(ctx context.Context, o *unstructured.Unstructured, label string) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeWatch", ctx, o, label)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubeWatch indicates an expected call of KubeWatch.
func (mr *MockKubeActionsMockRecorder) KubeWatch(ctx, o, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeWatch", reflect.TypeOf((*MockKubeActions)(nil).KubeWatch), ctx, o, label)
}

// ResolveGVR mocks base method.
func (m *MockKubeActions) ResolveGVR(groupKind, optionalVersion string) (schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveGVR", groupKind, optionalVersion)
	ret0, _ := ret[0].(schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveGVR indicates an expected call of ResolveGVR.
func (mr *MockKubeActionsMockRecorder) ResolveGVR(groupKind, optionalVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveGVR", reflect.TypeOf((*MockKubeActions)(nil).ResolveGVR), groupKind, optionalVersion)
}
