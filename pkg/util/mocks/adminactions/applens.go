// Code generated by MockGen. DO NOT EDIT.
// Source: applens.go
//
// Generated by this command:
//
//	mockgen -source applens.go -destination=../../util/mocks/adminactions/applens.go github.com/Azure/ARO-RP/pkg/frontend/adminactions AppLensActions
//

// Package mock_adminactions is a generated GoMock package.
package mock_adminactions

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAppLensActions is a mock of AppLensActions interface.
type MockAppLensActions struct {
	ctrl     *gomock.Controller
	recorder *MockAppLensActionsMockRecorder
}

// MockAppLensActionsMockRecorder is the mock recorder for MockAppLensActions.
type MockAppLensActionsMockRecorder struct {
	mock *MockAppLensActions
}

// NewMockAppLensActions creates a new mock instance.
func NewMockAppLensActions(ctrl *gomock.Controller) *MockAppLensActions {
	mock := &MockAppLensActions{ctrl: ctrl}
	mock.recorder = &MockAppLensActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppLensActions) EXPECT() *MockAppLensActionsMockRecorder {
	return m.recorder
}

// AppLensGetDetector mocks base method.
func (m *MockAppLensActions) AppLensGetDetector(ctx context.Context, detectorId string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppLensGetDetector", ctx, detectorId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppLensGetDetector indicates an expected call of AppLensGetDetector.
func (mr *MockAppLensActionsMockRecorder) AppLensGetDetector(ctx, detectorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppLensGetDetector", reflect.TypeOf((*MockAppLensActions)(nil).AppLensGetDetector), ctx, detectorId)
}

// AppLensListDetectors mocks base method.
func (m *MockAppLensActions) AppLensListDetectors(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppLensListDetectors", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppLensListDetectors indicates an expected call of AppLensListDetectors.
func (mr *MockAppLensActionsMockRecorder) AppLensListDetectors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppLensListDetectors", reflect.TypeOf((*MockAppLensActions)(nil).AppLensListDetectors), ctx)
}
