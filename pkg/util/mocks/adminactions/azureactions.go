// Code generated by MockGen. DO NOT EDIT.
// Source: azureactions.go
//
// Generated by this command:
//
//	mockgen -source azureactions.go -destination=../../util/mocks/adminactions/azureactions.go github.com/Azure/ARO-RP/pkg/frontend/adminactions AzureActions
//

// Package mock_adminactions is a generated GoMock package.
package mock_adminactions

import (
	context "context"
	io "io"
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2020-06-01/compute"
	features "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-07-01/features"
	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureActions is a mock of AzureActions interface.
type MockAzureActions struct {
	ctrl     *gomock.Controller
	recorder *MockAzureActionsMockRecorder
	isgomock struct{}
}

// MockAzureActionsMockRecorder is the mock recorder for MockAzureActions.
type MockAzureActionsMockRecorder struct {
	mock *MockAzureActions
}

// NewMockAzureActions creates a new mock instance.
func NewMockAzureActions(ctrl *gomock.Controller) *MockAzureActions {
	mock := &MockAzureActions{ctrl: ctrl}
	mock.recorder = &MockAzureActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureActions) EXPECT() *MockAzureActionsMockRecorder {
	return m.recorder
}

// GroupResourceList mocks base method.
func (m *MockAzureActions) GroupResourceList(ctx context.Context) ([]features.GenericResourceExpanded, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupResourceList", ctx)
	ret0, _ := ret[0].([]features.GenericResourceExpanded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupResourceList indicates an expected call of GroupResourceList.
func (mr *MockAzureActionsMockRecorder) GroupResourceList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupResourceList", reflect.TypeOf((*MockAzureActions)(nil).GroupResourceList), ctx)
}

// NICReconcileFailedState mocks base method.
func (m *MockAzureActions) NICReconcileFailedState(ctx context.Context, nicName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NICReconcileFailedState", ctx, nicName)
	ret0, _ := ret[0].(error)
	return ret0
}

// NICReconcileFailedState indicates an expected call of NICReconcileFailedState.
func (mr *MockAzureActionsMockRecorder) NICReconcileFailedState(ctx, nicName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NICReconcileFailedState", reflect.TypeOf((*MockAzureActions)(nil).NICReconcileFailedState), ctx, nicName)
}

// ResourceDeleteAndWait mocks base method.
func (m *MockAzureActions) ResourceDeleteAndWait(ctx context.Context, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceDeleteAndWait", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResourceDeleteAndWait indicates an expected call of ResourceDeleteAndWait.
func (mr *MockAzureActionsMockRecorder) ResourceDeleteAndWait(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceDeleteAndWait", reflect.TypeOf((*MockAzureActions)(nil).ResourceDeleteAndWait), ctx, resourceID)
}

// ResourceGroupHasVM mocks base method.
func (m *MockAzureActions) ResourceGroupHasVM(ctx context.Context, vmName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceGroupHasVM", ctx, vmName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceGroupHasVM indicates an expected call of ResourceGroupHasVM.
func (mr *MockAzureActionsMockRecorder) ResourceGroupHasVM(ctx, vmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceGroupHasVM", reflect.TypeOf((*MockAzureActions)(nil).ResourceGroupHasVM), ctx, vmName)
}

// ResourcesList mocks base method.
func (m *MockAzureActions) ResourcesList(ctx context.Context, resources []features.GenericResourceExpanded, writer io.WriteCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesList", ctx, resources, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResourcesList indicates an expected call of ResourcesList.
func (mr *MockAzureActionsMockRecorder) ResourcesList(ctx, resources, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesList", reflect.TypeOf((*MockAzureActions)(nil).ResourcesList), ctx, resources, writer)
}

// VMRedeployAndWait mocks base method.
func (m *MockAzureActions) VMRedeployAndWait(ctx context.Context, vmName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMRedeployAndWait", ctx, vmName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VMRedeployAndWait indicates an expected call of VMRedeployAndWait.
func (mr *MockAzureActionsMockRecorder) VMRedeployAndWait(ctx, vmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMRedeployAndWait", reflect.TypeOf((*MockAzureActions)(nil).VMRedeployAndWait), ctx, vmName)
}

// VMResize mocks base method.
func (m *MockAzureActions) VMResize(ctx context.Context, vmName, vmSize string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMResize", ctx, vmName, vmSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// VMResize indicates an expected call of VMResize.
func (mr *MockAzureActionsMockRecorder) VMResize(ctx, vmName, vmSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMResize", reflect.TypeOf((*MockAzureActions)(nil).VMResize), ctx, vmName, vmSize)
}

// VMSerialConsole mocks base method.
func (m *MockAzureActions) VMSerialConsole(ctx context.Context, log *logrus.Entry, vmName string, target io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMSerialConsole", ctx, log, vmName, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// VMSerialConsole indicates an expected call of VMSerialConsole.
func (mr *MockAzureActionsMockRecorder) VMSerialConsole(ctx, log, vmName, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMSerialConsole", reflect.TypeOf((*MockAzureActions)(nil).VMSerialConsole), ctx, log, vmName, target)
}

// VMSizeList mocks base method.
func (m *MockAzureActions) VMSizeList(ctx context.Context) ([]compute.ResourceSku, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMSizeList", ctx)
	ret0, _ := ret[0].([]compute.ResourceSku)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VMSizeList indicates an expected call of VMSizeList.
func (mr *MockAzureActionsMockRecorder) VMSizeList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMSizeList", reflect.TypeOf((*MockAzureActions)(nil).VMSizeList), ctx)
}

// VMStartAndWait mocks base method.
func (m *MockAzureActions) VMStartAndWait(ctx context.Context, vmName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMStartAndWait", ctx, vmName)
	ret0, _ := ret[0].(error)
	return ret0
}

// VMStartAndWait indicates an expected call of VMStartAndWait.
func (mr *MockAzureActionsMockRecorder) VMStartAndWait(ctx, vmName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMStartAndWait", reflect.TypeOf((*MockAzureActions)(nil).VMStartAndWait), ctx, vmName)
}

// VMStopAndWait mocks base method.
func (m *MockAzureActions) VMStopAndWait(ctx context.Context, vmName string, deallocateVM bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VMStopAndWait", ctx, vmName, deallocateVM)
	ret0, _ := ret[0].(error)
	return ret0
}

// VMStopAndWait indicates an expected call of VMStopAndWait.
func (mr *MockAzureActionsMockRecorder) VMStopAndWait(ctx, vmName, deallocateVM any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VMStopAndWait", reflect.TypeOf((*MockAzureActions)(nil).VMStopAndWait), ctx, vmName, deallocateVM)
}

// WriteToStream mocks base method.
func (m *MockAzureActions) WriteToStream(ctx context.Context, writer io.WriteCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToStream", ctx, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToStream indicates an expected call of WriteToStream.
func (mr *MockAzureActionsMockRecorder) WriteToStream(ctx, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToStream", reflect.TypeOf((*MockAzureActions)(nil).WriteToStream), ctx, writer)
}
