// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/subnet (interfaces: Manager,KubeManager)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/subnet/subnet.go github.com/Azure/ARO-RP/pkg/util/subnet Manager,KubeManager
//

// Package mock_subnet is a generated GoMock package.
package mock_subnet

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2020-08-01/network"

	subnet "github.com/Azure/ARO-RP/pkg/util/subnet"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockManager) CreateOrUpdate(ctx context.Context, subnetID string, arg2 *network.Subnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, subnetID, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockManagerMockRecorder) CreateOrUpdate(ctx, subnetID, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockManager)(nil).CreateOrUpdate), ctx, subnetID, arg2)
}

// Get mocks base method.
func (m *MockManager) Get(ctx context.Context, subnetID string) (*network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, subnetID)
	ret0, _ := ret[0].(*network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagerMockRecorder) Get(ctx, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManager)(nil).Get), ctx, subnetID)
}

// GetAll mocks base method.
func (m *MockManager) GetAll(ctx context.Context, subnetIds []string) ([]*network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, subnetIds)
	ret0, _ := ret[0].([]*network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockManagerMockRecorder) GetAll(ctx, subnetIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockManager)(nil).GetAll), ctx, subnetIds)
}

// MockKubeManager is a mock of KubeManager interface.
type MockKubeManager struct {
	ctrl     *gomock.Controller
	recorder *MockKubeManagerMockRecorder
	isgomock struct{}
}

// MockKubeManagerMockRecorder is the mock recorder for MockKubeManager.
type MockKubeManagerMockRecorder struct {
	mock *MockKubeManager
}

// NewMockKubeManager creates a new mock instance.
func NewMockKubeManager(ctrl *gomock.Controller) *MockKubeManager {
	mock := &MockKubeManager{ctrl: ctrl}
	mock.recorder = &MockKubeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeManager) EXPECT() *MockKubeManagerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockKubeManager) List(ctx context.Context) ([]subnet.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]subnet.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKubeManagerMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKubeManager)(nil).List), ctx)
}
