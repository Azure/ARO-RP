// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/subnet (interfaces: KubeManager)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/subnet/subnet.go github.com/Azure/ARO-RP/pkg/util/subnet KubeManager
//

// Package mock_subnet is a generated GoMock package.
package mock_subnet

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	subnet "github.com/Azure/ARO-RP/pkg/api/util/subnet"
)

// MockKubeManager is a mock of KubeManager interface.
type MockKubeManager struct {
	ctrl     *gomock.Controller
	recorder *MockKubeManagerMockRecorder
	isgomock struct{}
}

// MockKubeManagerMockRecorder is the mock recorder for MockKubeManager.
type MockKubeManagerMockRecorder struct {
	mock *MockKubeManager
}

// NewMockKubeManager creates a new mock instance.
func NewMockKubeManager(ctrl *gomock.Controller) *MockKubeManager {
	mock := &MockKubeManager{ctrl: ctrl}
	mock.recorder = &MockKubeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeManager) EXPECT() *MockKubeManagerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockKubeManager) List(ctx context.Context) ([]subnet.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]subnet.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKubeManagerMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKubeManager)(nil).List), ctx)
}
