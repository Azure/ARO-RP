// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/storage (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/storage/storage.go github.com/Azure/ARO-RP/pkg/util/storage Manager
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	armstorage "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"
	gomock "go.uber.org/mock/gomock"

	azblob "github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/azblob"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// BlobService mocks base method.
func (m *MockManager) BlobService(ctx context.Context, resourceGroup, account string, p armstorage.Permissions, r armstorage.SignedResourceTypes) (azblob.BlobsClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlobService", ctx, resourceGroup, account, p, r)
	ret0, _ := ret[0].(azblob.BlobsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobService indicates an expected call of BlobService.
func (mr *MockManagerMockRecorder) BlobService(ctx, resourceGroup, account, p, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobService", reflect.TypeOf((*MockManager)(nil).BlobService), ctx, resourceGroup, account, p, r)
}
