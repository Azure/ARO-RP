// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/storage (interfaces: BlobStorageClient,Manager)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	io "io"
	reflect "reflect"

	storage0 "github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2021-09-01/storage"
	storage1 "github.com/Azure/azure-sdk-for-go/storage"
	gomock "github.com/golang/mock/gomock"

	storage "github.com/Azure/ARO-RP/pkg/util/storage"
)

// MockBlobStorageClient is a mock of BlobStorageClient interface.
type MockBlobStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlobStorageClientMockRecorder
}

// MockBlobStorageClientMockRecorder is the mock recorder for MockBlobStorageClient.
type MockBlobStorageClientMockRecorder struct {
	mock *MockBlobStorageClient
}

// NewMockBlobStorageClient creates a new mock instance.
func NewMockBlobStorageClient(ctrl *gomock.Controller) *MockBlobStorageClient {
	mock := &MockBlobStorageClient{ctrl: ctrl}
	mock.recorder = &MockBlobStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobStorageClient) EXPECT() *MockBlobStorageClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBlobStorageClient) Get(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlobStorageClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlobStorageClient)(nil).Get), arg0)
}

// GetContainerReference mocks base method.
func (m *MockBlobStorageClient) GetContainerReference(arg0 string) *storage1.Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerReference", arg0)
	ret0, _ := ret[0].(*storage1.Container)
	return ret0
}

// GetContainerReference indicates an expected call of GetContainerReference.
func (mr *MockBlobStorageClientMockRecorder) GetContainerReference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerReference", reflect.TypeOf((*MockBlobStorageClient)(nil).GetContainerReference), arg0)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// BlobService mocks base method.
func (m *MockManager) BlobService(arg0 context.Context, arg1, arg2 string, arg3 storage0.Permissions, arg4 storage0.SignedResourceTypes) (storage.BlobStorageClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlobService", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(storage.BlobStorageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobService indicates an expected call of BlobService.
func (mr *MockManagerMockRecorder) BlobService(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobService", reflect.TypeOf((*MockManager)(nil).BlobService), arg0, arg1, arg2, arg3, arg4)
}
