// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/aad (interfaces: TokenMaker)

// Package mock_aad is a generated GoMock package.
package mock_aad

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"

	api "github.com/Azure/ARO-RP/pkg/api"
	instancemetadata "github.com/Azure/ARO-RP/pkg/util/instancemetadata"
)

// MockTokenMaker is a mock of TokenMaker interface
type MockTokenMaker struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMakerMockRecorder
}

// MockTokenMakerMockRecorder is the mock recorder for MockTokenMaker
type MockTokenMakerMockRecorder struct {
	mock *MockTokenMaker
}

// NewMockTokenMaker creates a new mock instance
func NewMockTokenMaker(ctrl *gomock.Controller) *MockTokenMaker {
	mock := &MockTokenMaker{ctrl: ctrl}
	mock.recorder = &MockTokenMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenMaker) EXPECT() *MockTokenMakerMockRecorder {
	return m.recorder
}

// AuthenticateAndGetToken mocks base method
func (m *MockTokenMaker) AuthenticateAndGetToken(arg0 context.Context, arg1 *logrus.Entry, arg2 *api.OpenShiftCluster, arg3 string) (instancemetadata.ServicePrincipalToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateAndGetToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(instancemetadata.ServicePrincipalToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateAndGetToken indicates an expected call of AuthenticateAndGetToken
func (mr *MockTokenMakerMockRecorder) AuthenticateAndGetToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateAndGetToken", reflect.TypeOf((*MockTokenMaker)(nil).AuthenticateAndGetToken), arg0, arg1, arg2, arg3)
}
