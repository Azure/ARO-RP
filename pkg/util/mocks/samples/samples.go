// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/client-go/samples/clientset/versioned/typed/samples/v1 (interfaces: SamplesV1Interface,ConfigInterface)
//
// Generated by this command:
//
//	mockgen -destination=../util/mocks/samples/samples.go github.com/openshift/client-go/samples/clientset/versioned/typed/samples/v1 SamplesV1Interface,ConfigInterface
//

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	v12 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"

	v1 "github.com/openshift/api/samples/v1"
	v10 "github.com/openshift/client-go/samples/applyconfigurations/samples/v1"
	v11 "github.com/openshift/client-go/samples/clientset/versioned/typed/samples/v1"
)

// MockSamplesV1Interface is a mock of SamplesV1Interface interface.
type MockSamplesV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockSamplesV1InterfaceMockRecorder
	isgomock struct{}
}

// MockSamplesV1InterfaceMockRecorder is the mock recorder for MockSamplesV1Interface.
type MockSamplesV1InterfaceMockRecorder struct {
	mock *MockSamplesV1Interface
}

// NewMockSamplesV1Interface creates a new mock instance.
func NewMockSamplesV1Interface(ctrl *gomock.Controller) *MockSamplesV1Interface {
	mock := &MockSamplesV1Interface{ctrl: ctrl}
	mock.recorder = &MockSamplesV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSamplesV1Interface) EXPECT() *MockSamplesV1InterfaceMockRecorder {
	return m.recorder
}

// Configs mocks base method.
func (m *MockSamplesV1Interface) Configs() v11.ConfigInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configs")
	ret0, _ := ret[0].(v11.ConfigInterface)
	return ret0
}

// Configs indicates an expected call of Configs.
func (mr *MockSamplesV1InterfaceMockRecorder) Configs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configs", reflect.TypeOf((*MockSamplesV1Interface)(nil).Configs))
}

// RESTClient mocks base method.
func (m *MockSamplesV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockSamplesV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockSamplesV1Interface)(nil).RESTClient))
}

// MockConfigInterface is a mock of ConfigInterface interface.
type MockConfigInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigInterfaceMockRecorder
	isgomock struct{}
}

// MockConfigInterfaceMockRecorder is the mock recorder for MockConfigInterface.
type MockConfigInterfaceMockRecorder struct {
	mock *MockConfigInterface
}

// NewMockConfigInterface creates a new mock instance.
func NewMockConfigInterface(ctrl *gomock.Controller) *MockConfigInterface {
	mock := &MockConfigInterface{ctrl: ctrl}
	mock.recorder = &MockConfigInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigInterface) EXPECT() *MockConfigInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockConfigInterface) Apply(ctx context.Context, config *v10.ConfigApplyConfiguration, opts v12.ApplyOptions) (*v1.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, config, opts)
	ret0, _ := ret[0].(*v1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockConfigInterfaceMockRecorder) Apply(ctx, config, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockConfigInterface)(nil).Apply), ctx, config, opts)
}

// ApplyStatus mocks base method.
func (m *MockConfigInterface) ApplyStatus(ctx context.Context, config *v10.ConfigApplyConfiguration, opts v12.ApplyOptions) (*v1.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", ctx, config, opts)
	ret0, _ := ret[0].(*v1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockConfigInterfaceMockRecorder) ApplyStatus(ctx, config, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockConfigInterface)(nil).ApplyStatus), ctx, config, opts)
}

// Create mocks base method.
func (m *MockConfigInterface) Create(ctx context.Context, config *v1.Config, opts v12.CreateOptions) (*v1.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, config, opts)
	ret0, _ := ret[0].(*v1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConfigInterfaceMockRecorder) Create(ctx, config, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfigInterface)(nil).Create), ctx, config, opts)
}

// Delete mocks base method.
func (m *MockConfigInterface) Delete(ctx context.Context, name string, opts v12.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConfigInterfaceMockRecorder) Delete(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConfigInterface)(nil).Delete), ctx, name, opts)
}

// DeleteCollection mocks base method.
func (m *MockConfigInterface) DeleteCollection(ctx context.Context, opts v12.DeleteOptions, listOpts v12.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, opts, listOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockConfigInterfaceMockRecorder) DeleteCollection(ctx, opts, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockConfigInterface)(nil).DeleteCollection), ctx, opts, listOpts)
}

// Get mocks base method.
func (m *MockConfigInterface) Get(ctx context.Context, name string, opts v12.GetOptions) (*v1.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigInterfaceMockRecorder) Get(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigInterface)(nil).Get), ctx, name, opts)
}

// List mocks base method.
func (m *MockConfigInterface) List(ctx context.Context, opts v12.ListOptions) (*v1.ConfigList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1.ConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockConfigInterfaceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConfigInterface)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockConfigInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v12.PatchOptions, subresources ...string) (*v1.Config, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockConfigInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockConfigInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockConfigInterface) Update(ctx context.Context, config *v1.Config, opts v12.UpdateOptions) (*v1.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, config, opts)
	ret0, _ := ret[0].(*v1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockConfigInterfaceMockRecorder) Update(ctx, config, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigInterface)(nil).Update), ctx, config, opts)
}

// UpdateStatus mocks base method.
func (m *MockConfigInterface) UpdateStatus(ctx context.Context, config *v1.Config, opts v12.UpdateOptions) (*v1.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, config, opts)
	ret0, _ := ret[0].(*v1.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockConfigInterfaceMockRecorder) UpdateStatus(ctx, config, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockConfigInterface)(nil).UpdateStatus), ctx, config, opts)
}

// Watch mocks base method.
func (m *MockConfigInterface) Watch(ctx context.Context, opts v12.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockConfigInterfaceMockRecorder) Watch(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockConfigInterface)(nil).Watch), ctx, opts)
}
