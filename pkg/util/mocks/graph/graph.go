// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/cluster/graph (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=../../util/mocks/graph/graph.go github.com/Azure/ARO-RP/pkg/cluster/graph Manager
//

// Package mock_graph is a generated GoMock package.
package mock_graph

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	graph "github.com/Azure/ARO-RP/pkg/cluster/graph"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockManager) Exists(ctx context.Context, resourceGroup, account string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, resourceGroup, account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockManagerMockRecorder) Exists(ctx, resourceGroup, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockManager)(nil).Exists), ctx, resourceGroup, account)
}

// LoadPersisted mocks base method.
func (m *MockManager) LoadPersisted(ctx context.Context, resourceGroup, account string) (graph.PersistedGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPersisted", ctx, resourceGroup, account)
	ret0, _ := ret[0].(graph.PersistedGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPersisted indicates an expected call of LoadPersisted.
func (mr *MockManagerMockRecorder) LoadPersisted(ctx, resourceGroup, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPersisted", reflect.TypeOf((*MockManager)(nil).LoadPersisted), ctx, resourceGroup, account)
}
