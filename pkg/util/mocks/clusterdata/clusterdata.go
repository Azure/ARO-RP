// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/clusterdata (interfaces: ClusterEnricher,BestEffortEnricher)

// Package mock_clusterdata is a generated GoMock package.
package mock_clusterdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	versioned "github.com/openshift/client-go/config/clientset/versioned"
	versioned0 "github.com/openshift/client-go/machine/clientset/versioned"
	versioned1 "github.com/openshift/client-go/operator/clientset/versioned"
	logrus "github.com/sirupsen/logrus"
	kubernetes "k8s.io/client-go/kubernetes"

	api "github.com/Azure/ARO-RP/pkg/api"
)

// MockClusterEnricher is a mock of ClusterEnricher interface.
type MockClusterEnricher struct {
	ctrl     *gomock.Controller
	recorder *MockClusterEnricherMockRecorder
}

// MockClusterEnricherMockRecorder is the mock recorder for MockClusterEnricher.
type MockClusterEnricherMockRecorder struct {
	mock *MockClusterEnricher
}

// NewMockClusterEnricher creates a new mock instance.
func NewMockClusterEnricher(ctrl *gomock.Controller) *MockClusterEnricher {
	mock := &MockClusterEnricher{ctrl: ctrl}
	mock.recorder = &MockClusterEnricherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterEnricher) EXPECT() *MockClusterEnricherMockRecorder {
	return m.recorder
}

// Enrich mocks base method.
func (m *MockClusterEnricher) Enrich(arg0 context.Context, arg1 *logrus.Entry, arg2 *api.OpenShiftCluster, arg3 kubernetes.Interface, arg4 versioned.Interface, arg5 versioned0.Interface, arg6 versioned1.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enrich", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enrich indicates an expected call of Enrich.
func (mr *MockClusterEnricherMockRecorder) Enrich(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enrich", reflect.TypeOf((*MockClusterEnricher)(nil).Enrich), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SetDefaults mocks base method.
func (m *MockClusterEnricher) SetDefaults(arg0 *api.OpenShiftCluster) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaults", arg0)
}

// SetDefaults indicates an expected call of SetDefaults.
func (mr *MockClusterEnricherMockRecorder) SetDefaults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaults", reflect.TypeOf((*MockClusterEnricher)(nil).SetDefaults), arg0)
}

// MockBestEffortEnricher is a mock of BestEffortEnricher interface.
type MockBestEffortEnricher struct {
	ctrl     *gomock.Controller
	recorder *MockBestEffortEnricherMockRecorder
}

// MockBestEffortEnricherMockRecorder is the mock recorder for MockBestEffortEnricher.
type MockBestEffortEnricherMockRecorder struct {
	mock *MockBestEffortEnricher
}

// NewMockBestEffortEnricher creates a new mock instance.
func NewMockBestEffortEnricher(ctrl *gomock.Controller) *MockBestEffortEnricher {
	mock := &MockBestEffortEnricher{ctrl: ctrl}
	mock.recorder = &MockBestEffortEnricherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBestEffortEnricher) EXPECT() *MockBestEffortEnricherMockRecorder {
	return m.recorder
}

// Enrich mocks base method.
func (m *MockBestEffortEnricher) Enrich(arg0 context.Context, arg1 *logrus.Entry, arg2 ...*api.OpenShiftCluster) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Enrich", varargs...)
}

// Enrich indicates an expected call of Enrich.
func (mr *MockBestEffortEnricherMockRecorder) Enrich(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enrich", reflect.TypeOf((*MockBestEffortEnricher)(nil).Enrich), varargs...)
}
