// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/clusterdata (interfaces: OpenShiftClusterEnricher)

// Package mock_clusterdata is a generated GoMock package.
package mock_clusterdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/Azure/ARO-RP/pkg/api"
)

// MockOpenShiftClusterEnricher is a mock of OpenShiftClusterEnricher interface
type MockOpenShiftClusterEnricher struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftClusterEnricherMockRecorder
}

// MockOpenShiftClusterEnricherMockRecorder is the mock recorder for MockOpenShiftClusterEnricher
type MockOpenShiftClusterEnricherMockRecorder struct {
	mock *MockOpenShiftClusterEnricher
}

// NewMockOpenShiftClusterEnricher creates a new mock instance
func NewMockOpenShiftClusterEnricher(ctrl *gomock.Controller) *MockOpenShiftClusterEnricher {
	mock := &MockOpenShiftClusterEnricher{ctrl: ctrl}
	mock.recorder = &MockOpenShiftClusterEnricherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenShiftClusterEnricher) EXPECT() *MockOpenShiftClusterEnricherMockRecorder {
	return m.recorder
}

// Enrich mocks base method
func (m *MockOpenShiftClusterEnricher) Enrich(arg0 context.Context, arg1 ...*api.OpenShiftCluster) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Enrich", varargs...)
}

// Enrich indicates an expected call of Enrich
func (mr *MockOpenShiftClusterEnricherMockRecorder) Enrich(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enrich", reflect.TypeOf((*MockOpenShiftClusterEnricher)(nil).Enrich), varargs...)
}
