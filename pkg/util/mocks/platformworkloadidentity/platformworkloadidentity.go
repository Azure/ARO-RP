// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/platformworkloadidentity (interfaces: PlatformWorkloadIdentityRolesByVersion)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/platformworkloadidentity/platformworkloadidentity.go github.com/Azure/ARO-RP/pkg/util/platformworkloadidentity PlatformWorkloadIdentityRolesByVersion
//

// Package mock_platformworkloadidentity is a generated GoMock package.
package mock_platformworkloadidentity

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	api "github.com/Azure/ARO-RP/pkg/api"
	database "github.com/Azure/ARO-RP/pkg/database"
)

// MockPlatformWorkloadIdentityRolesByVersion is a mock of PlatformWorkloadIdentityRolesByVersion interface.
type MockPlatformWorkloadIdentityRolesByVersion struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformWorkloadIdentityRolesByVersionMockRecorder
}

// MockPlatformWorkloadIdentityRolesByVersionMockRecorder is the mock recorder for MockPlatformWorkloadIdentityRolesByVersion.
type MockPlatformWorkloadIdentityRolesByVersionMockRecorder struct {
	mock *MockPlatformWorkloadIdentityRolesByVersion
}

// NewMockPlatformWorkloadIdentityRolesByVersion creates a new mock instance.
func NewMockPlatformWorkloadIdentityRolesByVersion(ctrl *gomock.Controller) *MockPlatformWorkloadIdentityRolesByVersion {
	mock := &MockPlatformWorkloadIdentityRolesByVersion{ctrl: ctrl}
	mock.recorder = &MockPlatformWorkloadIdentityRolesByVersionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformWorkloadIdentityRolesByVersion) EXPECT() *MockPlatformWorkloadIdentityRolesByVersionMockRecorder {
	return m.recorder
}

// GetPlatformWorkloadIdentityRolesByRoleName mocks base method.
func (m *MockPlatformWorkloadIdentityRolesByVersion) GetPlatformWorkloadIdentityRolesByRoleName() map[string]api.PlatformWorkloadIdentityRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformWorkloadIdentityRolesByRoleName")
	ret0, _ := ret[0].(map[string]api.PlatformWorkloadIdentityRole)
	return ret0
}

// GetPlatformWorkloadIdentityRolesByRoleName indicates an expected call of GetPlatformWorkloadIdentityRolesByRoleName.
func (mr *MockPlatformWorkloadIdentityRolesByVersionMockRecorder) GetPlatformWorkloadIdentityRolesByRoleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformWorkloadIdentityRolesByRoleName", reflect.TypeOf((*MockPlatformWorkloadIdentityRolesByVersion)(nil).GetPlatformWorkloadIdentityRolesByRoleName))
}

// PopulatePlatformWorkloadIdentityRolesByVersion mocks base method.
func (m *MockPlatformWorkloadIdentityRolesByVersion) PopulatePlatformWorkloadIdentityRolesByVersion(arg0 context.Context, arg1 *api.OpenShiftCluster, arg2 database.PlatformWorkloadIdentityRoleSets) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulatePlatformWorkloadIdentityRolesByVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulatePlatformWorkloadIdentityRolesByVersion indicates an expected call of PopulatePlatformWorkloadIdentityRolesByVersion.
func (mr *MockPlatformWorkloadIdentityRolesByVersionMockRecorder) PopulatePlatformWorkloadIdentityRolesByVersion(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulatePlatformWorkloadIdentityRolesByVersion", reflect.TypeOf((*MockPlatformWorkloadIdentityRolesByVersion)(nil).PopulatePlatformWorkloadIdentityRolesByVersion), arg0, arg1, arg2)
}
