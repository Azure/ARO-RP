// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/database (interfaces: OpenShiftClusters)
//
// Generated by this command:
//
//	mockgen -package=mock_frontend -destination=pkg/util/mocks/frontend/openshiftclusters_mock.go github.com/Azure/ARO-RP/pkg/database OpenShiftClusters
//

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	api "github.com/Azure/ARO-RP/pkg/api"
	database "github.com/Azure/ARO-RP/pkg/database"
	cosmosdb "github.com/Azure/ARO-RP/pkg/database/cosmosdb"
)

// MockOpenShiftClusters is a mock of OpenShiftClusters interface.
type MockOpenShiftClusters struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftClustersMockRecorder
	isgomock struct{}
}

// MockOpenShiftClustersMockRecorder is the mock recorder for MockOpenShiftClusters.
type MockOpenShiftClustersMockRecorder struct {
	mock *MockOpenShiftClusters
}

// NewMockOpenShiftClusters creates a new mock instance.
func NewMockOpenShiftClusters(ctrl *gomock.Controller) *MockOpenShiftClusters {
	mock := &MockOpenShiftClusters{ctrl: ctrl}
	mock.recorder = &MockOpenShiftClustersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenShiftClusters) EXPECT() *MockOpenShiftClustersMockRecorder {
	return m.recorder
}

// ChangeFeed mocks base method.
func (m *MockOpenShiftClusters) ChangeFeed() cosmosdb.OpenShiftClusterDocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFeed")
	ret0, _ := ret[0].(cosmosdb.OpenShiftClusterDocumentIterator)
	return ret0
}

// ChangeFeed indicates an expected call of ChangeFeed.
func (mr *MockOpenShiftClustersMockRecorder) ChangeFeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFeed", reflect.TypeOf((*MockOpenShiftClusters)(nil).ChangeFeed))
}

// Create mocks base method.
func (m *MockOpenShiftClusters) Create(arg0 context.Context, arg1 *api.OpenShiftClusterDocument) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOpenShiftClustersMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenShiftClusters)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockOpenShiftClusters) Delete(arg0 context.Context, arg1 *api.OpenShiftClusterDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenShiftClustersMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenShiftClusters)(nil).Delete), arg0, arg1)
}

// Dequeue mocks base method.
func (m *MockOpenShiftClusters) Dequeue(arg0 context.Context) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", arg0)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockOpenShiftClustersMockRecorder) Dequeue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockOpenShiftClusters)(nil).Dequeue), arg0)
}

// DoDequeue mocks base method.
func (m *MockOpenShiftClusters) DoDequeue(ctx context.Context, doc *api.OpenShiftClusterDocument) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDequeue", ctx, doc)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoDequeue indicates an expected call of DoDequeue.
func (mr *MockOpenShiftClustersMockRecorder) DoDequeue(ctx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDequeue", reflect.TypeOf((*MockOpenShiftClusters)(nil).DoDequeue), ctx, doc)
}

// EndLease mocks base method.
func (m *MockOpenShiftClusters) EndLease(arg0 context.Context, arg1 string, arg2, arg3 api.ProvisioningState, arg4 *string) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndLease", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndLease indicates an expected call of EndLease.
func (mr *MockOpenShiftClustersMockRecorder) EndLease(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndLease", reflect.TypeOf((*MockOpenShiftClusters)(nil).EndLease), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method.
func (m *MockOpenShiftClusters) Get(arg0 context.Context, arg1 string) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOpenShiftClustersMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOpenShiftClusters)(nil).Get), arg0, arg1)
}

// GetAllResourceIDs mocks base method.
func (m *MockOpenShiftClusters) GetAllResourceIDs(ctx context.Context, continuation string) (cosmosdb.OpenShiftClusterDocumentIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResourceIDs", ctx, continuation)
	ret0, _ := ret[0].(cosmosdb.OpenShiftClusterDocumentIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResourceIDs indicates an expected call of GetAllResourceIDs.
func (mr *MockOpenShiftClustersMockRecorder) GetAllResourceIDs(ctx, continuation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResourceIDs", reflect.TypeOf((*MockOpenShiftClusters)(nil).GetAllResourceIDs), ctx, continuation)
}

// GetByClientID mocks base method.
func (m *MockOpenShiftClusters) GetByClientID(ctx context.Context, partitionKey, clientID string) (*api.OpenShiftClusterDocuments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClientID", ctx, partitionKey, clientID)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocuments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClientID indicates an expected call of GetByClientID.
func (mr *MockOpenShiftClustersMockRecorder) GetByClientID(ctx, partitionKey, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClientID", reflect.TypeOf((*MockOpenShiftClusters)(nil).GetByClientID), ctx, partitionKey, clientID)
}

// GetByClusterResourceGroupID mocks base method.
func (m *MockOpenShiftClusters) GetByClusterResourceGroupID(ctx context.Context, partitionKey, resourceGroupID string) (*api.OpenShiftClusterDocuments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClusterResourceGroupID", ctx, partitionKey, resourceGroupID)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocuments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClusterResourceGroupID indicates an expected call of GetByClusterResourceGroupID.
func (mr *MockOpenShiftClustersMockRecorder) GetByClusterResourceGroupID(ctx, partitionKey, resourceGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClusterResourceGroupID", reflect.TypeOf((*MockOpenShiftClusters)(nil).GetByClusterResourceGroupID), ctx, partitionKey, resourceGroupID)
}

// Lease mocks base method.
func (m *MockOpenShiftClusters) Lease(arg0 context.Context, arg1 string) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lease", arg0, arg1)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lease indicates an expected call of Lease.
func (mr *MockOpenShiftClustersMockRecorder) Lease(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lease", reflect.TypeOf((*MockOpenShiftClusters)(nil).Lease), arg0, arg1)
}

// List mocks base method.
func (m *MockOpenShiftClusters) List(arg0 string) cosmosdb.OpenShiftClusterDocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(cosmosdb.OpenShiftClusterDocumentIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockOpenShiftClustersMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOpenShiftClusters)(nil).List), arg0)
}

// ListAll mocks base method.
func (m *MockOpenShiftClusters) ListAll(arg0 context.Context) (*api.OpenShiftClusterDocuments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocuments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockOpenShiftClustersMockRecorder) ListAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockOpenShiftClusters)(nil).ListAll), arg0)
}

// ListByPrefix mocks base method.
func (m *MockOpenShiftClusters) ListByPrefix(arg0, arg1, arg2 string) (cosmosdb.OpenShiftClusterDocumentIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPrefix", arg0, arg1, arg2)
	ret0, _ := ret[0].(cosmosdb.OpenShiftClusterDocumentIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPrefix indicates an expected call of ListByPrefix.
func (mr *MockOpenShiftClustersMockRecorder) ListByPrefix(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPrefix", reflect.TypeOf((*MockOpenShiftClusters)(nil).ListByPrefix), arg0, arg1, arg2)
}

// NewUUID mocks base method.
func (m *MockOpenShiftClusters) NewUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// NewUUID indicates an expected call of NewUUID.
func (mr *MockOpenShiftClustersMockRecorder) NewUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUUID", reflect.TypeOf((*MockOpenShiftClusters)(nil).NewUUID))
}

// Patch mocks base method.
func (m *MockOpenShiftClusters) Patch(arg0 context.Context, arg1 string, arg2 database.OpenShiftClusterDocumentMutator) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockOpenShiftClustersMockRecorder) Patch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockOpenShiftClusters)(nil).Patch), arg0, arg1, arg2)
}

// PatchWithLease mocks base method.
func (m *MockOpenShiftClusters) PatchWithLease(arg0 context.Context, arg1 string, arg2 database.OpenShiftClusterDocumentMutator) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchWithLease", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchWithLease indicates an expected call of PatchWithLease.
func (mr *MockOpenShiftClustersMockRecorder) PatchWithLease(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWithLease", reflect.TypeOf((*MockOpenShiftClusters)(nil).PatchWithLease), arg0, arg1, arg2)
}

// QueueLength mocks base method.
func (m *MockOpenShiftClusters) QueueLength(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueLength", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueLength indicates an expected call of QueueLength.
func (mr *MockOpenShiftClustersMockRecorder) QueueLength(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueLength", reflect.TypeOf((*MockOpenShiftClusters)(nil).QueueLength), arg0, arg1)
}

// Update mocks base method.
func (m *MockOpenShiftClusters) Update(arg0 context.Context, arg1 *api.OpenShiftClusterDocument) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOpenShiftClustersMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOpenShiftClusters)(nil).Update), arg0, arg1)
}
