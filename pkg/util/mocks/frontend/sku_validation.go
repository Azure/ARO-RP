// Code generated by MockGen. DO NOT EDIT.
// Source: sku_validation.go
//
// Generated by this command:
//
//	mockgen -source sku_validation.go -destination=../util/mocks/frontend/sku_validation.go github.com/Azure/ARO-RP/pkg/frontend SkuValidator
//

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	api "github.com/Azure/ARO-RP/pkg/api"
	env "github.com/Azure/ARO-RP/pkg/env"
	azureclient "github.com/Azure/ARO-RP/pkg/util/azureclient"
)

// MockSkuValidator is a mock of SkuValidator interface.
type MockSkuValidator struct {
	ctrl     *gomock.Controller
	recorder *MockSkuValidatorMockRecorder
	isgomock struct{}
}

// MockSkuValidatorMockRecorder is the mock recorder for MockSkuValidator.
type MockSkuValidatorMockRecorder struct {
	mock *MockSkuValidator
}

// NewMockSkuValidator creates a new mock instance.
func NewMockSkuValidator(ctrl *gomock.Controller) *MockSkuValidator {
	mock := &MockSkuValidator{ctrl: ctrl}
	mock.recorder = &MockSkuValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkuValidator) EXPECT() *MockSkuValidatorMockRecorder {
	return m.recorder
}

// ValidateVMSku mocks base method.
func (m *MockSkuValidator) ValidateVMSku(ctx context.Context, azEnv *azureclient.AROEnvironment, environment env.Interface, subscriptionID, tenantID string, oc *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVMSku", ctx, azEnv, environment, subscriptionID, tenantID, oc)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVMSku indicates an expected call of ValidateVMSku.
func (mr *MockSkuValidatorMockRecorder) ValidateVMSku(ctx, azEnv, environment, subscriptionID, tenantID, oc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVMSku", reflect.TypeOf((*MockSkuValidator)(nil).ValidateVMSku), ctx, azEnv, environment, subscriptionID, tenantID, oc)
}
