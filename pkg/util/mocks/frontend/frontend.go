// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/frontend (interfaces: StreamResponder,QuotaValidator,SkuValidator,ProvidersValidator)

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"

	api "github.com/Azure/ARO-RP/pkg/api"
	env "github.com/Azure/ARO-RP/pkg/env"
	azureclient "github.com/Azure/ARO-RP/pkg/util/azureclient"
)

// MockStreamResponder is a mock of StreamResponder interface.
type MockStreamResponder struct {
	ctrl     *gomock.Controller
	recorder *MockStreamResponderMockRecorder
}

// MockStreamResponderMockRecorder is the mock recorder for MockStreamResponder.
type MockStreamResponderMockRecorder struct {
	mock *MockStreamResponder
}

// NewMockStreamResponder creates a new mock instance.
func NewMockStreamResponder(ctrl *gomock.Controller) *MockStreamResponder {
	mock := &MockStreamResponder{ctrl: ctrl}
	mock.recorder = &MockStreamResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamResponder) EXPECT() *MockStreamResponderMockRecorder {
	return m.recorder
}

// AdminReplyStream mocks base method.
func (m *MockStreamResponder) AdminReplyStream(arg0 *logrus.Entry, arg1 http.ResponseWriter, arg2 http.Header, arg3 io.Reader, arg4 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdminReplyStream", arg0, arg1, arg2, arg3, arg4)
}

// AdminReplyStream indicates an expected call of AdminReplyStream.
func (mr *MockStreamResponderMockRecorder) AdminReplyStream(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminReplyStream", reflect.TypeOf((*MockStreamResponder)(nil).AdminReplyStream), arg0, arg1, arg2, arg3, arg4)
}

// ReplyStream mocks base method.
func (m *MockStreamResponder) ReplyStream(arg0 *logrus.Entry, arg1 http.ResponseWriter, arg2 http.Header, arg3 io.Reader, arg4 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplyStream", arg0, arg1, arg2, arg3, arg4)
}

// ReplyStream indicates an expected call of ReplyStream.
func (mr *MockStreamResponderMockRecorder) ReplyStream(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyStream", reflect.TypeOf((*MockStreamResponder)(nil).ReplyStream), arg0, arg1, arg2, arg3, arg4)
}

// MockQuotaValidator is a mock of QuotaValidator interface.
type MockQuotaValidator struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaValidatorMockRecorder
}

// MockQuotaValidatorMockRecorder is the mock recorder for MockQuotaValidator.
type MockQuotaValidatorMockRecorder struct {
	mock *MockQuotaValidator
}

// NewMockQuotaValidator creates a new mock instance.
func NewMockQuotaValidator(ctrl *gomock.Controller) *MockQuotaValidator {
	mock := &MockQuotaValidator{ctrl: ctrl}
	mock.recorder = &MockQuotaValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotaValidator) EXPECT() *MockQuotaValidatorMockRecorder {
	return m.recorder
}

// ValidateQuota mocks base method.
func (m *MockQuotaValidator) ValidateQuota(arg0 context.Context, arg1 *azureclient.AROEnvironment, arg2 env.Interface, arg3, arg4 string, arg5 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateQuota", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateQuota indicates an expected call of ValidateQuota.
func (mr *MockQuotaValidatorMockRecorder) ValidateQuota(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateQuota", reflect.TypeOf((*MockQuotaValidator)(nil).ValidateQuota), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockSkuValidator is a mock of SkuValidator interface.
type MockSkuValidator struct {
	ctrl     *gomock.Controller
	recorder *MockSkuValidatorMockRecorder
}

// MockSkuValidatorMockRecorder is the mock recorder for MockSkuValidator.
type MockSkuValidatorMockRecorder struct {
	mock *MockSkuValidator
}

// NewMockSkuValidator creates a new mock instance.
func NewMockSkuValidator(ctrl *gomock.Controller) *MockSkuValidator {
	mock := &MockSkuValidator{ctrl: ctrl}
	mock.recorder = &MockSkuValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkuValidator) EXPECT() *MockSkuValidatorMockRecorder {
	return m.recorder
}

// ValidateVMSku mocks base method.
func (m *MockSkuValidator) ValidateVMSku(arg0 context.Context, arg1 *azureclient.AROEnvironment, arg2 env.Interface, arg3, arg4 string, arg5 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVMSku", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVMSku indicates an expected call of ValidateVMSku.
func (mr *MockSkuValidatorMockRecorder) ValidateVMSku(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVMSku", reflect.TypeOf((*MockSkuValidator)(nil).ValidateVMSku), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockProvidersValidator is a mock of ProvidersValidator interface.
type MockProvidersValidator struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersValidatorMockRecorder
}

// MockProvidersValidatorMockRecorder is the mock recorder for MockProvidersValidator.
type MockProvidersValidatorMockRecorder struct {
	mock *MockProvidersValidator
}

// NewMockProvidersValidator creates a new mock instance.
func NewMockProvidersValidator(ctrl *gomock.Controller) *MockProvidersValidator {
	mock := &MockProvidersValidator{ctrl: ctrl}
	mock.recorder = &MockProvidersValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvidersValidator) EXPECT() *MockProvidersValidatorMockRecorder {
	return m.recorder
}

// ValidateProviders mocks base method.
func (m *MockProvidersValidator) ValidateProviders(arg0 context.Context, arg1 *azureclient.AROEnvironment, arg2 env.Interface, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProviders", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProviders indicates an expected call of ValidateProviders.
func (mr *MockProvidersValidatorMockRecorder) ValidateProviders(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProviders", reflect.TypeOf((*MockProvidersValidator)(nil).ValidateProviders), arg0, arg1, arg2, arg3, arg4)
}
