// Code generated by MockGen. DO NOT EDIT.
// Source: providers_validation.go
//
// Generated by this command:
//
//	mockgen -source providers_validation.go -destination=../util/mocks/frontend/providers_validation.go github.com/Azure/ARO-RP/pkg/frontend ProvidersValidator
//

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	env "github.com/Azure/ARO-RP/pkg/env"
	azureclient "github.com/Azure/ARO-RP/pkg/util/azureclient"
)

// MockProvidersValidator is a mock of ProvidersValidator interface.
type MockProvidersValidator struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersValidatorMockRecorder
}

// MockProvidersValidatorMockRecorder is the mock recorder for MockProvidersValidator.
type MockProvidersValidatorMockRecorder struct {
	mock *MockProvidersValidator
}

// NewMockProvidersValidator creates a new mock instance.
func NewMockProvidersValidator(ctrl *gomock.Controller) *MockProvidersValidator {
	mock := &MockProvidersValidator{ctrl: ctrl}
	mock.recorder = &MockProvidersValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvidersValidator) EXPECT() *MockProvidersValidatorMockRecorder {
	return m.recorder
}

// ValidateProviders mocks base method.
func (m *MockProvidersValidator) ValidateProviders(ctx context.Context, azEnv *azureclient.AROEnvironment, environment env.Interface, subscriptionID, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProviders", ctx, azEnv, environment, subscriptionID, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProviders indicates an expected call of ValidateProviders.
func (mr *MockProvidersValidatorMockRecorder) ValidateProviders(ctx, azEnv, environment, subscriptionID, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProviders", reflect.TypeOf((*MockProvidersValidator)(nil).ValidateProviders), ctx, azEnv, environment, subscriptionID, tenantID)
}
