// Code generated by MockGen. DO NOT EDIT.
// Source: quota_validation.go
//
// Generated by this command:
//
//	mockgen -source quota_validation.go -destination=../util/mocks/frontend/quota_validation.go github.com/Azure/ARO-RP/pkg/frontend QuotaValidator
//

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	api "github.com/Azure/ARO-RP/pkg/api"
	env "github.com/Azure/ARO-RP/pkg/env"
	azureclient "github.com/Azure/ARO-RP/pkg/util/azureclient"
)

// MockQuotaValidator is a mock of QuotaValidator interface.
type MockQuotaValidator struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaValidatorMockRecorder
	isgomock struct{}
}

// MockQuotaValidatorMockRecorder is the mock recorder for MockQuotaValidator.
type MockQuotaValidatorMockRecorder struct {
	mock *MockQuotaValidator
}

// NewMockQuotaValidator creates a new mock instance.
func NewMockQuotaValidator(ctrl *gomock.Controller) *MockQuotaValidator {
	mock := &MockQuotaValidator{ctrl: ctrl}
	mock.recorder = &MockQuotaValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotaValidator) EXPECT() *MockQuotaValidatorMockRecorder {
	return m.recorder
}

// ValidateQuota mocks base method.
func (m *MockQuotaValidator) ValidateQuota(ctx context.Context, azEnv *azureclient.AROEnvironment, environment env.Interface, subscriptionID, tenantID string, oc *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateQuota", ctx, azEnv, environment, subscriptionID, tenantID, oc)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateQuota indicates an expected call of ValidateQuota.
func (mr *MockQuotaValidatorMockRecorder) ValidateQuota(ctx, azEnv, environment, subscriptionID, tenantID, oc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateQuota", reflect.TypeOf((*MockQuotaValidator)(nil).ValidateQuota), ctx, azEnv, environment, subscriptionID, tenantID, oc)
}
