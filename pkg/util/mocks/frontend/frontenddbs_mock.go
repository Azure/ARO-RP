// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/frontend (interfaces: frontendDBs)
//
// Generated by this command:
//
//	mockgen -package=mock_frontend -destination=pkg/util/mocks/frontend/frontenddbs_mock.go github.com/Azure/ARO-RP/pkg/frontend frontendDBs
//

// Package mock_frontend is a generated GoMock package.
package mock_frontend

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	database "github.com/Azure/ARO-RP/pkg/database"
)

// MockfrontendDBs is a mock of frontendDBs interface.
type MockfrontendDBs struct {
	ctrl     *gomock.Controller
	recorder *MockfrontendDBsMockRecorder
	isgomock struct{}
}

// MockfrontendDBsMockRecorder is the mock recorder for MockfrontendDBs.
type MockfrontendDBsMockRecorder struct {
	mock *MockfrontendDBs
}

// NewMockfrontendDBs creates a new mock instance.
func NewMockfrontendDBs(ctrl *gomock.Controller) *MockfrontendDBs {
	mock := &MockfrontendDBs{ctrl: ctrl}
	mock.recorder = &MockfrontendDBsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfrontendDBs) EXPECT() *MockfrontendDBsMockRecorder {
	return m.recorder
}

// AsyncOperations mocks base method.
func (m *MockfrontendDBs) AsyncOperations() (database.AsyncOperations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncOperations")
	ret0, _ := ret[0].(database.AsyncOperations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsyncOperations indicates an expected call of AsyncOperations.
func (mr *MockfrontendDBsMockRecorder) AsyncOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncOperations", reflect.TypeOf((*MockfrontendDBs)(nil).AsyncOperations))
}

// MaintenanceManifests mocks base method.
func (m *MockfrontendDBs) MaintenanceManifests() (database.MaintenanceManifests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceManifests")
	ret0, _ := ret[0].(database.MaintenanceManifests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaintenanceManifests indicates an expected call of MaintenanceManifests.
func (mr *MockfrontendDBsMockRecorder) MaintenanceManifests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceManifests", reflect.TypeOf((*MockfrontendDBs)(nil).MaintenanceManifests))
}

// OpenShiftClusters mocks base method.
func (m *MockfrontendDBs) OpenShiftClusters() (database.OpenShiftClusters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenShiftClusters")
	ret0, _ := ret[0].(database.OpenShiftClusters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenShiftClusters indicates an expected call of OpenShiftClusters.
func (mr *MockfrontendDBsMockRecorder) OpenShiftClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenShiftClusters", reflect.TypeOf((*MockfrontendDBs)(nil).OpenShiftClusters))
}

// OpenShiftVersions mocks base method.
func (m *MockfrontendDBs) OpenShiftVersions() (database.OpenShiftVersions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenShiftVersions")
	ret0, _ := ret[0].(database.OpenShiftVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenShiftVersions indicates an expected call of OpenShiftVersions.
func (mr *MockfrontendDBsMockRecorder) OpenShiftVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenShiftVersions", reflect.TypeOf((*MockfrontendDBs)(nil).OpenShiftVersions))
}

// PlatformWorkloadIdentityRoleSets mocks base method.
func (m *MockfrontendDBs) PlatformWorkloadIdentityRoleSets() (database.PlatformWorkloadIdentityRoleSets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlatformWorkloadIdentityRoleSets")
	ret0, _ := ret[0].(database.PlatformWorkloadIdentityRoleSets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlatformWorkloadIdentityRoleSets indicates an expected call of PlatformWorkloadIdentityRoleSets.
func (mr *MockfrontendDBsMockRecorder) PlatformWorkloadIdentityRoleSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlatformWorkloadIdentityRoleSets", reflect.TypeOf((*MockfrontendDBs)(nil).PlatformWorkloadIdentityRoleSets))
}

// Subscriptions mocks base method.
func (m *MockfrontendDBs) Subscriptions() (database.Subscriptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscriptions")
	ret0, _ := ret[0].(database.Subscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscriptions indicates an expected call of Subscriptions.
func (mr *MockfrontendDBsMockRecorder) Subscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscriptions", reflect.TypeOf((*MockfrontendDBs)(nil).Subscriptions))
}
