// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/armdns (interfaces: RecordSetsClient,ZonesClient)

// Package mock_armdns is a generated GoMock package.
package mock_armdns

import (
	context "context"
	reflect "reflect"

	armdns "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dns/armdns"
	gomock "github.com/golang/mock/gomock"
)

// MockRecordSetsClient is a mock of RecordSetsClient interface.
type MockRecordSetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRecordSetsClientMockRecorder
}

// MockRecordSetsClientMockRecorder is the mock recorder for MockRecordSetsClient.
type MockRecordSetsClientMockRecorder struct {
	mock *MockRecordSetsClient
}

// NewMockRecordSetsClient creates a new mock instance.
func NewMockRecordSetsClient(ctrl *gomock.Controller) *MockRecordSetsClient {
	mock := &MockRecordSetsClient{ctrl: ctrl}
	mock.recorder = &MockRecordSetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordSetsClient) EXPECT() *MockRecordSetsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockRecordSetsClient) CreateOrUpdate(arg0 context.Context, arg1, arg2, arg3 string, arg4 armdns.RecordType, arg5 armdns.RecordSet, arg6 *armdns.RecordSetsClientCreateOrUpdateOptions) (armdns.RecordSetsClientCreateOrUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(armdns.RecordSetsClientCreateOrUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockRecordSetsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRecordSetsClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Delete mocks base method.
func (m *MockRecordSetsClient) Delete(arg0 context.Context, arg1, arg2, arg3 string, arg4 armdns.RecordType, arg5 *armdns.RecordSetsClientDeleteOptions) (armdns.RecordSetsClientDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armdns.RecordSetsClientDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordSetsClientMockRecorder) Delete(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordSetsClient)(nil).Delete), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Get mocks base method.
func (m *MockRecordSetsClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 armdns.RecordType, arg5 *armdns.RecordSetsClientGetOptions) (armdns.RecordSetsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(armdns.RecordSetsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRecordSetsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRecordSetsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockZonesClient is a mock of ZonesClient interface.
type MockZonesClient struct {
	ctrl     *gomock.Controller
	recorder *MockZonesClientMockRecorder
}

// MockZonesClientMockRecorder is the mock recorder for MockZonesClient.
type MockZonesClientMockRecorder struct {
	mock *MockZonesClient
}

// NewMockZonesClient creates a new mock instance.
func NewMockZonesClient(ctrl *gomock.Controller) *MockZonesClient {
	mock := &MockZonesClient{ctrl: ctrl}
	mock.recorder = &MockZonesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZonesClient) EXPECT() *MockZonesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockZonesClient) Get(arg0 context.Context, arg1, arg2 string, arg3 *armdns.ZonesClientGetOptions) (armdns.ZonesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(armdns.ZonesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockZonesClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZonesClient)(nil).Get), arg0, arg1, arg2, arg3)
}
