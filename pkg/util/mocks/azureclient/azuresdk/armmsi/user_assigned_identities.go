// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_assigned_identities.go
//
// Generated by this command:
//
//	mockgen -source ./user_assigned_identities.go -destination=../../../mocks/azureclient/azuresdk/armmsi/user_assigned_identities.go github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/armmsi UserAssignedIdentitiesClient
//

// Package mock_armmsi is a generated GoMock package.
package mock_armmsi

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	runtime "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	armmsi "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/msi/armmsi"

	azcore "github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/azcore"
)

// MockUserAssignedIdentitiesClient is a mock of UserAssignedIdentitiesClient interface.
type MockUserAssignedIdentitiesClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserAssignedIdentitiesClientMockRecorder
	isgomock struct{}
}

// MockUserAssignedIdentitiesClientMockRecorder is the mock recorder for MockUserAssignedIdentitiesClient.
type MockUserAssignedIdentitiesClientMockRecorder struct {
	mock *MockUserAssignedIdentitiesClient
}

// NewMockUserAssignedIdentitiesClient creates a new mock instance.
func NewMockUserAssignedIdentitiesClient(ctrl *gomock.Controller) *MockUserAssignedIdentitiesClient {
	mock := &MockUserAssignedIdentitiesClient{ctrl: ctrl}
	mock.recorder = &MockUserAssignedIdentitiesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAssignedIdentitiesClient) EXPECT() *MockUserAssignedIdentitiesClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockUserAssignedIdentitiesClient) CreateOrUpdate(ctx context.Context, resourceGroupName, resourceName string, parameters armmsi.Identity, options *armmsi.UserAssignedIdentitiesClientCreateOrUpdateOptions) (armmsi.UserAssignedIdentitiesClientCreateOrUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, resourceName, parameters, options)
	ret0, _ := ret[0].(armmsi.UserAssignedIdentitiesClientCreateOrUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockUserAssignedIdentitiesClientMockRecorder) CreateOrUpdate(ctx, resourceGroupName, resourceName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockUserAssignedIdentitiesClient)(nil).CreateOrUpdate), ctx, resourceGroupName, resourceName, parameters, options)
}

// Delete mocks base method.
func (m *MockUserAssignedIdentitiesClient) Delete(ctx context.Context, resourceGroupName, resourceName string, options *armmsi.UserAssignedIdentitiesClientDeleteOptions) (armmsi.UserAssignedIdentitiesClientDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, resourceName, options)
	ret0, _ := ret[0].(armmsi.UserAssignedIdentitiesClientDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserAssignedIdentitiesClientMockRecorder) Delete(ctx, resourceGroupName, resourceName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserAssignedIdentitiesClient)(nil).Delete), ctx, resourceGroupName, resourceName, options)
}

// Get mocks base method.
func (m *MockUserAssignedIdentitiesClient) Get(ctx context.Context, resourceGroupName, resourceName string, options *armmsi.UserAssignedIdentitiesClientGetOptions) (armmsi.UserAssignedIdentitiesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, resourceName, options)
	ret0, _ := ret[0].(armmsi.UserAssignedIdentitiesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserAssignedIdentitiesClientMockRecorder) Get(ctx, resourceGroupName, resourceName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserAssignedIdentitiesClient)(nil).Get), ctx, resourceGroupName, resourceName, options)
}

// GetClusterMSICredential mocks base method.
func (m *MockUserAssignedIdentitiesClient) GetClusterMSICredential() azcore.TokenCredential {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMSICredential")
	ret0, _ := ret[0].(azcore.TokenCredential)
	return ret0
}

// GetClusterMSICredential indicates an expected call of GetClusterMSICredential.
func (mr *MockUserAssignedIdentitiesClientMockRecorder) GetClusterMSICredential() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMSICredential", reflect.TypeOf((*MockUserAssignedIdentitiesClient)(nil).GetClusterMSICredential))
}

// NewListByResourceGroupPager mocks base method.
func (m *MockUserAssignedIdentitiesClient) NewListByResourceGroupPager(resourceGroupName string, options *armmsi.UserAssignedIdentitiesClientListByResourceGroupOptions) *runtime.Pager[armmsi.UserAssignedIdentitiesClientListByResourceGroupResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListByResourceGroupPager", resourceGroupName, options)
	ret0, _ := ret[0].(*runtime.Pager[armmsi.UserAssignedIdentitiesClientListByResourceGroupResponse])
	return ret0
}

// NewListByResourceGroupPager indicates an expected call of NewListByResourceGroupPager.
func (mr *MockUserAssignedIdentitiesClientMockRecorder) NewListByResourceGroupPager(resourceGroupName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListByResourceGroupPager", reflect.TypeOf((*MockUserAssignedIdentitiesClient)(nil).NewListByResourceGroupPager), resourceGroupName, options)
}

// Update mocks base method.
func (m *MockUserAssignedIdentitiesClient) Update(ctx context.Context, resourceGroupName, resourceName string, parameters armmsi.IdentityUpdate, options *armmsi.UserAssignedIdentitiesClientUpdateOptions) (armmsi.UserAssignedIdentitiesClientUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceGroupName, resourceName, parameters, options)
	ret0, _ := ret[0].(armmsi.UserAssignedIdentitiesClientUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserAssignedIdentitiesClientMockRecorder) Update(ctx, resourceGroupName, resourceName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserAssignedIdentitiesClient)(nil).Update), ctx, resourceGroupName, resourceName, parameters, options)
}
