// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/azureclient/azuresdk/azmetrics/metrics.go -source=metrics.go
//

// Package mock_azmetrics is a generated GoMock package.
package mock_azmetrics

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	azmetrics "github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azmetrics"
)

// MockMetricsClient is a mock of MetricsClient interface.
type MockMetricsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsClientMockRecorder
	isgomock struct{}
}

// MockMetricsClientMockRecorder is the mock recorder for MockMetricsClient.
type MockMetricsClientMockRecorder struct {
	mock *MockMetricsClient
}

// NewMockMetricsClient creates a new mock instance.
func NewMockMetricsClient(ctrl *gomock.Controller) *MockMetricsClient {
	mock := &MockMetricsClient{ctrl: ctrl}
	mock.recorder = &MockMetricsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsClient) EXPECT() *MockMetricsClientMockRecorder {
	return m.recorder
}

// QueryResources mocks base method.
func (m *MockMetricsClient) QueryResources(ctx context.Context, subscriptionID, metricNamespace string, metricNames []string, resourceIDs azmetrics.ResourceIDList, options *azmetrics.QueryResourcesOptions) (azmetrics.QueryResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryResources", ctx, subscriptionID, metricNamespace, metricNames, resourceIDs, options)
	ret0, _ := ret[0].(azmetrics.QueryResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryResources indicates an expected call of QueryResources.
func (mr *MockMetricsClientMockRecorder) QueryResources(ctx, subscriptionID, metricNamespace, metricNames, resourceIDs, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResources", reflect.TypeOf((*MockMetricsClient)(nil).QueryResources), ctx, subscriptionID, metricNamespace, metricNames, resourceIDs, options)
}
