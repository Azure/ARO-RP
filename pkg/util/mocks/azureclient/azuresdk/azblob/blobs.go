// Code generated by MockGen. DO NOT EDIT.
// Source: blobs.go
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/azureclient/azuresdk/azblob/blobs.go -source=blobs.go
//

// Package mock_azblob is a generated GoMock package.
package mock_azblob

import (
	context "context"
	reflect "reflect"

	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"
	service "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/service"
	gomock "go.uber.org/mock/gomock"
)

// MockBlobsClient is a mock of BlobsClient interface.
type MockBlobsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlobsClientMockRecorder
	isgomock struct{}
}

// MockBlobsClientMockRecorder is the mock recorder for MockBlobsClient.
type MockBlobsClientMockRecorder struct {
	mock *MockBlobsClient
}

// NewMockBlobsClient creates a new mock instance.
func NewMockBlobsClient(ctrl *gomock.Controller) *MockBlobsClient {
	mock := &MockBlobsClient{ctrl: ctrl}
	mock.recorder = &MockBlobsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlobsClient) EXPECT() *MockBlobsClientMockRecorder {
	return m.recorder
}

// BlobExists mocks base method.
func (m *MockBlobsClient) BlobExists(ctx context.Context, container, blobPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlobExists", ctx, container, blobPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobExists indicates an expected call of BlobExists.
func (mr *MockBlobsClientMockRecorder) BlobExists(ctx, container, blobPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobExists", reflect.TypeOf((*MockBlobsClient)(nil).BlobExists), ctx, container, blobPath)
}

// DeleteBlob mocks base method.
func (m *MockBlobsClient) DeleteBlob(ctx context.Context, containerName, blobName string, o *azblob.DeleteBlobOptions) (azblob.DeleteBlobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlob", ctx, containerName, blobName, o)
	ret0, _ := ret[0].(azblob.DeleteBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlob indicates an expected call of DeleteBlob.
func (mr *MockBlobsClientMockRecorder) DeleteBlob(ctx, containerName, blobName, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockBlobsClient)(nil).DeleteBlob), ctx, containerName, blobName, o)
}

// DeleteContainer mocks base method.
func (m *MockBlobsClient) DeleteContainer(ctx context.Context, container string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockBlobsClientMockRecorder) DeleteContainer(ctx, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockBlobsClient)(nil).DeleteContainer), ctx, container)
}

// DownloadStream mocks base method.
func (m *MockBlobsClient) DownloadStream(ctx context.Context, containerName, blobName string, o *azblob.DownloadStreamOptions) (azblob.DownloadStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadStream", ctx, containerName, blobName, o)
	ret0, _ := ret[0].(azblob.DownloadStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadStream indicates an expected call of DownloadStream.
func (mr *MockBlobsClientMockRecorder) DownloadStream(ctx, containerName, blobName, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadStream", reflect.TypeOf((*MockBlobsClient)(nil).DownloadStream), ctx, containerName, blobName, o)
}

// ServiceClient mocks base method.
func (m *MockBlobsClient) ServiceClient() *service.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceClient")
	ret0, _ := ret[0].(*service.Client)
	return ret0
}

// ServiceClient indicates an expected call of ServiceClient.
func (mr *MockBlobsClientMockRecorder) ServiceClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceClient", reflect.TypeOf((*MockBlobsClient)(nil).ServiceClient))
}

// UploadBuffer mocks base method.
func (m *MockBlobsClient) UploadBuffer(ctx context.Context, containerName, blobName string, buffer []byte, o *azblob.UploadBufferOptions) (azblob.UploadBufferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBuffer", ctx, containerName, blobName, buffer, o)
	ret0, _ := ret[0].(azblob.UploadBufferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBuffer indicates an expected call of UploadBuffer.
func (mr *MockBlobsClientMockRecorder) UploadBuffer(ctx, containerName, blobName, buffer, o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBuffer", reflect.TypeOf((*MockBlobsClient)(nil).UploadBuffer), ctx, containerName, blobName, buffer, o)
}
