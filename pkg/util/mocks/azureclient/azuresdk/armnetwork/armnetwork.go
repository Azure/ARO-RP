// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/armnetwork (interfaces: FlowLogsClientInterface,InterfacesClient,LoadBalancersClient,LoadBalancerBackendAddressPoolsClient,PrivateEndpointsClient,PrivateLinkServicesClient,PublicIPAddressesClient,RouteTablesClient,SecurityGroupsClient,SubnetsClient,UsagesClient,VirtualNetworksClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../../util/mocks/azureclient/azuresdk/armnetwork/armnetwork.go github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/armnetwork FlowLogsClientInterface,InterfacesClient,LoadBalancersClient,LoadBalancerBackendAddressPoolsClient,PrivateEndpointsClient,PrivateLinkServicesClient,PublicIPAddressesClient,RouteTablesClient,SecurityGroupsClient,SubnetsClient,UsagesClient,VirtualNetworksClient
//

// Package mock_armnetwork is a generated GoMock package.
package mock_armnetwork

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
	armnetwork0 "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockFlowLogsClientInterface is a mock of FlowLogsClientInterface interface.
type MockFlowLogsClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFlowLogsClientInterfaceMockRecorder
	isgomock struct{}
}

// MockFlowLogsClientInterfaceMockRecorder is the mock recorder for MockFlowLogsClientInterface.
type MockFlowLogsClientInterfaceMockRecorder struct {
	mock *MockFlowLogsClientInterface
}

// NewMockFlowLogsClientInterface creates a new mock instance.
func NewMockFlowLogsClientInterface(ctrl *gomock.Controller) *MockFlowLogsClientInterface {
	mock := &MockFlowLogsClientInterface{ctrl: ctrl}
	mock.recorder = &MockFlowLogsClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowLogsClientInterface) EXPECT() *MockFlowLogsClientInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdateAndWait mocks base method.
func (m *MockFlowLogsClientInterface) CreateOrUpdateAndWait(ctx context.Context, resourceGroupName, networkWatcherName, flowLogName string, parameters armnetwork.FlowLog, options *armnetwork.FlowLogsClientBeginCreateOrUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", ctx, resourceGroupName, networkWatcherName, flowLogName, parameters, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait.
func (mr *MockFlowLogsClientInterfaceMockRecorder) CreateOrUpdateAndWait(ctx, resourceGroupName, networkWatcherName, flowLogName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockFlowLogsClientInterface)(nil).CreateOrUpdateAndWait), ctx, resourceGroupName, networkWatcherName, flowLogName, parameters, options)
}

// DeleteAndWait mocks base method.
func (m *MockFlowLogsClientInterface) DeleteAndWait(ctx context.Context, resourceGroupName, networkWatcherName, flowLogName string, options *armnetwork.FlowLogsClientBeginDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, networkWatcherName, flowLogName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockFlowLogsClientInterfaceMockRecorder) DeleteAndWait(ctx, resourceGroupName, networkWatcherName, flowLogName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockFlowLogsClientInterface)(nil).DeleteAndWait), ctx, resourceGroupName, networkWatcherName, flowLogName, options)
}

// Get mocks base method.
func (m *MockFlowLogsClientInterface) Get(ctx context.Context, resourceGroupName, networkWatcherName, flowLogName string, options *armnetwork.FlowLogsClientGetOptions) (armnetwork.FlowLogsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkWatcherName, flowLogName, options)
	ret0, _ := ret[0].(armnetwork.FlowLogsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFlowLogsClientInterfaceMockRecorder) Get(ctx, resourceGroupName, networkWatcherName, flowLogName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlowLogsClientInterface)(nil).Get), ctx, resourceGroupName, networkWatcherName, flowLogName, options)
}

// MockInterfacesClient is a mock of InterfacesClient interface.
type MockInterfacesClient struct {
	ctrl     *gomock.Controller
	recorder *MockInterfacesClientMockRecorder
	isgomock struct{}
}

// MockInterfacesClientMockRecorder is the mock recorder for MockInterfacesClient.
type MockInterfacesClientMockRecorder struct {
	mock *MockInterfacesClient
}

// NewMockInterfacesClient creates a new mock instance.
func NewMockInterfacesClient(ctrl *gomock.Controller) *MockInterfacesClient {
	mock := &MockInterfacesClient{ctrl: ctrl}
	mock.recorder = &MockInterfacesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfacesClient) EXPECT() *MockInterfacesClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateAndWait mocks base method.
func (m *MockInterfacesClient) CreateOrUpdateAndWait(ctx context.Context, resourceGroupName, networkInterfaceName string, parameters armnetwork0.Interface, options *armnetwork0.InterfacesClientBeginCreateOrUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", ctx, resourceGroupName, networkInterfaceName, parameters, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait.
func (mr *MockInterfacesClientMockRecorder) CreateOrUpdateAndWait(ctx, resourceGroupName, networkInterfaceName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockInterfacesClient)(nil).CreateOrUpdateAndWait), ctx, resourceGroupName, networkInterfaceName, parameters, options)
}

// DeleteAndWait mocks base method.
func (m *MockInterfacesClient) DeleteAndWait(ctx context.Context, resourceGroupName, networkInterfaceName string, options *armnetwork0.InterfacesClientBeginDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, networkInterfaceName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockInterfacesClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, networkInterfaceName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockInterfacesClient)(nil).DeleteAndWait), ctx, resourceGroupName, networkInterfaceName, options)
}

// Get mocks base method.
func (m *MockInterfacesClient) Get(ctx context.Context, resourceGroupName, networkInterfaceName string, options *armnetwork0.InterfacesClientGetOptions) (armnetwork0.InterfacesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkInterfaceName, options)
	ret0, _ := ret[0].(armnetwork0.InterfacesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfacesClientMockRecorder) Get(ctx, resourceGroupName, networkInterfaceName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterfacesClient)(nil).Get), ctx, resourceGroupName, networkInterfaceName, options)
}

// List mocks base method.
func (m *MockInterfacesClient) List(ctx context.Context, resourceGroupName string, options *armnetwork0.InterfacesClientListOptions) ([]*armnetwork0.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, options)
	ret0, _ := ret[0].([]*armnetwork0.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInterfacesClientMockRecorder) List(ctx, resourceGroupName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterfacesClient)(nil).List), ctx, resourceGroupName, options)
}

// MockLoadBalancersClient is a mock of LoadBalancersClient interface.
type MockLoadBalancersClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancersClientMockRecorder
	isgomock struct{}
}

// MockLoadBalancersClientMockRecorder is the mock recorder for MockLoadBalancersClient.
type MockLoadBalancersClientMockRecorder struct {
	mock *MockLoadBalancersClient
}

// NewMockLoadBalancersClient creates a new mock instance.
func NewMockLoadBalancersClient(ctrl *gomock.Controller) *MockLoadBalancersClient {
	mock := &MockLoadBalancersClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancersClient) EXPECT() *MockLoadBalancersClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateAndWait mocks base method.
func (m *MockLoadBalancersClient) CreateOrUpdateAndWait(ctx context.Context, resourceGroupName, loadBalancerName string, parameters armnetwork.LoadBalancer, options *armnetwork.LoadBalancersClientBeginCreateOrUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", ctx, resourceGroupName, loadBalancerName, parameters, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait.
func (mr *MockLoadBalancersClientMockRecorder) CreateOrUpdateAndWait(ctx, resourceGroupName, loadBalancerName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockLoadBalancersClient)(nil).CreateOrUpdateAndWait), ctx, resourceGroupName, loadBalancerName, parameters, options)
}

// Get mocks base method.
func (m *MockLoadBalancersClient) Get(ctx context.Context, resourceGroupName, loadBalancerName string, options *armnetwork.LoadBalancersClientGetOptions) (armnetwork.LoadBalancersClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, options)
	ret0, _ := ret[0].(armnetwork.LoadBalancersClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoadBalancersClientMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancersClient)(nil).Get), ctx, resourceGroupName, loadBalancerName, options)
}

// MockLoadBalancerBackendAddressPoolsClient is a mock of LoadBalancerBackendAddressPoolsClient interface.
type MockLoadBalancerBackendAddressPoolsClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerBackendAddressPoolsClientMockRecorder
	isgomock struct{}
}

// MockLoadBalancerBackendAddressPoolsClientMockRecorder is the mock recorder for MockLoadBalancerBackendAddressPoolsClient.
type MockLoadBalancerBackendAddressPoolsClientMockRecorder struct {
	mock *MockLoadBalancerBackendAddressPoolsClient
}

// NewMockLoadBalancerBackendAddressPoolsClient creates a new mock instance.
func NewMockLoadBalancerBackendAddressPoolsClient(ctrl *gomock.Controller) *MockLoadBalancerBackendAddressPoolsClient {
	mock := &MockLoadBalancerBackendAddressPoolsClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerBackendAddressPoolsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerBackendAddressPoolsClient) EXPECT() *MockLoadBalancerBackendAddressPoolsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLoadBalancerBackendAddressPoolsClient) Get(ctx context.Context, resourceGroupName, loadBalancerName, backendAddressPoolName string, options *armnetwork.LoadBalancerBackendAddressPoolsClientGetOptions) (armnetwork.LoadBalancerBackendAddressPoolsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, loadBalancerName, backendAddressPoolName, options)
	ret0, _ := ret[0].(armnetwork.LoadBalancerBackendAddressPoolsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoadBalancerBackendAddressPoolsClientMockRecorder) Get(ctx, resourceGroupName, loadBalancerName, backendAddressPoolName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoadBalancerBackendAddressPoolsClient)(nil).Get), ctx, resourceGroupName, loadBalancerName, backendAddressPoolName, options)
}

// MockPrivateEndpointsClient is a mock of PrivateEndpointsClient interface.
type MockPrivateEndpointsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateEndpointsClientMockRecorder
	isgomock struct{}
}

// MockPrivateEndpointsClientMockRecorder is the mock recorder for MockPrivateEndpointsClient.
type MockPrivateEndpointsClientMockRecorder struct {
	mock *MockPrivateEndpointsClient
}

// NewMockPrivateEndpointsClient creates a new mock instance.
func NewMockPrivateEndpointsClient(ctrl *gomock.Controller) *MockPrivateEndpointsClient {
	mock := &MockPrivateEndpointsClient{ctrl: ctrl}
	mock.recorder = &MockPrivateEndpointsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateEndpointsClient) EXPECT() *MockPrivateEndpointsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateAndWait mocks base method.
func (m *MockPrivateEndpointsClient) CreateOrUpdateAndWait(ctx context.Context, resourceGroupName, privateEndpointName string, parameters armnetwork.PrivateEndpoint, options *armnetwork.PrivateEndpointsClientBeginCreateOrUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", ctx, resourceGroupName, privateEndpointName, parameters, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait.
func (mr *MockPrivateEndpointsClientMockRecorder) CreateOrUpdateAndWait(ctx, resourceGroupName, privateEndpointName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockPrivateEndpointsClient)(nil).CreateOrUpdateAndWait), ctx, resourceGroupName, privateEndpointName, parameters, options)
}

// DeleteAndWait mocks base method.
func (m *MockPrivateEndpointsClient) DeleteAndWait(ctx context.Context, resourceGroupName, publicIPAddressName string, options *armnetwork.PrivateEndpointsClientBeginDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, publicIPAddressName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockPrivateEndpointsClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, publicIPAddressName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockPrivateEndpointsClient)(nil).DeleteAndWait), ctx, resourceGroupName, publicIPAddressName, options)
}

// Get mocks base method.
func (m *MockPrivateEndpointsClient) Get(ctx context.Context, resourceGroupName, privateEndpointName string, options *armnetwork.PrivateEndpointsClientGetOptions) (armnetwork.PrivateEndpointsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, privateEndpointName, options)
	ret0, _ := ret[0].(armnetwork.PrivateEndpointsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPrivateEndpointsClientMockRecorder) Get(ctx, resourceGroupName, privateEndpointName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPrivateEndpointsClient)(nil).Get), ctx, resourceGroupName, privateEndpointName, options)
}

// MockPrivateLinkServicesClient is a mock of PrivateLinkServicesClient interface.
type MockPrivateLinkServicesClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateLinkServicesClientMockRecorder
	isgomock struct{}
}

// MockPrivateLinkServicesClientMockRecorder is the mock recorder for MockPrivateLinkServicesClient.
type MockPrivateLinkServicesClientMockRecorder struct {
	mock *MockPrivateLinkServicesClient
}

// NewMockPrivateLinkServicesClient creates a new mock instance.
func NewMockPrivateLinkServicesClient(ctrl *gomock.Controller) *MockPrivateLinkServicesClient {
	mock := &MockPrivateLinkServicesClient{ctrl: ctrl}
	mock.recorder = &MockPrivateLinkServicesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateLinkServicesClient) EXPECT() *MockPrivateLinkServicesClientMockRecorder {
	return m.recorder
}

// DeletePrivateEndpointConnectionAndWait mocks base method.
func (m *MockPrivateLinkServicesClient) DeletePrivateEndpointConnectionAndWait(ctx context.Context, resourceGroupName, serviceName, peConnectionName string, options *armnetwork.PrivateLinkServicesClientBeginDeletePrivateEndpointConnectionOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateEndpointConnectionAndWait", ctx, resourceGroupName, serviceName, peConnectionName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateEndpointConnectionAndWait indicates an expected call of DeletePrivateEndpointConnectionAndWait.
func (mr *MockPrivateLinkServicesClientMockRecorder) DeletePrivateEndpointConnectionAndWait(ctx, resourceGroupName, serviceName, peConnectionName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateEndpointConnectionAndWait", reflect.TypeOf((*MockPrivateLinkServicesClient)(nil).DeletePrivateEndpointConnectionAndWait), ctx, resourceGroupName, serviceName, peConnectionName, options)
}

// Get mocks base method.
func (m *MockPrivateLinkServicesClient) Get(ctx context.Context, resourceGroupName, serviceName string, options *armnetwork.PrivateLinkServicesClientGetOptions) (armnetwork.PrivateLinkServicesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, serviceName, options)
	ret0, _ := ret[0].(armnetwork.PrivateLinkServicesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPrivateLinkServicesClientMockRecorder) Get(ctx, resourceGroupName, serviceName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPrivateLinkServicesClient)(nil).Get), ctx, resourceGroupName, serviceName, options)
}

// List mocks base method.
func (m *MockPrivateLinkServicesClient) List(ctx context.Context, resourceGroupName string, options *armnetwork.PrivateLinkServicesClientListOptions) ([]*armnetwork.PrivateLinkService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, options)
	ret0, _ := ret[0].([]*armnetwork.PrivateLinkService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPrivateLinkServicesClientMockRecorder) List(ctx, resourceGroupName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPrivateLinkServicesClient)(nil).List), ctx, resourceGroupName, options)
}

// UpdatePrivateEndpointConnection mocks base method.
func (m *MockPrivateLinkServicesClient) UpdatePrivateEndpointConnection(ctx context.Context, resourceGroupName, serviceName, peConnectionName string, parameters armnetwork.PrivateEndpointConnection, options *armnetwork.PrivateLinkServicesClientUpdatePrivateEndpointConnectionOptions) (armnetwork.PrivateLinkServicesClientUpdatePrivateEndpointConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivateEndpointConnection", ctx, resourceGroupName, serviceName, peConnectionName, parameters, options)
	ret0, _ := ret[0].(armnetwork.PrivateLinkServicesClientUpdatePrivateEndpointConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateEndpointConnection indicates an expected call of UpdatePrivateEndpointConnection.
func (mr *MockPrivateLinkServicesClientMockRecorder) UpdatePrivateEndpointConnection(ctx, resourceGroupName, serviceName, peConnectionName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateEndpointConnection", reflect.TypeOf((*MockPrivateLinkServicesClient)(nil).UpdatePrivateEndpointConnection), ctx, resourceGroupName, serviceName, peConnectionName, parameters, options)
}

// MockPublicIPAddressesClient is a mock of PublicIPAddressesClient interface.
type MockPublicIPAddressesClient struct {
	ctrl     *gomock.Controller
	recorder *MockPublicIPAddressesClientMockRecorder
	isgomock struct{}
}

// MockPublicIPAddressesClientMockRecorder is the mock recorder for MockPublicIPAddressesClient.
type MockPublicIPAddressesClientMockRecorder struct {
	mock *MockPublicIPAddressesClient
}

// NewMockPublicIPAddressesClient creates a new mock instance.
func NewMockPublicIPAddressesClient(ctrl *gomock.Controller) *MockPublicIPAddressesClient {
	mock := &MockPublicIPAddressesClient{ctrl: ctrl}
	mock.recorder = &MockPublicIPAddressesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicIPAddressesClient) EXPECT() *MockPublicIPAddressesClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateAndWait mocks base method.
func (m *MockPublicIPAddressesClient) CreateOrUpdateAndWait(ctx context.Context, resourceGroupName, publicIPAddressName string, parameters armnetwork.PublicIPAddress, options *armnetwork.PublicIPAddressesClientBeginCreateOrUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", ctx, resourceGroupName, publicIPAddressName, parameters, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait.
func (mr *MockPublicIPAddressesClientMockRecorder) CreateOrUpdateAndWait(ctx, resourceGroupName, publicIPAddressName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).CreateOrUpdateAndWait), ctx, resourceGroupName, publicIPAddressName, parameters, options)
}

// DeleteAndWait mocks base method.
func (m *MockPublicIPAddressesClient) DeleteAndWait(ctx context.Context, resourceGroupName, publicIPAddressName string, options *armnetwork.PublicIPAddressesClientBeginDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, publicIPAddressName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockPublicIPAddressesClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, publicIPAddressName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).DeleteAndWait), ctx, resourceGroupName, publicIPAddressName, options)
}

// Get mocks base method.
func (m *MockPublicIPAddressesClient) Get(ctx context.Context, resourceGroupName, publicIPAddressName string, options *armnetwork.PublicIPAddressesClientGetOptions) (armnetwork.PublicIPAddressesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, publicIPAddressName, options)
	ret0, _ := ret[0].(armnetwork.PublicIPAddressesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPublicIPAddressesClientMockRecorder) Get(ctx, resourceGroupName, publicIPAddressName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).Get), ctx, resourceGroupName, publicIPAddressName, options)
}

// List mocks base method.
func (m *MockPublicIPAddressesClient) List(ctx context.Context, resourceGroupName string, options *armnetwork.PublicIPAddressesClientListOptions) ([]*armnetwork.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, options)
	ret0, _ := ret[0].([]*armnetwork.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPublicIPAddressesClientMockRecorder) List(ctx, resourceGroupName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPublicIPAddressesClient)(nil).List), ctx, resourceGroupName, options)
}

// MockRouteTablesClient is a mock of RouteTablesClient interface.
type MockRouteTablesClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTablesClientMockRecorder
	isgomock struct{}
}

// MockRouteTablesClientMockRecorder is the mock recorder for MockRouteTablesClient.
type MockRouteTablesClientMockRecorder struct {
	mock *MockRouteTablesClient
}

// NewMockRouteTablesClient creates a new mock instance.
func NewMockRouteTablesClient(ctrl *gomock.Controller) *MockRouteTablesClient {
	mock := &MockRouteTablesClient{ctrl: ctrl}
	mock.recorder = &MockRouteTablesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTablesClient) EXPECT() *MockRouteTablesClientMockRecorder {
	return m.recorder
}

// DeleteAndWait mocks base method.
func (m *MockRouteTablesClient) DeleteAndWait(ctx context.Context, resourceGroupName, routeTableName string, options *armnetwork.RouteTablesClientBeginDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, routeTableName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockRouteTablesClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, routeTableName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockRouteTablesClient)(nil).DeleteAndWait), ctx, resourceGroupName, routeTableName, options)
}

// Get mocks base method.
func (m *MockRouteTablesClient) Get(ctx context.Context, resourceGroupName, routeTableName string, options *armnetwork.RouteTablesClientGetOptions) (armnetwork.RouteTablesClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, routeTableName, options)
	ret0, _ := ret[0].(armnetwork.RouteTablesClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRouteTablesClientMockRecorder) Get(ctx, resourceGroupName, routeTableName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteTablesClient)(nil).Get), ctx, resourceGroupName, routeTableName, options)
}

// MockSecurityGroupsClient is a mock of SecurityGroupsClient interface.
type MockSecurityGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupsClientMockRecorder
	isgomock struct{}
}

// MockSecurityGroupsClientMockRecorder is the mock recorder for MockSecurityGroupsClient.
type MockSecurityGroupsClientMockRecorder struct {
	mock *MockSecurityGroupsClient
}

// NewMockSecurityGroupsClient creates a new mock instance.
func NewMockSecurityGroupsClient(ctrl *gomock.Controller) *MockSecurityGroupsClient {
	mock := &MockSecurityGroupsClient{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityGroupsClient) EXPECT() *MockSecurityGroupsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateAndWait mocks base method.
func (m *MockSecurityGroupsClient) CreateOrUpdateAndWait(ctx context.Context, resourceGroupName, networkSecurityGroupName string, parameters armnetwork.SecurityGroup, options *armnetwork.SecurityGroupsClientBeginCreateOrUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", ctx, resourceGroupName, networkSecurityGroupName, parameters, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait.
func (mr *MockSecurityGroupsClientMockRecorder) CreateOrUpdateAndWait(ctx, resourceGroupName, networkSecurityGroupName, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockSecurityGroupsClient)(nil).CreateOrUpdateAndWait), ctx, resourceGroupName, networkSecurityGroupName, parameters, options)
}

// DeleteAndWait mocks base method.
func (m *MockSecurityGroupsClient) DeleteAndWait(ctx context.Context, resourceGroupName, networkSecurityGroupName string, options *armnetwork.SecurityGroupsClientBeginDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, networkSecurityGroupName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockSecurityGroupsClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, networkSecurityGroupName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockSecurityGroupsClient)(nil).DeleteAndWait), ctx, resourceGroupName, networkSecurityGroupName, options)
}

// Get mocks base method.
func (m *MockSecurityGroupsClient) Get(ctx context.Context, resourceGroupName, networkSecurityGroupName string, options *armnetwork.SecurityGroupsClientGetOptions) (armnetwork.SecurityGroupsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, networkSecurityGroupName, options)
	ret0, _ := ret[0].(armnetwork.SecurityGroupsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecurityGroupsClientMockRecorder) Get(ctx, resourceGroupName, networkSecurityGroupName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecurityGroupsClient)(nil).Get), ctx, resourceGroupName, networkSecurityGroupName, options)
}

// List mocks base method.
func (m *MockSecurityGroupsClient) List(ctx context.Context, resourceGroupName string, options *armnetwork.SecurityGroupsClientListOptions) ([]*armnetwork.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, options)
	ret0, _ := ret[0].([]*armnetwork.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecurityGroupsClientMockRecorder) List(ctx, resourceGroupName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecurityGroupsClient)(nil).List), ctx, resourceGroupName, options)
}

// MockSubnetsClient is a mock of SubnetsClient interface.
type MockSubnetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetsClientMockRecorder
	isgomock struct{}
}

// MockSubnetsClientMockRecorder is the mock recorder for MockSubnetsClient.
type MockSubnetsClientMockRecorder struct {
	mock *MockSubnetsClient
}

// NewMockSubnetsClient creates a new mock instance.
func NewMockSubnetsClient(ctrl *gomock.Controller) *MockSubnetsClient {
	mock := &MockSubnetsClient{ctrl: ctrl}
	mock.recorder = &MockSubnetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetsClient) EXPECT() *MockSubnetsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateAndWait mocks base method.
func (m *MockSubnetsClient) CreateOrUpdateAndWait(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string, subnetParameters armnetwork.Subnet, options *armnetwork.SubnetsClientBeginCreateOrUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", ctx, resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait.
func (mr *MockSubnetsClientMockRecorder) CreateOrUpdateAndWait(ctx, resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockSubnetsClient)(nil).CreateOrUpdateAndWait), ctx, resourceGroupName, virtualNetworkName, subnetName, subnetParameters, options)
}

// DeleteAndWait mocks base method.
func (m *MockSubnetsClient) DeleteAndWait(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string, options *armnetwork.SubnetsClientBeginDeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, virtualNetworkName, subnetName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockSubnetsClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, virtualNetworkName, subnetName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockSubnetsClient)(nil).DeleteAndWait), ctx, resourceGroupName, virtualNetworkName, subnetName, options)
}

// Get mocks base method.
func (m *MockSubnetsClient) Get(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string, options *armnetwork.SubnetsClientGetOptions) (armnetwork.SubnetsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkName, subnetName, options)
	ret0, _ := ret[0].(armnetwork.SubnetsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubnetsClientMockRecorder) Get(ctx, resourceGroupName, virtualNetworkName, subnetName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubnetsClient)(nil).Get), ctx, resourceGroupName, virtualNetworkName, subnetName, options)
}

// List mocks base method.
func (m *MockSubnetsClient) List(ctx context.Context, resourceGroupName, virtualNetworkName string, options *armnetwork.SubnetsClientListOptions) ([]*armnetwork.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, virtualNetworkName, options)
	ret0, _ := ret[0].([]*armnetwork.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubnetsClientMockRecorder) List(ctx, resourceGroupName, virtualNetworkName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubnetsClient)(nil).List), ctx, resourceGroupName, virtualNetworkName, options)
}

// MockUsagesClient is a mock of UsagesClient interface.
type MockUsagesClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsagesClientMockRecorder
	isgomock struct{}
}

// MockUsagesClientMockRecorder is the mock recorder for MockUsagesClient.
type MockUsagesClientMockRecorder struct {
	mock *MockUsagesClient
}

// NewMockUsagesClient creates a new mock instance.
func NewMockUsagesClient(ctrl *gomock.Controller) *MockUsagesClient {
	mock := &MockUsagesClient{ctrl: ctrl}
	mock.recorder = &MockUsagesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsagesClient) EXPECT() *MockUsagesClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockUsagesClient) List(ctx context.Context, location string, options *armnetwork.UsagesClientListOptions) ([]*armnetwork.Usage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, location, options)
	ret0, _ := ret[0].([]*armnetwork.Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUsagesClientMockRecorder) List(ctx, location, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsagesClient)(nil).List), ctx, location, options)
}

// MockVirtualNetworksClient is a mock of VirtualNetworksClient interface.
type MockVirtualNetworksClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworksClientMockRecorder
	isgomock struct{}
}

// MockVirtualNetworksClientMockRecorder is the mock recorder for MockVirtualNetworksClient.
type MockVirtualNetworksClientMockRecorder struct {
	mock *MockVirtualNetworksClient
}

// NewMockVirtualNetworksClient creates a new mock instance.
func NewMockVirtualNetworksClient(ctrl *gomock.Controller) *MockVirtualNetworksClient {
	mock := &MockVirtualNetworksClient{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualNetworksClient) EXPECT() *MockVirtualNetworksClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVirtualNetworksClient) Get(ctx context.Context, resourceGroupName, virtualNetworkName string, options *armnetwork.VirtualNetworksClientGetOptions) (armnetwork.VirtualNetworksClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkName, options)
	ret0, _ := ret[0].(armnetwork.VirtualNetworksClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualNetworksClientMockRecorder) Get(ctx, resourceGroupName, virtualNetworkName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworksClient)(nil).Get), ctx, resourceGroupName, virtualNetworkName, options)
}
