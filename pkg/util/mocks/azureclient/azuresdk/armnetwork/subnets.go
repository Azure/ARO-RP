// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/util/azureclient/azuresdk/armnetwork/subnets.go

// Package mock_armnetwork is a generated GoMock package.
package mock_armnetwork

import (
	context "context"
	reflect "reflect"

	armnetwork "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockSubnetsClient is a mock of SubnetsClient interface.
type MockSubnetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetsClientMockRecorder
}

// MockSubnetsClientMockRecorder is the mock recorder for MockSubnetsClient.
type MockSubnetsClientMockRecorder struct {
	mock *MockSubnetsClient
}

// NewMockSubnetsClient creates a new mock instance.
func NewMockSubnetsClient(ctrl *gomock.Controller) *MockSubnetsClient {
	mock := &MockSubnetsClient{ctrl: ctrl}
	mock.recorder = &MockSubnetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetsClient) EXPECT() *MockSubnetsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSubnetsClient) Get(ctx context.Context, resourceGroupName, virtualNetworkName, subnetName string, options *armnetwork.SubnetsClientGetOptions) (armnetwork.SubnetsClientGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, virtualNetworkName, subnetName, options)
	ret0, _ := ret[0].(armnetwork.SubnetsClientGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubnetsClientMockRecorder) Get(ctx, resourceGroupName, virtualNetworkName, subnetName, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubnetsClient)(nil).Get), ctx, resourceGroupName, virtualNetworkName, subnetName, options)
}
