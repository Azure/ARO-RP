// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -typed -source ./client.go -destination=../../../mocks/azureclient/azuresdk/azcertificates/azcertificates.go github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/azcertificates Client
//

// Package mock_azcertificates is a generated GoMock package.
package mock_azcertificates

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	runtime "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	azcertificates "github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azcertificates"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BackupCertificate mocks base method.
func (m *MockClient) BackupCertificate(ctx context.Context, name string, options *azcertificates.BackupCertificateOptions) (azcertificates.BackupCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupCertificate", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.BackupCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupCertificate indicates an expected call of BackupCertificate.
func (mr *MockClientMockRecorder) BackupCertificate(ctx, name, options any) *MockClientBackupCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupCertificate", reflect.TypeOf((*MockClient)(nil).BackupCertificate), ctx, name, options)
	return &MockClientBackupCertificateCall{Call: call}
}

// MockClientBackupCertificateCall wrap *gomock.Call
type MockClientBackupCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientBackupCertificateCall) Return(arg0 azcertificates.BackupCertificateResponse, arg1 error) *MockClientBackupCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientBackupCertificateCall) Do(f func(context.Context, string, *azcertificates.BackupCertificateOptions) (azcertificates.BackupCertificateResponse, error)) *MockClientBackupCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientBackupCertificateCall) DoAndReturn(f func(context.Context, string, *azcertificates.BackupCertificateOptions) (azcertificates.BackupCertificateResponse, error)) *MockClientBackupCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCertificate mocks base method.
func (m *MockClient) CreateCertificate(ctx context.Context, name string, parameters azcertificates.CreateCertificateParameters, options *azcertificates.CreateCertificateOptions) (azcertificates.CreateCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", ctx, name, parameters, options)
	ret0, _ := ret[0].(azcertificates.CreateCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockClientMockRecorder) CreateCertificate(ctx, name, parameters, options any) *MockClientCreateCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockClient)(nil).CreateCertificate), ctx, name, parameters, options)
	return &MockClientCreateCertificateCall{Call: call}
}

// MockClientCreateCertificateCall wrap *gomock.Call
type MockClientCreateCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientCreateCertificateCall) Return(arg0 azcertificates.CreateCertificateResponse, arg1 error) *MockClientCreateCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientCreateCertificateCall) Do(f func(context.Context, string, azcertificates.CreateCertificateParameters, *azcertificates.CreateCertificateOptions) (azcertificates.CreateCertificateResponse, error)) *MockClientCreateCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientCreateCertificateCall) DoAndReturn(f func(context.Context, string, azcertificates.CreateCertificateParameters, *azcertificates.CreateCertificateOptions) (azcertificates.CreateCertificateResponse, error)) *MockClientCreateCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCertificate mocks base method.
func (m *MockClient) DeleteCertificate(ctx context.Context, name string, options *azcertificates.DeleteCertificateOptions) (azcertificates.DeleteCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.DeleteCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockClientMockRecorder) DeleteCertificate(ctx, name, options any) *MockClientDeleteCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockClient)(nil).DeleteCertificate), ctx, name, options)
	return &MockClientDeleteCertificateCall{Call: call}
}

// MockClientDeleteCertificateCall wrap *gomock.Call
type MockClientDeleteCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteCertificateCall) Return(arg0 azcertificates.DeleteCertificateResponse, arg1 error) *MockClientDeleteCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteCertificateCall) Do(f func(context.Context, string, *azcertificates.DeleteCertificateOptions) (azcertificates.DeleteCertificateResponse, error)) *MockClientDeleteCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteCertificateCall) DoAndReturn(f func(context.Context, string, *azcertificates.DeleteCertificateOptions) (azcertificates.DeleteCertificateResponse, error)) *MockClientDeleteCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCertificateOperation mocks base method.
func (m *MockClient) DeleteCertificateOperation(ctx context.Context, name string, options *azcertificates.DeleteCertificateOperationOptions) (azcertificates.DeleteCertificateOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateOperation", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.DeleteCertificateOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCertificateOperation indicates an expected call of DeleteCertificateOperation.
func (mr *MockClientMockRecorder) DeleteCertificateOperation(ctx, name, options any) *MockClientDeleteCertificateOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateOperation", reflect.TypeOf((*MockClient)(nil).DeleteCertificateOperation), ctx, name, options)
	return &MockClientDeleteCertificateOperationCall{Call: call}
}

// MockClientDeleteCertificateOperationCall wrap *gomock.Call
type MockClientDeleteCertificateOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteCertificateOperationCall) Return(arg0 azcertificates.DeleteCertificateOperationResponse, arg1 error) *MockClientDeleteCertificateOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteCertificateOperationCall) Do(f func(context.Context, string, *azcertificates.DeleteCertificateOperationOptions) (azcertificates.DeleteCertificateOperationResponse, error)) *MockClientDeleteCertificateOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteCertificateOperationCall) DoAndReturn(f func(context.Context, string, *azcertificates.DeleteCertificateOperationOptions) (azcertificates.DeleteCertificateOperationResponse, error)) *MockClientDeleteCertificateOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteContacts mocks base method.
func (m *MockClient) DeleteContacts(ctx context.Context, options *azcertificates.DeleteContactsOptions) (azcertificates.DeleteContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContacts", ctx, options)
	ret0, _ := ret[0].(azcertificates.DeleteContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContacts indicates an expected call of DeleteContacts.
func (mr *MockClientMockRecorder) DeleteContacts(ctx, options any) *MockClientDeleteContactsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContacts", reflect.TypeOf((*MockClient)(nil).DeleteContacts), ctx, options)
	return &MockClientDeleteContactsCall{Call: call}
}

// MockClientDeleteContactsCall wrap *gomock.Call
type MockClientDeleteContactsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteContactsCall) Return(arg0 azcertificates.DeleteContactsResponse, arg1 error) *MockClientDeleteContactsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteContactsCall) Do(f func(context.Context, *azcertificates.DeleteContactsOptions) (azcertificates.DeleteContactsResponse, error)) *MockClientDeleteContactsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteContactsCall) DoAndReturn(f func(context.Context, *azcertificates.DeleteContactsOptions) (azcertificates.DeleteContactsResponse, error)) *MockClientDeleteContactsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIssuer mocks base method.
func (m *MockClient) DeleteIssuer(ctx context.Context, issuerName string, options *azcertificates.DeleteIssuerOptions) (azcertificates.DeleteIssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssuer", ctx, issuerName, options)
	ret0, _ := ret[0].(azcertificates.DeleteIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssuer indicates an expected call of DeleteIssuer.
func (mr *MockClientMockRecorder) DeleteIssuer(ctx, issuerName, options any) *MockClientDeleteIssuerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssuer", reflect.TypeOf((*MockClient)(nil).DeleteIssuer), ctx, issuerName, options)
	return &MockClientDeleteIssuerCall{Call: call}
}

// MockClientDeleteIssuerCall wrap *gomock.Call
type MockClientDeleteIssuerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteIssuerCall) Return(arg0 azcertificates.DeleteIssuerResponse, arg1 error) *MockClientDeleteIssuerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteIssuerCall) Do(f func(context.Context, string, *azcertificates.DeleteIssuerOptions) (azcertificates.DeleteIssuerResponse, error)) *MockClientDeleteIssuerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteIssuerCall) DoAndReturn(f func(context.Context, string, *azcertificates.DeleteIssuerOptions) (azcertificates.DeleteIssuerResponse, error)) *MockClientDeleteIssuerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCertificate mocks base method.
func (m *MockClient) GetCertificate(ctx context.Context, name, version string, options *azcertificates.GetCertificateOptions) (azcertificates.GetCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", ctx, name, version, options)
	ret0, _ := ret[0].(azcertificates.GetCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockClientMockRecorder) GetCertificate(ctx, name, version, options any) *MockClientGetCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockClient)(nil).GetCertificate), ctx, name, version, options)
	return &MockClientGetCertificateCall{Call: call}
}

// MockClientGetCertificateCall wrap *gomock.Call
type MockClientGetCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetCertificateCall) Return(arg0 azcertificates.GetCertificateResponse, arg1 error) *MockClientGetCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetCertificateCall) Do(f func(context.Context, string, string, *azcertificates.GetCertificateOptions) (azcertificates.GetCertificateResponse, error)) *MockClientGetCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetCertificateCall) DoAndReturn(f func(context.Context, string, string, *azcertificates.GetCertificateOptions) (azcertificates.GetCertificateResponse, error)) *MockClientGetCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCertificateOperation mocks base method.
func (m *MockClient) GetCertificateOperation(ctx context.Context, name string, options *azcertificates.GetCertificateOperationOptions) (azcertificates.GetCertificateOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateOperation", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.GetCertificateOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateOperation indicates an expected call of GetCertificateOperation.
func (mr *MockClientMockRecorder) GetCertificateOperation(ctx, name, options any) *MockClientGetCertificateOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateOperation", reflect.TypeOf((*MockClient)(nil).GetCertificateOperation), ctx, name, options)
	return &MockClientGetCertificateOperationCall{Call: call}
}

// MockClientGetCertificateOperationCall wrap *gomock.Call
type MockClientGetCertificateOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetCertificateOperationCall) Return(arg0 azcertificates.GetCertificateOperationResponse, arg1 error) *MockClientGetCertificateOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetCertificateOperationCall) Do(f func(context.Context, string, *azcertificates.GetCertificateOperationOptions) (azcertificates.GetCertificateOperationResponse, error)) *MockClientGetCertificateOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetCertificateOperationCall) DoAndReturn(f func(context.Context, string, *azcertificates.GetCertificateOperationOptions) (azcertificates.GetCertificateOperationResponse, error)) *MockClientGetCertificateOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCertificatePolicy mocks base method.
func (m *MockClient) GetCertificatePolicy(ctx context.Context, name string, options *azcertificates.GetCertificatePolicyOptions) (azcertificates.GetCertificatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificatePolicy", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.GetCertificatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificatePolicy indicates an expected call of GetCertificatePolicy.
func (mr *MockClientMockRecorder) GetCertificatePolicy(ctx, name, options any) *MockClientGetCertificatePolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificatePolicy", reflect.TypeOf((*MockClient)(nil).GetCertificatePolicy), ctx, name, options)
	return &MockClientGetCertificatePolicyCall{Call: call}
}

// MockClientGetCertificatePolicyCall wrap *gomock.Call
type MockClientGetCertificatePolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetCertificatePolicyCall) Return(arg0 azcertificates.GetCertificatePolicyResponse, arg1 error) *MockClientGetCertificatePolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetCertificatePolicyCall) Do(f func(context.Context, string, *azcertificates.GetCertificatePolicyOptions) (azcertificates.GetCertificatePolicyResponse, error)) *MockClientGetCertificatePolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetCertificatePolicyCall) DoAndReturn(f func(context.Context, string, *azcertificates.GetCertificatePolicyOptions) (azcertificates.GetCertificatePolicyResponse, error)) *MockClientGetCertificatePolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContacts mocks base method.
func (m *MockClient) GetContacts(ctx context.Context, options *azcertificates.GetContactsOptions) (azcertificates.GetContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx, options)
	ret0, _ := ret[0].(azcertificates.GetContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockClientMockRecorder) GetContacts(ctx, options any) *MockClientGetContactsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockClient)(nil).GetContacts), ctx, options)
	return &MockClientGetContactsCall{Call: call}
}

// MockClientGetContactsCall wrap *gomock.Call
type MockClientGetContactsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetContactsCall) Return(arg0 azcertificates.GetContactsResponse, arg1 error) *MockClientGetContactsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetContactsCall) Do(f func(context.Context, *azcertificates.GetContactsOptions) (azcertificates.GetContactsResponse, error)) *MockClientGetContactsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetContactsCall) DoAndReturn(f func(context.Context, *azcertificates.GetContactsOptions) (azcertificates.GetContactsResponse, error)) *MockClientGetContactsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDeletedCertificate mocks base method.
func (m *MockClient) GetDeletedCertificate(ctx context.Context, name string, options *azcertificates.GetDeletedCertificateOptions) (azcertificates.GetDeletedCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedCertificate", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.GetDeletedCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedCertificate indicates an expected call of GetDeletedCertificate.
func (mr *MockClientMockRecorder) GetDeletedCertificate(ctx, name, options any) *MockClientGetDeletedCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedCertificate", reflect.TypeOf((*MockClient)(nil).GetDeletedCertificate), ctx, name, options)
	return &MockClientGetDeletedCertificateCall{Call: call}
}

// MockClientGetDeletedCertificateCall wrap *gomock.Call
type MockClientGetDeletedCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetDeletedCertificateCall) Return(arg0 azcertificates.GetDeletedCertificateResponse, arg1 error) *MockClientGetDeletedCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetDeletedCertificateCall) Do(f func(context.Context, string, *azcertificates.GetDeletedCertificateOptions) (azcertificates.GetDeletedCertificateResponse, error)) *MockClientGetDeletedCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetDeletedCertificateCall) DoAndReturn(f func(context.Context, string, *azcertificates.GetDeletedCertificateOptions) (azcertificates.GetDeletedCertificateResponse, error)) *MockClientGetDeletedCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIssuer mocks base method.
func (m *MockClient) GetIssuer(ctx context.Context, issuerName string, options *azcertificates.GetIssuerOptions) (azcertificates.GetIssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer", ctx, issuerName, options)
	ret0, _ := ret[0].(azcertificates.GetIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockClientMockRecorder) GetIssuer(ctx, issuerName, options any) *MockClientGetIssuerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockClient)(nil).GetIssuer), ctx, issuerName, options)
	return &MockClientGetIssuerCall{Call: call}
}

// MockClientGetIssuerCall wrap *gomock.Call
type MockClientGetIssuerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetIssuerCall) Return(arg0 azcertificates.GetIssuerResponse, arg1 error) *MockClientGetIssuerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetIssuerCall) Do(f func(context.Context, string, *azcertificates.GetIssuerOptions) (azcertificates.GetIssuerResponse, error)) *MockClientGetIssuerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetIssuerCall) DoAndReturn(f func(context.Context, string, *azcertificates.GetIssuerOptions) (azcertificates.GetIssuerResponse, error)) *MockClientGetIssuerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportCertificate mocks base method.
func (m *MockClient) ImportCertificate(ctx context.Context, name string, parameters azcertificates.ImportCertificateParameters, options *azcertificates.ImportCertificateOptions) (azcertificates.ImportCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCertificate", ctx, name, parameters, options)
	ret0, _ := ret[0].(azcertificates.ImportCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCertificate indicates an expected call of ImportCertificate.
func (mr *MockClientMockRecorder) ImportCertificate(ctx, name, parameters, options any) *MockClientImportCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificate", reflect.TypeOf((*MockClient)(nil).ImportCertificate), ctx, name, parameters, options)
	return &MockClientImportCertificateCall{Call: call}
}

// MockClientImportCertificateCall wrap *gomock.Call
type MockClientImportCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientImportCertificateCall) Return(arg0 azcertificates.ImportCertificateResponse, arg1 error) *MockClientImportCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientImportCertificateCall) Do(f func(context.Context, string, azcertificates.ImportCertificateParameters, *azcertificates.ImportCertificateOptions) (azcertificates.ImportCertificateResponse, error)) *MockClientImportCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientImportCertificateCall) DoAndReturn(f func(context.Context, string, azcertificates.ImportCertificateParameters, *azcertificates.ImportCertificateOptions) (azcertificates.ImportCertificateResponse, error)) *MockClientImportCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MergeCertificate mocks base method.
func (m *MockClient) MergeCertificate(ctx context.Context, name string, parameters azcertificates.MergeCertificateParameters, options *azcertificates.MergeCertificateOptions) (azcertificates.MergeCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeCertificate", ctx, name, parameters, options)
	ret0, _ := ret[0].(azcertificates.MergeCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeCertificate indicates an expected call of MergeCertificate.
func (mr *MockClientMockRecorder) MergeCertificate(ctx, name, parameters, options any) *MockClientMergeCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeCertificate", reflect.TypeOf((*MockClient)(nil).MergeCertificate), ctx, name, parameters, options)
	return &MockClientMergeCertificateCall{Call: call}
}

// MockClientMergeCertificateCall wrap *gomock.Call
type MockClientMergeCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientMergeCertificateCall) Return(arg0 azcertificates.MergeCertificateResponse, arg1 error) *MockClientMergeCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientMergeCertificateCall) Do(f func(context.Context, string, azcertificates.MergeCertificateParameters, *azcertificates.MergeCertificateOptions) (azcertificates.MergeCertificateResponse, error)) *MockClientMergeCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientMergeCertificateCall) DoAndReturn(f func(context.Context, string, azcertificates.MergeCertificateParameters, *azcertificates.MergeCertificateOptions) (azcertificates.MergeCertificateResponse, error)) *MockClientMergeCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListCertificatePropertiesPager mocks base method.
func (m *MockClient) NewListCertificatePropertiesPager(options *azcertificates.ListCertificatePropertiesOptions) *runtime.Pager[azcertificates.ListCertificatePropertiesResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListCertificatePropertiesPager", options)
	ret0, _ := ret[0].(*runtime.Pager[azcertificates.ListCertificatePropertiesResponse])
	return ret0
}

// NewListCertificatePropertiesPager indicates an expected call of NewListCertificatePropertiesPager.
func (mr *MockClientMockRecorder) NewListCertificatePropertiesPager(options any) *MockClientNewListCertificatePropertiesPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListCertificatePropertiesPager", reflect.TypeOf((*MockClient)(nil).NewListCertificatePropertiesPager), options)
	return &MockClientNewListCertificatePropertiesPagerCall{Call: call}
}

// MockClientNewListCertificatePropertiesPagerCall wrap *gomock.Call
type MockClientNewListCertificatePropertiesPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientNewListCertificatePropertiesPagerCall) Return(arg0 *runtime.Pager[azcertificates.ListCertificatePropertiesResponse]) *MockClientNewListCertificatePropertiesPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientNewListCertificatePropertiesPagerCall) Do(f func(*azcertificates.ListCertificatePropertiesOptions) *runtime.Pager[azcertificates.ListCertificatePropertiesResponse]) *MockClientNewListCertificatePropertiesPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientNewListCertificatePropertiesPagerCall) DoAndReturn(f func(*azcertificates.ListCertificatePropertiesOptions) *runtime.Pager[azcertificates.ListCertificatePropertiesResponse]) *MockClientNewListCertificatePropertiesPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListCertificatePropertiesVersionsPager mocks base method.
func (m *MockClient) NewListCertificatePropertiesVersionsPager(name string, options *azcertificates.ListCertificatePropertiesVersionsOptions) *runtime.Pager[azcertificates.ListCertificatePropertiesVersionsResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListCertificatePropertiesVersionsPager", name, options)
	ret0, _ := ret[0].(*runtime.Pager[azcertificates.ListCertificatePropertiesVersionsResponse])
	return ret0
}

// NewListCertificatePropertiesVersionsPager indicates an expected call of NewListCertificatePropertiesVersionsPager.
func (mr *MockClientMockRecorder) NewListCertificatePropertiesVersionsPager(name, options any) *MockClientNewListCertificatePropertiesVersionsPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListCertificatePropertiesVersionsPager", reflect.TypeOf((*MockClient)(nil).NewListCertificatePropertiesVersionsPager), name, options)
	return &MockClientNewListCertificatePropertiesVersionsPagerCall{Call: call}
}

// MockClientNewListCertificatePropertiesVersionsPagerCall wrap *gomock.Call
type MockClientNewListCertificatePropertiesVersionsPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientNewListCertificatePropertiesVersionsPagerCall) Return(arg0 *runtime.Pager[azcertificates.ListCertificatePropertiesVersionsResponse]) *MockClientNewListCertificatePropertiesVersionsPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientNewListCertificatePropertiesVersionsPagerCall) Do(f func(string, *azcertificates.ListCertificatePropertiesVersionsOptions) *runtime.Pager[azcertificates.ListCertificatePropertiesVersionsResponse]) *MockClientNewListCertificatePropertiesVersionsPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientNewListCertificatePropertiesVersionsPagerCall) DoAndReturn(f func(string, *azcertificates.ListCertificatePropertiesVersionsOptions) *runtime.Pager[azcertificates.ListCertificatePropertiesVersionsResponse]) *MockClientNewListCertificatePropertiesVersionsPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListDeletedCertificatePropertiesPager mocks base method.
func (m *MockClient) NewListDeletedCertificatePropertiesPager(options *azcertificates.ListDeletedCertificatePropertiesOptions) *runtime.Pager[azcertificates.ListDeletedCertificatePropertiesResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDeletedCertificatePropertiesPager", options)
	ret0, _ := ret[0].(*runtime.Pager[azcertificates.ListDeletedCertificatePropertiesResponse])
	return ret0
}

// NewListDeletedCertificatePropertiesPager indicates an expected call of NewListDeletedCertificatePropertiesPager.
func (mr *MockClientMockRecorder) NewListDeletedCertificatePropertiesPager(options any) *MockClientNewListDeletedCertificatePropertiesPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDeletedCertificatePropertiesPager", reflect.TypeOf((*MockClient)(nil).NewListDeletedCertificatePropertiesPager), options)
	return &MockClientNewListDeletedCertificatePropertiesPagerCall{Call: call}
}

// MockClientNewListDeletedCertificatePropertiesPagerCall wrap *gomock.Call
type MockClientNewListDeletedCertificatePropertiesPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientNewListDeletedCertificatePropertiesPagerCall) Return(arg0 *runtime.Pager[azcertificates.ListDeletedCertificatePropertiesResponse]) *MockClientNewListDeletedCertificatePropertiesPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientNewListDeletedCertificatePropertiesPagerCall) Do(f func(*azcertificates.ListDeletedCertificatePropertiesOptions) *runtime.Pager[azcertificates.ListDeletedCertificatePropertiesResponse]) *MockClientNewListDeletedCertificatePropertiesPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientNewListDeletedCertificatePropertiesPagerCall) DoAndReturn(f func(*azcertificates.ListDeletedCertificatePropertiesOptions) *runtime.Pager[azcertificates.ListDeletedCertificatePropertiesResponse]) *MockClientNewListDeletedCertificatePropertiesPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListIssuerPropertiesPager mocks base method.
func (m *MockClient) NewListIssuerPropertiesPager(options *azcertificates.ListIssuerPropertiesOptions) *runtime.Pager[azcertificates.ListIssuerPropertiesResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListIssuerPropertiesPager", options)
	ret0, _ := ret[0].(*runtime.Pager[azcertificates.ListIssuerPropertiesResponse])
	return ret0
}

// NewListIssuerPropertiesPager indicates an expected call of NewListIssuerPropertiesPager.
func (mr *MockClientMockRecorder) NewListIssuerPropertiesPager(options any) *MockClientNewListIssuerPropertiesPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListIssuerPropertiesPager", reflect.TypeOf((*MockClient)(nil).NewListIssuerPropertiesPager), options)
	return &MockClientNewListIssuerPropertiesPagerCall{Call: call}
}

// MockClientNewListIssuerPropertiesPagerCall wrap *gomock.Call
type MockClientNewListIssuerPropertiesPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientNewListIssuerPropertiesPagerCall) Return(arg0 *runtime.Pager[azcertificates.ListIssuerPropertiesResponse]) *MockClientNewListIssuerPropertiesPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientNewListIssuerPropertiesPagerCall) Do(f func(*azcertificates.ListIssuerPropertiesOptions) *runtime.Pager[azcertificates.ListIssuerPropertiesResponse]) *MockClientNewListIssuerPropertiesPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientNewListIssuerPropertiesPagerCall) DoAndReturn(f func(*azcertificates.ListIssuerPropertiesOptions) *runtime.Pager[azcertificates.ListIssuerPropertiesResponse]) *MockClientNewListIssuerPropertiesPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PurgeDeletedCertificate mocks base method.
func (m *MockClient) PurgeDeletedCertificate(ctx context.Context, name string, options *azcertificates.PurgeDeletedCertificateOptions) (azcertificates.PurgeDeletedCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeDeletedCertificate", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.PurgeDeletedCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeDeletedCertificate indicates an expected call of PurgeDeletedCertificate.
func (mr *MockClientMockRecorder) PurgeDeletedCertificate(ctx, name, options any) *MockClientPurgeDeletedCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeDeletedCertificate", reflect.TypeOf((*MockClient)(nil).PurgeDeletedCertificate), ctx, name, options)
	return &MockClientPurgeDeletedCertificateCall{Call: call}
}

// MockClientPurgeDeletedCertificateCall wrap *gomock.Call
type MockClientPurgeDeletedCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientPurgeDeletedCertificateCall) Return(arg0 azcertificates.PurgeDeletedCertificateResponse, arg1 error) *MockClientPurgeDeletedCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientPurgeDeletedCertificateCall) Do(f func(context.Context, string, *azcertificates.PurgeDeletedCertificateOptions) (azcertificates.PurgeDeletedCertificateResponse, error)) *MockClientPurgeDeletedCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientPurgeDeletedCertificateCall) DoAndReturn(f func(context.Context, string, *azcertificates.PurgeDeletedCertificateOptions) (azcertificates.PurgeDeletedCertificateResponse, error)) *MockClientPurgeDeletedCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecoverDeletedCertificate mocks base method.
func (m *MockClient) RecoverDeletedCertificate(ctx context.Context, name string, options *azcertificates.RecoverDeletedCertificateOptions) (azcertificates.RecoverDeletedCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverDeletedCertificate", ctx, name, options)
	ret0, _ := ret[0].(azcertificates.RecoverDeletedCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverDeletedCertificate indicates an expected call of RecoverDeletedCertificate.
func (mr *MockClientMockRecorder) RecoverDeletedCertificate(ctx, name, options any) *MockClientRecoverDeletedCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverDeletedCertificate", reflect.TypeOf((*MockClient)(nil).RecoverDeletedCertificate), ctx, name, options)
	return &MockClientRecoverDeletedCertificateCall{Call: call}
}

// MockClientRecoverDeletedCertificateCall wrap *gomock.Call
type MockClientRecoverDeletedCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRecoverDeletedCertificateCall) Return(arg0 azcertificates.RecoverDeletedCertificateResponse, arg1 error) *MockClientRecoverDeletedCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRecoverDeletedCertificateCall) Do(f func(context.Context, string, *azcertificates.RecoverDeletedCertificateOptions) (azcertificates.RecoverDeletedCertificateResponse, error)) *MockClientRecoverDeletedCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRecoverDeletedCertificateCall) DoAndReturn(f func(context.Context, string, *azcertificates.RecoverDeletedCertificateOptions) (azcertificates.RecoverDeletedCertificateResponse, error)) *MockClientRecoverDeletedCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RestoreCertificate mocks base method.
func (m *MockClient) RestoreCertificate(ctx context.Context, parameters azcertificates.RestoreCertificateParameters, options *azcertificates.RestoreCertificateOptions) (azcertificates.RestoreCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreCertificate", ctx, parameters, options)
	ret0, _ := ret[0].(azcertificates.RestoreCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreCertificate indicates an expected call of RestoreCertificate.
func (mr *MockClientMockRecorder) RestoreCertificate(ctx, parameters, options any) *MockClientRestoreCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreCertificate", reflect.TypeOf((*MockClient)(nil).RestoreCertificate), ctx, parameters, options)
	return &MockClientRestoreCertificateCall{Call: call}
}

// MockClientRestoreCertificateCall wrap *gomock.Call
type MockClientRestoreCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRestoreCertificateCall) Return(arg0 azcertificates.RestoreCertificateResponse, arg1 error) *MockClientRestoreCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRestoreCertificateCall) Do(f func(context.Context, azcertificates.RestoreCertificateParameters, *azcertificates.RestoreCertificateOptions) (azcertificates.RestoreCertificateResponse, error)) *MockClientRestoreCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRestoreCertificateCall) DoAndReturn(f func(context.Context, azcertificates.RestoreCertificateParameters, *azcertificates.RestoreCertificateOptions) (azcertificates.RestoreCertificateResponse, error)) *MockClientRestoreCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetContacts mocks base method.
func (m *MockClient) SetContacts(ctx context.Context, contacts azcertificates.Contacts, options *azcertificates.SetContactsOptions) (azcertificates.SetContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContacts", ctx, contacts, options)
	ret0, _ := ret[0].(azcertificates.SetContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetContacts indicates an expected call of SetContacts.
func (mr *MockClientMockRecorder) SetContacts(ctx, contacts, options any) *MockClientSetContactsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContacts", reflect.TypeOf((*MockClient)(nil).SetContacts), ctx, contacts, options)
	return &MockClientSetContactsCall{Call: call}
}

// MockClientSetContactsCall wrap *gomock.Call
type MockClientSetContactsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSetContactsCall) Return(arg0 azcertificates.SetContactsResponse, arg1 error) *MockClientSetContactsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSetContactsCall) Do(f func(context.Context, azcertificates.Contacts, *azcertificates.SetContactsOptions) (azcertificates.SetContactsResponse, error)) *MockClientSetContactsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSetContactsCall) DoAndReturn(f func(context.Context, azcertificates.Contacts, *azcertificates.SetContactsOptions) (azcertificates.SetContactsResponse, error)) *MockClientSetContactsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetIssuer mocks base method.
func (m *MockClient) SetIssuer(ctx context.Context, issuerName string, parameter azcertificates.SetIssuerParameters, options *azcertificates.SetIssuerOptions) (azcertificates.SetIssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIssuer", ctx, issuerName, parameter, options)
	ret0, _ := ret[0].(azcertificates.SetIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIssuer indicates an expected call of SetIssuer.
func (mr *MockClientMockRecorder) SetIssuer(ctx, issuerName, parameter, options any) *MockClientSetIssuerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIssuer", reflect.TypeOf((*MockClient)(nil).SetIssuer), ctx, issuerName, parameter, options)
	return &MockClientSetIssuerCall{Call: call}
}

// MockClientSetIssuerCall wrap *gomock.Call
type MockClientSetIssuerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSetIssuerCall) Return(arg0 azcertificates.SetIssuerResponse, arg1 error) *MockClientSetIssuerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSetIssuerCall) Do(f func(context.Context, string, azcertificates.SetIssuerParameters, *azcertificates.SetIssuerOptions) (azcertificates.SetIssuerResponse, error)) *MockClientSetIssuerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSetIssuerCall) DoAndReturn(f func(context.Context, string, azcertificates.SetIssuerParameters, *azcertificates.SetIssuerOptions) (azcertificates.SetIssuerResponse, error)) *MockClientSetIssuerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCertificate mocks base method.
func (m *MockClient) UpdateCertificate(ctx context.Context, name, version string, parameters azcertificates.UpdateCertificateParameters, options *azcertificates.UpdateCertificateOptions) (azcertificates.UpdateCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificate", ctx, name, version, parameters, options)
	ret0, _ := ret[0].(azcertificates.UpdateCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificate indicates an expected call of UpdateCertificate.
func (mr *MockClientMockRecorder) UpdateCertificate(ctx, name, version, parameters, options any) *MockClientUpdateCertificateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificate", reflect.TypeOf((*MockClient)(nil).UpdateCertificate), ctx, name, version, parameters, options)
	return &MockClientUpdateCertificateCall{Call: call}
}

// MockClientUpdateCertificateCall wrap *gomock.Call
type MockClientUpdateCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUpdateCertificateCall) Return(arg0 azcertificates.UpdateCertificateResponse, arg1 error) *MockClientUpdateCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUpdateCertificateCall) Do(f func(context.Context, string, string, azcertificates.UpdateCertificateParameters, *azcertificates.UpdateCertificateOptions) (azcertificates.UpdateCertificateResponse, error)) *MockClientUpdateCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUpdateCertificateCall) DoAndReturn(f func(context.Context, string, string, azcertificates.UpdateCertificateParameters, *azcertificates.UpdateCertificateOptions) (azcertificates.UpdateCertificateResponse, error)) *MockClientUpdateCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCertificateOperation mocks base method.
func (m *MockClient) UpdateCertificateOperation(ctx context.Context, name string, certificateOperation azcertificates.UpdateCertificateOperationParameter, options *azcertificates.UpdateCertificateOperationOptions) (azcertificates.UpdateCertificateOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateOperation", ctx, name, certificateOperation, options)
	ret0, _ := ret[0].(azcertificates.UpdateCertificateOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificateOperation indicates an expected call of UpdateCertificateOperation.
func (mr *MockClientMockRecorder) UpdateCertificateOperation(ctx, name, certificateOperation, options any) *MockClientUpdateCertificateOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateOperation", reflect.TypeOf((*MockClient)(nil).UpdateCertificateOperation), ctx, name, certificateOperation, options)
	return &MockClientUpdateCertificateOperationCall{Call: call}
}

// MockClientUpdateCertificateOperationCall wrap *gomock.Call
type MockClientUpdateCertificateOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUpdateCertificateOperationCall) Return(arg0 azcertificates.UpdateCertificateOperationResponse, arg1 error) *MockClientUpdateCertificateOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUpdateCertificateOperationCall) Do(f func(context.Context, string, azcertificates.UpdateCertificateOperationParameter, *azcertificates.UpdateCertificateOperationOptions) (azcertificates.UpdateCertificateOperationResponse, error)) *MockClientUpdateCertificateOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUpdateCertificateOperationCall) DoAndReturn(f func(context.Context, string, azcertificates.UpdateCertificateOperationParameter, *azcertificates.UpdateCertificateOperationOptions) (azcertificates.UpdateCertificateOperationResponse, error)) *MockClientUpdateCertificateOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCertificatePolicy mocks base method.
func (m *MockClient) UpdateCertificatePolicy(ctx context.Context, name string, certificatePolicy azcertificates.CertificatePolicy, options *azcertificates.UpdateCertificatePolicyOptions) (azcertificates.UpdateCertificatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificatePolicy", ctx, name, certificatePolicy, options)
	ret0, _ := ret[0].(azcertificates.UpdateCertificatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCertificatePolicy indicates an expected call of UpdateCertificatePolicy.
func (mr *MockClientMockRecorder) UpdateCertificatePolicy(ctx, name, certificatePolicy, options any) *MockClientUpdateCertificatePolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificatePolicy", reflect.TypeOf((*MockClient)(nil).UpdateCertificatePolicy), ctx, name, certificatePolicy, options)
	return &MockClientUpdateCertificatePolicyCall{Call: call}
}

// MockClientUpdateCertificatePolicyCall wrap *gomock.Call
type MockClientUpdateCertificatePolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUpdateCertificatePolicyCall) Return(arg0 azcertificates.UpdateCertificatePolicyResponse, arg1 error) *MockClientUpdateCertificatePolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUpdateCertificatePolicyCall) Do(f func(context.Context, string, azcertificates.CertificatePolicy, *azcertificates.UpdateCertificatePolicyOptions) (azcertificates.UpdateCertificatePolicyResponse, error)) *MockClientUpdateCertificatePolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUpdateCertificatePolicyCall) DoAndReturn(f func(context.Context, string, azcertificates.CertificatePolicy, *azcertificates.UpdateCertificatePolicyOptions) (azcertificates.UpdateCertificatePolicyResponse, error)) *MockClientUpdateCertificatePolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateIssuer mocks base method.
func (m *MockClient) UpdateIssuer(ctx context.Context, issuerName string, parameter azcertificates.UpdateIssuerParameters, options *azcertificates.UpdateIssuerOptions) (azcertificates.UpdateIssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssuer", ctx, issuerName, parameter, options)
	ret0, _ := ret[0].(azcertificates.UpdateIssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIssuer indicates an expected call of UpdateIssuer.
func (mr *MockClientMockRecorder) UpdateIssuer(ctx, issuerName, parameter, options any) *MockClientUpdateIssuerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssuer", reflect.TypeOf((*MockClient)(nil).UpdateIssuer), ctx, issuerName, parameter, options)
	return &MockClientUpdateIssuerCall{Call: call}
}

// MockClientUpdateIssuerCall wrap *gomock.Call
type MockClientUpdateIssuerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUpdateIssuerCall) Return(arg0 azcertificates.UpdateIssuerResponse, arg1 error) *MockClientUpdateIssuerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUpdateIssuerCall) Do(f func(context.Context, string, azcertificates.UpdateIssuerParameters, *azcertificates.UpdateIssuerOptions) (azcertificates.UpdateIssuerResponse, error)) *MockClientUpdateIssuerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUpdateIssuerCall) DoAndReturn(f func(context.Context, string, azcertificates.UpdateIssuerParameters, *azcertificates.UpdateIssuerOptions) (azcertificates.UpdateIssuerResponse, error)) *MockClientUpdateIssuerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
