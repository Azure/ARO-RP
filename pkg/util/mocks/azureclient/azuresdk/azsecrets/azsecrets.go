// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -typed -source ./client.go -destination=../../../mocks/azureclient/azuresdk/azsecrets/azsecrets.go github.com/Azure/ARO-RP/pkg/util/azureclient/azuresdk/azsecrets Client
//

// Package mock_azsecrets is a generated GoMock package.
package mock_azsecrets

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	runtime "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	azsecrets "github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azsecrets"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BackupSecret mocks base method.
func (m *MockClient) BackupSecret(ctx context.Context, name string, options *azsecrets.BackupSecretOptions) (azsecrets.BackupSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupSecret", ctx, name, options)
	ret0, _ := ret[0].(azsecrets.BackupSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupSecret indicates an expected call of BackupSecret.
func (mr *MockClientMockRecorder) BackupSecret(ctx, name, options any) *MockClientBackupSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupSecret", reflect.TypeOf((*MockClient)(nil).BackupSecret), ctx, name, options)
	return &MockClientBackupSecretCall{Call: call}
}

// MockClientBackupSecretCall wrap *gomock.Call
type MockClientBackupSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientBackupSecretCall) Return(arg0 azsecrets.BackupSecretResponse, arg1 error) *MockClientBackupSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientBackupSecretCall) Do(f func(context.Context, string, *azsecrets.BackupSecretOptions) (azsecrets.BackupSecretResponse, error)) *MockClientBackupSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientBackupSecretCall) DoAndReturn(f func(context.Context, string, *azsecrets.BackupSecretOptions) (azsecrets.BackupSecretResponse, error)) *MockClientBackupSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSecret mocks base method.
func (m *MockClient) DeleteSecret(ctx context.Context, name string, options *azsecrets.DeleteSecretOptions) (azsecrets.DeleteSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, name, options)
	ret0, _ := ret[0].(azsecrets.DeleteSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockClientMockRecorder) DeleteSecret(ctx, name, options any) *MockClientDeleteSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockClient)(nil).DeleteSecret), ctx, name, options)
	return &MockClientDeleteSecretCall{Call: call}
}

// MockClientDeleteSecretCall wrap *gomock.Call
type MockClientDeleteSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientDeleteSecretCall) Return(arg0 azsecrets.DeleteSecretResponse, arg1 error) *MockClientDeleteSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientDeleteSecretCall) Do(f func(context.Context, string, *azsecrets.DeleteSecretOptions) (azsecrets.DeleteSecretResponse, error)) *MockClientDeleteSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientDeleteSecretCall) DoAndReturn(f func(context.Context, string, *azsecrets.DeleteSecretOptions) (azsecrets.DeleteSecretResponse, error)) *MockClientDeleteSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDeletedSecret mocks base method.
func (m *MockClient) GetDeletedSecret(ctx context.Context, name string, options *azsecrets.GetDeletedSecretOptions) (azsecrets.GetDeletedSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedSecret", ctx, name, options)
	ret0, _ := ret[0].(azsecrets.GetDeletedSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedSecret indicates an expected call of GetDeletedSecret.
func (mr *MockClientMockRecorder) GetDeletedSecret(ctx, name, options any) *MockClientGetDeletedSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedSecret", reflect.TypeOf((*MockClient)(nil).GetDeletedSecret), ctx, name, options)
	return &MockClientGetDeletedSecretCall{Call: call}
}

// MockClientGetDeletedSecretCall wrap *gomock.Call
type MockClientGetDeletedSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetDeletedSecretCall) Return(arg0 azsecrets.GetDeletedSecretResponse, arg1 error) *MockClientGetDeletedSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetDeletedSecretCall) Do(f func(context.Context, string, *azsecrets.GetDeletedSecretOptions) (azsecrets.GetDeletedSecretResponse, error)) *MockClientGetDeletedSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetDeletedSecretCall) DoAndReturn(f func(context.Context, string, *azsecrets.GetDeletedSecretOptions) (azsecrets.GetDeletedSecretResponse, error)) *MockClientGetDeletedSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecret mocks base method.
func (m *MockClient) GetSecret(ctx context.Context, name, version string, options *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, name, version, options)
	ret0, _ := ret[0].(azsecrets.GetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientMockRecorder) GetSecret(ctx, name, version, options any) *MockClientGetSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClient)(nil).GetSecret), ctx, name, version, options)
	return &MockClientGetSecretCall{Call: call}
}

// MockClientGetSecretCall wrap *gomock.Call
type MockClientGetSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientGetSecretCall) Return(arg0 azsecrets.GetSecretResponse, arg1 error) *MockClientGetSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientGetSecretCall) Do(f func(context.Context, string, string, *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error)) *MockClientGetSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientGetSecretCall) DoAndReturn(f func(context.Context, string, string, *azsecrets.GetSecretOptions) (azsecrets.GetSecretResponse, error)) *MockClientGetSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListDeletedSecretPropertiesPager mocks base method.
func (m *MockClient) NewListDeletedSecretPropertiesPager(options *azsecrets.ListDeletedSecretPropertiesOptions) *runtime.Pager[azsecrets.ListDeletedSecretPropertiesResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListDeletedSecretPropertiesPager", options)
	ret0, _ := ret[0].(*runtime.Pager[azsecrets.ListDeletedSecretPropertiesResponse])
	return ret0
}

// NewListDeletedSecretPropertiesPager indicates an expected call of NewListDeletedSecretPropertiesPager.
func (mr *MockClientMockRecorder) NewListDeletedSecretPropertiesPager(options any) *MockClientNewListDeletedSecretPropertiesPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListDeletedSecretPropertiesPager", reflect.TypeOf((*MockClient)(nil).NewListDeletedSecretPropertiesPager), options)
	return &MockClientNewListDeletedSecretPropertiesPagerCall{Call: call}
}

// MockClientNewListDeletedSecretPropertiesPagerCall wrap *gomock.Call
type MockClientNewListDeletedSecretPropertiesPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientNewListDeletedSecretPropertiesPagerCall) Return(arg0 *runtime.Pager[azsecrets.ListDeletedSecretPropertiesResponse]) *MockClientNewListDeletedSecretPropertiesPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientNewListDeletedSecretPropertiesPagerCall) Do(f func(*azsecrets.ListDeletedSecretPropertiesOptions) *runtime.Pager[azsecrets.ListDeletedSecretPropertiesResponse]) *MockClientNewListDeletedSecretPropertiesPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientNewListDeletedSecretPropertiesPagerCall) DoAndReturn(f func(*azsecrets.ListDeletedSecretPropertiesOptions) *runtime.Pager[azsecrets.ListDeletedSecretPropertiesResponse]) *MockClientNewListDeletedSecretPropertiesPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListSecretPropertiesPager mocks base method.
func (m *MockClient) NewListSecretPropertiesPager(options *azsecrets.ListSecretPropertiesOptions) *runtime.Pager[azsecrets.ListSecretPropertiesResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSecretPropertiesPager", options)
	ret0, _ := ret[0].(*runtime.Pager[azsecrets.ListSecretPropertiesResponse])
	return ret0
}

// NewListSecretPropertiesPager indicates an expected call of NewListSecretPropertiesPager.
func (mr *MockClientMockRecorder) NewListSecretPropertiesPager(options any) *MockClientNewListSecretPropertiesPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSecretPropertiesPager", reflect.TypeOf((*MockClient)(nil).NewListSecretPropertiesPager), options)
	return &MockClientNewListSecretPropertiesPagerCall{Call: call}
}

// MockClientNewListSecretPropertiesPagerCall wrap *gomock.Call
type MockClientNewListSecretPropertiesPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientNewListSecretPropertiesPagerCall) Return(arg0 *runtime.Pager[azsecrets.ListSecretPropertiesResponse]) *MockClientNewListSecretPropertiesPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientNewListSecretPropertiesPagerCall) Do(f func(*azsecrets.ListSecretPropertiesOptions) *runtime.Pager[azsecrets.ListSecretPropertiesResponse]) *MockClientNewListSecretPropertiesPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientNewListSecretPropertiesPagerCall) DoAndReturn(f func(*azsecrets.ListSecretPropertiesOptions) *runtime.Pager[azsecrets.ListSecretPropertiesResponse]) *MockClientNewListSecretPropertiesPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewListSecretPropertiesVersionsPager mocks base method.
func (m *MockClient) NewListSecretPropertiesVersionsPager(name string, options *azsecrets.ListSecretPropertiesVersionsOptions) *runtime.Pager[azsecrets.ListSecretPropertiesVersionsResponse] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListSecretPropertiesVersionsPager", name, options)
	ret0, _ := ret[0].(*runtime.Pager[azsecrets.ListSecretPropertiesVersionsResponse])
	return ret0
}

// NewListSecretPropertiesVersionsPager indicates an expected call of NewListSecretPropertiesVersionsPager.
func (mr *MockClientMockRecorder) NewListSecretPropertiesVersionsPager(name, options any) *MockClientNewListSecretPropertiesVersionsPagerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListSecretPropertiesVersionsPager", reflect.TypeOf((*MockClient)(nil).NewListSecretPropertiesVersionsPager), name, options)
	return &MockClientNewListSecretPropertiesVersionsPagerCall{Call: call}
}

// MockClientNewListSecretPropertiesVersionsPagerCall wrap *gomock.Call
type MockClientNewListSecretPropertiesVersionsPagerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientNewListSecretPropertiesVersionsPagerCall) Return(arg0 *runtime.Pager[azsecrets.ListSecretPropertiesVersionsResponse]) *MockClientNewListSecretPropertiesVersionsPagerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientNewListSecretPropertiesVersionsPagerCall) Do(f func(string, *azsecrets.ListSecretPropertiesVersionsOptions) *runtime.Pager[azsecrets.ListSecretPropertiesVersionsResponse]) *MockClientNewListSecretPropertiesVersionsPagerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientNewListSecretPropertiesVersionsPagerCall) DoAndReturn(f func(string, *azsecrets.ListSecretPropertiesVersionsOptions) *runtime.Pager[azsecrets.ListSecretPropertiesVersionsResponse]) *MockClientNewListSecretPropertiesVersionsPagerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PurgeDeletedSecret mocks base method.
func (m *MockClient) PurgeDeletedSecret(ctx context.Context, name string, options *azsecrets.PurgeDeletedSecretOptions) (azsecrets.PurgeDeletedSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeDeletedSecret", ctx, name, options)
	ret0, _ := ret[0].(azsecrets.PurgeDeletedSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeDeletedSecret indicates an expected call of PurgeDeletedSecret.
func (mr *MockClientMockRecorder) PurgeDeletedSecret(ctx, name, options any) *MockClientPurgeDeletedSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeDeletedSecret", reflect.TypeOf((*MockClient)(nil).PurgeDeletedSecret), ctx, name, options)
	return &MockClientPurgeDeletedSecretCall{Call: call}
}

// MockClientPurgeDeletedSecretCall wrap *gomock.Call
type MockClientPurgeDeletedSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientPurgeDeletedSecretCall) Return(arg0 azsecrets.PurgeDeletedSecretResponse, arg1 error) *MockClientPurgeDeletedSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientPurgeDeletedSecretCall) Do(f func(context.Context, string, *azsecrets.PurgeDeletedSecretOptions) (azsecrets.PurgeDeletedSecretResponse, error)) *MockClientPurgeDeletedSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientPurgeDeletedSecretCall) DoAndReturn(f func(context.Context, string, *azsecrets.PurgeDeletedSecretOptions) (azsecrets.PurgeDeletedSecretResponse, error)) *MockClientPurgeDeletedSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecoverDeletedSecret mocks base method.
func (m *MockClient) RecoverDeletedSecret(ctx context.Context, name string, options *azsecrets.RecoverDeletedSecretOptions) (azsecrets.RecoverDeletedSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverDeletedSecret", ctx, name, options)
	ret0, _ := ret[0].(azsecrets.RecoverDeletedSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverDeletedSecret indicates an expected call of RecoverDeletedSecret.
func (mr *MockClientMockRecorder) RecoverDeletedSecret(ctx, name, options any) *MockClientRecoverDeletedSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverDeletedSecret", reflect.TypeOf((*MockClient)(nil).RecoverDeletedSecret), ctx, name, options)
	return &MockClientRecoverDeletedSecretCall{Call: call}
}

// MockClientRecoverDeletedSecretCall wrap *gomock.Call
type MockClientRecoverDeletedSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRecoverDeletedSecretCall) Return(arg0 azsecrets.RecoverDeletedSecretResponse, arg1 error) *MockClientRecoverDeletedSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRecoverDeletedSecretCall) Do(f func(context.Context, string, *azsecrets.RecoverDeletedSecretOptions) (azsecrets.RecoverDeletedSecretResponse, error)) *MockClientRecoverDeletedSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRecoverDeletedSecretCall) DoAndReturn(f func(context.Context, string, *azsecrets.RecoverDeletedSecretOptions) (azsecrets.RecoverDeletedSecretResponse, error)) *MockClientRecoverDeletedSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RestoreSecret mocks base method.
func (m *MockClient) RestoreSecret(ctx context.Context, parameters azsecrets.RestoreSecretParameters, options *azsecrets.RestoreSecretOptions) (azsecrets.RestoreSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreSecret", ctx, parameters, options)
	ret0, _ := ret[0].(azsecrets.RestoreSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreSecret indicates an expected call of RestoreSecret.
func (mr *MockClientMockRecorder) RestoreSecret(ctx, parameters, options any) *MockClientRestoreSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSecret", reflect.TypeOf((*MockClient)(nil).RestoreSecret), ctx, parameters, options)
	return &MockClientRestoreSecretCall{Call: call}
}

// MockClientRestoreSecretCall wrap *gomock.Call
type MockClientRestoreSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientRestoreSecretCall) Return(arg0 azsecrets.RestoreSecretResponse, arg1 error) *MockClientRestoreSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientRestoreSecretCall) Do(f func(context.Context, azsecrets.RestoreSecretParameters, *azsecrets.RestoreSecretOptions) (azsecrets.RestoreSecretResponse, error)) *MockClientRestoreSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientRestoreSecretCall) DoAndReturn(f func(context.Context, azsecrets.RestoreSecretParameters, *azsecrets.RestoreSecretOptions) (azsecrets.RestoreSecretResponse, error)) *MockClientRestoreSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetSecret mocks base method.
func (m *MockClient) SetSecret(ctx context.Context, name string, parameters azsecrets.SetSecretParameters, options *azsecrets.SetSecretOptions) (azsecrets.SetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecret", ctx, name, parameters, options)
	ret0, _ := ret[0].(azsecrets.SetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSecret indicates an expected call of SetSecret.
func (mr *MockClientMockRecorder) SetSecret(ctx, name, parameters, options any) *MockClientSetSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecret", reflect.TypeOf((*MockClient)(nil).SetSecret), ctx, name, parameters, options)
	return &MockClientSetSecretCall{Call: call}
}

// MockClientSetSecretCall wrap *gomock.Call
type MockClientSetSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientSetSecretCall) Return(arg0 azsecrets.SetSecretResponse, arg1 error) *MockClientSetSecretCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientSetSecretCall) Do(f func(context.Context, string, azsecrets.SetSecretParameters, *azsecrets.SetSecretOptions) (azsecrets.SetSecretResponse, error)) *MockClientSetSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientSetSecretCall) DoAndReturn(f func(context.Context, string, azsecrets.SetSecretParameters, *azsecrets.SetSecretOptions) (azsecrets.SetSecretResponse, error)) *MockClientSetSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecretProperties mocks base method.
func (m *MockClient) UpdateSecretProperties(ctx context.Context, name, version string, parameters azsecrets.UpdateSecretPropertiesParameters, options *azsecrets.UpdateSecretPropertiesOptions) (azsecrets.UpdateSecretPropertiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretProperties", ctx, name, version, parameters, options)
	ret0, _ := ret[0].(azsecrets.UpdateSecretPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecretProperties indicates an expected call of UpdateSecretProperties.
func (mr *MockClientMockRecorder) UpdateSecretProperties(ctx, name, version, parameters, options any) *MockClientUpdateSecretPropertiesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretProperties", reflect.TypeOf((*MockClient)(nil).UpdateSecretProperties), ctx, name, version, parameters, options)
	return &MockClientUpdateSecretPropertiesCall{Call: call}
}

// MockClientUpdateSecretPropertiesCall wrap *gomock.Call
type MockClientUpdateSecretPropertiesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClientUpdateSecretPropertiesCall) Return(arg0 azsecrets.UpdateSecretPropertiesResponse, arg1 error) *MockClientUpdateSecretPropertiesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClientUpdateSecretPropertiesCall) Do(f func(context.Context, string, string, azsecrets.UpdateSecretPropertiesParameters, *azsecrets.UpdateSecretPropertiesOptions) (azsecrets.UpdateSecretPropertiesResponse, error)) *MockClientUpdateSecretPropertiesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClientUpdateSecretPropertiesCall) DoAndReturn(f func(context.Context, string, string, azsecrets.UpdateSecretPropertiesParameters, *azsecrets.UpdateSecretPropertiesOptions) (azsecrets.UpdateSecretPropertiesResponse, error)) *MockClientUpdateSecretPropertiesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
