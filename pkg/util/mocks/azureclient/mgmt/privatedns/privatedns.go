// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/azureclient/mgmt/privatedns (interfaces: PrivateZonesClient,VirtualNetworkLinksClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../../util/mocks/azureclient/mgmt/privatedns/privatedns.go github.com/Azure/ARO-RP/pkg/util/azureclient/mgmt/privatedns PrivateZonesClient,VirtualNetworkLinksClient
//

// Package mock_privatedns is a generated GoMock package.
package mock_privatedns

import (
	context "context"
	reflect "reflect"

	privatedns "github.com/Azure/azure-sdk-for-go/services/privatedns/mgmt/2018-09-01/privatedns"
	gomock "go.uber.org/mock/gomock"
)

// MockPrivateZonesClient is a mock of PrivateZonesClient interface.
type MockPrivateZonesClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateZonesClientMockRecorder
	isgomock struct{}
}

// MockPrivateZonesClientMockRecorder is the mock recorder for MockPrivateZonesClient.
type MockPrivateZonesClientMockRecorder struct {
	mock *MockPrivateZonesClient
}

// NewMockPrivateZonesClient creates a new mock instance.
func NewMockPrivateZonesClient(ctrl *gomock.Controller) *MockPrivateZonesClient {
	mock := &MockPrivateZonesClient{ctrl: ctrl}
	mock.recorder = &MockPrivateZonesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateZonesClient) EXPECT() *MockPrivateZonesClientMockRecorder {
	return m.recorder
}

// DeleteAndWait mocks base method.
func (m *MockPrivateZonesClient) DeleteAndWait(ctx context.Context, resourceGroupName, privateZoneName, ifMatch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, privateZoneName, ifMatch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockPrivateZonesClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, privateZoneName, ifMatch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockPrivateZonesClient)(nil).DeleteAndWait), ctx, resourceGroupName, privateZoneName, ifMatch)
}

// ListByResourceGroup mocks base method.
func (m *MockPrivateZonesClient) ListByResourceGroup(ctx context.Context, resourceGroupName string, top *int32) ([]privatedns.PrivateZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", ctx, resourceGroupName, top)
	ret0, _ := ret[0].([]privatedns.PrivateZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup.
func (mr *MockPrivateZonesClientMockRecorder) ListByResourceGroup(ctx, resourceGroupName, top any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockPrivateZonesClient)(nil).ListByResourceGroup), ctx, resourceGroupName, top)
}

// MockVirtualNetworkLinksClient is a mock of VirtualNetworkLinksClient interface.
type MockVirtualNetworkLinksClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworkLinksClientMockRecorder
	isgomock struct{}
}

// MockVirtualNetworkLinksClientMockRecorder is the mock recorder for MockVirtualNetworkLinksClient.
type MockVirtualNetworkLinksClientMockRecorder struct {
	mock *MockVirtualNetworkLinksClient
}

// NewMockVirtualNetworkLinksClient creates a new mock instance.
func NewMockVirtualNetworkLinksClient(ctrl *gomock.Controller) *MockVirtualNetworkLinksClient {
	mock := &MockVirtualNetworkLinksClient{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworkLinksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualNetworkLinksClient) EXPECT() *MockVirtualNetworkLinksClientMockRecorder {
	return m.recorder
}

// DeleteAndWait mocks base method.
func (m *MockVirtualNetworkLinksClient) DeleteAndWait(ctx context.Context, resourceGroupName, privateZoneName, virtualNetworkLinkName, ifMatch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndWait", ctx, resourceGroupName, privateZoneName, virtualNetworkLinkName, ifMatch)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndWait indicates an expected call of DeleteAndWait.
func (mr *MockVirtualNetworkLinksClientMockRecorder) DeleteAndWait(ctx, resourceGroupName, privateZoneName, virtualNetworkLinkName, ifMatch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndWait", reflect.TypeOf((*MockVirtualNetworkLinksClient)(nil).DeleteAndWait), ctx, resourceGroupName, privateZoneName, virtualNetworkLinkName, ifMatch)
}

// List mocks base method.
func (m *MockVirtualNetworkLinksClient) List(ctx context.Context, resourceGroupName, privateZoneName string, top *int32) ([]privatedns.VirtualNetworkLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName, privateZoneName, top)
	ret0, _ := ret[0].([]privatedns.VirtualNetworkLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualNetworkLinksClientMockRecorder) List(ctx, resourceGroupName, privateZoneName, top any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworkLinksClient)(nil).List), ctx, resourceGroupName, privateZoneName, top)
}
