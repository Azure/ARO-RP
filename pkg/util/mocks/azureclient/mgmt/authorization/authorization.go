// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/azureclient/mgmt/authorization (interfaces: PermissionsClient,RoleAssignmentsClient,DenyAssignmentClient,RoleDefinitionsClient)

// Package mock_authorization is a generated GoMock package.
package mock_authorization

import (
	context "context"
	reflect "reflect"

	authorization "github.com/Azure/azure-sdk-for-go/services/preview/authorization/mgmt/2018-09-01-preview/authorization"
	gomock "github.com/golang/mock/gomock"
)

// MockPermissionsClient is a mock of PermissionsClient interface.
type MockPermissionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionsClientMockRecorder
}

// MockPermissionsClientMockRecorder is the mock recorder for MockPermissionsClient.
type MockPermissionsClientMockRecorder struct {
	mock *MockPermissionsClient
}

// NewMockPermissionsClient creates a new mock instance.
func NewMockPermissionsClient(ctrl *gomock.Controller) *MockPermissionsClient {
	mock := &MockPermissionsClient{ctrl: ctrl}
	mock.recorder = &MockPermissionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionsClient) EXPECT() *MockPermissionsClientMockRecorder {
	return m.recorder
}

// ListForResource mocks base method.
func (m *MockPermissionsClient) ListForResource(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) ([]authorization.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResource", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]authorization.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResource indicates an expected call of ListForResource.
func (mr *MockPermissionsClientMockRecorder) ListForResource(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResource", reflect.TypeOf((*MockPermissionsClient)(nil).ListForResource), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListForResourceGroup mocks base method.
func (m *MockPermissionsClient) ListForResourceGroup(arg0 context.Context, arg1 string) ([]authorization.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroup", arg0, arg1)
	ret0, _ := ret[0].([]authorization.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroup indicates an expected call of ListForResourceGroup.
func (mr *MockPermissionsClientMockRecorder) ListForResourceGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroup", reflect.TypeOf((*MockPermissionsClient)(nil).ListForResourceGroup), arg0, arg1)
}

// MockRoleAssignmentsClient is a mock of RoleAssignmentsClient interface.
type MockRoleAssignmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleAssignmentsClientMockRecorder
}

// MockRoleAssignmentsClientMockRecorder is the mock recorder for MockRoleAssignmentsClient.
type MockRoleAssignmentsClientMockRecorder struct {
	mock *MockRoleAssignmentsClient
}

// NewMockRoleAssignmentsClient creates a new mock instance.
func NewMockRoleAssignmentsClient(ctrl *gomock.Controller) *MockRoleAssignmentsClient {
	mock := &MockRoleAssignmentsClient{ctrl: ctrl}
	mock.recorder = &MockRoleAssignmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleAssignmentsClient) EXPECT() *MockRoleAssignmentsClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleAssignmentsClient) Create(arg0 context.Context, arg1, arg2 string, arg3 authorization.RoleAssignmentCreateParameters) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleAssignmentsClientMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockRoleAssignmentsClient) Delete(arg0 context.Context, arg1, arg2 string) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleAssignmentsClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).Delete), arg0, arg1, arg2)
}

// ListForResource mocks base method.
func (m *MockRoleAssignmentsClient) ListForResource(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) ([]authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResource", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResource indicates an expected call of ListForResource.
func (mr *MockRoleAssignmentsClientMockRecorder) ListForResource(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResource", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).ListForResource), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ListForResourceGroup mocks base method.
func (m *MockRoleAssignmentsClient) ListForResourceGroup(arg0 context.Context, arg1, arg2 string) ([]authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].([]authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroup indicates an expected call of ListForResourceGroup.
func (mr *MockRoleAssignmentsClientMockRecorder) ListForResourceGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroup", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).ListForResourceGroup), arg0, arg1, arg2)
}

// MockDenyAssignmentClient is a mock of DenyAssignmentClient interface.
type MockDenyAssignmentClient struct {
	ctrl     *gomock.Controller
	recorder *MockDenyAssignmentClientMockRecorder
}

// MockDenyAssignmentClientMockRecorder is the mock recorder for MockDenyAssignmentClient.
type MockDenyAssignmentClientMockRecorder struct {
	mock *MockDenyAssignmentClient
}

// NewMockDenyAssignmentClient creates a new mock instance.
func NewMockDenyAssignmentClient(ctrl *gomock.Controller) *MockDenyAssignmentClient {
	mock := &MockDenyAssignmentClient{ctrl: ctrl}
	mock.recorder = &MockDenyAssignmentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDenyAssignmentClient) EXPECT() *MockDenyAssignmentClientMockRecorder {
	return m.recorder
}

// ListForResourceGroup mocks base method.
func (m *MockDenyAssignmentClient) ListForResourceGroup(arg0 context.Context, arg1, arg2 string) ([]authorization.DenyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].([]authorization.DenyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroup indicates an expected call of ListForResourceGroup.
func (mr *MockDenyAssignmentClientMockRecorder) ListForResourceGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroup", reflect.TypeOf((*MockDenyAssignmentClient)(nil).ListForResourceGroup), arg0, arg1, arg2)
}

// MockRoleDefinitionsClient is a mock of RoleDefinitionsClient interface.
type MockRoleDefinitionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleDefinitionsClientMockRecorder
}

// MockRoleDefinitionsClientMockRecorder is the mock recorder for MockRoleDefinitionsClient.
type MockRoleDefinitionsClientMockRecorder struct {
	mock *MockRoleDefinitionsClient
}

// NewMockRoleDefinitionsClient creates a new mock instance.
func NewMockRoleDefinitionsClient(ctrl *gomock.Controller) *MockRoleDefinitionsClient {
	mock := &MockRoleDefinitionsClient{ctrl: ctrl}
	mock.recorder = &MockRoleDefinitionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleDefinitionsClient) EXPECT() *MockRoleDefinitionsClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRoleDefinitionsClient) Delete(arg0 context.Context, arg1, arg2 string) (authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleDefinitionsClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleDefinitionsClient)(nil).Delete), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockRoleDefinitionsClient) List(arg0 context.Context, arg1, arg2 string) ([]authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleDefinitionsClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleDefinitionsClient)(nil).List), arg0, arg1, arg2)
}
