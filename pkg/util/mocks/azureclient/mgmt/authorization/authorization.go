// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/azureclient/mgmt/authorization (interfaces: RoleAssignmentsClient,DenyAssignmentClient,RoleDefinitionsClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../../util/mocks/azureclient/mgmt/authorization/authorization.go github.com/Azure/ARO-RP/pkg/util/azureclient/mgmt/authorization RoleAssignmentsClient,DenyAssignmentClient,RoleDefinitionsClient
//

// Package mock_authorization is a generated GoMock package.
package mock_authorization

import (
	context "context"
	reflect "reflect"

	authorization "github.com/Azure/azure-sdk-for-go/services/preview/authorization/mgmt/2018-09-01-preview/authorization"
	gomock "go.uber.org/mock/gomock"
)

// MockRoleAssignmentsClient is a mock of RoleAssignmentsClient interface.
type MockRoleAssignmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleAssignmentsClientMockRecorder
	isgomock struct{}
}

// MockRoleAssignmentsClientMockRecorder is the mock recorder for MockRoleAssignmentsClient.
type MockRoleAssignmentsClientMockRecorder struct {
	mock *MockRoleAssignmentsClient
}

// NewMockRoleAssignmentsClient creates a new mock instance.
func NewMockRoleAssignmentsClient(ctrl *gomock.Controller) *MockRoleAssignmentsClient {
	mock := &MockRoleAssignmentsClient{ctrl: ctrl}
	mock.recorder = &MockRoleAssignmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleAssignmentsClient) EXPECT() *MockRoleAssignmentsClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleAssignmentsClient) Create(ctx context.Context, scope, roleAssignmentName string, parameters authorization.RoleAssignmentCreateParameters) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scope, roleAssignmentName, parameters)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleAssignmentsClientMockRecorder) Create(ctx, scope, roleAssignmentName, parameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).Create), ctx, scope, roleAssignmentName, parameters)
}

// Delete mocks base method.
func (m *MockRoleAssignmentsClient) Delete(ctx context.Context, scope, roleAssignmentName string) (authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, scope, roleAssignmentName)
	ret0, _ := ret[0].(authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleAssignmentsClientMockRecorder) Delete(ctx, scope, roleAssignmentName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).Delete), ctx, scope, roleAssignmentName)
}

// ListForResource mocks base method.
func (m *MockRoleAssignmentsClient) ListForResource(ctx context.Context, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter string) ([]authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResource", ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)
	ret0, _ := ret[0].([]authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResource indicates an expected call of ListForResource.
func (mr *MockRoleAssignmentsClientMockRecorder) ListForResource(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResource", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).ListForResource), ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)
}

// ListForResourceGroup mocks base method.
func (m *MockRoleAssignmentsClient) ListForResourceGroup(ctx context.Context, resourceGroupName, filter string) ([]authorization.RoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroup", ctx, resourceGroupName, filter)
	ret0, _ := ret[0].([]authorization.RoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroup indicates an expected call of ListForResourceGroup.
func (mr *MockRoleAssignmentsClientMockRecorder) ListForResourceGroup(ctx, resourceGroupName, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroup", reflect.TypeOf((*MockRoleAssignmentsClient)(nil).ListForResourceGroup), ctx, resourceGroupName, filter)
}

// MockDenyAssignmentClient is a mock of DenyAssignmentClient interface.
type MockDenyAssignmentClient struct {
	ctrl     *gomock.Controller
	recorder *MockDenyAssignmentClientMockRecorder
	isgomock struct{}
}

// MockDenyAssignmentClientMockRecorder is the mock recorder for MockDenyAssignmentClient.
type MockDenyAssignmentClientMockRecorder struct {
	mock *MockDenyAssignmentClient
}

// NewMockDenyAssignmentClient creates a new mock instance.
func NewMockDenyAssignmentClient(ctrl *gomock.Controller) *MockDenyAssignmentClient {
	mock := &MockDenyAssignmentClient{ctrl: ctrl}
	mock.recorder = &MockDenyAssignmentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDenyAssignmentClient) EXPECT() *MockDenyAssignmentClientMockRecorder {
	return m.recorder
}

// ListForResourceGroup mocks base method.
func (m *MockDenyAssignmentClient) ListForResourceGroup(ctx context.Context, resourceGroupName, filter string) ([]authorization.DenyAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForResourceGroup", ctx, resourceGroupName, filter)
	ret0, _ := ret[0].([]authorization.DenyAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForResourceGroup indicates an expected call of ListForResourceGroup.
func (mr *MockDenyAssignmentClientMockRecorder) ListForResourceGroup(ctx, resourceGroupName, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForResourceGroup", reflect.TypeOf((*MockDenyAssignmentClient)(nil).ListForResourceGroup), ctx, resourceGroupName, filter)
}

// MockRoleDefinitionsClient is a mock of RoleDefinitionsClient interface.
type MockRoleDefinitionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoleDefinitionsClientMockRecorder
	isgomock struct{}
}

// MockRoleDefinitionsClientMockRecorder is the mock recorder for MockRoleDefinitionsClient.
type MockRoleDefinitionsClientMockRecorder struct {
	mock *MockRoleDefinitionsClient
}

// NewMockRoleDefinitionsClient creates a new mock instance.
func NewMockRoleDefinitionsClient(ctrl *gomock.Controller) *MockRoleDefinitionsClient {
	mock := &MockRoleDefinitionsClient{ctrl: ctrl}
	mock.recorder = &MockRoleDefinitionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleDefinitionsClient) EXPECT() *MockRoleDefinitionsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockRoleDefinitionsClient) CreateOrUpdate(ctx context.Context, scope, roleDefinitionID string, roleDefinition authorization.RoleDefinition) (authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, scope, roleDefinitionID, roleDefinition)
	ret0, _ := ret[0].(authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockRoleDefinitionsClientMockRecorder) CreateOrUpdate(ctx, scope, roleDefinitionID, roleDefinition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRoleDefinitionsClient)(nil).CreateOrUpdate), ctx, scope, roleDefinitionID, roleDefinition)
}

// Delete mocks base method.
func (m *MockRoleDefinitionsClient) Delete(ctx context.Context, scope, roleDefinitionID string) (authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, scope, roleDefinitionID)
	ret0, _ := ret[0].(authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleDefinitionsClientMockRecorder) Delete(ctx, scope, roleDefinitionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleDefinitionsClient)(nil).Delete), ctx, scope, roleDefinitionID)
}

// List mocks base method.
func (m *MockRoleDefinitionsClient) List(ctx context.Context, scope, filter string) ([]authorization.RoleDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, scope, filter)
	ret0, _ := ret[0].([]authorization.RoleDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleDefinitionsClientMockRecorder) List(ctx, scope, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleDefinitionsClient)(nil).List), ctx, scope, filter)
}
