// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/azureclient/mgmt/policy (interfaces: AssignmentsClient,DefinitionsClient)

// Package mock_policy is a generated GoMock package.
package mock_policy

import (
	context "context"
	reflect "reflect"

	policy "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-09-01/policy"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
)

// MockAssignmentsClient is a mock of AssignmentsClient interface.
type MockAssignmentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAssignmentsClientMockRecorder
}

// MockAssignmentsClientMockRecorder is the mock recorder for MockAssignmentsClient.
type MockAssignmentsClientMockRecorder struct {
	mock *MockAssignmentsClient
}

// NewMockAssignmentsClient creates a new mock instance.
func NewMockAssignmentsClient(ctrl *gomock.Controller) *MockAssignmentsClient {
	mock := &MockAssignmentsClient{ctrl: ctrl}
	mock.recorder = &MockAssignmentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssignmentsClient) EXPECT() *MockAssignmentsClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAssignmentsClient) Create(arg0 context.Context, arg1, arg2 string, arg3 policy.Assignment) (policy.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(policy.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAssignmentsClientMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssignmentsClient)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockAssignmentsClient) Delete(arg0 context.Context, arg1, arg2 string) (policy.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(policy.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAssignmentsClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAssignmentsClient)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockAssignmentsClient) Get(arg0 context.Context, arg1, arg2 string) (policy.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(policy.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAssignmentsClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAssignmentsClient)(nil).Get), arg0, arg1, arg2)
}

// MockDefinitionsClient is a mock of DefinitionsClient interface.
type MockDefinitionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDefinitionsClientMockRecorder
}

// MockDefinitionsClientMockRecorder is the mock recorder for MockDefinitionsClient.
type MockDefinitionsClientMockRecorder struct {
	mock *MockDefinitionsClient
}

// NewMockDefinitionsClient creates a new mock instance.
func NewMockDefinitionsClient(ctrl *gomock.Controller) *MockDefinitionsClient {
	mock := &MockDefinitionsClient{ctrl: ctrl}
	mock.recorder = &MockDefinitionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefinitionsClient) EXPECT() *MockDefinitionsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDefinitionsClient) CreateOrUpdate(arg0 context.Context, arg1 string, arg2 policy.Definition) (policy.Definition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(policy.Definition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDefinitionsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDefinitionsClient)(nil).CreateOrUpdate), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockDefinitionsClient) Delete(arg0 context.Context, arg1 string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDefinitionsClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDefinitionsClient)(nil).Delete), arg0, arg1)
}
