// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/azureclient/authz/remotepdp (interfaces: RemotePDPClient)

// Package mock_remotepdp is a generated GoMock package.
package mock_remotepdp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	remotepdp "github.com/Azure/ARO-RP/pkg/util/azureclient/authz/remotepdp"
)

// MockRemotePDPClient is a mock of RemotePDPClient interface.
type MockRemotePDPClient struct {
	ctrl     *gomock.Controller
	recorder *MockRemotePDPClientMockRecorder
}

// MockRemotePDPClientMockRecorder is the mock recorder for MockRemotePDPClient.
type MockRemotePDPClientMockRecorder struct {
	mock *MockRemotePDPClient
}

// NewMockRemotePDPClient creates a new mock instance.
func NewMockRemotePDPClient(ctrl *gomock.Controller) *MockRemotePDPClient {
	mock := &MockRemotePDPClient{ctrl: ctrl}
	mock.recorder = &MockRemotePDPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemotePDPClient) EXPECT() *MockRemotePDPClientMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockRemotePDPClient) CheckAccess(arg0 context.Context, arg1 remotepdp.AuthorizationRequest) (*remotepdp.AuthorizationDecisionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", arg0, arg1)
	ret0, _ := ret[0].(*remotepdp.AuthorizationDecisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockRemotePDPClientMockRecorder) CheckAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockRemotePDPClient)(nil).CheckAccess), arg0, arg1)
}
