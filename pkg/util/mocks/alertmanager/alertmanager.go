// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/alertmanager (interfaces: AlertManager)

// Package mock_alertmanager is a generated GoMock package.
package mock_alertmanager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/prometheus/common/model"
)

// MockAlertManager is a mock of AlertManager interface.
type MockAlertManager struct {
	ctrl     *gomock.Controller
	recorder *MockAlertManagerMockRecorder
}

// MockAlertManagerMockRecorder is the mock recorder for MockAlertManager.
type MockAlertManagerMockRecorder struct {
	mock *MockAlertManager
}

// NewMockAlertManager creates a new mock instance.
func NewMockAlertManager(ctrl *gomock.Controller) *MockAlertManager {
	mock := &MockAlertManager{ctrl: ctrl}
	mock.recorder = &MockAlertManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertManager) EXPECT() *MockAlertManagerMockRecorder {
	return m.recorder
}

// FetchPrometheusAlerts mocks base method.
func (m *MockAlertManager) FetchPrometheusAlerts(arg0 context.Context) ([]model.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPrometheusAlerts", arg0)
	ret0, _ := ret[0].([]model.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPrometheusAlerts indicates an expected call of FetchPrometheusAlerts.
func (mr *MockAlertManagerMockRecorder) FetchPrometheusAlerts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPrometheusAlerts", reflect.TypeOf((*MockAlertManager)(nil).FetchPrometheusAlerts), arg0)
}
