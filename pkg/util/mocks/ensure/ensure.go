// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/ensure (interfaces: Interface)

// Package mock_ensure is a generated GoMock package.
package mock_ensure

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/security/v1"
	v10 "k8s.io/api/apps/v1"
	v11 "k8s.io/api/core/v1"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ConfigMap mocks base method
func (m *MockInterface) ConfigMap(arg0 *v11.ConfigMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigMap indicates an expected call of ConfigMap
func (mr *MockInterfaceMockRecorder) ConfigMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMap", reflect.TypeOf((*MockInterface)(nil).ConfigMap), arg0)
}

// DaemonSet mocks base method
func (m *MockInterface) DaemonSet(arg0 *v10.DaemonSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DaemonSet indicates an expected call of DaemonSet
func (mr *MockInterfaceMockRecorder) DaemonSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonSet", reflect.TypeOf((*MockInterface)(nil).DaemonSet), arg0)
}

// Namespace mocks base method
func (m *MockInterface) Namespace(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Namespace indicates an expected call of Namespace
func (mr *MockInterfaceMockRecorder) Namespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockInterface)(nil).Namespace), arg0)
}

// SccCreate mocks base method
func (m *MockInterface) SccCreate(arg0 *v1.SecurityContextConstraints) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SccCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SccCreate indicates an expected call of SccCreate
func (mr *MockInterfaceMockRecorder) SccCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SccCreate", reflect.TypeOf((*MockInterface)(nil).SccCreate), arg0)
}

// SccGet mocks base method
func (m *MockInterface) SccGet() (*v1.SecurityContextConstraints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SccGet")
	ret0, _ := ret[0].(*v1.SecurityContextConstraints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SccGet indicates an expected call of SccGet
func (mr *MockInterfaceMockRecorder) SccGet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SccGet", reflect.TypeOf((*MockInterface)(nil).SccGet))
}

// Secret mocks base method
func (m *MockInterface) Secret(arg0 *v11.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Secret indicates an expected call of Secret
func (mr *MockInterfaceMockRecorder) Secret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secret", reflect.TypeOf((*MockInterface)(nil).Secret), arg0)
}

// ServiceAccount mocks base method
func (m *MockInterface) ServiceAccount(arg0 *v11.ServiceAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceAccount indicates an expected call of ServiceAccount
func (mr *MockInterfaceMockRecorder) ServiceAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccount", reflect.TypeOf((*MockInterface)(nil).ServiceAccount), arg0)
}
