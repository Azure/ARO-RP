// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/dynamichelper (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/dynamichelper/dynamichelper.go github.com/Azure/ARO-RP/pkg/util/dynamichelper Interface
//

// Package mock_dynamichelper is a generated GoMock package.
package mock_dynamichelper

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Ensure mocks base method.
func (m *MockInterface) Ensure(ctx context.Context, objs ...runtime.Object) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range objs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ensure", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ensure indicates an expected call of Ensure.
func (mr *MockInterfaceMockRecorder) Ensure(ctx any, objs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, objs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ensure", reflect.TypeOf((*MockInterface)(nil).Ensure), varargs...)
}

// EnsureDeleted mocks base method.
func (m *MockInterface) EnsureDeleted(ctx context.Context, groupKind, namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeleted", ctx, groupKind, namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeleted indicates an expected call of EnsureDeleted.
func (mr *MockInterfaceMockRecorder) EnsureDeleted(ctx, groupKind, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeleted", reflect.TypeOf((*MockInterface)(nil).EnsureDeleted), ctx, groupKind, namespace, name)
}

// EnsureDeletedGVR mocks base method.
func (m *MockInterface) EnsureDeletedGVR(ctx context.Context, groupKind, namespace, name, optionalVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeletedGVR", ctx, groupKind, namespace, name, optionalVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeletedGVR indicates an expected call of EnsureDeletedGVR.
func (mr *MockInterfaceMockRecorder) EnsureDeletedGVR(ctx, groupKind, namespace, name, optionalVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeletedGVR", reflect.TypeOf((*MockInterface)(nil).EnsureDeletedGVR), ctx, groupKind, namespace, name, optionalVersion)
}

// IsConstraintTemplateReady mocks base method.
func (m *MockInterface) IsConstraintTemplateReady(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConstraintTemplateReady", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsConstraintTemplateReady indicates an expected call of IsConstraintTemplateReady.
func (mr *MockInterfaceMockRecorder) IsConstraintTemplateReady(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConstraintTemplateReady", reflect.TypeOf((*MockInterface)(nil).IsConstraintTemplateReady), ctx, name)
}

// Refresh mocks base method.
func (m *MockInterface) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockInterfaceMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockInterface)(nil).Refresh))
}
