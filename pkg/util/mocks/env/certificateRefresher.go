// Code generated by MockGen. DO NOT EDIT.
// Source: certificateRefresher.go

// Package mock_env is a generated GoMock package.
package mock_env

import (
	context "context"
	rsa "crypto/rsa"
	x509 "crypto/x509"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertificateRefresher is a mock of CertificateRefresher interface.
type MockCertificateRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateRefresherMockRecorder
}

// MockCertificateRefresherMockRecorder is the mock recorder for MockCertificateRefresher.
type MockCertificateRefresherMockRecorder struct {
	mock *MockCertificateRefresher
}

// NewMockCertificateRefresher creates a new mock instance.
func NewMockCertificateRefresher(ctrl *gomock.Controller) *MockCertificateRefresher {
	mock := &MockCertificateRefresher{ctrl: ctrl}
	mock.recorder = &MockCertificateRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateRefresher) EXPECT() *MockCertificateRefresherMockRecorder {
	return m.recorder
}

// GetCertificates mocks base method.
func (m *MockCertificateRefresher) GetCertificates() (*rsa.PrivateKey, []*x509.Certificate) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].(*rsa.PrivateKey)
	ret1, _ := ret[1].([]*x509.Certificate)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockCertificateRefresherMockRecorder) GetCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockCertificateRefresher)(nil).GetCertificates))
}

// Start mocks base method.
func (m *MockCertificateRefresher) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCertificateRefresherMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCertificateRefresher)(nil).Start), arg0)
}
