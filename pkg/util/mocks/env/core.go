// Code generated by MockGen. DO NOT EDIT.
// Source: core.go

// Package mock_env is a generated GoMock package.
package mock_env

import (
	context "context"
	reflect "reflect"

	env "github.com/Azure/ARO-RP/pkg/env"
	azureclient "github.com/Azure/ARO-RP/pkg/util/azureclient"
	liveconfig "github.com/Azure/ARO-RP/pkg/util/liveconfig"
	azcore "github.com/Azure/azure-sdk-for-go/sdk/azcore"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
)

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// Environment mocks base method.
func (m *MockCore) Environment() *azureclient.AROEnvironment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environment")
	ret0, _ := ret[0].(*azureclient.AROEnvironment)
	return ret0
}

// Environment indicates an expected call of Environment.
func (mr *MockCoreMockRecorder) Environment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environment", reflect.TypeOf((*MockCore)(nil).Environment))
}

// Hostname mocks base method.
func (m *MockCore) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockCoreMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockCore)(nil).Hostname))
}

// IsCI mocks base method.
func (m *MockCore) IsCI() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCI")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCI indicates an expected call of IsCI.
func (mr *MockCoreMockRecorder) IsCI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCI", reflect.TypeOf((*MockCore)(nil).IsCI))
}

// IsLocalDevelopmentMode mocks base method.
func (m *MockCore) IsLocalDevelopmentMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocalDevelopmentMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocalDevelopmentMode indicates an expected call of IsLocalDevelopmentMode.
func (mr *MockCoreMockRecorder) IsLocalDevelopmentMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocalDevelopmentMode", reflect.TypeOf((*MockCore)(nil).IsLocalDevelopmentMode))
}

// Location mocks base method.
func (m *MockCore) Location() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(string)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockCoreMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockCore)(nil).Location))
}

// NewLiveConfigManager mocks base method.
func (m *MockCore) NewLiveConfigManager(arg0 context.Context) (liveconfig.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLiveConfigManager", arg0)
	ret0, _ := ret[0].(liveconfig.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLiveConfigManager indicates an expected call of NewLiveConfigManager.
func (mr *MockCoreMockRecorder) NewLiveConfigManager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLiveConfigManager", reflect.TypeOf((*MockCore)(nil).NewLiveConfigManager), arg0)
}

// NewMSIAuthorizer mocks base method.
func (m *MockCore) NewMSIAuthorizer(arg0 env.MSIContext, arg1 ...string) (autorest.Authorizer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMSIAuthorizer", varargs...)
	ret0, _ := ret[0].(autorest.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMSIAuthorizer indicates an expected call of NewMSIAuthorizer.
func (mr *MockCoreMockRecorder) NewMSIAuthorizer(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMSIAuthorizer", reflect.TypeOf((*MockCore)(nil).NewMSIAuthorizer), varargs...)
}

// NewMSITokenCredential mocks base method.
func (m *MockCore) NewMSITokenCredential(arg0 env.MSIContext) (azcore.TokenCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMSITokenCredential", arg0)
	ret0, _ := ret[0].(azcore.TokenCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMSITokenCredential indicates an expected call of NewMSITokenCredential.
func (mr *MockCoreMockRecorder) NewMSITokenCredential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMSITokenCredential", reflect.TypeOf((*MockCore)(nil).NewMSITokenCredential), arg0)
}

// ResourceGroup mocks base method.
func (m *MockCore) ResourceGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// ResourceGroup indicates an expected call of ResourceGroup.
func (mr *MockCoreMockRecorder) ResourceGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceGroup", reflect.TypeOf((*MockCore)(nil).ResourceGroup))
}

// SubscriptionID mocks base method.
func (m *MockCore) SubscriptionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubscriptionID indicates an expected call of SubscriptionID.
func (mr *MockCoreMockRecorder) SubscriptionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionID", reflect.TypeOf((*MockCore)(nil).SubscriptionID))
}

// TenantID mocks base method.
func (m *MockCore) TenantID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantID")
	ret0, _ := ret[0].(string)
	return ret0
}

// TenantID indicates an expected call of TenantID.
func (mr *MockCoreMockRecorder) TenantID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantID", reflect.TypeOf((*MockCore)(nil).TenantID))
}
