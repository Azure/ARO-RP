// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/util/net (interfaces: DNSIClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../pkg/util/mocks/net/net.go github.com/Azure/ARO-RP/pkg/util/net DNSIClient
//

// Package mock_net is a generated GoMock package.
package mock_net

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"

	v1 "github.com/openshift/api/config/v1"
	v10 "github.com/openshift/client-go/config/applyconfigurations/config/v1"
)

// MockDNSIClient is a mock of DNSIClient interface.
type MockDNSIClient struct {
	ctrl     *gomock.Controller
	recorder *MockDNSIClientMockRecorder
	isgomock struct{}
}

// MockDNSIClientMockRecorder is the mock recorder for MockDNSIClient.
type MockDNSIClientMockRecorder struct {
	mock *MockDNSIClient
}

// NewMockDNSIClient creates a new mock instance.
func NewMockDNSIClient(ctrl *gomock.Controller) *MockDNSIClient {
	mock := &MockDNSIClient{ctrl: ctrl}
	mock.recorder = &MockDNSIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSIClient) EXPECT() *MockDNSIClientMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockDNSIClient) Apply(ctx context.Context, dNS *v10.DNSApplyConfiguration, opts v11.ApplyOptions) (*v1.DNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, dNS, opts)
	ret0, _ := ret[0].(*v1.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockDNSIClientMockRecorder) Apply(ctx, dNS, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockDNSIClient)(nil).Apply), ctx, dNS, opts)
}

// ApplyStatus mocks base method.
func (m *MockDNSIClient) ApplyStatus(ctx context.Context, dNS *v10.DNSApplyConfiguration, opts v11.ApplyOptions) (*v1.DNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", ctx, dNS, opts)
	ret0, _ := ret[0].(*v1.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockDNSIClientMockRecorder) ApplyStatus(ctx, dNS, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockDNSIClient)(nil).ApplyStatus), ctx, dNS, opts)
}

// Create mocks base method.
func (m *MockDNSIClient) Create(ctx context.Context, dNS *v1.DNS, opts v11.CreateOptions) (*v1.DNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dNS, opts)
	ret0, _ := ret[0].(*v1.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDNSIClientMockRecorder) Create(ctx, dNS, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDNSIClient)(nil).Create), ctx, dNS, opts)
}

// Delete mocks base method.
func (m *MockDNSIClient) Delete(ctx context.Context, name string, opts v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDNSIClientMockRecorder) Delete(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDNSIClient)(nil).Delete), ctx, name, opts)
}

// DeleteCollection mocks base method.
func (m *MockDNSIClient) DeleteCollection(ctx context.Context, opts v11.DeleteOptions, listOpts v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, opts, listOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockDNSIClientMockRecorder) DeleteCollection(ctx, opts, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockDNSIClient)(nil).DeleteCollection), ctx, opts, listOpts)
}

// Get mocks base method.
func (m *MockDNSIClient) Get(ctx context.Context, name string, opts v11.GetOptions) (*v1.DNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDNSIClientMockRecorder) Get(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDNSIClient)(nil).Get), ctx, name, opts)
}

// List mocks base method.
func (m *MockDNSIClient) List(ctx context.Context, opts v11.ListOptions) (*v1.DNSList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1.DNSList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDNSIClientMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDNSIClient)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockDNSIClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v11.PatchOptions, subresources ...string) (*v1.DNS, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockDNSIClientMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockDNSIClient)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockDNSIClient) Update(ctx context.Context, dNS *v1.DNS, opts v11.UpdateOptions) (*v1.DNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dNS, opts)
	ret0, _ := ret[0].(*v1.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDNSIClientMockRecorder) Update(ctx, dNS, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDNSIClient)(nil).Update), ctx, dNS, opts)
}

// UpdateStatus mocks base method.
func (m *MockDNSIClient) UpdateStatus(ctx context.Context, dNS *v1.DNS, opts v11.UpdateOptions) (*v1.DNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, dNS, opts)
	ret0, _ := ret[0].(*v1.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockDNSIClientMockRecorder) UpdateStatus(ctx, dNS, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockDNSIClient)(nil).UpdateStatus), ctx, dNS, opts)
}

// Watch mocks base method.
func (m *MockDNSIClient) Watch(ctx context.Context, opts v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockDNSIClientMockRecorder) Watch(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockDNSIClient)(nil).Watch), ctx, opts)
}
