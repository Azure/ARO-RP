// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/database/cosmosdb (interfaces: OpenShiftClusterDocumentIterator)

// Package mock_cosmosdb is a generated GoMock package.
package mock_cosmosdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/Azure/ARO-RP/pkg/api"
)

// MockOpenShiftClusterDocumentIterator is a mock of OpenShiftClusterDocumentIterator interface
type MockOpenShiftClusterDocumentIterator struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftClusterDocumentIteratorMockRecorder
}

// MockOpenShiftClusterDocumentIteratorMockRecorder is the mock recorder for MockOpenShiftClusterDocumentIterator
type MockOpenShiftClusterDocumentIteratorMockRecorder struct {
	mock *MockOpenShiftClusterDocumentIterator
}

// NewMockOpenShiftClusterDocumentIterator creates a new mock instance
func NewMockOpenShiftClusterDocumentIterator(ctrl *gomock.Controller) *MockOpenShiftClusterDocumentIterator {
	mock := &MockOpenShiftClusterDocumentIterator{ctrl: ctrl}
	mock.recorder = &MockOpenShiftClusterDocumentIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenShiftClusterDocumentIterator) EXPECT() *MockOpenShiftClusterDocumentIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockOpenShiftClusterDocumentIterator) Next(arg0 context.Context) (*api.OpenShiftClusterDocuments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocuments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockOpenShiftClusterDocumentIteratorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockOpenShiftClusterDocumentIterator)(nil).Next), arg0)
}
