// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/hive/pkg/client/clientset/versioned/typed/hive/v1 (interfaces: ClusterDeploymentInterface,ClusterDeploymentsGetter,HiveV1Interface)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/hive/apis/hive/v1"
	v10 "github.com/openshift/hive/pkg/client/clientset/versioned/typed/hive/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MockClusterDeploymentInterface is a mock of ClusterDeploymentInterface interface.
type MockClusterDeploymentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDeploymentInterfaceMockRecorder
}

// MockClusterDeploymentInterfaceMockRecorder is the mock recorder for MockClusterDeploymentInterface.
type MockClusterDeploymentInterfaceMockRecorder struct {
	mock *MockClusterDeploymentInterface
}

// NewMockClusterDeploymentInterface creates a new mock instance.
func NewMockClusterDeploymentInterface(ctrl *gomock.Controller) *MockClusterDeploymentInterface {
	mock := &MockClusterDeploymentInterface{ctrl: ctrl}
	mock.recorder = &MockClusterDeploymentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDeploymentInterface) EXPECT() *MockClusterDeploymentInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClusterDeploymentInterface) Create(arg0 context.Context, arg1 *v1.ClusterDeployment, arg2 v11.CreateOptions) (*v1.ClusterDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClusterDeploymentInterfaceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockClusterDeploymentInterface) Delete(arg0 context.Context, arg1 string, arg2 v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterDeploymentInterfaceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockClusterDeploymentInterface) DeleteCollection(arg0 context.Context, arg1 v11.DeleteOptions, arg2 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClusterDeploymentInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockClusterDeploymentInterface) Get(arg0 context.Context, arg1 string, arg2 v11.GetOptions) (*v1.ClusterDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterDeploymentInterfaceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockClusterDeploymentInterface) List(arg0 context.Context, arg1 v11.ListOptions) (*v1.ClusterDeploymentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.ClusterDeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterDeploymentInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockClusterDeploymentInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v11.PatchOptions, arg5 ...string) (*v1.ClusterDeployment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.ClusterDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockClusterDeploymentInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockClusterDeploymentInterface) Update(arg0 context.Context, arg1 *v1.ClusterDeployment, arg2 v11.UpdateOptions) (*v1.ClusterDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClusterDeploymentInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).Update), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockClusterDeploymentInterface) UpdateStatus(arg0 context.Context, arg1 *v1.ClusterDeployment, arg2 v11.UpdateOptions) (*v1.ClusterDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.ClusterDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockClusterDeploymentInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).UpdateStatus), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockClusterDeploymentInterface) Watch(arg0 context.Context, arg1 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClusterDeploymentInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterDeploymentInterface)(nil).Watch), arg0, arg1)
}

// MockClusterDeploymentsGetter is a mock of ClusterDeploymentsGetter interface.
type MockClusterDeploymentsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDeploymentsGetterMockRecorder
}

// MockClusterDeploymentsGetterMockRecorder is the mock recorder for MockClusterDeploymentsGetter.
type MockClusterDeploymentsGetterMockRecorder struct {
	mock *MockClusterDeploymentsGetter
}

// NewMockClusterDeploymentsGetter creates a new mock instance.
func NewMockClusterDeploymentsGetter(ctrl *gomock.Controller) *MockClusterDeploymentsGetter {
	mock := &MockClusterDeploymentsGetter{ctrl: ctrl}
	mock.recorder = &MockClusterDeploymentsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDeploymentsGetter) EXPECT() *MockClusterDeploymentsGetterMockRecorder {
	return m.recorder
}

// ClusterDeployments mocks base method.
func (m *MockClusterDeploymentsGetter) ClusterDeployments(arg0 string) v10.ClusterDeploymentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDeployments", arg0)
	ret0, _ := ret[0].(v10.ClusterDeploymentInterface)
	return ret0
}

// ClusterDeployments indicates an expected call of ClusterDeployments.
func (mr *MockClusterDeploymentsGetterMockRecorder) ClusterDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDeployments", reflect.TypeOf((*MockClusterDeploymentsGetter)(nil).ClusterDeployments), arg0)
}

// MockHiveV1Interface is a mock of HiveV1Interface interface.
type MockHiveV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockHiveV1InterfaceMockRecorder
}

// MockHiveV1InterfaceMockRecorder is the mock recorder for MockHiveV1Interface.
type MockHiveV1InterfaceMockRecorder struct {
	mock *MockHiveV1Interface
}

// NewMockHiveV1Interface creates a new mock instance.
func NewMockHiveV1Interface(ctrl *gomock.Controller) *MockHiveV1Interface {
	mock := &MockHiveV1Interface{ctrl: ctrl}
	mock.recorder = &MockHiveV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHiveV1Interface) EXPECT() *MockHiveV1InterfaceMockRecorder {
	return m.recorder
}

// Checkpoints mocks base method.
func (m *MockHiveV1Interface) Checkpoints(arg0 string) v10.CheckpointInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoints", arg0)
	ret0, _ := ret[0].(v10.CheckpointInterface)
	return ret0
}

// Checkpoints indicates an expected call of Checkpoints.
func (mr *MockHiveV1InterfaceMockRecorder) Checkpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoints", reflect.TypeOf((*MockHiveV1Interface)(nil).Checkpoints), arg0)
}

// ClusterClaims mocks base method.
func (m *MockHiveV1Interface) ClusterClaims(arg0 string) v10.ClusterClaimInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterClaims", arg0)
	ret0, _ := ret[0].(v10.ClusterClaimInterface)
	return ret0
}

// ClusterClaims indicates an expected call of ClusterClaims.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterClaims", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterClaims), arg0)
}

// ClusterDeployments mocks base method.
func (m *MockHiveV1Interface) ClusterDeployments(arg0 string) v10.ClusterDeploymentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDeployments", arg0)
	ret0, _ := ret[0].(v10.ClusterDeploymentInterface)
	return ret0
}

// ClusterDeployments indicates an expected call of ClusterDeployments.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterDeployments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDeployments", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterDeployments), arg0)
}

// ClusterDeprovisions mocks base method.
func (m *MockHiveV1Interface) ClusterDeprovisions(arg0 string) v10.ClusterDeprovisionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDeprovisions", arg0)
	ret0, _ := ret[0].(v10.ClusterDeprovisionInterface)
	return ret0
}

// ClusterDeprovisions indicates an expected call of ClusterDeprovisions.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterDeprovisions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDeprovisions", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterDeprovisions), arg0)
}

// ClusterImageSets mocks base method.
func (m *MockHiveV1Interface) ClusterImageSets() v10.ClusterImageSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterImageSets")
	ret0, _ := ret[0].(v10.ClusterImageSetInterface)
	return ret0
}

// ClusterImageSets indicates an expected call of ClusterImageSets.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterImageSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterImageSets", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterImageSets))
}

// ClusterPools mocks base method.
func (m *MockHiveV1Interface) ClusterPools(arg0 string) v10.ClusterPoolInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterPools", arg0)
	ret0, _ := ret[0].(v10.ClusterPoolInterface)
	return ret0
}

// ClusterPools indicates an expected call of ClusterPools.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterPools", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterPools), arg0)
}

// ClusterProvisions mocks base method.
func (m *MockHiveV1Interface) ClusterProvisions(arg0 string) v10.ClusterProvisionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterProvisions", arg0)
	ret0, _ := ret[0].(v10.ClusterProvisionInterface)
	return ret0
}

// ClusterProvisions indicates an expected call of ClusterProvisions.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterProvisions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterProvisions", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterProvisions), arg0)
}

// ClusterRelocates mocks base method.
func (m *MockHiveV1Interface) ClusterRelocates() v10.ClusterRelocateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRelocates")
	ret0, _ := ret[0].(v10.ClusterRelocateInterface)
	return ret0
}

// ClusterRelocates indicates an expected call of ClusterRelocates.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterRelocates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRelocates", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterRelocates))
}

// ClusterStates mocks base method.
func (m *MockHiveV1Interface) ClusterStates(arg0 string) v10.ClusterStateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterStates", arg0)
	ret0, _ := ret[0].(v10.ClusterStateInterface)
	return ret0
}

// ClusterStates indicates an expected call of ClusterStates.
func (mr *MockHiveV1InterfaceMockRecorder) ClusterStates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterStates", reflect.TypeOf((*MockHiveV1Interface)(nil).ClusterStates), arg0)
}

// DNSZones mocks base method.
func (m *MockHiveV1Interface) DNSZones(arg0 string) v10.DNSZoneInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSZones", arg0)
	ret0, _ := ret[0].(v10.DNSZoneInterface)
	return ret0
}

// DNSZones indicates an expected call of DNSZones.
func (mr *MockHiveV1InterfaceMockRecorder) DNSZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSZones", reflect.TypeOf((*MockHiveV1Interface)(nil).DNSZones), arg0)
}

// HiveConfigs mocks base method.
func (m *MockHiveV1Interface) HiveConfigs() v10.HiveConfigInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HiveConfigs")
	ret0, _ := ret[0].(v10.HiveConfigInterface)
	return ret0
}

// HiveConfigs indicates an expected call of HiveConfigs.
func (mr *MockHiveV1InterfaceMockRecorder) HiveConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HiveConfigs", reflect.TypeOf((*MockHiveV1Interface)(nil).HiveConfigs))
}

// MachinePoolNameLeases mocks base method.
func (m *MockHiveV1Interface) MachinePoolNameLeases(arg0 string) v10.MachinePoolNameLeaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachinePoolNameLeases", arg0)
	ret0, _ := ret[0].(v10.MachinePoolNameLeaseInterface)
	return ret0
}

// MachinePoolNameLeases indicates an expected call of MachinePoolNameLeases.
func (mr *MockHiveV1InterfaceMockRecorder) MachinePoolNameLeases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachinePoolNameLeases", reflect.TypeOf((*MockHiveV1Interface)(nil).MachinePoolNameLeases), arg0)
}

// MachinePools mocks base method.
func (m *MockHiveV1Interface) MachinePools(arg0 string) v10.MachinePoolInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachinePools", arg0)
	ret0, _ := ret[0].(v10.MachinePoolInterface)
	return ret0
}

// MachinePools indicates an expected call of MachinePools.
func (mr *MockHiveV1InterfaceMockRecorder) MachinePools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachinePools", reflect.TypeOf((*MockHiveV1Interface)(nil).MachinePools), arg0)
}

// RESTClient mocks base method.
func (m *MockHiveV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockHiveV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockHiveV1Interface)(nil).RESTClient))
}

// SelectorSyncIdentityProviders mocks base method.
func (m *MockHiveV1Interface) SelectorSyncIdentityProviders() v10.SelectorSyncIdentityProviderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectorSyncIdentityProviders")
	ret0, _ := ret[0].(v10.SelectorSyncIdentityProviderInterface)
	return ret0
}

// SelectorSyncIdentityProviders indicates an expected call of SelectorSyncIdentityProviders.
func (mr *MockHiveV1InterfaceMockRecorder) SelectorSyncIdentityProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectorSyncIdentityProviders", reflect.TypeOf((*MockHiveV1Interface)(nil).SelectorSyncIdentityProviders))
}

// SelectorSyncSets mocks base method.
func (m *MockHiveV1Interface) SelectorSyncSets() v10.SelectorSyncSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectorSyncSets")
	ret0, _ := ret[0].(v10.SelectorSyncSetInterface)
	return ret0
}

// SelectorSyncSets indicates an expected call of SelectorSyncSets.
func (mr *MockHiveV1InterfaceMockRecorder) SelectorSyncSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectorSyncSets", reflect.TypeOf((*MockHiveV1Interface)(nil).SelectorSyncSets))
}

// SyncIdentityProviders mocks base method.
func (m *MockHiveV1Interface) SyncIdentityProviders(arg0 string) v10.SyncIdentityProviderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncIdentityProviders", arg0)
	ret0, _ := ret[0].(v10.SyncIdentityProviderInterface)
	return ret0
}

// SyncIdentityProviders indicates an expected call of SyncIdentityProviders.
func (mr *MockHiveV1InterfaceMockRecorder) SyncIdentityProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncIdentityProviders", reflect.TypeOf((*MockHiveV1Interface)(nil).SyncIdentityProviders), arg0)
}

// SyncSets mocks base method.
func (m *MockHiveV1Interface) SyncSets(arg0 string) v10.SyncSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSets", arg0)
	ret0, _ := ret[0].(v10.SyncSetInterface)
	return ret0
}

// SyncSets indicates an expected call of SyncSets.
func (mr *MockHiveV1InterfaceMockRecorder) SyncSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSets", reflect.TypeOf((*MockHiveV1Interface)(nil).SyncSets), arg0)
}
