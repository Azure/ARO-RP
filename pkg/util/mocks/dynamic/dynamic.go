// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/api/validate/dynamic (interfaces: Dynamic,VnetValidator,SubnetValidator,DiskValidator,VMSKUValidator,EncryptionAtHostValidator,ServicePrincipalValidator,ProvidersValidator)

// Package mock_dynamic is a generated GoMock package.
package mock_dynamic

import (
	context "context"
	reflect "reflect"

	adal "github.com/Azure/go-autorest/autorest/adal"
	gomock "github.com/golang/mock/gomock"

	api "github.com/Azure/ARO-RP/pkg/api"
	dynamic "github.com/Azure/ARO-RP/pkg/api/validate/dynamic"
)

// MockDynamic is a mock of Dynamic interface.
type MockDynamic struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicMockRecorder
}

// MockDynamicMockRecorder is the mock recorder for MockDynamic.
type MockDynamicMockRecorder struct {
	mock *MockDynamic
}

// NewMockDynamic creates a new mock instance.
func NewMockDynamic(ctrl *gomock.Controller) *MockDynamic {
	mock := &MockDynamic{ctrl: ctrl}
	mock.recorder = &MockDynamicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamic) EXPECT() *MockDynamicMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockDynamic) Validate(arg0 *adal.ServicePrincipalToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockDynamicMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockDynamic)(nil).Validate), arg0)
}

// ValidateDiskEncryptionSets mocks base method.
func (m *MockDynamic) ValidateDiskEncryptionSets(arg0 context.Context, arg1 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDiskEncryptionSets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDiskEncryptionSets indicates an expected call of ValidateDiskEncryptionSets.
func (mr *MockDynamicMockRecorder) ValidateDiskEncryptionSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDiskEncryptionSets", reflect.TypeOf((*MockDynamic)(nil).ValidateDiskEncryptionSets), arg0, arg1)
}

// ValidateEncryptionAtHost mocks base method.
func (m *MockDynamic) ValidateEncryptionAtHost(arg0 context.Context, arg1 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEncryptionAtHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateEncryptionAtHost indicates an expected call of ValidateEncryptionAtHost.
func (mr *MockDynamicMockRecorder) ValidateEncryptionAtHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEncryptionAtHost", reflect.TypeOf((*MockDynamic)(nil).ValidateEncryptionAtHost), arg0, arg1)
}

// ValidateProviders mocks base method.
func (m *MockDynamic) ValidateProviders(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProviders", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProviders indicates an expected call of ValidateProviders.
func (mr *MockDynamicMockRecorder) ValidateProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProviders", reflect.TypeOf((*MockDynamic)(nil).ValidateProviders), arg0)
}

// ValidateSubnets mocks base method.
func (m *MockDynamic) ValidateSubnets(arg0 context.Context, arg1 *api.OpenShiftCluster, arg2 []dynamic.Subnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSubnets", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSubnets indicates an expected call of ValidateSubnets.
func (mr *MockDynamicMockRecorder) ValidateSubnets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSubnets", reflect.TypeOf((*MockDynamic)(nil).ValidateSubnets), arg0, arg1, arg2)
}

// ValidateVMSku mocks base method.
func (m *MockDynamic) ValidateVMSku(arg0 context.Context, arg1, arg2 string, arg3 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVMSku", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVMSku indicates an expected call of ValidateVMSku.
func (mr *MockDynamicMockRecorder) ValidateVMSku(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVMSku", reflect.TypeOf((*MockDynamic)(nil).ValidateVMSku), arg0, arg1, arg2, arg3)
}

// ValidateVnet mocks base method.
func (m *MockDynamic) ValidateVnet(arg0 context.Context, arg1 string, arg2 []dynamic.Subnet, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateVnet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVnet indicates an expected call of ValidateVnet.
func (mr *MockDynamicMockRecorder) ValidateVnet(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVnet", reflect.TypeOf((*MockDynamic)(nil).ValidateVnet), varargs...)
}

// MockVnetValidator is a mock of VnetValidator interface.
type MockVnetValidator struct {
	ctrl     *gomock.Controller
	recorder *MockVnetValidatorMockRecorder
}

// MockVnetValidatorMockRecorder is the mock recorder for MockVnetValidator.
type MockVnetValidatorMockRecorder struct {
	mock *MockVnetValidator
}

// NewMockVnetValidator creates a new mock instance.
func NewMockVnetValidator(ctrl *gomock.Controller) *MockVnetValidator {
	mock := &MockVnetValidator{ctrl: ctrl}
	mock.recorder = &MockVnetValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVnetValidator) EXPECT() *MockVnetValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockVnetValidator) Validate(arg0 context.Context, arg1 string, arg2 []dynamic.Subnet, arg3 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockVnetValidatorMockRecorder) Validate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockVnetValidator)(nil).Validate), arg0, arg1, arg2, arg3)
}

// MockSubnetValidator is a mock of SubnetValidator interface.
type MockSubnetValidator struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetValidatorMockRecorder
}

// MockSubnetValidatorMockRecorder is the mock recorder for MockSubnetValidator.
type MockSubnetValidatorMockRecorder struct {
	mock *MockSubnetValidator
}

// NewMockSubnetValidator creates a new mock instance.
func NewMockSubnetValidator(ctrl *gomock.Controller) *MockSubnetValidator {
	mock := &MockSubnetValidator{ctrl: ctrl}
	mock.recorder = &MockSubnetValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetValidator) EXPECT() *MockSubnetValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockSubnetValidator) Validate(arg0 context.Context, arg1 *api.OpenShiftCluster, arg2 []dynamic.Subnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSubnetValidatorMockRecorder) Validate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSubnetValidator)(nil).Validate), arg0, arg1, arg2)
}

// MockDiskValidator is a mock of DiskValidator interface.
type MockDiskValidator struct {
	ctrl     *gomock.Controller
	recorder *MockDiskValidatorMockRecorder
}

// MockDiskValidatorMockRecorder is the mock recorder for MockDiskValidator.
type MockDiskValidatorMockRecorder struct {
	mock *MockDiskValidator
}

// NewMockDiskValidator creates a new mock instance.
func NewMockDiskValidator(ctrl *gomock.Controller) *MockDiskValidator {
	mock := &MockDiskValidator{ctrl: ctrl}
	mock.recorder = &MockDiskValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskValidator) EXPECT() *MockDiskValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockDiskValidator) Validate(arg0 context.Context, arg1 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockDiskValidatorMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockDiskValidator)(nil).Validate), arg0, arg1)
}

// MockVMSKUValidator is a mock of VMSKUValidator interface.
type MockVMSKUValidator struct {
	ctrl     *gomock.Controller
	recorder *MockVMSKUValidatorMockRecorder
}

// MockVMSKUValidatorMockRecorder is the mock recorder for MockVMSKUValidator.
type MockVMSKUValidatorMockRecorder struct {
	mock *MockVMSKUValidator
}

// NewMockVMSKUValidator creates a new mock instance.
func NewMockVMSKUValidator(ctrl *gomock.Controller) *MockVMSKUValidator {
	mock := &MockVMSKUValidator{ctrl: ctrl}
	mock.recorder = &MockVMSKUValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMSKUValidator) EXPECT() *MockVMSKUValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockVMSKUValidator) Validate(arg0 context.Context, arg1, arg2 string, arg3 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockVMSKUValidatorMockRecorder) Validate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockVMSKUValidator)(nil).Validate), arg0, arg1, arg2, arg3)
}

// MockEncryptionAtHostValidator is a mock of EncryptionAtHostValidator interface.
type MockEncryptionAtHostValidator struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionAtHostValidatorMockRecorder
}

// MockEncryptionAtHostValidatorMockRecorder is the mock recorder for MockEncryptionAtHostValidator.
type MockEncryptionAtHostValidatorMockRecorder struct {
	mock *MockEncryptionAtHostValidator
}

// NewMockEncryptionAtHostValidator creates a new mock instance.
func NewMockEncryptionAtHostValidator(ctrl *gomock.Controller) *MockEncryptionAtHostValidator {
	mock := &MockEncryptionAtHostValidator{ctrl: ctrl}
	mock.recorder = &MockEncryptionAtHostValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptionAtHostValidator) EXPECT() *MockEncryptionAtHostValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockEncryptionAtHostValidator) Validate(arg0 context.Context, arg1 *api.OpenShiftCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockEncryptionAtHostValidatorMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockEncryptionAtHostValidator)(nil).Validate), arg0, arg1)
}

// MockServicePrincipalValidator is a mock of ServicePrincipalValidator interface.
type MockServicePrincipalValidator struct {
	ctrl     *gomock.Controller
	recorder *MockServicePrincipalValidatorMockRecorder
}

// MockServicePrincipalValidatorMockRecorder is the mock recorder for MockServicePrincipalValidator.
type MockServicePrincipalValidatorMockRecorder struct {
	mock *MockServicePrincipalValidator
}

// NewMockServicePrincipalValidator creates a new mock instance.
func NewMockServicePrincipalValidator(ctrl *gomock.Controller) *MockServicePrincipalValidator {
	mock := &MockServicePrincipalValidator{ctrl: ctrl}
	mock.recorder = &MockServicePrincipalValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePrincipalValidator) EXPECT() *MockServicePrincipalValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockServicePrincipalValidator) Validate(arg0 *adal.ServicePrincipalToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockServicePrincipalValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockServicePrincipalValidator)(nil).Validate), arg0)
}

// MockProvidersValidator is a mock of ProvidersValidator interface.
type MockProvidersValidator struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersValidatorMockRecorder
}

// MockProvidersValidatorMockRecorder is the mock recorder for MockProvidersValidator.
type MockProvidersValidatorMockRecorder struct {
	mock *MockProvidersValidator
}

// NewMockProvidersValidator creates a new mock instance.
func NewMockProvidersValidator(ctrl *gomock.Controller) *MockProvidersValidator {
	mock := &MockProvidersValidator{ctrl: ctrl}
	mock.recorder = &MockProvidersValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvidersValidator) EXPECT() *MockProvidersValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockProvidersValidator) Validate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockProvidersValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockProvidersValidator)(nil).Validate), arg0)
}
