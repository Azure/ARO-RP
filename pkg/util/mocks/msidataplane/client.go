// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/msi-dataplane/pkg/dataplane (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -imports=internal=github.com/Azure/msi-dataplane/pkg/dataplane -destination=../mocks/msidataplane/client.go github.com/Azure/msi-dataplane/pkg/dataplane Client
//

// Package mock_dataplane is a generated GoMock package.
package mock_dataplane

import (
	context "context"
	reflect "reflect"

	"github.com/Azure/msi-dataplane/pkg/dataplane"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DeleteSystemAssignedIdentity mocks base method.
func (m *MockClient) DeleteSystemAssignedIdentity(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSystemAssignedIdentity", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSystemAssignedIdentity indicates an expected call of DeleteSystemAssignedIdentity.
func (mr *MockClientMockRecorder) DeleteSystemAssignedIdentity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSystemAssignedIdentity", reflect.TypeOf((*MockClient)(nil).DeleteSystemAssignedIdentity), arg0)
}

// GetSystemAssignedIdentityCredentials mocks base method.
func (m *MockClient) GetSystemAssignedIdentityCredentials(arg0 context.Context) (*dataplane.ManagedIdentityCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemAssignedIdentityCredentials", arg0)
	ret0, _ := ret[0].(*dataplane.ManagedIdentityCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemAssignedIdentityCredentials indicates an expected call of GetSystemAssignedIdentityCredentials.
func (mr *MockClientMockRecorder) GetSystemAssignedIdentityCredentials(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemAssignedIdentityCredentials", reflect.TypeOf((*MockClient)(nil).GetSystemAssignedIdentityCredentials), arg0)
}

// GetUserAssignedIdentitiesCredentials mocks base method.
func (m *MockClient) GetUserAssignedIdentitiesCredentials(arg0 context.Context, arg1 dataplane.UserAssignedIdentitiesRequest) (*dataplane.ManagedIdentityCredentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAssignedIdentitiesCredentials", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.ManagedIdentityCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAssignedIdentitiesCredentials indicates an expected call of GetUserAssignedIdentitiesCredentials.
func (mr *MockClientMockRecorder) GetUserAssignedIdentitiesCredentials(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAssignedIdentitiesCredentials", reflect.TypeOf((*MockClient)(nil).GetUserAssignedIdentitiesCredentials), arg0, arg1)
}

// MoveIdentity mocks base method.
func (m *MockClient) MoveIdentity(arg0 context.Context, arg1 dataplane.MoveIdentityRequest) (*dataplane.MoveIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveIdentity", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.MoveIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveIdentity indicates an expected call of MoveIdentity.
func (mr *MockClientMockRecorder) MoveIdentity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveIdentity", reflect.TypeOf((*MockClient)(nil).MoveIdentity), arg0, arg1)
}
