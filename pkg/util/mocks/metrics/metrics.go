// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/metrics (interfaces: Emitter)
//
// Generated by this command:
//
//	mockgen -destination=../util/mocks/metrics/metrics.go github.com/Azure/ARO-RP/pkg/metrics Emitter
//

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmitter is a mock of Emitter interface.
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
	isgomock struct{}
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter.
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance.
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// EmitFloat mocks base method.
func (m *MockEmitter) EmitFloat(metricName string, metricValue float64, dimensions map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitFloat", metricName, metricValue, dimensions)
}

// EmitFloat indicates an expected call of EmitFloat.
func (mr *MockEmitterMockRecorder) EmitFloat(metricName, metricValue, dimensions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitFloat", reflect.TypeOf((*MockEmitter)(nil).EmitFloat), metricName, metricValue, dimensions)
}

// EmitGauge mocks base method.
func (m *MockEmitter) EmitGauge(metricName string, metricValue int64, dimensions map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitGauge", metricName, metricValue, dimensions)
}

// EmitGauge indicates an expected call of EmitGauge.
func (mr *MockEmitterMockRecorder) EmitGauge(metricName, metricValue, dimensions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitGauge", reflect.TypeOf((*MockEmitter)(nil).EmitGauge), metricName, metricValue, dimensions)
}
