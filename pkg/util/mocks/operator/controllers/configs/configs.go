// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/ARO-RP/pkg/operator/controllers/configs (interfaces: Config)

// Package mock_configs is a generated GoMock package.
package mock_configs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	builder "sigs.k8s.io/controller-runtime/pkg/builder"

	v1alpha1 "github.com/Azure/ARO-RP/pkg/operator/apis/aro.openshift.io/v1alpha1"
	configs "github.com/Azure/ARO-RP/pkg/operator/controllers/configs"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// AddOwns mocks base method.
func (m *MockConfig) AddOwns(arg0 *builder.Builder) *builder.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOwns", arg0)
	ret0, _ := ret[0].(*builder.Builder)
	return ret0
}

// AddOwns indicates an expected call of AddOwns.
func (mr *MockConfigMockRecorder) AddOwns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOwns", reflect.TypeOf((*MockConfig)(nil).AddOwns), arg0)
}

// Ensure mocks base method.
func (m *MockConfig) Ensure(arg0 *configs.Reconciler, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ensure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ensure indicates an expected call of Ensure.
func (mr *MockConfigMockRecorder) Ensure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ensure", reflect.TypeOf((*MockConfig)(nil).Ensure), arg0, arg1)
}

// IsApplicable mocks base method.
func (m *MockConfig) IsApplicable(arg0 v1alpha1.Cluster, arg1 *configs.Reconciler, arg2 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplicable", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsApplicable indicates an expected call of IsApplicable.
func (mr *MockConfigMockRecorder) IsApplicable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplicable", reflect.TypeOf((*MockConfig)(nil).IsApplicable), arg0, arg1, arg2)
}

// Name mocks base method.
func (m *MockConfig) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConfigMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConfig)(nil).Name))
}

// Remove mocks base method.
func (m *MockConfig) Remove(arg0 *configs.Reconciler, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockConfigMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockConfig)(nil).Remove), arg0, arg1)
}
