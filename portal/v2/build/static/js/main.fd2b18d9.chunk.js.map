{"version":3,"sources":["SSHModal.tsx","Request.tsx","ClusterDetailList.tsx","ClusterDetail.tsx","Kubeconfig.tsx","ClusterList.tsx","App.tsx","index.tsx"],"names":["cancelIcon","iconName","copyIcon","machineOptions","key","text","theme","getTheme","contentStyles","mergeStyleSets","container","display","flexFlow","alignItems","header","flex","borderTop","palette","themePrimary","color","neutralPrimary","fontSize","FontSizes","xLargePlus","fontWeight","FontWeights","semibold","padding","body","overflowY","selectors","margin","marginTop","marginBottom","iconButtonStyles","root","marginLeft","marginRight","rootHovered","neutralDark","SSHModal","forwardRef","ref","csrfToken","useBoolean","isModalOpen","showModal","setTrue","hideModal","setFalse","titleId","useId","update","requestSSH","sshRequested","useState","resourceID","setResourceID","machineName","setMachineName","requestable","setRequestable","setUnrequestable","data","setData","error","setError","useImperativeHandle","LoadSSH","item","useEffect","a","axios","method","url","master","headers","current","result","response","fetchData","onChange","event","option","Modal","titleAriaId","isOpen","onDismiss","isModeless","containerClassName","className","id","IconButton","styles","iconProps","ariaLabel","onClick","href","MessageBar","messageBarType","MessageBarType","isMultiline","dismissButtonAriaLabel","statusText","Stack","horizontal","verticalAlign","Item","grow","TextField","label","value","command","readOnly","navigator","clipboard","writeText","password","type","canRevealPassword","tokens","childrenGap","Dropdown","options","PrimaryButton","disabled","displayName","OnError","err","status","document","location","FetchClusters","FetchClusterInfo","cluster","subscription","resourceGroup","name","FetchInfo","ProcessLogOut","console","log","RequestKubeconfig","clusterDetailHeadings","apiServerVisibility","apiServerURL","architectureVersion","consoleLink","createdAt","createdBy","failedProvisioningState","infraId","lastAdminUpdateError","lastModifiedAt","lastModifiedBy","lastProvisioningState","provisioningState","version","installStatus","ShimmerStyle","headShimmerStyle","headerShimmer","ShimmerElementType","line","height","width","rowShimmer","KeyColumnStyle","paddingTop","paddingRight","ValueColumnStyle","KeyStyle","fontStyle","alignSelf","fontVariantAlternates","paddingBottom","ValueStyle","ClusterDetailCell","style","Text","variant","ClusterDetailComponent","props","headerEntries","Object","entries","this","detailPanelVisible","length","contentStackStylesNormal","map","index","Array","fill","toString","Shimmer","shimmerElements","Component","navStyles","link","whiteSpace","lineHeight","groupContent","navLinkGroups","links","icon","customPanelStyle","top","left","content","paddingLeft","navigation","justifyContent","headerStyle","flexGrow","headerIconStyles","svg","errorBarStyles","ClusterDetailPanel","state","useRef","fetching","setFetching","openPanel","dismissPanel","dataLoaded","setDataLoaded","setdetailPanelVisible","currentCluster","resourceId","csrfTokenAvailable","then","newData","setState","Panel","PanelType","custom","onClose","isBlocking","closeButtonAriaLabel","onRenderHeader","Icon","headerStyles","titleText","subtitleText","Nav","onLinkClick","ev","groups","Separator","vertical","isDataLoaded","KubeconfigButton","buttonRef","blob","Blob","request","fileDownloadUrl","URL","createObjectURL","filename","parseContentDisposition","parameters","useLayoutEffect","download","click","revokeObjectURL","TooltipHost","classNames","controlWrapper","flexWrap","fullWidth","fileIconImg","maxHeight","maxWidth","headerIcon","iconContainer","controlButtonContainer","itemsCount","controlStyles","separatorStyle","clusterListDetailStyles","headerWrapper","ClusterListComponent","_sshModal","_onChangeText","items","filter","i","toLowerCase","indexOf","_onColumnClick","column","columns","newColumns","slice","currColumn","currCol","forEach","newCol","isSortedDescending","isSorted","sshModalRef","fieldName","minWidth","isRowHeader","isPadded","onRender","src","alt","isResizable","sortAscendingAriaLabel","sortDescendingAriaLabel","onColumnClick","Link","_onClusterInfoLinkClick","_onCopyResourceID","_onSSHClick","modalOpen","placeholder","DetailsList","selectionMode","SelectionMode","none","getKey","_getKey","setKey","layoutMode","DetailsListLayoutMode","fixedColumns","isHeaderVisible","onItemInvoked","_onItemInvoked","modal","setCurrentCluster","alert","ClusterList","updateData","_items","CommandBar","sshBox","containerStackTokens","appStackTokens","stackStyles","headerTextStyles","stackNavStyles","MenuButtonStyles","DefaultPalette","white","darkTheme","semanticColors","bodyBackground","bodyText","navPanelStyles","registerIcons","icons","xmlns","viewBox","d","App","csrf","elevated","username","contentStackStyles","setContentStackStyles","sshRef","csrfRef","onRenderNavigationContent","useCallback","horizontalAlign","isLightDismiss","smallFixedNear","ThemeProvider","hidden","initializeIcons","mergeStyles","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fd2b18d9.chunk.js","sourcesContent":["import { useId, useBoolean } from \"@fluentui/react-hooks\"\nimport {\n  Modal,\n  getTheme,\n  mergeStyleSets,\n  FontWeights,\n  IIconProps,\n  Dropdown,\n  IDropdownOption,\n  TextField,\n  MessageBar,\n  MessageBarType,\n  Stack,\n  FontSizes,\n} from \"@fluentui/react\"\nimport { PrimaryButton, IconButton } from \"@fluentui/react/lib/Button\"\nimport axios, { AxiosResponse } from \"axios\"\nimport React, {\n  useState,\n  useImperativeHandle,\n  useEffect,\n  forwardRef,\n  MutableRefObject,\n} from \"react\"\n\nconst cancelIcon: IIconProps = { iconName: \"Cancel\" }\nconst copyIcon: IIconProps = { iconName: \"Copy\" }\n\nconst machineOptions = [\n  { key: 1, text: \"master-0\" },\n  { key: 2, text: \"master-1\" },\n  { key: 3, text: \"master-2\" },\n]\n\ntype SSHModalProps = {\n  csrfToken: MutableRefObject<string>\n}\n\nconst theme = getTheme()\nconst contentStyles = mergeStyleSets({\n  container: {\n    display: \"flex\",\n    flexFlow: \"column nowrap\",\n    alignItems: \"stretch\",\n  },\n  header: [\n    {\n      flex: \"1 1 auto\",\n      borderTop: `4px solid ${theme.palette.themePrimary}`,\n      color: theme.palette.neutralPrimary,\n      display: \"flex\",\n      alignItems: \"center\",\n      fontSize: FontSizes.xLargePlus,\n      fontWeight: FontWeights.semibold,\n      padding: \"12px 12px 14px 24px\",\n    },\n  ],\n  body: {\n    flex: \"4 4 auto\",\n    padding: \"0 24px 24px 24px\",\n    overflowY: \"hidden\",\n    selectors: {\n      \"p\": { margin: \"14px 0\" },\n      \"p:first-child\": { marginTop: 0 },\n      \"p:last-child\": { marginBottom: 0 },\n    },\n  },\n})\n\nconst iconButtonStyles = {\n  root: {\n    color: theme.palette.neutralPrimary,\n    marginLeft: \"auto\",\n    marginTop: \"4px\",\n    marginRight: \"2px\",\n  },\n  rootHovered: {\n    color: theme.palette.neutralDark,\n  },\n}\n\nconst sshDocs: string =\n  \"https://msazure.visualstudio.com/AzureRedHatOpenShift/_wiki/wikis/ARO.wiki/136823/ARO-SRE-portal?anchor=ssh-(elevated)\"\n\nexport const SSHModal = forwardRef<any, SSHModalProps>(({ csrfToken }, ref) => {\n  const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false)\n\n  const titleId = useId(\"title\")\n  const [update, { setTrue: requestSSH, setFalse: sshRequested }] = useBoolean(false)\n  const [resourceID, setResourceID] = useState(\"\")\n  const [machineName, setMachineName] = useState<IDropdownOption>()\n  const [requestable, { setTrue: setRequestable, setFalse: setUnrequestable }] = useBoolean(false)\n  const [data, setData] = useState<{ command: string; password: string } | null>()\n  const [error, setError] = useState<AxiosResponse | null>(null)\n\n  useImperativeHandle(ref, () => ({\n    LoadSSH: (item: string) => {\n      setUnrequestable()\n      setData(null)\n      setError(null)\n      showModal()\n      setResourceID(item)\n    },\n  }))\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setError(null)\n        const result = await axios({\n          method: \"post\",\n          url: resourceID + \"/ssh/new\",\n          data: {\n            master: machineName?.key,\n          },\n          headers: { \"X-CSRF-Token\": csrfToken.current },\n        })\n        setData(result.data)\n        setRequestable()\n      } catch (error: any) {\n        setRequestable()\n        setError(error.response)\n      }\n    }\n    if (update && machineName) {\n      sshRequested()\n      fetchData()\n    }\n    return\n  }, [resourceID, machineName, csrfToken, update, sshRequested, setRequestable])\n\n  const onChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    option?: IDropdownOption<any>\n  ): void => {\n    setMachineName(option)\n    setRequestable()\n  }\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\">\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  const selectionField = (): any => {\n    return (\n      <Stack tokens={{ childrenGap: 15 }}>\n        <Dropdown label={`Machine Selection`} onChange={onChange} options={machineOptions} />\n        <PrimaryButton onClick={requestSSH} text=\"Request\" disabled={!requestable} />\n      </Stack>\n    )\n  }\n\n  const dataResult = (): any => {\n    return (\n      <div>\n        <Stack>\n          <Stack horizontal verticalAlign={\"end\"}>\n            <Stack.Item grow>\n              <TextField label=\"Command\" value={data?.command} readOnly />\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={copyIcon}\n                ariaLabel=\"Copy command\"\n                onClick={() => {\n                  if (data) {\n                    navigator.clipboard.writeText(data.command)\n                  }\n                }}\n              />\n            </Stack.Item>\n          </Stack>\n          <Stack horizontal verticalAlign={\"end\"}>\n            <Stack.Item grow>\n              <TextField\n                label=\"Password\"\n                value={data?.password}\n                type=\"password\"\n                canRevealPassword\n                readOnly\n              />{\" \"}\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={copyIcon}\n                ariaLabel=\"Copy password\"\n                onClick={() => {\n                  if (data) {\n                    navigator.clipboard.writeText(data.password)\n                  }\n                }}\n              />\n            </Stack.Item>\n          </Stack>\n        </Stack>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Modal\n        titleAriaId={titleId}\n        isOpen={isModalOpen}\n        onDismiss={hideModal}\n        isModeless={true}\n        containerClassName={contentStyles.container}>\n        <div className={contentStyles.header}>\n          <span id={titleId}>SSH Access</span>\n          <IconButton\n            styles={iconButtonStyles}\n            iconProps={cancelIcon}\n            ariaLabel=\"Close popup modal\"\n            onClick={hideModal}\n          />\n        </div>\n\n        <div className={contentStyles.body}>\n          <p>\n            Before requesting SSH access, please ensure you have read the{\" \"}\n            <a href={sshDocs}>SSH docs</a>.\n          </p>\n          {error && errorBar()}\n          {data ? dataResult() : selectionField()}\n        </div>\n      </Modal>\n    </div>\n  )\n})\n\nSSHModal.displayName = \"sshmodal\"\n","import axios, { AxiosResponse } from \"axios\"\nimport { ICluster } from \"./App\"\n\nconst OnError = (err: AxiosResponse): AxiosResponse | null => {\n  if (err.status === 403) {\n    document.location.href = \"/api/login\"\n    return null\n  } else {\n    return err\n  }\n}\n\nexport const FetchClusters = async (): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\"/api/clusters\")\n    return result\n  } catch (e: any) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchClusterInfo = async (cluster: ICluster): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\n      \"/api/\" + cluster.subscription + \"/\" + cluster.resourceGroup + \"/\" + cluster.name\n    )\n    return result\n  } catch (e: any) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchInfo = async (): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\"/api/info\")\n    return result\n  } catch (e: any) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const ProcessLogOut = async (): Promise<any> => {\n  try {\n    const result = await axios({ method: \"POST\", url: \"/api/logout\" })\n    return result\n  } catch (e: any) {\n    let err = e.response as AxiosResponse\n    console.log(err)\n  }\n  document.location.href = \"/api/login\"\n}\n\nexport const RequestKubeconfig = async (\n  csrfToken: string,\n  resourceID: string\n): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios({\n      method: \"POST\",\n      url: resourceID + \"/kubeconfig/new\",\n      headers: {\n        \"X-CSRF-Token\": csrfToken,\n      },\n    })\n    return result\n  } catch (e: any) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n","import { IShimmerStyles, Shimmer, ShimmerElementType } from \"@fluentui/react/lib/Shimmer\"\nimport { Component } from \"react\"\nimport { Stack, Text, IStackStyles, IStackItemStyles } from \"@fluentui/react\"\nimport { contentStackStylesNormal, ICluster } from \"./App\"\n\ninterface ClusterDetailComponentProps {\n  item: any\n  cluster: ICluster | null\n  isDataLoaded: boolean\n  detailPanelVisible: string\n}\n\ninterface IClusterDetailComponentState {\n  item: IClusterDetails // why both state and props?\n}\n\nexport interface IClusterDetails {\n  apiServerVisibility: string\n  apiServerURL: string\n  architectureVersion: string\n  consoleLink: string\n  createdAt: string\n  createdBy: string\n  failedProvisioningState: string\n  infraId: string\n  lastAdminUpdateError: string\n  lastModifiedAt: string\n  lastModifiedBy: string\n  lastProvisioningState: string\n  location: string\n  name: string\n  provisioningState: string\n  version: string\n  installStatus: string\n}\n\nconst clusterDetailHeadings: IClusterDetails = {\n  apiServerVisibility: \"ApiServer Visibility\",\n  apiServerURL: \"ApiServer URL\",\n  architectureVersion: \"Architecture Version\",\n  consoleLink: \"Console Link\",\n  createdAt: \"Created At\",\n  createdBy: \"Created By\",\n  failedProvisioningState: \"Failed Provisioning State\",\n  infraId: \"Infra Id\",\n  lastAdminUpdateError: \"Last Admin Update Error\",\n  lastModifiedAt: \"Last Modified At\",\n  lastModifiedBy: \"Last Modified By\",\n  lastProvisioningState: \"Last Provisioning State\",\n  location: \"Location\",\n  name: \"Name\",\n  provisioningState: \"Provisioning State\",\n  version: \"Version\",\n  installStatus: \"Installation Status\",\n}\n\nconst ShimmerStyle: Partial<IShimmerStyles> = {\n  root: {\n    margin: \"11px 0\",\n  },\n}\n\nconst headShimmerStyle: Partial<IShimmerStyles> = {\n  root: {\n    margin: \"15px 0\",\n  },\n}\n\nconst headerShimmer = [{ type: ShimmerElementType.line, height: 32, width: \"25%\" }]\n\nconst rowShimmer = [{ type: ShimmerElementType.line, height: 18, width: \"75%\" }]\n\nconst KeyColumnStyle: Partial<IStackStyles> = {\n  root: {\n    paddingTop: 10,\n    paddingRight: 15,\n  },\n}\n\nconst ValueColumnStyle: Partial<IStackStyles> = {\n  root: {\n    paddingTop: 10,\n  },\n}\n\nconst KeyStyle: IStackItemStyles = {\n  root: {\n    fontStyle: \"bold\",\n    alignSelf: \"flex-start\",\n    fontVariantAlternates: \"bold\",\n    color: \"grey\",\n    paddingBottom: 10,\n  },\n}\n\nconst ValueStyle: IStackItemStyles = {\n  root: {\n    paddingBottom: 10,\n  },\n}\n\nfunction ClusterDetailCell(value: any): any {\n  if (typeof value.value == typeof \" \") {\n    return (\n      <Stack.Item styles={value.style}>\n        <Text styles={value.style} variant={\"medium\"}>\n          {value.value}\n        </Text>\n      </Stack.Item>\n    )\n  }\n}\n\nexport class ClusterDetailComponent extends Component<\n  ClusterDetailComponentProps,\n  IClusterDetailComponentState\n> {\n  constructor(props: ClusterDetailComponentProps | Readonly<ClusterDetailComponentProps>) {\n    super(props)\n  }\n\n  public render() {\n    const headerEntries = Object.entries(clusterDetailHeadings)\n    switch (this.props.detailPanelVisible) {\n      case \"Overview\":\n        {\n          if (this.props.item.length != 0) {\n            return (\n              <Stack styles={contentStackStylesNormal}>\n                <Stack horizontal>\n                  <Stack styles={KeyColumnStyle}>\n                    {headerEntries.map((value: any, index: number) => (\n                      <ClusterDetailCell style={KeyStyle} key={index} value={value[1]} />\n                    ))}\n                  </Stack>\n\n                  <Stack styles={KeyColumnStyle}>\n                    {Array(headerEntries.length)\n                      .fill(\":\")\n                      .map((value: any, index: number) => (\n                        <ClusterDetailCell style={KeyStyle} key={index} value={value} />\n                      ))}\n                  </Stack>\n\n                  <Stack styles={ValueColumnStyle}>\n                    {headerEntries.map((value: [any, any], index: number) => (\n                      <ClusterDetailCell\n                        style={ValueStyle}\n                        key={index}\n                        value={\n                          this.props.item[value[0]] != null &&\n                          this.props.item[value[0]].toString().length > 0\n                            ? this.props.item[value[0]]\n                            : \"Undefined\"\n                        }\n                      />\n                    ))}\n                  </Stack>\n                </Stack>\n              </Stack>\n            )\n          } else {\n            return (\n              <Stack>\n                <Shimmer\n                  styles={headShimmerStyle}\n                  shimmerElements={headerShimmer}\n                  width=\"25%\"></Shimmer>\n                {headerEntries.map((value: [any, any], index: number) => (\n                  <Shimmer\n                    styles={ShimmerStyle}\n                    key={index}\n                    shimmerElements={rowShimmer}\n                    width=\"75%\"></Shimmer>\n                ))}\n              </Stack>\n            )\n          }\n        }\n      case \"Nodes\":\n        {\n          return (\n            <Stack styles={contentStackStylesNormal}>\n              <Text variant=\"xxLarge\">{this.props.cluster?.name}</Text>\n              <Stack horizontal>\n                <Stack styles={KeyColumnStyle}>Node detail</Stack>\n\n                <Stack styles={KeyColumnStyle}>Node detail2</Stack>\n\n                <Stack styles={ValueColumnStyle}>Node detail3</Stack>\n              </Stack>\n            </Stack>\n          )\n        }\n    }\n  }\n}\n","import {\n  IPanelStyles,\n  Panel,\n  PanelType,\n} from \"@fluentui/react/lib/Panel\"\nimport { useBoolean } from \"@fluentui/react-hooks\"\nimport { useState, useEffect, useRef, MutableRefObject, ReactElement } from \"react\"\nimport {\n  IMessageBarStyles,\n  MessageBar,\n  MessageBarType,\n  Stack,\n  Separator,\n  IStackStyles,\n  Icon,\n  IIconStyles,\n} from \"@fluentui/react\"\nimport { AxiosResponse } from \"axios\"\nimport { FetchClusterInfo } from \"./Request\"\nimport { ICluster, headerStyles } from \"./App\"\nimport { Nav, INavLink, INavLinkGroup, INavStyles } from \"@fluentui/react/lib/Nav\"\nimport { ClusterDetailComponent } from \"./ClusterDetailList\"\nimport React from \"react\"\n\nconst navStyles: Partial<INavStyles> = {\n  root: {\n    width: 155,\n    paddingRight: \"10px\",\n  },\n  link: {\n    whiteSpace: \"normal\",\n    lineHeight: \"inherit\",\n  },\n  groupContent: {\n    marginBottom: \"0px\",\n  },\n}\n\nconst navLinkGroups: INavLinkGroup[] = [\n  {\n    links: [\n      {\n        name: \"Overview\",\n        key: \"overview\",\n        url: \"#overview\",\n        icon: \"ThisPC\",\n      },\n    ],\n  },\n  /*  {\n    links: [\n      {\n        name: \"Nodes\",\n        key: \"nodes\",\n        url: \"#nodes\",\n        icon: \"BuildQueue\",\n      },\n    ],\n  }, */\n]\n\nconst customPanelStyle: Partial<IPanelStyles> = {\n  root: { top: \"40px\", left: \"225px\" },\n  content: { paddingLeft: 30, paddingRight: 5 },\n  navigation: {\n    justifyContent: \"flex-start\",\n  },\n}\n\nconst headerStyle: Partial<IStackStyles> = {\n  root: {\n    alignSelf: \"flex-start\",\n    flexGrow: 2,\n    height: 48,\n    paddingLeft: 30,\n    marginBottom: 15,\n  },\n}\n\nconst headerIconStyles: Partial<IIconStyles> = {\n  root: {\n    height: \"100%\",\n    width: 40,\n    paddingTop: 4,\n    paddingRight: 10,\n    svg: {\n      fill: \"#e3222f\",\n    },\n  },\n}\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nexport function ClusterDetailPanel(props: {\n  csrfToken: MutableRefObject<string>\n  currentCluster: ICluster | null\n  onClose: Function\n  csrfTokenAvailable: string\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<ClusterDetailComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n  const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false) // panel controls\n  const [dataLoaded, setDataLoaded] = useState<boolean>(false)\n  const [detailPanelVisible, setdetailPanelVisible] = useState<string>(\"Overview\")\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}>\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // updateData - updates the state of the component\n  // can be used if we want a refresh button.\n  // api/clusterdetail returns a single item.\n  const updateData = (newData: any) => {\n    setData(newData)\n    if (state && state.current) {\n      state.current.setState({ item: newData })\n    }\n  }\n\n  const _dismissPanel = () => {\n    dismissPanel()\n    props.onClose() // useEffect?\n    setData([])\n    setFetching(\"\")\n    setDataLoaded(false)\n    setError(null)\n  }\n\n  useEffect(() => {\n    if (props.currentCluster == null) {\n      return\n    }\n    var resourceID = props.currentCluster.resourceId\n\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n        setDataLoaded(true)\n      } else {\n        setError(result)\n      }\n      setFetching(resourceID)\n    }\n\n    if (fetching === \"\" && props.csrfTokenAvailable === \"DONE\" && resourceID != \"\") {\n      setFetching(\"FETCHING\")\n      setError(null)\n      FetchClusterInfo(props.currentCluster).then(onData) // TODO: fetchClusterInfo accepts IClusterDetail\n    }\n  }, [data, fetching, setFetching])\n\n  useEffect(() => {\n    if (props.currentCluster == null) {\n      setDataLoaded(false)\n      return\n    }\n    var resourceID = props.currentCluster.resourceId\n\n    if (resourceID != \"\") {\n      if (resourceID == fetching) {\n        openPanel()\n        setDataLoaded(true)\n      } else {\n        setData([])\n        setFetching(\"\")\n        setDataLoaded(false) // activate shimmer\n        openPanel()\n      }\n    }\n  }, [props.currentCluster?.resourceId])\n\n  function _onLinkClick(ev?: React.MouseEvent<HTMLElement>, item?: INavLink) {\n    if (item && item.name !== \"\") {\n      setdetailPanelVisible(item.name)\n    }\n  }\n\n  const onRenderHeader = (\n  ): ReactElement => {\n    return (\n      <>\n        <Stack styles={headerStyle} horizontal>\n          <Stack.Item>\n            <Icon styles={headerIconStyles} iconName=\"openshift-svg\"></Icon>\n          </Stack.Item>\n          <Stack.Item>\n            <div className={headerStyles.titleText}>{props.currentCluster?.name}</div>\n            <div className={headerStyles.subtitleText}>Cluster</div>\n          </Stack.Item>\n        </Stack>\n      </>\n    )\n  }\n\n  return (\n    <Panel\n      isOpen={isOpen}\n      type={PanelType.custom}\n      onDismiss={_dismissPanel}\n      isBlocking={false}\n      styles={customPanelStyle}\n      closeButtonAriaLabel=\"Close\"\n      onRenderHeader={onRenderHeader}>\n      <Stack>\n        <Stack.Item grow>{error && errorBar()}</Stack.Item>\n        <Stack horizontal>\n          <Stack.Item>\n            <Nav\n              onLinkClick={_onLinkClick}\n              ariaLabel=\"Select a tab to view\"\n              styles={navStyles}\n              groups={navLinkGroups}\n            />\n          </Stack.Item>\n          <Separator vertical />\n          <Stack.Item grow>\n            <ClusterDetailComponent\n              item={data}\n              cluster={props.currentCluster}\n              isDataLoaded={dataLoaded}\n              detailPanelVisible={detailPanelVisible}\n            />\n          </Stack.Item>\n        </Stack>\n      </Stack>\n    </Panel>\n  )\n}\n","import { IconButton, TooltipHost } from \"@fluentui/react\"\nimport { AxiosResponse } from \"axios\"\nimport { RequestKubeconfig } from \"./Request\"\nimport { MutableRefObject, useEffect, useLayoutEffect } from \"react\"\nimport { useState } from \"react\"\nimport { useRef } from \"react\"\nimport { forwardRef } from \"react\"\nimport { parse as parseContentDisposition } from \"content-disposition\"\n\ntype KubeconfigButtonProps = {\n  csrfToken: MutableRefObject<string>\n  resourceId: string\n}\n\ntype FileDownload = {\n  name: string\n  content: string\n}\n\nexport const KubeconfigButton = forwardRef<any, KubeconfigButtonProps>(\n  ({ csrfToken, resourceId }) => {\n    const [data, setData] = useState<FileDownload>({ name: \"\", content: \"\" })\n    const [error, setError] = useState<AxiosResponse | null>(null)\n    const [fetching, setFetching] = useState(\"DONE\")\n    const buttonRef = useRef<HTMLAnchorElement | null>(null)\n\n    useEffect(() => {\n      const onData = (result: AxiosResponse | null) => {\n        if (result?.status === 200) {\n          const blob = new Blob([result.request.response])\n          const fileDownloadUrl = URL.createObjectURL(blob)\n          const filename = parseContentDisposition(result.headers[\"content-disposition\"]).parameters\n            .filename\n          setData({ content: fileDownloadUrl, name: filename })\n        } else {\n          setError(result)\n        }\n        setFetching(\"DONE\")\n      }\n\n      if (fetching === \"\") {\n        setFetching(\"FETCHING\")\n        RequestKubeconfig(csrfToken.current, resourceId).then(onData)\n      }\n    }, [fetching, error, data, resourceId, csrfToken])\n\n    useLayoutEffect(() => {\n      if (data.content && buttonRef && buttonRef.current) {\n        buttonRef.current.href = data.content\n        buttonRef.current.download = data.name\n        buttonRef.current.click()\n        URL.revokeObjectURL(data.content)\n        data.content = \"\"\n      }\n    }, [data])\n\n    return (\n      <>\n        <TooltipHost content={`Download Kubeconfig`}>\n          <IconButton\n            iconProps={{ iconName: \"HardDriveGroup\" }}\n            disabled={fetching === \"FETCHING\"}\n            aria-label=\"Download Kubeconfig\"\n            onClick={() => setFetching(\"\")}\n          />\n          <a style={{ display: \"none\" }} ref={buttonRef} href={\"#\"}>\n            dl\n          </a>\n        </TooltipHost>\n      </>\n    )\n  }\n)\n\nKubeconfigButton.displayName = \"kubeconfigbutton\"\n","import React, { useState, useEffect, useRef, MutableRefObject, Component } from \"react\"\nimport {\n  Stack,\n  IconButton,\n  MessageBarType,\n  MessageBar,\n  CommandBar,\n  ICommandBarItemProps,\n  Separator,\n  Text,\n  IMessageBarStyles,\n  mergeStyleSets,\n  TooltipHost,\n  TextField,\n  Link,\n} from \"@fluentui/react\"\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n  IDetailsListStyles,\n} from \"@fluentui/react/lib/DetailsList\"\nimport { FetchClusters } from \"./Request\"\nimport { KubeconfigButton } from \"./Kubeconfig\"\nimport { AxiosResponse } from \"axios\"\nimport { ICluster, headerStyles } from \"./App\"\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nconst classNames = mergeStyleSets({\n  controlWrapper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  fileIconImg: {\n    verticalAlign: \"middle\",\n    maxHeight: \"20px\",\n    maxWidth: \"20px\",\n  },\n  headerIcon: {\n    height: 18,\n    paddingTop: 1,\n  },\n  iconContainer: {\n    margin: \"-11px 0px\",\n    height: 42,\n  },\n  controlButtonContainer: {\n    paddingLeft: 0,\n  },\n  itemsCount: {\n    padding: \"10px 0px\",\n  },\n})\n\nconst controlStyles = {\n  root: {\n    paddingLeft: 0,\n  },\n}\n\nconst separatorStyle = {\n  root: {\n    fontSize: 0,\n    marginBottom: 20,\n    padding: 0,\n  },\n}\n\ninterface IClusterListState {\n  columns: IColumn[]\n  items: ICluster[]\n  modalOpen: boolean\n}\n\nconst clusterListDetailStyles: Partial<IDetailsListStyles> = {\n  headerWrapper: {\n    marginTop: \"-16px\",\n  },\n}\n\n/* eslint-disable */\n\ninterface ClusterListComponentProps {\n  items: ICluster[]\n  sshModalRef: MutableRefObject<any>\n  setCurrentCluster: (item: ICluster) => void\n  csrfToken: MutableRefObject<string>\n}\n\n/* eslint-enable */\nclass ClusterListComponent extends Component<ClusterListComponentProps, IClusterListState> {\n  private _sshModal: MutableRefObject<any>\n\n  constructor(props: ClusterListComponentProps) {\n    super(props)\n\n    this._sshModal = props.sshModalRef\n\n    const columns: IColumn[] = [\n      {\n        key: \"icon\",\n        name: \"\",\n        fieldName: \"\",\n        minWidth: 24,\n        isRowHeader: false,\n        data: \"string\",\n        isPadded: false,\n        maxWidth: 24,\n        onRender: () => (\n          <Stack horizontal verticalAlign=\"center\" className={classNames.iconContainer}>\n            <img src=\"/favicon.ico\" className={classNames.headerIcon} alt=\"\" />\n          </Stack>\n        ),\n      },\n      {\n        key: \"name\",\n        name: \"Name\",\n        fieldName: \"name\",\n        minWidth: 100,\n        flexGrow: 10,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        onRender: (item: ICluster) => (\n          <Link onClick={() => this._onClusterInfoLinkClick(item)}>{item.name}</Link>\n        ),\n        isPadded: true,\n      },\n      {\n        key: \"subscription\",\n        name: \"Subscription\",\n        fieldName: \"subscription\",\n        minWidth: 100,\n        flexGrow: 10,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"version\",\n        name: \"Version\",\n        fieldName: \"version\",\n        minWidth: 50,\n        flexGrow: 3,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"createdDate\",\n        name: \"Creation Date\",\n        fieldName: \"createdAt\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"provisionedBy\",\n        name: \"Provisioned By\",\n        fieldName: \"provisionedBy\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"state\",\n        name: \"State\",\n        fieldName: \"provisioningState\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        onRender: (item: ICluster) => (\n          <Text>\n            {item.provisioningState}\n            {item.failedProvisioningState && \" - \" + item.failedProvisioningState}\n          </Text>\n        ),\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"icons\",\n        name: \"Actions\",\n        fieldName: \"icons\",\n        minWidth: 92,\n        flexGrow: 5,\n        isRowHeader: false,\n        data: \"string\",\n        isPadded: true,\n        onRender: (item: ICluster) => (\n          <Stack horizontal verticalAlign=\"center\" className={classNames.iconContainer}>\n            <TooltipHost content={`Copy Resource ID`}>\n              <IconButton\n                iconProps={{ iconName: \"Copy\" }}\n                aria-label=\"Copy Resource ID\"\n                onClick={() => this._onCopyResourceID(item)}\n              />\n            </TooltipHost>\n            <TooltipHost content={`Prometheus`}>\n              <IconButton\n                iconProps={{ iconName: \"BIDashboard\" }}\n                aria-label=\"Prometheus\"\n                href={item.resourceId + `/prometheus`}\n              />\n            </TooltipHost>\n            <TooltipHost content={`SSH`}>\n              <IconButton\n                iconProps={{ iconName: \"CommandPrompt\" }}\n                aria-label=\"SSH\"\n                onClick={() => this._onSSHClick(item)}\n              />\n            </TooltipHost>\n            <KubeconfigButton resourceId={item.resourceId} csrfToken={props.csrfToken} />\n            {/* <TooltipHost content={`Geneva`}>\n              <IconButton\n                iconProps={{iconName: \"Health\"}}\n                aria-label=\"Geneva\"\n                href={item.resourceId + `/geneva`}\n              />\n            </TooltipHost>\n            <TooltipHost content={`Feature Flags`}>\n              <IconButton\n                iconProps={{iconName: \"IconSetsFlag\"}}\n                aria-label=\"featureFlags\"\n                href={item.resourceId + `/feature-flags`}\n              />\n            </TooltipHost> */}\n          </Stack>\n        ),\n      },\n    ]\n\n    this.state = {\n      items: this.props.items,\n      columns: columns,\n      modalOpen: false,\n    }\n  }\n\n  public render() {\n    const { columns, items } = this.state\n\n    return (\n      <Stack>\n        <div className={classNames.controlWrapper}>\n          <TextField placeholder=\"Filter on resource ID\" onChange={this._onChangeText} />\n        </div>\n        <Text className={classNames.itemsCount}>Showing {items.length} items</Text>\n        <DetailsList\n          items={items}\n          columns={columns}\n          selectionMode={SelectionMode.none}\n          getKey={this._getKey}\n          setKey=\"none\"\n          layoutMode={DetailsListLayoutMode.fixedColumns}\n          isHeaderVisible={true}\n          onItemInvoked={this._onItemInvoked}\n          styles={clusterListDetailStyles}\n        />\n      </Stack>\n    )\n  }\n\n  private _getKey(item: any): string {\n    return item.key\n  }\n\n  private _onChangeText = (\n    ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    this.setState({\n      items: text\n        ? this.props.items.filter((i) => i.resourceId.toLowerCase().indexOf(text) > -1)\n        : this.props.items,\n    })\n  }\n\n  private _onSSHClick(item: any): void {\n    const modal = this._sshModal\n    if (modal && modal.current) {\n      modal.current.LoadSSH(item.resourceId)\n    }\n  }\n\n  private _onCopyResourceID(item: any): void {\n    navigator.clipboard.writeText(item.resourceId)\n  }\n\n  private _onClusterInfoLinkClick(item: ICluster): void {\n    this.props.setCurrentCluster(item)\n  }\n\n  private _onItemInvoked(item: any): void {\n    alert(`Item invoked: ${item.resourceId}`)\n  }\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\n    const { columns, items } = this.state\n    const newColumns: IColumn[] = columns.slice()\n    const currColumn: IColumn = newColumns.filter((currCol) => column.key === currCol.key)[0]\n    newColumns.forEach((newCol: IColumn) => {\n      if (newCol === currColumn) {\n        currColumn.isSortedDescending = !currColumn.isSortedDescending\n        currColumn.isSorted = true\n      } else {\n        newCol.isSorted = false\n        newCol.isSortedDescending = true\n      }\n    })\n    this.setState({\n      columns: newColumns,\n      items: items,\n    })\n  }\n}\n\nexport function ClusterList(props: {\n  csrfToken: MutableRefObject<string>\n  sshBox: MutableRefObject<any>\n  setCurrentCluster: any\n  csrfTokenAvailable: string\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<ClusterListComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}>\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // Helper function to refresh the actual state of the DetailList\n  // see https://developer.microsoft.com/en-us/fluentui#/controls/web/detailslist#best-practices\n  const updateData = (newData: any) => {\n    setData(newData)\n    if (state && state.current) {\n      state.current.setState({ items: newData })\n    }\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n      } else {\n        setError(result)\n      }\n      setFetching(\"DONE\")\n    }\n\n    if (fetching === \"\" && props.csrfTokenAvailable === \"DONE\") {\n      setFetching(\"FETCHING\")\n      FetchClusters().then(onData)\n    }\n  }, [data, fetching, setFetching, props.csrfTokenAvailable])\n\n  const _items: ICommandBarItemProps[] = [\n    {\n      key: \"refresh\",\n      text: \"Refresh\",\n      iconProps: { iconName: \"Refresh\" },\n      onClick: () => {\n        updateData([])\n        setFetching(\"\")\n      },\n    },\n  ]\n\n  return (\n    <Stack>\n      <span className={headerStyles.titleText}>Clusters</span>\n      <span className={headerStyles.subtitleText}>Azure Red Hat OpenShift</span>\n      <CommandBar\n        items={_items}\n        ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n        className={classNames.controlButtonContainer}\n        styles={controlStyles}\n      />\n      <Separator styles={separatorStyle} />\n\n      {error && errorBar()}\n      <ClusterListComponent\n        items={data}\n        ref={state} // why do we need ref here?\n        sshModalRef={props.sshBox}\n        setCurrentCluster={props.setCurrentCluster}\n        csrfToken={props.csrfToken}\n      />\n    </Stack>\n  )\n}\n","import { useState, useEffect, useRef, useCallback } from \"react\"\nimport {\n  Stack,\n  Text,\n  Panel,\n  IStackTokens,\n  IconButton,\n  IStackStyles,\n  DefaultPalette,\n  ThemeProvider,\n  PartialTheme,\n  PanelType,\n  IButtonStyles,\n  IPanelProps,\n  MessageBar,\n  IRenderFunction,\n  ITextStyles,\n  IPanelStyles,\n  TooltipHost,\n  IMessageBarStyles,\n  MessageBarType,\n  Icon,\n  mergeStyleSets,\n  registerIcons,\n} from \"@fluentui/react\"\nimport { AxiosResponse } from \"axios\"\nimport { useBoolean } from \"@fluentui/react-hooks\"\nimport { SSHModal } from \"./SSHModal\"\nimport { ClusterDetailPanel } from \"./ClusterDetail\"\nimport { ClusterList } from \"./ClusterList\"\nimport { FetchInfo, ProcessLogOut } from \"./Request\"\n\nconst containerStackTokens: IStackTokens = {}\nconst appStackTokens: IStackTokens = { childrenGap: 10 }\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nexport interface ICluster {\n  key: string\n  name: string\n  subscription: string\n  resourceGroup: string\n  id: string\n  version: string\n  createdDate: string\n  provisionedBy: string\n  provisioningState: string\n  failedProvisioningState: string\n  resourceId: string\n  consoleLink: string\n}\n\nconst stackStyles: IStackStyles = {\n  root: [\n    {\n      width: \"100%\",\n      padding: 0,\n    },\n  ],\n}\n\nconst headerTextStyles: ITextStyles = {\n  root: {\n    fontWeight: 600,\n  },\n}\n\nexport const contentStackStylesNormal: IStackStyles = {\n  root: [\n    {\n      padding: 20,\n    },\n  ],\n}\n\nconst stackNavStyles: IStackStyles = {\n  root: {\n    padding: \"0px 15px\",\n    height: 40,\n  },\n}\n\nconst MenuButtonStyles: IButtonStyles = {\n  icon: { color: DefaultPalette.white },\n}\n\nconst darkTheme: PartialTheme = {\n  semanticColors: {\n    bodyBackground: DefaultPalette.themePrimary,\n    bodyText: DefaultPalette.white,\n  },\n}\n\nconst navPanelStyles: Partial<IPanelStyles> = {\n  navigation: {\n    height: 40,\n    lineHeight: 40,\n    fontSize: 15,\n    paddingLeft: 15,\n    justifyContent: \"start\",\n    alignItems: \"center\",\n  },\n}\n\nexport const headerStyles = mergeStyleSets({\n  titleText: {\n    fontWeight: 600,\n    fontSize: 24,\n    lineHeight: 32,\n  },\n  subtitleText: {\n    color: \"#646464\",\n    fontSize: 12,\n    lineHeight: 14,\n    margin: 0,\n  },\n})\n\nregisterIcons({\n  icons: {\n    \"openshift-svg\": (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 64 64\">\n        <g>\n          <path d=\"M17.424 27.158L7.8 30.664c.123 1.545.4 3.07.764 4.566l9.15-3.333c-.297-1.547-.403-3.142-.28-4.74M60 16.504c-.672-1.386-1.45-2.726-2.35-3.988l-9.632 3.506c1.12 1.147 2.06 2.435 2.83 3.813z\" />\n          <path d=\"M38.802 13.776c2.004.935 3.74 2.21 5.204 3.707l9.633-3.506a27.38 27.38 0 0 0-10.756-8.95c-13.77-6.42-30.198-.442-36.62 13.326a27.38 27.38 0 0 0-2.488 13.771l9.634-3.505c.16-2.087.67-4.18 1.603-6.184 4.173-8.947 14.844-12.83 23.79-8.658\" />\n        </g>\n        <path d=\"M9.153 35.01L0 38.342c.84 3.337 2.3 6.508 4.304 9.33l9.612-3.5a17.99 17.99 0 0 1-4.763-9.164\" />\n        <path d=\"M49.074 31.38a17.64 17.64 0 0 1-1.616 6.186c-4.173 8.947-14.843 12.83-23.79 8.657a17.71 17.71 0 0 1-5.215-3.7l-9.612 3.5c2.662 3.744 6.293 6.874 10.748 8.953 13.77 6.42 30.196.44 36.618-13.328a27.28 27.28 0 0 0 2.479-13.765l-9.61 3.498z\" />\n        <path d=\"M51.445 19.618l-9.153 3.332c1.7 3.046 2.503 6.553 2.24 10.08l9.612-3.497c-.275-3.45-1.195-6.817-2.7-9.915\" />\n      </svg>\n    ),\n  },\n})\n\nexport interface IClusterDetail {\n  subscription: string\n  resourceGroup: string\n  clusterName: string\n}\n\nfunction App() {\n  const [data, updateData] = useState({ location: \"\", csrf: \"\", elevated: false, username: \"\" })\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false)\n  const [fetching, setFetching] = useState(\"\")\n  const [currentCluster, setCurrentCluster] = useState<ICluster | null>(null)\n\n  const [contentStackStyles, setContentStackStyles] =\n    useState<IStackStyles>(contentStackStylesNormal)\n  const sshRef = useRef<typeof SSHModal | null>(null)\n  const csrfRef = useRef<string>(\"\")\n\n  const _onCloseDetailPanel = () => {\n    setCurrentCluster(null)\n    setContentStackStyles(contentStackStylesNormal)\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n        csrfRef.current = result.data.csrf\n      } else {\n        setError(result)\n      }\n      setFetching(\"DONE\")\n    }\n\n    if (fetching === \"\") {\n      setFetching(\"FETCHING\")\n      FetchInfo().then(onData)\n    }\n  }, [fetching, error, data])\n\n  const onRenderNavigationContent: IRenderFunction<IPanelProps> = useCallback(\n    () => (\n      <>\n        <IconButton iconProps={{ iconName: \"GlobalNavButton\" }} onClick={dismissPanel} />\n      </>\n    ),\n    [dismissPanel]\n  )\n\n  const logOut = () => {\n    ProcessLogOut()\n  }\n\n  const errorBar = (): any => {\n    console.log(error)\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}>\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // Application state maintains the current resource id/name/group\n  // when we click a thing set the state\n  // ...\n\n  return (\n    <>\n      <Stack styles={stackStyles} tokens={containerStackTokens} horizontalAlign={\"stretch\"}>\n        <Panel\n          isLightDismiss\n          styles={navPanelStyles}\n          type={PanelType.smallFixedNear}\n          isOpen={isOpen}\n          onDismiss={dismissPanel}\n          closeButtonAriaLabel=\"Close\"\n          onRenderNavigationContent={onRenderNavigationContent}>\n          <p>regions go here</p>\n        </Panel>\n        <ThemeProvider theme={darkTheme}>\n          <Stack\n            grow\n            tokens={appStackTokens}\n            horizontalAlign={\"start\"}\n            verticalAlign={\"center\"}\n            horizontal\n            styles={stackNavStyles}>\n            <Stack.Item>\n              <IconButton\n                iconProps={{ iconName: \"GlobalNavButton\" }}\n                onClick={openPanel}\n                styles={MenuButtonStyles}\n              />\n            </Stack.Item>\n            <Stack.Item grow>\n              <Text styles={headerTextStyles}>\n                ARO Portal {data.location ? \"(\" + data.location + \")\" : \"\"}\n              </Text>\n            </Stack.Item>\n            <Stack.Item>\n              <Text>{data.username}</Text>\n            </Stack.Item>\n\n            <Stack.Item hidden={!data.elevated}>\n              <TooltipHost content={`Elevated User`}>\n                <Icon iconName={\"Admin\"}></Icon>\n              </TooltipHost>\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={{ iconName: \"SignOut\" }}\n                onClick={logOut}\n                styles={MenuButtonStyles}\n              />\n            </Stack.Item>\n          </Stack>\n        </ThemeProvider>\n        <Stack styles={contentStackStyles}>\n          <Stack.Item grow>{error && errorBar()}</Stack.Item>\n          <Stack.Item grow>\n            <ClusterList\n              csrfToken={csrfRef}\n              sshBox={sshRef}\n              setCurrentCluster={setCurrentCluster}\n              csrfTokenAvailable={fetching}\n            />\n          </Stack.Item>\n          <Stack.Item grow>\n            <ClusterDetailPanel\n              csrfToken={csrfRef}\n              csrfTokenAvailable={fetching}\n              currentCluster={currentCluster}\n              onClose={_onCloseDetailPanel}\n            />\n          </Stack.Item>\n        </Stack>\n        <SSHModal csrfToken={csrfRef} ref={sshRef} />\n      </Stack>\n    </>\n  )\n}\n\nexport default App\n","import ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { mergeStyles } from \"@fluentui/react\"\n\nimport { initializeIcons } from \"@fluentui/font-icons-mdl2\"\ninitializeIcons()\n\n// Inject some global styles\nmergeStyles({\n  \":global(body,html,#root)\": {\n    margin: 0,\n    padding: 0,\n    height: \"100vh\",\n  },\n})\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}