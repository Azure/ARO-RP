{"version":3,"sources":["SSHModal.tsx","Request.tsx","ClusterDetailListComponents/Overview.tsx","ClusterDetailListComponents/OverviewWrapper.tsx","ClusterDetailListComponents/InfoList.tsx","ClusterDetailListComponents/Nodes.tsx","ClusterDetailListComponents/NodesWrapper.tsx","ClusterDetailListComponents/Machines.tsx","ClusterDetailListComponents/MachinesWrapper.tsx","ClusterDetailListComponents/MachineSets.tsx","ClusterDetailListComponents/MachineSetsWrapper.tsx","ClusterDetailList.tsx","ClusterDetail.tsx","Kubeconfig.tsx","ClusterList.tsx","App.tsx","index.tsx"],"names":["cancelIcon","iconName","copyIcon","machineOptions","key","text","theme","getTheme","contentStyles","mergeStyleSets","container","display","flexFlow","alignItems","header","flex","borderTop","palette","themePrimary","color","neutralPrimary","fontSize","FontSizes","xLargePlus","fontWeight","FontWeights","semibold","padding","body","overflowY","selectors","margin","marginTop","marginBottom","iconButtonStyles","root","marginLeft","marginRight","rootHovered","neutralDark","SSHModal","forwardRef","ref","csrfToken","useBoolean","isModalOpen","showModal","setTrue","hideModal","setFalse","titleId","useId","update","requestSSH","sshRequested","useState","resourceID","setResourceID","machineName","setMachineName","requestable","setRequestable","setUnrequestable","data","setData","error","setError","useImperativeHandle","LoadSSH","item","useEffect","a","axios","method","url","master","headers","current","result","response","fetchData","onChange","event","option","Modal","titleAriaId","isOpen","onDismiss","isModeless","containerClassName","className","id","IconButton","styles","iconProps","ariaLabel","onClick","href","MessageBar","messageBarType","MessageBarType","isMultiline","dismissButtonAriaLabel","statusText","Stack","horizontal","verticalAlign","Item","grow","TextField","label","value","command","readOnly","navigator","clipboard","writeText","password","type","canRevealPassword","tokens","childrenGap","Dropdown","options","PrimaryButton","disabled","displayName","OnError","err","status","document","location","FetchClusters","FetchClusterInfo","cluster","subscription","resourceGroup","name","FetchInfo","FetchNodes","FetchMachines","FetchMachineSets","ProcessLogOut","console","log","RequestKubeconfig","ShimmerStyle","headShimmerStyle","headerShimmer","ShimmerElementType","line","height","width","rowShimmer","KeyColumnStyle","paddingTop","paddingRight","ValueColumnStyle","KeyStyle","fontStyle","alignSelf","fontVariantAlternates","paddingBottom","ValueStyle","clusterDetailHeadings","apiServerVisibility","apiServerURL","architectureVersion","consoleLink","createdAt","createdBy","failedProvisioningState","infraId","lastAdminUpdateError","lastModifiedAt","lastModifiedBy","lastProvisioningState","provisioningState","resourceId","version","installStatus","ClusterDetailCell","style","Text","variant","OverviewComponent","props","headerEntries","Object","entries","filteredHeaders","this","length","filter","element","toString","push","contentStackStylesNormal","clusterName","map","index","Array","fill","Shimmer","shimmerElements","Component","errorBarStyles","OverviewWrapper","state","useRef","fetching","setFetching","detailPanelSelected","toLowerCase","overviewKey","loaded","currentCluster","then","newData","setState","Column","InfoList","object","titleSize","title","MultiInfoList","items","subProp","stackItemStyles","NodeOverviewDetails","createdTime","ResourceDetails","CPU","Memory","StorageVolume","Pods","ConditionDetails","lastHeartbeatTime","lastTransitionTime","message","TaintDetails","VolumeDetails","Path","HeadersFromStringMap","newItems","forEach","ObjectFromStringMap","PivotOverflowMenuExample","Pivot","linkFormat","overflowBehavior","nodes","node","PivotItem","headerText","StackItem","capacity","allocatable","labels","conditions","taints","annotations","volumes","NodesComponent","NodesWrapper","nodesKey","nodeList","taint","condition","Map","set","volume","annotation","updateData","MachineDetails","lastUpdated","errorReason","errorMessage","lastOperation","lastOperationDate","MachinesComponent","machines","machine","MachinesWrapper","machinesKey","machineList","MachineSetDetails","desiredReplicas","replicas","MachineSetsComponent","machineSets","machineSet","MachineSetsWrapper","machineSetsKey","machineSetList","createdat","desiredreplicas","errorreason","errormessage","ClusterDetailComponent","detailPanelVisible","isDataLoaded","navStyles","link","whiteSpace","lineHeight","groupContent","customPanelStyle","top","left","content","paddingLeft","navigation","justifyContent","headerStyle","flexGrow","headerIconStyles","svg","ClusterDetailPanel","openPanel","dismissPanel","dataLoaded","setDataLoaded","setdetailPanelVisible","navLinkGroups","links","icon","Panel","PanelType","custom","onClose","isBlocking","closeButtonAriaLabel","onRenderHeader","Icon","headerStyles","titleText","subtitleText","Nav","onLinkClick","ev","groups","Separator","vertical","KubeconfigButton","buttonRef","blob","Blob","request","fileDownloadUrl","URL","createObjectURL","filename","parseContentDisposition","parameters","useLayoutEffect","download","click","revokeObjectURL","TooltipHost","classNames","controlWrapper","flexWrap","fullWidth","fileIconImg","maxHeight","maxWidth","headerIcon","iconContainer","controlButtonContainer","itemsCount","controlStyles","separatorStyle","clusterListDetailStyles","headerWrapper","ClusterListComponent","_sshModal","_onChangeText","i","indexOf","_onColumnClick","column","columns","newColumns","slice","currColumn","currCol","newCol","isSortedDescending","isSorted","sshModalRef","fieldName","minWidth","isRowHeader","isPadded","onRender","src","alt","isResizable","sortAscendingAriaLabel","sortDescendingAriaLabel","onColumnClick","Link","_onClusterInfoLinkClick","_onCopyResourceID","_onSSHClick","modalOpen","placeholder","DetailsList","selectionMode","SelectionMode","none","getKey","_getKey","setKey","layoutMode","DetailsListLayoutMode","fixedColumns","isHeaderVisible","onItemInvoked","_onItemInvoked","modal","setCurrentCluster","alert","ClusterList","_items","CommandBar","sshBox","containerStackTokens","appStackTokens","stackStyles","headerTextStyles","stackNavStyles","MenuButtonStyles","DefaultPalette","white","darkTheme","semanticColors","bodyBackground","bodyText","navPanelStyles","registerIcons","icons","xmlns","viewBox","d","App","csrf","elevated","username","contentStackStyles","setContentStackStyles","sshRef","csrfRef","onRenderNavigationContent","useCallback","horizontalAlign","isLightDismiss","smallFixedNear","ThemeProvider","hidden","initializeIcons","mergeStyles","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.252489cf.chunk.js","sourcesContent":["import { useId, useBoolean } from \"@fluentui/react-hooks\"\nimport {\n  Modal,\n  getTheme,\n  mergeStyleSets,\n  FontWeights,\n  IIconProps,\n  Dropdown,\n  IDropdownOption,\n  TextField,\n  MessageBar,\n  MessageBarType,\n  Stack,\n  FontSizes,\n} from \"@fluentui/react\"\nimport { PrimaryButton, IconButton } from \"@fluentui/react/lib/Button\"\nimport axios, { AxiosResponse } from \"axios\"\nimport React, {\n  useState,\n  useImperativeHandle,\n  useEffect,\n  forwardRef,\n  MutableRefObject,\n} from \"react\"\n\nconst cancelIcon: IIconProps = { iconName: \"Cancel\" }\nconst copyIcon: IIconProps = { iconName: \"Copy\" }\n\nconst machineOptions = [\n  { key: 0, text: \"master-0\" },\n  { key: 1, text: \"master-1\" },\n  { key: 2, text: \"master-2\" },\n]\n\ntype SSHModalProps = {\n  csrfToken: MutableRefObject<string>\n}\n\nconst theme = getTheme()\nconst contentStyles = mergeStyleSets({\n  container: {\n    display: \"flex\",\n    flexFlow: \"column nowrap\",\n    alignItems: \"stretch\",\n  },\n  header: [\n    {\n      flex: \"1 1 auto\",\n      borderTop: `4px solid ${theme.palette.themePrimary}`,\n      color: theme.palette.neutralPrimary,\n      display: \"flex\",\n      alignItems: \"center\",\n      fontSize: FontSizes.xLargePlus,\n      fontWeight: FontWeights.semibold,\n      padding: \"12px 12px 14px 24px\",\n    },\n  ],\n  body: {\n    flex: \"4 4 auto\",\n    padding: \"0 24px 24px 24px\",\n    overflowY: \"hidden\",\n    selectors: {\n      \"p\": { margin: \"14px 0\" },\n      \"p:first-child\": { marginTop: 0 },\n      \"p:last-child\": { marginBottom: 0 },\n    },\n  },\n})\n\nconst iconButtonStyles = {\n  root: {\n    color: theme.palette.neutralPrimary,\n    marginLeft: \"auto\",\n    marginTop: \"4px\",\n    marginRight: \"2px\",\n  },\n  rootHovered: {\n    color: theme.palette.neutralDark,\n  },\n}\n\nconst sshDocs: string =\n  \"https://msazure.visualstudio.com/AzureRedHatOpenShift/_wiki/wikis/ARO.wiki/136823/ARO-SRE-portal?anchor=ssh-(elevated)\"\n\nexport const SSHModal = forwardRef<any, SSHModalProps>(({ csrfToken }, ref) => {\n  const [isModalOpen, { setTrue: showModal, setFalse: hideModal }] = useBoolean(false)\n\n  const titleId = useId(\"title\")\n  const [update, { setTrue: requestSSH, setFalse: sshRequested }] = useBoolean(false)\n  const [resourceID, setResourceID] = useState(\"\")\n  const [machineName, setMachineName] = useState<IDropdownOption>()\n  const [requestable, { setTrue: setRequestable, setFalse: setUnrequestable }] = useBoolean(false)\n  const [data, setData] = useState<{ command: string; password: string } | null>()\n  const [error, setError] = useState<AxiosResponse | null>(null)\n\n  useImperativeHandle(ref, () => ({\n    LoadSSH: (item: string) => {\n      setUnrequestable()\n      setData(null)\n      setError(null)\n      showModal()\n      setResourceID(item)\n    },\n  }))\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setError(null)\n        const result = await axios({\n          method: \"post\",\n          url: resourceID + \"/ssh/new\",\n          data: {\n            master: machineName?.key,\n          },\n          headers: { \"X-CSRF-Token\": csrfToken.current },\n        })\n        setData(result.data)\n        setRequestable()\n      } catch (error: any) {\n        setRequestable()\n        setError(error.response)\n      }\n    }\n    if (update && machineName) {\n      sshRequested()\n      fetchData()\n    }\n    return\n  }, [resourceID, machineName, csrfToken, update, sshRequested, setRequestable])\n\n  const onChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    option?: IDropdownOption<any>\n  ): void => {\n    setMachineName(option)\n    setRequestable()\n  }\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\">\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  const selectionField = (): any => {\n    return (\n      <Stack tokens={{ childrenGap: 15 }}>\n        <Dropdown label={`Machine Selection`} onChange={onChange} options={machineOptions} />\n        <PrimaryButton onClick={requestSSH} text=\"Request\" disabled={!requestable} />\n      </Stack>\n    )\n  }\n\n  const dataResult = (): any => {\n    return (\n      <div>\n        <Stack>\n          <Stack horizontal verticalAlign={\"end\"}>\n            <Stack.Item grow>\n              <TextField label=\"Command\" value={data?.command} readOnly />\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={copyIcon}\n                ariaLabel=\"Copy command\"\n                onClick={() => {\n                  if (data) {\n                    navigator.clipboard.writeText(data.command)\n                  }\n                }}\n              />\n            </Stack.Item>\n          </Stack>\n          <Stack horizontal verticalAlign={\"end\"}>\n            <Stack.Item grow>\n              <TextField\n                label=\"Password\"\n                value={data?.password}\n                type=\"password\"\n                canRevealPassword\n                readOnly\n              />{\" \"}\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={copyIcon}\n                ariaLabel=\"Copy password\"\n                onClick={() => {\n                  if (data) {\n                    navigator.clipboard.writeText(data.password)\n                  }\n                }}\n              />\n            </Stack.Item>\n          </Stack>\n        </Stack>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Modal\n        titleAriaId={titleId}\n        isOpen={isModalOpen}\n        onDismiss={hideModal}\n        isModeless={true}\n        containerClassName={contentStyles.container}>\n        <div className={contentStyles.header}>\n          <span id={titleId}>SSH Access</span>\n          <IconButton\n            styles={iconButtonStyles}\n            iconProps={cancelIcon}\n            ariaLabel=\"Close popup modal\"\n            onClick={hideModal}\n          />\n        </div>\n\n        <div className={contentStyles.body}>\n          <p>\n            Before requesting SSH access, please ensure you have read the{\" \"}\n            <a href={sshDocs}>SSH docs</a>.\n          </p>\n          {error && errorBar()}\n          {data ? dataResult() : selectionField()}\n        </div>\n      </Modal>\n    </div>\n  )\n})\n\nSSHModal.displayName = \"sshmodal\"\n","import axios, { AxiosResponse } from \"axios\"\nimport { ICluster } from \"./App\"\n\nconst OnError = (err: AxiosResponse): AxiosResponse | null => {\n  if (err.status === 403) {\n    document.location.href = \"/api/login\"\n    return null\n  } else {\n    return err\n  }\n}\n\nexport const FetchClusters = async (): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\"/api/clusters\")\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchClusterInfo = async (cluster: ICluster): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\n      \"/api/\" + cluster.subscription + \"/\" + cluster.resourceGroup + \"/\" + cluster.name\n    )\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchInfo = async (): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\"/api/info\")\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchNodes = async (cluster: ICluster): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\n      \"/api/\" + cluster.subscription + \"/\" + cluster.resourceGroup + \"/\" + cluster.name + \"/nodes\")\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchMachines = async (cluster: ICluster): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\n      \"/api/\" + cluster.subscription + \"/\" + cluster.resourceGroup + \"/\" + cluster.name + \"/machines\")\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchMachineSets = async (cluster: ICluster): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\n      \"/api/\" + cluster.subscription + \"/\" + cluster.resourceGroup + \"/\" + cluster.name + \"/machine-sets\")\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const ProcessLogOut = async (): Promise<any> => {\n  try {\n    const result = await axios({method: \"POST\", url: \"/api/logout\"})\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    console.log(err)\n  }\n  document.location.href = \"/api/login\"\n}\n\nexport const RequestKubeconfig = async (\n  csrfToken: string,\n  resourceID: string\n): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios({\n      method: \"POST\",\n      url: resourceID + \"/kubeconfig/new\",\n      headers: {\n        \"X-CSRF-Token\": csrfToken,\n      },\n    })\n    return result\n  } catch (e: any) {\n    const err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n","import { IShimmerStyles, Shimmer, ShimmerElementType } from '@fluentui/react/lib/Shimmer';\nimport { Component } from \"react\"\nimport { Stack, Text, IStackStyles, IStackItemStyles } from '@fluentui/react';\nimport { contentStackStylesNormal } from \"../App\"\nimport { IClusterDetails } from \"../ClusterDetailList\"\n\ninterface OverviewComponentProps {\n    item: any\n    clusterName: string\n}\n\ninterface IOverviewComponentState {\n    item: IClusterDetails\n}\n\nexport const ShimmerStyle: Partial<IShimmerStyles> = {\n    root: {\n        margin: \"11px 0\"\n    }\n}\n\nexport const headShimmerStyle: Partial<IShimmerStyles> = {\n    root: {\n        margin: \"15px 0\"\n    }\n}\n\nexport const headerShimmer = [\n    { type: ShimmerElementType.line, height: 32, width: '25%' },\n]\n\nexport const rowShimmer = [\n    { type: ShimmerElementType.line, height: 18, width: '75%' },\n]\n\nexport const KeyColumnStyle: Partial<IStackStyles> = {\n    root: {\n        paddingTop: 10,\n        paddingRight: 15,\n    }\n}\n\nexport const ValueColumnStyle: Partial<IStackStyles> = {\n    root: {\n        paddingTop: 10,\n    }\n}\n\nexport const KeyStyle: IStackItemStyles = {\n    root: {\n        fontStyle: \"bold\",\n        alignSelf: \"flex-start\",\n        fontVariantAlternates: \"bold\",\n        color: \"grey\",\n        paddingBottom: 10\n    }\n}\n\nexport const ValueStyle: IStackItemStyles = {\n    root: {\n        paddingBottom: 10\n    }\n}\n\nconst clusterDetailHeadings : IClusterDetails = {\n    apiServerVisibility: 'ApiServer Visibility',\n    apiServerURL: 'ApiServer URL',\n    architectureVersion: 'Architecture Version',\n    consoleLink: 'Console Link',\n    createdAt: 'Created At',\n    createdBy: 'Created By',\n    failedProvisioningState: 'Failed Provisioning State',\n    infraId: 'Infra Id',\n    lastAdminUpdateError: 'Last Admin Update Error',\n    lastModifiedAt: 'Last Modified At',\n    lastModifiedBy: 'Last Modified By',\n    lastProvisioningState: 'Last Provisioning State',\n    location: 'Location',\n    name: 'Name',\n    provisioningState: 'Provisioning State',\n    resourceId: 'Resource Id',\n    version: 'Version',\n    installStatus: 'Installation Status'\n}\n\nfunction ClusterDetailCell(\n    value: any,\n    ): any {\n        if (typeof (value.value) == typeof (\" \")) {\n            return <Stack.Item styles={value.style}>\n            <Text styles={value.style} variant={'medium'}>{value.value}</Text>\n            </Stack.Item>\n        }\n    }\n    \nexport class OverviewComponent extends Component<OverviewComponentProps, IOverviewComponentState> {\n    \n    constructor(props: OverviewComponentProps | Readonly<OverviewComponentProps>) {\n        super(props);\n    }\n    \n    public render() {\n        const headerEntries = Object.entries(clusterDetailHeadings)\n        const filteredHeaders: Array<[string, any]> = []\n        if (this.props.item.length != 0) {\n            headerEntries.filter((element: [string, any]) => {\n                if (this.props.item[element[0]] != null &&\n                    this.props.item[element[0]].toString().length > 0) {\n                        filteredHeaders.push(element)\n                    }\n            })\n            return (\n                <Stack styles={contentStackStylesNormal}>\n                    <Text variant=\"xxLarge\">{this.props.clusterName}</Text>\n                    <Stack horizontal>\n                        <Stack styles={KeyColumnStyle}>\n                        {filteredHeaders.map((value: [string, any], index: number) => (\n                            <ClusterDetailCell style={KeyStyle} key={index} value={value[1]} />\n                            )\n                        )}\n                        </Stack>\n                        \n                        <Stack styles={KeyColumnStyle}>\n                        {Array(filteredHeaders.length).fill(':').map((value: [string], index: number) => (\n                            <ClusterDetailCell style={KeyStyle} key={index} value={value} />\n                            )\n                        )}\n                        </Stack>\n                        \n                        <Stack styles={ValueColumnStyle}>\n                        {filteredHeaders.map((value: [string, any], index: number) => (\n                            <ClusterDetailCell style={ValueStyle}\n                            key={index}\n                            value={this.props.item[value[0]]} />\n                            )\n                        )}\n                        </Stack>\n                    </Stack>\n                </Stack>\n            );\n        } else {\n            return (\n                <Stack>\n                <Shimmer styles={headShimmerStyle} shimmerElements={headerShimmer} width=\"25%\"></Shimmer>\n                {headerEntries.map(header => (\n                    <Shimmer key={header[0]} styles={ShimmerStyle} shimmerElements={rowShimmer} width=\"75%\"></Shimmer>\n                    )\n                )}\n                </Stack>\n                )\n            }\n        }\n    }\n                                ","import { useState, useEffect, useRef } from \"react\"\nimport { AxiosResponse } from 'axios';\nimport { FetchClusterInfo } from '../Request';\nimport { ICluster } from \"../App\"\nimport { ClusterDetailComponent } from '../ClusterDetailList'\nimport { OverviewComponent } from './Overview';\nimport { IMessageBarStyles, MessageBar, MessageBarType, Stack } from '@fluentui/react';\nimport { overviewKey } from \"../ClusterDetail\";\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nexport function OverviewWrapper(props: {\n  clusterName: string\n  currentCluster: ICluster\n  detailPanelSelected: string\n  loaded: boolean\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<ClusterDetailComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // updateData - updates the state of the component\n  // can be used if we want a refresh button.\n  // api/clusterdetail returns a single item.\n  const updateData = (newData: any) => {\n    setData(newData)\n    if (state && state.current) {\n      state.current.setState({ item: newData, detailPanelSelected: props.detailPanelSelected })\n    }\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n      } else {\n        setError(result)\n      }\n      setFetching(props.currentCluster.name)\n    }\n\n    if (props.detailPanelSelected.toLowerCase() == overviewKey && \n        fetching === \"\" &&\n        props.loaded &&\n        props.currentCluster.name != \"\") {\n      setFetching(\"FETCHING\")\n      FetchClusterInfo(props.currentCluster).then(onData) // TODO: fetchClusterInfo accepts IClusterDetail\n    }\n  }, [data, props.loaded, props.clusterName])\n\n  return (\n    <Stack>\n      <Stack.Item grow>{error && errorBar()}</Stack.Item>\n      <Stack>\n        <OverviewComponent item={data} clusterName={props.currentCluster != null ? props.currentCluster.name : \"\"}/>\n      </Stack>\n    </Stack>   \n  )\n}\n","import { IShimmerStyles, IStackItemStyles, IStackStyles, ShimmerElementType, Stack, Text } from \"@fluentui/react\"\nimport { contentStackStylesNormal } from \"../App\"\n\nexport const ShimmerStyle: Partial<IShimmerStyles> = {\n    root: {\n        margin: \"11px 0\"\n    }\n}\n\nexport const headShimmerStyle: Partial<IShimmerStyles> = {\n    root: {\n        margin: \"15px 0\"\n    }\n}\n\nexport const headerShimmer = [\n    { type: ShimmerElementType.line, height: 32, width: '25%' },\n]\n\nexport const rowShimmer = [\n    { type: ShimmerElementType.line, height: 18, width: '75%' },\n]\n\nexport const KeyColumnStyle: Partial<IStackStyles> = {\n    root: {\n        paddingTop: 10,\n        paddingRight: 15,\n    }\n}\n\nexport const ValueColumnStyle: Partial<IStackStyles> = {\n    root: {\n        paddingTop: 10,\n    }\n}\n\nexport const KeyStyle: IStackItemStyles = {\n    root: {\n        fontStyle: \"bold\",\n        alignSelf: \"flex-start\",\n        fontVariantAlternates: \"bold\",\n        color: \"grey\",\n        paddingBottom: 10\n    }\n}\n\nexport const ValueStyle: IStackItemStyles = {\n    root: {\n        paddingBottom: 10\n    }\n}\n\nfunction Column(\n    value: any,\n    ): any {\n        if (typeof (value.value) == typeof (\" \")) {\n            return <Stack.Item styles={value.style}>\n                      <Text styles={value.style} variant={'medium'}>{value.value}</Text>\n                   </Stack.Item>\n        }\n    }\n\n\nexport const InfoList = (\n    props: {headers: any, object: any, title: string, titleSize: any}\n) => {\n    const headerEntries = Object.entries(props.headers)\n    const filteredHeaders: Array<[string, any]> = []\n    headerEntries.filter((element: [string, any]) => {\n        if (props.object[element[0]] != null &&\n            props.object[element[0]].toString().length > 0) {\n                filteredHeaders.push(element)\n            }\n    })\n    return (\n        <Stack styles={contentStackStylesNormal}>\n            <Text variant={props.titleSize}>{props.title}</Text>\n            <Stack horizontal>\n                <Stack styles={KeyColumnStyle}>\n                {filteredHeaders.map((value: [string, any], index: number) => (\n                    <Column style={KeyStyle} key={index} value={value[1]} />\n                    )\n                )}\n                </Stack>\n                \n                <Stack styles={KeyColumnStyle}>\n                {Array(filteredHeaders.length).fill(':').map((value: [string], index: number) => (\n                    <Column style={KeyStyle} key={index} value={value} />\n                    )\n                )}\n                </Stack>\n                \n                <Stack styles={ValueColumnStyle}>\n                {filteredHeaders.map((value: [string, any], index: number) => (\n                    <Column style={ValueStyle}\n                    key={index}\n                    value={props.object[value[0]]} />\n                    )\n                )}\n                </Stack>\n            </Stack>\n        </Stack>\n    );\n}\n\nexport const MultiInfoList = (\n    props: any\n) => {\n    return props.items.map((item: { [key: string]: any; }) => {\n        return <InfoList key={item.key} headers={props.headers} object={item} title={item[props.subProp]} titleSize={item[props.titleSize]}/>\n    })\n}","import { Component } from \"react\"\nimport { Stack, Text, StackItem, Pivot, PivotItem, IStackItemStyles, } from '@fluentui/react';\nimport { ICondition, INode, INodeOverviewDetails, IResourceUsage, ITaint, IVolume} from \"./NodesWrapper\";\nimport { contentStackStylesNormal } from \"../App\";\nimport { InfoList, MultiInfoList } from \"./InfoList\"\n\ninterface NodesComponentProps {\n    nodes: any\n    clusterName: string\n}\n\nconst stackItemStyles: IStackItemStyles = {\n    root: {\n      width: \"45%\",\n    },\n  };\n\nconst NodeOverviewDetails: INodeOverviewDetails = {\n    createdTime: 'Created Time'\n  }\n  \n  const ResourceDetails: IResourceUsage = {\n    CPU: \"CPU\",\n    Memory: \"Memory\",\n    StorageVolume: \"Storage Volume\",\n    Pods: \"Pods\"\n  }\n  \n  const ConditionDetails: ICondition = {\n    status: \"Status\",\n    lastHeartbeatTime: \"Last Heartbeat Time\",\n    lastTransitionTime: \"Last Transition Time\",\n    message: \"Message\"\n  }\n\n  const TaintDetails: ITaint = {\n      key: \"Key\"\n  }\n\nconst VolumeDetails: IVolume = {\n    Path: \"Device Path\"\n}\n\ninterface INodesState {\nnodes: INode[]\n}\n\nconst HeadersFromStringMap = (items: Map<string,string>) => {\n    const newItems: any = {}\n    items.forEach((value: string, key: string) => {\n        newItems[key] = key\n    })\n\n    return newItems\n}\n\nconst ObjectFromStringMap = (items: Map<string,string>) => {\n    const newItems: any = {}\n    items.forEach((value: string, key: string) => {\n        newItems[key] = value\n    })\n\n    return newItems\n}\n\n// TODO: Get Styling to look pretty\nconst renderNodes = (nodes: INode[]) => {\n    return nodes.map(node => {\n        return <PivotItem key={node.name} headerText={node.name}>\n                <Text variant=\"xLarge\">{node.name}</Text>\n                <Stack horizontal grow>\n                    <Stack styles={stackItemStyles}>\n                        <StackItem>\n                            <InfoList headers={NodeOverviewDetails} object={node} title=\"Overview\" titleSize=\"large\"/>\n                        </StackItem>\n                        <StackItem>\n                            <InfoList headers={ResourceDetails} object={node.capacity} title=\"Capacity\" titleSize=\"large\"/>\n                        </StackItem>\n                        <StackItem>\n                            <InfoList headers={ResourceDetails} object={node.allocatable} title=\"Allocatable\" titleSize=\"large\"/>\n                        </StackItem>\n                        <StackItem>\n                            <InfoList headers={HeadersFromStringMap(node.labels!)} object={ObjectFromStringMap(node.labels!)} title=\"Labels\" titleSize=\"large\"/>\n                        </StackItem>\n                    </Stack>\n                    <Stack styles={stackItemStyles}>\n                        <StackItem>\n                            <Text variant=\"large\" styles={contentStackStylesNormal}>Conditions</Text>\n                            <MultiInfoList headers={ConditionDetails} items={node.conditions} title=\"Conditions\" subProp=\"type\" titleSize=\"medium\"/>\n                        </StackItem>\n                        <StackItem>\n                            <Text variant=\"large\" styles={contentStackStylesNormal}>Taints</Text>\n                            <MultiInfoList headers={TaintDetails} items={node.taints} title=\"Taints\" subProp=\"effect\" titleSize=\"medium\"/>\n                        </StackItem>\n                        <StackItem>\n                            <InfoList headers={HeadersFromStringMap(node.annotations!)} object={ObjectFromStringMap(node.annotations!)} title=\"Annotations\" titleSize=\"large\"/>\n                        </StackItem>\n                    </Stack>\n                    {node.volumes!.length > 0 &&\n                        <StackItem>\n                            <Text variant=\"large\">Volumes</Text>\n                            <MultiInfoList headers={VolumeDetails} items={node.volumes} title=\"Volumes\" subProp=\"Name\" titleSize=\"medium\"/>\n                        </StackItem>\n                    }\n                </Stack>\n            </PivotItem>;\n    });\n};\n\nfunction PivotOverflowMenuExample(value: any) {\n    return (\n            <Pivot linkFormat={'tabs'} overflowBehavior={'menu'}>\n                {renderNodes(value.nodes)}\n            </Pivot>\n    );\n}\nexport class NodesComponent extends Component<NodesComponentProps, INodesState> {\n\n    constructor(props: NodesComponentProps) {\n        super(props)\n\n        this.state = {\n            nodes: this.props.nodes,\n        }\n    }\n\n    public render() {\n        return (\n        <Stack styles={contentStackStylesNormal}>\n            <Text variant=\"xxLarge\">{this.props.clusterName}</Text>\n            <Stack>\n                <PivotOverflowMenuExample nodes={this.state.nodes}/>\n            </Stack>\n        </Stack>\n        )\n    }\n}\n","import { useState, useEffect, useRef } from \"react\"\nimport { AxiosResponse } from 'axios';\nimport { FetchNodes } from '../Request';\nimport { ICluster } from \"../App\"\nimport { NodesComponent } from './Nodes';\nimport { IMessageBarStyles, MessageBar, MessageBarType, Stack } from '@fluentui/react';\nimport { nodesKey } from \"../ClusterDetail\";\n\nexport interface ICondition {\n  status: string,\n  lastHeartbeatTime: string,\n  lastTransitionTime: string,\n  message: string\n}\n\nexport interface ITaint {\n  key: string,\n}\n\nexport interface IVolume {\n  Path: string,\n}\n\nexport interface IResourceUsage {\n  CPU: string\n  Memory: string\n  StorageVolume: string\n  Pods: string\n}\n\nexport interface INode {\n  name: string,\n  createdTime: string,\n  capacity: IResourceUsage,\n  allocatable: IResourceUsage\n  conditions?: ICondition[],\n  taints?: ITaint[]\n  labels?: Map<string, string>\n  annotations?: Map<string, string>\n  volumes?: IVolume[]\n}\n\nexport interface INodeOverviewDetails {\n  createdTime: string\n}\n\nexport function NodesWrapper(props: {\n  currentCluster: ICluster\n  detailPanelSelected: string\n  loaded: boolean\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<NodesComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n\n  const errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // updateData - updates the state of the component\n  // can be used if we want a refresh button.\n  // api/clusterdetail returns a single item.\n  const updateData = (newData: any) => {\n    setData(newData)\n    const nodeList: INode[] = []\n    if (state && state.current) {\n      newData.nodes.forEach((element: { name: any;\n                                        createdTime: any;\n                                        capacity: any;\n                                        allocatable: any;\n                                        taints: ITaint[],\n                                        conditions: ICondition[],\n                                        labels: Record<string, string>,\n                                        annotations: Record<string, string>,\n                                        volumes: IVolume[]}) => {\n        const node: INode = {\n          name: element.name,\n          createdTime: element.createdTime,\n          capacity: element.capacity,\n          allocatable: element.allocatable,\n        }\n        node.taints = []\n        element.taints.forEach((taint: ITaint) => {\n          node.taints!.push(taint)\n        });\n        node.conditions = []\n        element.conditions.forEach((condition: ICondition) => {\n          node.conditions!.push(condition)\n        });\n        node.labels = new Map([])\n        Object.entries(element.labels).forEach((label: [string, string]) => {\n            node.labels?.set(label[0], label[1])\n          });\n        node.volumes = []\n        element.volumes.forEach((volume: IVolume) => {\n          node.volumes!.push(volume)\n        });\n        node.annotations = new Map([])\n        Object.entries(element.annotations).forEach((annotation: [string, string]) => {\n          node.annotations?.set(annotation[0], annotation[1])\n        });\n        nodeList.push(node)\n      });\n      state.current.setState({ nodes: nodeList })\n    }\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n      } else {\n        setError(result)\n      }\n      setFetching(props.currentCluster.name)\n    }\n\n    if (props.detailPanelSelected.toLowerCase() == nodesKey && \n        fetching === \"\" &&\n        props.loaded &&\n        props.currentCluster.name != \"\") {\n      setFetching(\"FETCHING\")\n      FetchNodes(props.currentCluster).then(onData) // TODO: fetchClusterInfo accepts IClusterDetail\n    }\n  }, [data, props.loaded, props.detailPanelSelected])\n\n  return (\n    <Stack>\n      <Stack.Item grow>{error && errorBar()}</Stack.Item>\n      <Stack>\n        <NodesComponent nodes={data!} ref={state} clusterName={props.currentCluster != null ? props.currentCluster.name : \"\"}/>\n      </Stack>\n    </Stack>   \n  )\n}\n","import { Component } from \"react\"\nimport { Stack, Text, StackItem, Pivot, PivotItem, IStackItemStyles, } from '@fluentui/react';\nimport { contentStackStylesNormal } from \"../App\";\nimport { InfoList } from \"./InfoList\"\nimport { IMachine } from \"./MachinesWrapper\";\n\ninterface MachinesComponentProps {\n    machines: any\n    clusterName: string\n}\n\nconst stackItemStyles: IStackItemStyles = {\n    root: {\n      width: \"45%\",\n    },\n  };\n\nconst MachineDetails: IMachine = {\n    createdTime: 'Created Time',\n    lastUpdated: \"Last Updated\",\n    errorReason: \"Error Reason\",\n    errorMessage: \"Error Message\",\n    lastOperation: \"Last Operation\",\n    lastOperationDate: \"Last Operation Date\",\n    status: \"Status\"\n}\n\ninterface IMachinesState {\nmachines: IMachine[]\n}\n\n// TODO: Get Styling to look pretty\nconst renderMachines = (machines: IMachine[]) => {\n    return machines.map(machine => {\n        return <PivotItem key={machine.name} headerText={machine.name}>\n                    <Stack styles={stackItemStyles}>\n                        <StackItem>\n                            <InfoList headers={MachineDetails} object={machine} title={machine.name!} titleSize=\"large\"/>\n                        </StackItem>\n                    </Stack>\n            </PivotItem>;\n    });\n};\n\nexport class MachinesComponent extends Component<MachinesComponentProps, IMachinesState> {\n\n    constructor(props: MachinesComponentProps) {\n        super(props)\n\n        this.state = {\n            machines: this.props.machines,\n        }\n    }\n\n    public render() {\n        return (\n        <Stack styles={contentStackStylesNormal}>\n            <Text variant=\"xxLarge\">{this.props.clusterName}</Text>\n            <Stack>\n                <Pivot linkFormat={'tabs'} overflowBehavior={'menu'}>\n                    {renderMachines(this.state.machines)}\n                </Pivot>\n            </Stack>\n        </Stack>\n        )\n    }\n}\n","import { useState, useEffect, useRef } from \"react\"\nimport { AxiosResponse } from 'axios';\nimport { FetchMachines } from '../Request';\nimport { ICluster } from \"../App\"\nimport { MachinesComponent } from './Machines';\nimport { IMessageBarStyles, MessageBar, MessageBarType, Stack } from '@fluentui/react';\nimport { machinesKey } from \"../ClusterDetail\";\n\nexport interface IMachine {\n  name?: string,\n  createdTime: string,\n  lastUpdated: string,\n  errorReason: string,\n  errorMessage: string,\n  lastOperation: string,\n  lastOperationDate: string,\n  status: string\n}\n\nexport function MachinesWrapper(props: {\n  currentCluster: ICluster\n  detailPanelSelected: string\n  loaded: boolean\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<MachinesComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n\n  const errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // updateData - updates the state of the component\n  // can be used if we want a refresh button.\n  // api/clusterdetail returns a single item.\n  const updateData = (newData: any) => {\n    setData(newData)\n    const machineList: IMachine[] = []\n    if (state && state.current) {\n      newData.machines.forEach((element: { name: string;\n                                           createdTime: string;\n                                           lastUpdated: string;\n                                           errorReason: string;\n                                           errorMessage: string;\n                                           lastOperation: string;\n                                           lastOperationDate: string;\n                                           status: string; }) => {\n        const machine: IMachine = {\n          name: element.name,\n          createdTime: element.createdTime,\n          lastUpdated: element.lastUpdated,\n          errorReason: element.errorReason,\n          errorMessage: element.errorMessage,\n          lastOperation: element.lastOperation,\n          lastOperationDate: element.lastOperationDate,\n          status: element.status,\n        }\n        machineList.push(machine)\n      });\n      state.current.setState({ machines: machineList })\n    }\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n      } else {\n        setError(result)\n      }\n      setFetching(props.currentCluster.name)\n    }\n\n    if (props.detailPanelSelected.toLowerCase() == machinesKey && \n        fetching === \"\" &&\n        props.loaded &&\n        props.currentCluster.name != \"\") {\n      setFetching(\"FETCHING\")\n      FetchMachines(props.currentCluster).then(onData) // TODO: fetchClusterInfo accepts IClusterDetail\n    }\n  }, [data, props.loaded, props.detailPanelSelected])\n\n  return (\n    <Stack>\n      <Stack.Item grow>{error && errorBar()}</Stack.Item>\n      <Stack>\n        <MachinesComponent machines={data!} ref={state} clusterName={props.currentCluster != null ? props.currentCluster.name : \"\"}/>\n      </Stack>\n    </Stack>   \n  )\n}\n","import { Component } from \"react\"\nimport { Stack, Text, StackItem, Pivot, PivotItem, IStackItemStyles, } from '@fluentui/react';\nimport { contentStackStylesNormal } from \"../App\";\nimport { InfoList } from \"./InfoList\"\nimport { IMachineSet } from \"./MachineSetsWrapper\";\n\ninterface MachineSetsComponentProps {\n    machineSets: any\n    clusterName: string\n}\n\nconst stackItemStyles: IStackItemStyles = {\n    root: {\n      width: \"45%\",\n    },\n  };\n\nconst MachineSetDetails: IMachineSet = {\n    name: 'Name',\n    type: \"Type\",\n    createdAt: \"Created Time\",\n    desiredReplicas: \"Desired Replicas Count\",\n    replicas: \"Actual Replicas Count\",\n    errorReason: \"Error Reason\",\n    errorMessage: \"Error Message\",\n    \n}\n\ninterface IMachineSetsState {\nmachineSets: IMachineSet[]\n}\n\n// TODO: Get Styling to look pretty\nconst renderMachineSets = (machineSets: IMachineSet[]) => {\n    return machineSets.map(machineSet => {\n        return <PivotItem key={machineSet.name} headerText={machineSet.name}>\n                    <Stack styles={stackItemStyles}>\n                        <StackItem>\n                            <InfoList headers={MachineSetDetails} object={machineSet} title={machineSet.name!} titleSize=\"large\"/>\n                        </StackItem>\n                    </Stack>\n            </PivotItem>;\n    });\n};\n\nexport class MachineSetsComponent extends Component<MachineSetsComponentProps, IMachineSetsState> {\n\n    constructor(props: MachineSetsComponentProps) {\n        super(props)\n\n        this.state = {\n            machineSets: this.props.machineSets,\n        }\n    }\n\n    public render() {\n        return (\n        <Stack styles={contentStackStylesNormal}>\n            <Text variant=\"xxLarge\">{this.props.clusterName}</Text>\n            <Stack>\n                <Pivot linkFormat={'tabs'} overflowBehavior={'menu'}>\n                    {renderMachineSets(this.state.machineSets)}\n                </Pivot>\n            </Stack>\n        </Stack>\n        )\n    }\n}\n","import { useState, useEffect, useRef } from \"react\"\nimport { AxiosResponse } from 'axios';\nimport { FetchMachineSets } from '../Request';\nimport { ICluster } from \"../App\"\nimport { IMessageBarStyles, MessageBar, MessageBarType, Stack } from '@fluentui/react';\nimport { machineSetsKey } from \"../ClusterDetail\";\nimport { MachineSetsComponent } from \"./MachineSets\";\n\nexport interface IMachineSet {\n  name?: string,\n  type?: string,\n  createdAt?: string,\n  desiredReplicas?: string,\n  replicas?: string,\n  errorReason?: string,\n  errorMessage?: string\n}\n\nexport function MachineSetsWrapper(props: {\n  currentCluster: ICluster\n  detailPanelSelected: string\n  loaded: boolean\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<MachineSetsComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n\n  const errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // updateData - updates the state of the component\n  // can be used if we want a refresh button.\n  // api/clusterdetail returns a single item.\n  const updateData = (newData: any) => {\n    setData(newData)\n    const machineSetList: IMachineSet[] = []\n    if (state && state.current) {\n      newData.machines.forEach((element: { name: string;\n                                           type: string;\n                                           createdat: string;\n                                           desiredreplicas: number;\n                                           replicas: number;\n                                           errorreason: string;\n                                           errormessage: string;}) => {\n        const machineSet: IMachineSet = {\n          name: element.name,\n          type: element.type,\n          createdAt: element.createdat,\n          desiredReplicas: element.desiredreplicas.toString(),\n          replicas: element.replicas.toString(),\n          errorReason: element.errorreason,\n          errorMessage: element.errormessage,\n        }\n        machineSetList.push(machineSet)\n      });\n      state.current.setState({ machineSets: machineSetList })\n    }\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n      } else {\n        setError(result)\n      }\n      setFetching(props.currentCluster.name)\n    }\n\n    if (props.detailPanelSelected.toLowerCase() == machineSetsKey && \n        fetching === \"\" &&\n        props.loaded &&\n        props.currentCluster.name != \"\") {\n      setFetching(\"FETCHING\")\n      FetchMachineSets(props.currentCluster).then(onData)\n    }\n  }, [data, props.loaded, props.detailPanelSelected])\n\n  return (\n    <Stack>\n      <Stack.Item grow>{error && errorBar()}</Stack.Item>\n      <Stack>\n        <MachineSetsComponent machineSets={data!} ref={state} clusterName={props.currentCluster != null ? props.currentCluster.name : \"\"}/>\n      </Stack>\n    </Stack>   \n  )\n}\n","import { Component } from \"react\"\nimport { OverviewWrapper } from './ClusterDetailListComponents/OverviewWrapper';\nimport { NodesWrapper } from './ClusterDetailListComponents/NodesWrapper';\nimport { MachinesWrapper } from \"./ClusterDetailListComponents/MachinesWrapper\";\nimport { MachineSetsWrapper } from \"./ClusterDetailListComponents/MachineSetsWrapper\";\nimport { ICluster } from \"./App\"\n\ninterface ClusterDetailComponentProps {\n  item: any\n  cluster: ICluster | null\n  isDataLoaded: boolean\n  detailPanelVisible: string\n}\n\nexport interface IClusterDetails {\n  apiServerVisibility: string\n  apiServerURL: string\n  architectureVersion: string\n  consoleLink: string\n  createdAt: string\n  createdBy: string\n  failedProvisioningState: string\n  infraId: string\n  lastAdminUpdateError: string\n  lastModifiedAt: string\n  lastModifiedBy: string\n  lastProvisioningState: string\n  location: string\n  name: string\n  resourceId: string\n  provisioningState: string\n  version: string\n  installStatus: string\n}\n\ninterface IClusterDetailComponentState {\n  item: IClusterDetails // why both state and props?\n  detailPanelSelected: string\n}\n\nexport class ClusterDetailComponent extends Component<ClusterDetailComponentProps, IClusterDetailComponentState> {\n\n  constructor(props: ClusterDetailComponentProps | Readonly<ClusterDetailComponentProps>) {\n    super(props);\n  }\n\n  public render() {\n    switch (this.props.detailPanelVisible.toLowerCase()) {\n      case \"overview\":\n      {\n        return (\n          <OverviewWrapper clusterName= {this.props.item.name} currentCluster={this.props.cluster!} detailPanelSelected={this.props.detailPanelVisible} loaded={this.props.isDataLoaded}/>\n        )\n      }\n      case \"nodes\":\n        {\n          return (\n            <NodesWrapper currentCluster={this.props.cluster!} detailPanelSelected={this.props.detailPanelVisible} loaded={this.props.isDataLoaded}/>\n          );\n        }\n        case \"machines\":\n        {\n          return (\n            <MachinesWrapper currentCluster={this.props.cluster!} detailPanelSelected={this.props.detailPanelVisible} loaded={this.props.isDataLoaded}/>\n          );\n        }\n        case \"machinesets\":\n        {\n          return (\n            <MachineSetsWrapper currentCluster={this.props.cluster!} detailPanelSelected={this.props.detailPanelVisible} loaded={this.props.isDataLoaded}/>\n          );\n        }\n      }\n  }\n}\n","import {\n  IPanelStyles,\n  Panel,\n  PanelType,\n} from \"@fluentui/react/lib/Panel\"\nimport { useBoolean } from \"@fluentui/react-hooks\"\nimport { useState, useEffect, useRef, MutableRefObject, ReactElement } from \"react\"\nimport {\n  IMessageBarStyles,\n  MessageBar,\n  MessageBarType,\n  Stack,\n  Separator,\n  IStackStyles,\n  Icon,\n  IIconStyles,\n} from \"@fluentui/react\"\nimport { AxiosResponse } from \"axios\"\nimport { FetchClusterInfo } from \"./Request\"\nimport { ICluster, headerStyles } from \"./App\"\nimport { Nav, INavLink, INavStyles } from \"@fluentui/react/lib/Nav\"\nimport { ClusterDetailComponent } from \"./ClusterDetailList\"\nimport React from \"react\"\n\nconst navStyles: Partial<INavStyles> = {\n  root: {\n    width: 155,\n    paddingRight: \"10px\",\n  },\n  link: {\n    whiteSpace: \"normal\",\n    lineHeight: \"inherit\",\n  },\n  groupContent: {\n    marginBottom: \"0px\",\n  },\n}\n\nconst customPanelStyle: Partial<IPanelStyles> = {\n  root: { top: \"40px\", left: \"225px\" },\n  content: { paddingLeft: 30, paddingRight: 5 },\n  navigation: {\n    justifyContent: \"flex-start\",\n  },\n}\n\nconst headerStyle: Partial<IStackStyles> = {\n  root: {\n    alignSelf: \"flex-start\",\n    flexGrow: 2,\n    height: 48,\n    paddingLeft: 30,\n    marginBottom: 15,\n  },\n}\n\nconst headerIconStyles: Partial<IIconStyles> = {\n  root: {\n    height: \"100%\",\n    width: 40,\n    paddingTop: 4,\n    paddingRight: 10,\n    svg: {\n      fill: \"#e3222f\",\n    },\n  },\n}\n\nexport const overviewKey = \"overview\"\nexport const nodesKey = \"nodes\"\nexport const machinesKey = \"machines\"\nexport const machineSetsKey = \"machinesets\"\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nexport function ClusterDetailPanel(props: {\n  csrfToken: MutableRefObject<string>\n  currentCluster: ICluster | null\n  onClose: any // TODO: function ptr .. any probably bad\n  loaded: string\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<ClusterDetailComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n  const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false) // panel controls\n  const [dataLoaded, setDataLoaded] = useState<boolean>(false)\n  const [detailPanelVisible, setdetailPanelVisible] = useState<string>(\"Overview\")\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}>\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  const navLinkGroups = [\n    {\n      links: [\n        {\n          name: 'Overview',\n          key: overviewKey,\n          url: '#overview',\n          icon: 'ThisPC',\n        },\n        {\n          name: 'Nodes',\n          key: nodesKey,\n          url: '#nodes',\n          icon: 'BuildQueue',\n        },\n        {\n          name: 'Machines',\n          key: machinesKey,\n          url: '#machines',\n          icon: 'BuildQueue',\n        },\n        {\n          name: 'MachineSets',\n          key: machineSetsKey,\n          url: '#machinesets',\n          icon: 'BuildQueue',\n        },\n      ],\n    },\n  ];\n\n  // updateData - updates the state of the component\n  // can be used if we want a refresh button.\n  // api/clusterdetail returns a single item.\n  const updateData = (newData: any) => {\n    setData(newData)\n    if (state && state.current) {\n      state.current.setState({ item: newData })\n    }\n  }\n\n  const _dismissPanel = () => {\n    dismissPanel()\n    props.onClose() // useEffect?\n    setData([])\n    setFetching(\"\")\n    setDataLoaded(false)\n    setError(null)\n  }\n\n  useEffect(() => {\n    if (props.currentCluster == null) {\n      return\n    }\n    const resourceID = props.currentCluster.resourceId\n\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n        setDataLoaded(true)\n      } else {\n        setError(result)\n      }\n      setFetching(resourceID)\n    }\n\n    if (fetching === \"\" && props.loaded === \"DONE\" && resourceID != \"\") {\n      setFetching(\"FETCHING\")\n      setError(null)\n      FetchClusterInfo(props.currentCluster).then(onData) // TODO: fetchClusterInfo accepts IClusterDetail\n    }\n  }, [data, fetching, setFetching])\n\n  useEffect(() => {\n    if (props.currentCluster == null) {\n      setDataLoaded(false)\n      return\n    }\n    const resourceID = props.currentCluster.resourceId\n\n    if (resourceID != \"\") {\n      if (resourceID == fetching) {\n        openPanel()\n        setDataLoaded(true)\n      } else {\n        setData([])\n        setFetching(\"\")\n        setDataLoaded(false) // activate shimmer\n        openPanel()\n      }\n    }\n  }, [props.currentCluster?.resourceId])\n\n  function _onLinkClick(ev?: React.MouseEvent<HTMLElement>, item?: INavLink) {\n    if (item && item.name !== \"\") {\n      setdetailPanelVisible(item.name)\n    }\n  }\n\n  const onRenderHeader = (\n  ): ReactElement => {\n    return (\n      <>\n        <Stack styles={headerStyle} horizontal>\n          <Stack.Item>\n            <Icon styles={headerIconStyles} iconName=\"openshift-svg\"></Icon>\n          </Stack.Item>\n          <Stack.Item>\n            <div className={headerStyles.titleText}>{props.currentCluster?.name}</div>\n            <div className={headerStyles.subtitleText}>Cluster</div>\n          </Stack.Item>\n        </Stack>\n      </>\n    )\n  }\n\n  // TODO: props.loaded rename to CSRFTokenAvailable\n  return (\n    <Panel\n      isOpen={isOpen}\n      type={PanelType.custom}\n      onDismiss={_dismissPanel}\n      isBlocking={false}\n      styles={customPanelStyle}\n      closeButtonAriaLabel=\"Close\"\n      onRenderHeader={onRenderHeader}>\n      <Stack>\n        <Stack.Item grow>{error && errorBar()}</Stack.Item>\n        <Stack horizontal>\n          <Stack.Item>\n            <Nav\n              onLinkClick={_onLinkClick}\n              ariaLabel=\"Select a tab to view\"\n              styles={navStyles}\n              groups={navLinkGroups}\n            />\n          </Stack.Item>\n          <Separator vertical />\n          <Stack.Item grow>\n            <ClusterDetailComponent\n              item={data}\n              cluster={props.currentCluster}\n              isDataLoaded={dataLoaded}\n              detailPanelVisible={detailPanelVisible}\n            />\n          </Stack.Item>\n        </Stack>\n      </Stack>\n    </Panel>\n  )\n}\n","import { IconButton, TooltipHost } from \"@fluentui/react\"\nimport { AxiosResponse } from \"axios\"\nimport { RequestKubeconfig } from \"./Request\"\nimport { MutableRefObject, useEffect, useLayoutEffect } from \"react\"\nimport { useState } from \"react\"\nimport { useRef } from \"react\"\nimport { forwardRef } from \"react\"\nimport { parse as parseContentDisposition } from \"content-disposition\"\n\ntype KubeconfigButtonProps = {\n  csrfToken: MutableRefObject<string>\n  resourceId: string\n}\n\ntype FileDownload = {\n  name: string\n  content: string\n}\n\nexport const KubeconfigButton = forwardRef<any, KubeconfigButtonProps>(\n  ({ csrfToken, resourceId }) => {\n    const [data, setData] = useState<FileDownload>({ name: \"\", content: \"\" })\n    const [error, setError] = useState<AxiosResponse | null>(null)\n    const [fetching, setFetching] = useState(\"DONE\")\n    const buttonRef = useRef<HTMLAnchorElement | null>(null)\n\n    useEffect(() => {\n      const onData = (result: AxiosResponse | null) => {\n        if (result?.status === 200) {\n          const blob = new Blob([result.request.response])\n          const fileDownloadUrl = URL.createObjectURL(blob)\n          const filename = parseContentDisposition(result.headers[\"content-disposition\"]).parameters\n            .filename\n          setData({ content: fileDownloadUrl, name: filename })\n        } else {\n          setError(result)\n        }\n        setFetching(\"DONE\")\n      }\n\n      if (fetching === \"\") {\n        setFetching(\"FETCHING\")\n        RequestKubeconfig(csrfToken.current, resourceId).then(onData)\n      }\n    }, [fetching, error, data, resourceId, csrfToken])\n\n    useLayoutEffect(() => {\n      if (data.content && buttonRef && buttonRef.current) {\n        buttonRef.current.href = data.content\n        buttonRef.current.download = data.name\n        buttonRef.current.click()\n        URL.revokeObjectURL(data.content)\n        data.content = \"\"\n      }\n    }, [data])\n\n    return (\n      <>\n        <TooltipHost content={`Download Kubeconfig`}>\n          <IconButton\n            iconProps={{ iconName: \"HardDriveGroup\" }}\n            disabled={fetching === \"FETCHING\"}\n            aria-label=\"Download Kubeconfig\"\n            onClick={() => setFetching(\"\")}\n          />\n          <a style={{ display: \"none\" }} ref={buttonRef} href={\"#\"}>\n            dl\n          </a>\n        </TooltipHost>\n      </>\n    )\n  }\n)\n\nKubeconfigButton.displayName = \"kubeconfigbutton\"\n","import React, { useState, useEffect, useRef, MutableRefObject, Component } from \"react\"\nimport {\n  Stack,\n  IconButton,\n  MessageBarType,\n  MessageBar,\n  CommandBar,\n  ICommandBarItemProps,\n  Separator,\n  Text,\n  IMessageBarStyles,\n  mergeStyleSets,\n  TooltipHost,\n  TextField,\n  Link,\n} from \"@fluentui/react\"\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n  IDetailsListStyles,\n} from \"@fluentui/react/lib/DetailsList\"\nimport { FetchClusters } from \"./Request\"\nimport { KubeconfigButton } from \"./Kubeconfig\"\nimport { AxiosResponse } from \"axios\"\nimport { ICluster, headerStyles } from \"./App\"\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nconst classNames = mergeStyleSets({\n  controlWrapper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  fileIconImg: {\n    verticalAlign: \"middle\",\n    maxHeight: \"20px\",\n    maxWidth: \"20px\",\n  },\n  headerIcon: {\n    height: 18,\n    paddingTop: 1,\n  },\n  iconContainer: {\n    margin: \"-11px 0px\",\n    height: 42,\n  },\n  controlButtonContainer: {\n    paddingLeft: 0,\n  },\n  itemsCount: {\n    padding: \"10px 0px\",\n  },\n})\n\nconst controlStyles = {\n  root: {\n    paddingLeft: 0,\n  },\n}\n\nconst separatorStyle = {\n  root: {\n    fontSize: 0,\n    marginBottom: 20,\n    padding: 0,\n  },\n}\n\ninterface IClusterListState {\n  columns: IColumn[]\n  items: ICluster[]\n  modalOpen: boolean\n}\n\nconst clusterListDetailStyles: Partial<IDetailsListStyles> = {\n  headerWrapper: {\n    marginTop: \"-16px\",\n  },\n}\n\n/* eslint-disable */\n\ninterface ClusterListComponentProps {\n  items: ICluster[]\n  sshModalRef: MutableRefObject<any>\n  setCurrentCluster: (item: ICluster) => void\n  csrfToken: MutableRefObject<string>\n}\n\n/* eslint-enable */\nclass ClusterListComponent extends Component<ClusterListComponentProps, IClusterListState> {\n  private _sshModal: MutableRefObject<any>\n\n  constructor(props: ClusterListComponentProps) {\n    super(props)\n\n    this._sshModal = props.sshModalRef\n\n    const columns: IColumn[] = [\n      {\n        key: \"icon\",\n        name: \"\",\n        fieldName: \"\",\n        minWidth: 24,\n        isRowHeader: false,\n        data: \"string\",\n        isPadded: false,\n        maxWidth: 24,\n        onRender: () => (\n          <Stack horizontal verticalAlign=\"center\" className={classNames.iconContainer}>\n            <img src=\"/favicon.ico\" className={classNames.headerIcon} alt=\"\" />\n          </Stack>\n        ),\n      },\n      {\n        key: \"name\",\n        name: \"Name\",\n        fieldName: \"name\",\n        minWidth: 100,\n        flexGrow: 10,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        onRender: (item: ICluster) => (\n          <Link onClick={() => this._onClusterInfoLinkClick(item)}>{item.name}</Link>\n        ),\n        isPadded: true,\n      },\n      {\n        key: \"subscription\",\n        name: \"Subscription\",\n        fieldName: \"subscription\",\n        minWidth: 100,\n        flexGrow: 10,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"version\",\n        name: \"Version\",\n        fieldName: \"version\",\n        minWidth: 50,\n        flexGrow: 3,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"createdDate\",\n        name: \"Creation Date\",\n        fieldName: \"createdAt\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"provisionedBy\",\n        name: \"Provisioned By\",\n        fieldName: \"provisionedBy\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"state\",\n        name: \"State\",\n        fieldName: \"provisioningState\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        onRender: (item: ICluster) => (\n          <Text>\n            {item.provisioningState}\n            {item.failedProvisioningState && \" - \" + item.failedProvisioningState}\n          </Text>\n        ),\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"icons\",\n        name: \"Actions\",\n        fieldName: \"icons\",\n        minWidth: 92,\n        flexGrow: 5,\n        isRowHeader: false,\n        data: \"string\",\n        isPadded: true,\n        onRender: (item: ICluster) => (\n          <Stack horizontal verticalAlign=\"center\" className={classNames.iconContainer}>\n            <TooltipHost content={`Copy Resource ID`}>\n              <IconButton\n                iconProps={{ iconName: \"Copy\" }}\n                aria-label=\"Copy Resource ID\"\n                onClick={() => this._onCopyResourceID(item)}\n              />\n            </TooltipHost>\n            <TooltipHost content={`Prometheus`}>\n              <IconButton\n                iconProps={{ iconName: \"BIDashboard\" }}\n                aria-label=\"Prometheus\"\n                href={item.resourceId + `/prometheus`}\n              />\n            </TooltipHost>\n            <TooltipHost content={`SSH`}>\n              <IconButton\n                iconProps={{ iconName: \"CommandPrompt\" }}\n                aria-label=\"SSH\"\n                onClick={() => this._onSSHClick(item)}\n              />\n            </TooltipHost>\n            <KubeconfigButton resourceId={item.resourceId} csrfToken={props.csrfToken} />\n            {/* <TooltipHost content={`Geneva`}>\n              <IconButton\n                iconProps={{iconName: \"Health\"}}\n                aria-label=\"Geneva\"\n                href={item.resourceId + `/geneva`}\n              />\n            </TooltipHost>\n            <TooltipHost content={`Feature Flags`}>\n              <IconButton\n                iconProps={{iconName: \"IconSetsFlag\"}}\n                aria-label=\"featureFlags\"\n                href={item.resourceId + `/feature-flags`}\n              />\n            </TooltipHost> */}\n          </Stack>\n        ),\n      },\n    ]\n\n    this.state = {\n      items: this.props.items,\n      columns: columns,\n      modalOpen: false,\n    }\n  }\n\n  public render() {\n    const { columns, items } = this.state\n\n    return (\n      <Stack>\n        <div className={classNames.controlWrapper}>\n          <TextField placeholder=\"Filter on resource ID\" onChange={this._onChangeText} />\n        </div>\n        <Text className={classNames.itemsCount}>Showing {items.length} items</Text>\n        <DetailsList\n          items={items}\n          columns={columns}\n          selectionMode={SelectionMode.none}\n          getKey={this._getKey}\n          setKey=\"none\"\n          layoutMode={DetailsListLayoutMode.fixedColumns}\n          isHeaderVisible={true}\n          onItemInvoked={this._onItemInvoked}\n          styles={clusterListDetailStyles}\n        />\n      </Stack>\n    )\n  }\n\n  private _getKey(item: any): string {\n    return item.key\n  }\n\n  private _onChangeText = (\n    ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    this.setState({\n      items: text\n        ? this.props.items.filter((i) => i.resourceId.toLowerCase().indexOf(text) > -1)\n        : this.props.items,\n    })\n  }\n\n  private _onSSHClick(item: any): void {\n    const modal = this._sshModal\n    if (modal && modal.current) {\n      modal.current.LoadSSH(item.resourceId)\n    }\n  }\n\n  private _onCopyResourceID(item: any): void {\n    navigator.clipboard.writeText(item.resourceId)\n  }\n\n  private _onClusterInfoLinkClick(item: ICluster): void {\n    this.props.setCurrentCluster(item)\n  }\n\n  private _onItemInvoked(item: any): void {\n    alert(`Item invoked: ${item.resourceId}`)\n  }\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\n    const { columns, items } = this.state\n    const newColumns: IColumn[] = columns.slice()\n    const currColumn: IColumn = newColumns.filter((currCol) => column.key === currCol.key)[0]\n    newColumns.forEach((newCol: IColumn) => {\n      if (newCol === currColumn) {\n        currColumn.isSortedDescending = !currColumn.isSortedDescending\n        currColumn.isSorted = true\n      } else {\n        newCol.isSorted = false\n        newCol.isSortedDescending = true\n      }\n    })\n    this.setState({\n      columns: newColumns,\n      items: items,\n    })\n  }\n}\n\nexport function ClusterList(props: {\n  csrfToken: MutableRefObject<string>\n  sshBox: MutableRefObject<any>\n  setCurrentCluster: any // TODO: fix this. probably bad - this is a helper function..\n  loaded: string\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<ClusterListComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}>\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // Helper function to refresh the actual state of the DetailList\n  // see https://developer.microsoft.com/en-us/fluentui#/controls/web/detailslist#best-practices\n  const updateData = (newData: any) => {\n    setData(newData)\n    if (state && state.current) {\n      state.current.setState({ items: newData })\n    }\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n      } else {\n        setError(result)\n      }\n      setFetching(\"DONE\")\n    }\n\n    if (fetching === \"\" && props.loaded === \"DONE\") {\n      setFetching(\"FETCHING\")\n      FetchClusters().then(onData)\n    }\n  }, [data, fetching, setFetching, props.loaded])\n\n  const _items: ICommandBarItemProps[] = [\n    {\n      key: \"refresh\",\n      text: \"Refresh\",\n      iconProps: { iconName: \"Refresh\" },\n      onClick: () => {\n        updateData([])\n        setFetching(\"\")\n      },\n    },\n  ]\n\n  return (\n    <Stack>\n      <span className={headerStyles.titleText}>Clusters</span>\n      <span className={headerStyles.subtitleText}>Azure Red Hat OpenShift</span>\n      <CommandBar\n        items={_items}\n        ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n        className={classNames.controlButtonContainer}\n        styles={controlStyles}\n      />\n      <Separator styles={separatorStyle} />\n\n      {error && errorBar()}\n      <ClusterListComponent\n        items={data}\n        ref={state} // why do we need ref here?\n        sshModalRef={props.sshBox}\n        setCurrentCluster={props.setCurrentCluster}\n        csrfToken={props.csrfToken}\n      />\n    </Stack>\n  )\n}\n","import { useState, useEffect, useRef, useCallback } from \"react\"\nimport {\n  Stack,\n  Text,\n  Panel,\n  IStackTokens,\n  IconButton,\n  IStackStyles,\n  DefaultPalette,\n  ThemeProvider,\n  PartialTheme,\n  PanelType,\n  IButtonStyles,\n  IPanelProps,\n  MessageBar,\n  IRenderFunction,\n  ITextStyles,\n  IPanelStyles,\n  TooltipHost,\n  IMessageBarStyles,\n  MessageBarType,\n  Icon,\n  mergeStyleSets,\n  registerIcons,\n} from \"@fluentui/react\"\nimport { AxiosResponse } from \"axios\"\nimport { useBoolean } from \"@fluentui/react-hooks\"\nimport { SSHModal } from \"./SSHModal\"\nimport { ClusterDetailPanel } from \"./ClusterDetail\"\nimport { ClusterList } from \"./ClusterList\"\nimport { FetchInfo, ProcessLogOut } from \"./Request\"\n\nconst containerStackTokens: IStackTokens = {}\nconst appStackTokens: IStackTokens = { childrenGap: 10 }\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nexport interface ICluster {\n  key: string\n  name: string\n  subscription: string\n  resourceGroup: string\n  id: string\n  version: string\n  createdDate: string\n  provisionedBy: string\n  provisioningState: string\n  failedProvisioningState: string\n  resourceId: string\n  consoleLink: string\n}\n\nconst stackStyles: IStackStyles = {\n  root: [\n    {\n      width: \"100%\",\n      padding: 0,\n    },\n  ],\n}\n\nconst headerTextStyles: ITextStyles = {\n  root: {\n    fontWeight: 600,\n  },\n}\n\nexport const contentStackStylesNormal: IStackStyles = {\n  root: [\n    {\n      padding: 20,\n    },\n  ],\n}\n\nconst stackNavStyles: IStackStyles = {\n  root: {\n    padding: \"0px 15px\",\n    height: 40,\n  },\n}\n\nconst MenuButtonStyles: IButtonStyles = {\n  icon: { color: DefaultPalette.white },\n}\n\nconst darkTheme: PartialTheme = {\n  semanticColors: {\n    bodyBackground: DefaultPalette.themePrimary,\n    bodyText: DefaultPalette.white,\n  },\n}\n\nconst navPanelStyles: Partial<IPanelStyles> = {\n  navigation: {\n    height: 40,\n    lineHeight: 40,\n    fontSize: 15,\n    paddingLeft: 15,\n    justifyContent: \"start\",\n    alignItems: \"center\",\n  },\n}\n\nexport const headerStyles = mergeStyleSets({\n  titleText: {\n    fontWeight: 600,\n    fontSize: 24,\n    lineHeight: 32,\n  },\n  subtitleText: {\n    color: \"#646464\",\n    fontSize: 12,\n    lineHeight: 14,\n    margin: 0,\n  },\n})\n\nregisterIcons({\n  icons: {\n    \"openshift-svg\": (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 64 64\">\n        <g>\n          <path d=\"M17.424 27.158L7.8 30.664c.123 1.545.4 3.07.764 4.566l9.15-3.333c-.297-1.547-.403-3.142-.28-4.74M60 16.504c-.672-1.386-1.45-2.726-2.35-3.988l-9.632 3.506c1.12 1.147 2.06 2.435 2.83 3.813z\" />\n          <path d=\"M38.802 13.776c2.004.935 3.74 2.21 5.204 3.707l9.633-3.506a27.38 27.38 0 0 0-10.756-8.95c-13.77-6.42-30.198-.442-36.62 13.326a27.38 27.38 0 0 0-2.488 13.771l9.634-3.505c.16-2.087.67-4.18 1.603-6.184 4.173-8.947 14.844-12.83 23.79-8.658\" />\n        </g>\n        <path d=\"M9.153 35.01L0 38.342c.84 3.337 2.3 6.508 4.304 9.33l9.612-3.5a17.99 17.99 0 0 1-4.763-9.164\" />\n        <path d=\"M49.074 31.38a17.64 17.64 0 0 1-1.616 6.186c-4.173 8.947-14.843 12.83-23.79 8.657a17.71 17.71 0 0 1-5.215-3.7l-9.612 3.5c2.662 3.744 6.293 6.874 10.748 8.953 13.77 6.42 30.196.44 36.618-13.328a27.28 27.28 0 0 0 2.479-13.765l-9.61 3.498z\" />\n        <path d=\"M51.445 19.618l-9.153 3.332c1.7 3.046 2.503 6.553 2.24 10.08l9.612-3.497c-.275-3.45-1.195-6.817-2.7-9.915\" />\n      </svg>\n    ),\n  },\n})\n\nexport interface IClusterDetail {\n  subscription: string\n  resourceGroup: string\n  clusterName: string\n}\n\nfunction App() {\n  const [data, updateData] = useState({ location: \"\", csrf: \"\", elevated: false, username: \"\" })\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false)\n  const [fetching, setFetching] = useState(\"\")\n  const [currentCluster, setCurrentCluster] = useState<ICluster | null>(null)\n\n  const [contentStackStyles, setContentStackStyles] =\n    useState<IStackStyles>(contentStackStylesNormal)\n  const sshRef = useRef<typeof SSHModal | null>(null)\n  const csrfRef = useRef<string>(\"\")\n\n  const _onCloseDetailPanel = () => {\n    setCurrentCluster(null)\n    setContentStackStyles(contentStackStylesNormal)\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n        csrfRef.current = result.data.csrf\n      } else {\n        setError(result)\n      }\n      setFetching(\"DONE\")\n    }\n\n    if (fetching === \"\") {\n      setFetching(\"FETCHING\")\n      FetchInfo().then(onData)\n    }\n  }, [fetching, error, data])\n\n  const onRenderNavigationContent: IRenderFunction<IPanelProps> = useCallback(\n    () => (\n      <>\n        <IconButton iconProps={{ iconName: \"GlobalNavButton\" }} onClick={dismissPanel} />\n      </>\n    ),\n    [dismissPanel]\n  )\n\n  const logOut = () => {\n    ProcessLogOut()\n  }\n\n  const errorBar = (): any => {\n    console.log(error)\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}>\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // Application state maintains the current resource id/name/group\n  // when we click a thing set the state\n  // ...\n\n  return (\n    <>\n      <Stack styles={stackStyles} tokens={containerStackTokens} horizontalAlign={\"stretch\"}>\n        <Panel\n          isLightDismiss\n          styles={navPanelStyles}\n          type={PanelType.smallFixedNear}\n          isOpen={isOpen}\n          onDismiss={dismissPanel}\n          closeButtonAriaLabel=\"Close\"\n          onRenderNavigationContent={onRenderNavigationContent}>\n          <p>regions go here</p>\n        </Panel>\n        <ThemeProvider theme={darkTheme}>\n          <Stack\n            grow\n            tokens={appStackTokens}\n            horizontalAlign={\"start\"}\n            verticalAlign={\"center\"}\n            horizontal\n            styles={stackNavStyles}>\n            <Stack.Item>\n              <IconButton\n                iconProps={{ iconName: \"GlobalNavButton\" }}\n                onClick={openPanel}\n                styles={MenuButtonStyles}\n              />\n            </Stack.Item>\n            <Stack.Item grow>\n              <Text styles={headerTextStyles}>\n                ARO Portal {data.location ? \"(\" + data.location + \")\" : \"\"}\n              </Text>\n            </Stack.Item>\n            <Stack.Item>\n              <Text>{data.username}</Text>\n            </Stack.Item>\n\n            <Stack.Item hidden={!data.elevated}>\n              <TooltipHost content={`Elevated User`}>\n                <Icon iconName={\"Admin\"}></Icon>\n              </TooltipHost>\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={{ iconName: \"SignOut\" }}\n                onClick={logOut}\n                styles={MenuButtonStyles}\n              />\n            </Stack.Item>\n          </Stack>\n        </ThemeProvider>\n        <Stack styles={contentStackStyles}>\n          <Stack.Item grow>{error && errorBar()}</Stack.Item>\n          <Stack.Item grow>\n            <ClusterList\n              csrfToken={csrfRef}\n              sshBox={sshRef}\n              setCurrentCluster={setCurrentCluster}\n              loaded={fetching}\n            />\n          </Stack.Item>\n          <Stack.Item grow>\n            <ClusterDetailPanel\n              csrfToken={csrfRef}\n              loaded={fetching}\n              currentCluster={currentCluster}\n              onClose={_onCloseDetailPanel}\n            />\n          </Stack.Item>\n        </Stack>\n        <SSHModal csrfToken={csrfRef} ref={sshRef} />\n      </Stack>\n    </>\n  )\n}\n\nexport default App\n","import ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { mergeStyles } from \"@fluentui/react\"\n\nimport { initializeIcons } from \"@fluentui/font-icons-mdl2\"\ninitializeIcons()\n\n// Inject some global styles\nmergeStyles({\n  \":global(body,html,#root)\": {\n    margin: 0,\n    padding: 0,\n    height: \"100vh\",\n  },\n})\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}