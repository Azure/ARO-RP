# Azure DevOps Pipeline running CI

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
  tags:
    include:
      - v2*

resources:
  containers:
    - container: golang
      image: mcr.microsoft.com/onebranch/cbl-mariner/build:2.0
      options: --user=0
    - container: python
      image: registry.access.redhat.com/ubi8/python-39:latest
      options: --user=0
    - container: ubi8
      image: registry.access.redhat.com/ubi8/toolbox:8.8
      options: --user=0 --privileged -v /dev/shm:/dev/shm --device /dev/net/tun --name vpn

variables:
  - template: vars.yml

stages:
  - stage: NotContainerized
    dependsOn: Containerized
    jobs:
      - job: Python_Unit_Tests
        pool:
          name: 1es-aro-ci-pool
        variables:
          HOME: $(Agent.BuildDirectory)

        steps:
          - template: ./templates/template-checkout.yml
          - script: |
              set -xe
              make test-python
              [[ -z "$(git status -s)" ]]
            displayName: üß™ Run Python Unit Tests
            target: python

      - job: Golang_Unit_Tests
        pool:
          name: 1es-aro-ci-pool
        variables:
          GOCACHE: /tmp/gocache
        steps:
          - template: ./templates/template-checkout.yml

          - script: |
              set -xe
              go version
              go env
            displayName: Print Go version & env
            target: golang

          - script: |
              echo "##vso[task.prependpath]$(go env GOPATH)/bin"
            displayName: Add GOBIN to path
            target: golang

          - script: |
              set -xe
              # Required for podman 5
              sudo tdnf install -y gpgme-devel lvm2-devel btrfs-progs-devel golang-1.21.11-1.cm2
              make generate
              [[ -z "$(git status -s)" ]]
            displayName: ‚öôÔ∏è Run Golang code generate
            target: golang

          - script: |
              set -xe
              make build-all
              [[ -z "$(git status -s)" ]]
            displayName: üïµÔ∏è Build Golang code
            target: golang

          - script: |
              set -xe
              make unit-test-go
            displayName: üß™ Run Golang unit tests
            target: golang

          - script: |
              make xmlcov
            displayName: ‚öôÔ∏è Process Reports
            condition: succeededOrFailed()
            target: golang

      - job: Lint_Admin_Portal
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml
          - script: |
              set -xe
              make lint-admin-portal
            displayName: üßπ Lint Admin Portal

  - stage: Containerized
    dependsOn: []
    jobs:
      - job: Build_Test_And_Push_Az_ARO_Extension
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml

          # Build and test the Az ARO Extension
          - script: |
              set -xe
              DOCKER_BUILD_CI_ARGS="--load" make ci-azext-aro VERSION=$(Build.BuildId)
            displayName: üõ† Build & Test Az ARO Extension

          # Push the image to ACR
          - template: ./templates/template-acr-push.yml
            parameters:
              acrFQDN: 'arosvcdev.azurecr.io'
              repository: 'azext-aro'
              pushLatest: true

      - job: Build_Lint_Test_RP_And_Portal
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml

          # Build and test RP and Portal
          - script: |
              set -xe
              DOCKER_BUILD_CI_ARGS="--load" make ci-rp VERSION=$(Build.BuildId)
            displayName: üõ† Build & Test RP and Portal

          # Publish test results
          - task: PublishTestResults@2
            displayName: üìä Publish tests results
            inputs:
              testResultsFiles: $(System.DefaultWorkingDirectory)/report.xml
            condition: succeededOrFailed()

          # Publish code coverage results
          - task: PublishCodeCoverageResults@2
            displayName: üìà Publish code coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml
              failIfCoverageEmpty: false
            condition: succeededOrFailed()

          # Push the image to ACR
          - template: ./templates/template-acr-push.yml
            parameters:
              acrFQDN: 'arosvcdev.azurecr.io'
              repository: 'aro'
              pushLatest: true

      - job: Lint_Az_ARO_Extension
        pool:
          name: 1es-aro-ci-pool
        variables:
          HOME: $(Agent.BuildDirectory)
        steps:
          - template: ./templates/template-checkout.yml
          - script: |
              set -xe
              export AZDEV_CONFIG_DIR=$(Agent.BuildDirectory)/azdev-config
              make test-python
              [[ -z "$(git status -s)" ]]
            target: python
