# Azure DevOps Pipeline running CI

trigger:
  branches:
    include:
      - master
      - loki/pipeline-swarm
  paths:
    exclude:
      - docs/*
  tags:
    include:
      - v2*

pr:
  branches:
    include:
      - loki/pipeline-swarm
  paths:
    exclude:
      - docs/*

resources:
  containers:
    - container: golang
      image: registry.access.redhat.com/ubi8/go-toolset:1.21.11-1.1720406008
      options: --user=0

stages:
- stage: NEW_HOTNESS
  jobs:
    - job: Build_Lint_Test_RP_And_Portal
      pool:
        name: 1es-aro-ci-pool
      steps:
        - template: ./templates/template-checkout.yml
        - script: |
            set -xe
            export RP_IMAGE_ACR=arosvcdev  
            export NO_CACHE=true
            make ci-rp 

    - job: Build_and_Test_Az_ARO_Extension
      pool:
        name: 1es-aro-ci-pool
      steps:
        - template: ./templates/template-checkout.yml
        - script: |
            set -xe
            export RP_IMAGE_ACR=arosvcdev 
            export NO_CACHE=true
            make azext-aro  

    - job: Lint_Az_ARO_Extension
      pool:
        name: 1es-aro-ci-pool
      steps:
        - template: ./templates/template-checkout.yml
        - script: |
            set -xe
            make test-python  

    - job: Pull_And_Push_Image_To_ACR
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        ob_outputDirectory: '$(Build.SourcesDirectory)/out'
        IMAGE_TAG: $(Build.SourceBranchName)
        REPOSITORY: 'my-image-repo'
        ACR_FQDN: 'arosvcdev.azurecr.io'  # ACR FQDN
      steps:
        - checkout: self

    # Build the Docker image
    - script: |
        set -eux
        docker build -t ${ACR_FQDN}/${REPOSITORY}:${IMAGE_TAG} .
      displayName: 'Building Docker Image'

    # Push the Docker image to ACR
    - script: |
        set -eux
        docker login ${ACR_FQDN} -u "00000000-0000-0000-0000-000000000000" -p "$(az acr login --name ${ACR_FQDN%%.*} --expose-token --output tsv --query accessToken)"
        docker push ${ACR_FQDN}/${REPOSITORY}:${IMAGE_TAG}
      displayName: 'Pushing Docker Image to ACR'

- job: Extract_Coverage_Report
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    ACR_FQDN: 'arosvcdev.azurecr.io'
    REPOSITORY: 'my-image-repo'
    IMAGE_TAG: $(Build.SourceBranchName)
  steps:
    - checkout: self

    # Authenticate with ACR using the Managed Identity service connection
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ado-pipeline-dev-image-push'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name ${ACR_FQDN%%.*}
          docker login ${ACR_FQDN} -u "00000000-0000-0000-0000-000000000000" -p "$(az acr login --name ${ACR_FQDN%%.*} --expose-token --output tsv --query accessToken)"

    # Extract coverage report if the image exists
    - script: |
        set -eux
        if docker pull ${ACR_FQDN}/${REPOSITORY}:${IMAGE_TAG}; then
          docker create --name coverage-container ${ACR_FQDN}/${REPOSITORY}:${IMAGE_TAG}
          docker cp coverage-container:/go/src/ARO-RP/cover.out $(Build.SourcesDirectory)/cover.out || {
            echo "Coverage file not found in container."
            exit 1
          }
          docker rm coverage-container
        else
          echo "Image with tag ${IMAGE_TAG} not found in ${ACR_FQDN}/${REPOSITORY}"
          exit 0  # Gracefully skip the coverage extraction if the image is not found
        fi
      displayName: 'Extract Coverage Report from Container'

    # Publish the coverage report to Azure DevOps
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/cover.out
      displayName: 'Publish Code Coverage Results'
