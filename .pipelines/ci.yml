# Azure DevOps Pipeline running CI
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*
  tags:
    include:
    - v2*

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*

variables:
- template: vars.yml

stages:

- stage: Check_Changes
  jobs:
  - job: Check_Changes
    pool:
      name: ARO-CI
    steps:
    - template: ./templates/template-checkout.yml
    - bash: |
        editedFiles=`git diff origin/master HEAD --name-only`

        SAVEIFS=$IFS   # Save current IFS (Internal Field Separator)
        IFS=$'\n'      # Change IFS to newline char
        editedFiles=($editedFiles)

        for (( i=0; i<${#editedFiles[@]}; i++ ))
        do
            case ${editedFiles[$i]} in
            *.go)
                echo "##vso[task.setvariable variable=IsGolangChanges;isoutput=true]True"
                ;;

            *.py)
                echo "##vso[task.setvariable variable=IsPythonChanges;isoutput=true]True"
                ;;

            *.tsx)
                echo "##vso[task.setvariable variable=IsTypescriptChanges;isoutput=true]True"
                ;;
            esac
        done

        IFS=$SAVEIFS   # Restore original IFS
        name: checkChanges
    - bash: echo "$(IsGolangChanges) $(IsPythonChanges) $(IsTypescriptChanges)"

- stage: Unit_Tests_And_Linting
  jobs:
  - job: Python_Unit_Tests
    pool:
      name: ARO-CI
    steps:
    - template: ./templates/template-checkout.yml
    - script: |
        set -xe
        make test-python
        [[ -z "$(git status -s)" ]]
      displayName: üß™Run Python Unit Tests
    condition: and(succeeded(), eq(stageDependencies.Check_Changes.Check_Changes.outputs['checkChanges.IsPythonChanges'], True))

  - job: Golang_Unit_Tests
    pool:
      name: ARO-CI
      demands: go-1.16
    steps:
    - template: ./templates/template-checkout.yml

    - script: |
        set -xe
        make generate
        [[ -z "$(git status -s)" ]]
      displayName: ‚öôÔ∏è Run Golang code generate

    - script: |
        set -xe
        make validate-go
        [[ -z "$(git status -s)" ]]
      displayName: üïµÔ∏è Validate Golang code

    - script: |
        set -xe
        make lint-go
        [[ -z "$(git status -s)" ]]
      displayName: üïµÔ∏è Lint Golang code

    - script: |
        set -xe
        make build-all
        [[ -z "$(git status -s)" ]]
      displayName: üïµÔ∏è Build Golang code

    - script: |
        set -xe
        make unit-test-go
      displayName: üß™ Run Golang unit tests

    - script: |
        set -xe
        make validate-fips
      displayName: üïµÔ∏è Validate FIPS

    - task: PublishTestResults@2
      displayName: üìä Publish tests results
      inputs:
        testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
      condition: succeededOrFailed()

    - script: |
        go run ./vendor/github.com/axw/gocov/gocov/*.go convert cover.out > coverage.json
        go run ./vendor/github.com/AlekSi/gocov-xml/gocov-xml.go < coverage.json > coverage.xml
      displayName: ‚öôÔ∏è Process Reports
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      displayName: üìà Publish code coverage
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
        failIfCoverageEmpty: false
      condition: succeededOrFailed()
    condition: and(succeeded(), eq(stageDependencies.Check_Changes.Check_Changes.outputs['checkChanges.IsGolangChanges'], True))

  - job: Lint_Admin_Portal
    pool:
      name: ARO-CI
    steps:
    - script: |
        set -xe
        make lint-admin-portal
      displayName: üßπ Lint Admin Portal
    condition: and(succeeded(), eq(stageDependencies.Check_Changes.Check_Changes.outputs['checkChanges.IsTypescriptChanges'], True))
