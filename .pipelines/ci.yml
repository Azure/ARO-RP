# Azure DevOps Pipeline running CI
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*
  tags:
    include:
    - v2*

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*

variables:
- template: vars.yml

jobs:
- job: Python_Unit_Tests_Testing
  pool:
    name: ARO-CI
  steps:
  - template: ./templates/template-checkout.yml

  - task: Docker@2
    displayName: Build Python Image
    inputs:
      repository: test-python
      tags: $(Build.BuildId)
      arguments: '--platform=linux/amd64 --no-cache'
      command: build
      Dockerfile: Dockerfile.python

  - script: |
      docker run --platform=linux/amd64 -t --rm test-python:$(Build.BuildId) make test-python
    displayName: üß™Run Python Unit Tests

- job: Golang_Unit_Tests_Testing
  pool:
    name: ARO-CI
    demands: go-1.17
  steps:
  - template: ./templates/template-checkout.yml

  - task: Docker@2
    displayName: Build CI Image
    inputs:
      repository: ci
      tags: $(Build.BuildId)
      arguments: '--platform=linux/amd64 --no-cache'
      command: build
      Dockerfile: Dockerfile.ci

  - script: |
      docker run --platform=linux/amd64 -t --rm ci:$(Build.BuildId) generate
    displayName: ‚öôÔ∏è Run Golang code generate

  - script: |
      docker run --platform=linux/amd64 -t --rm ci:$(Build.BuildId) build-all
    displayName: üïµÔ∏è Build Golang code

  - script: |
      docker run --platform=linux/amd64 -t --rm ci:$(Build.BuildId) unit-test-go
    displayName: üß™ Run Golang unit tests

  - script: |
      docker run --platform=linux/amd64 -t --rm ci:$(Build.BuildId) validate-fips
    displayName: üïµÔ∏è Validate FIPS

  - task: PublishTestResults@2
    displayName: üìä Publish tests results
    inputs:
      testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
    condition: succeededOrFailed()

  - script: |
      # install our vendored versions to prevent some oddities with our golang version (use of internal packages)
      go install github.com/axw/gocov/gocov
      go install github.com/AlekSi/gocov-xml
      $GOPATH/bin/gocov convert cover.out | $GOPATH/bin/gocov-xml > coverage.xml
    displayName: ‚öôÔ∏è Process Reports
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    displayName: üìà Publish code coverage
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
      failIfCoverageEmpty: false
    condition: succeededOrFailed()

- job: Lint_Admin_Portal_Testing
  pool:
    name: ARO-CI
  steps:

  - task: Docker@2
    displayName: Build portal_lint image
    inputs:
      repository: linter
      tags: $(Build.BuildId)
      arguments: '--platform=linux/amd64 --build-arg REGISTRY=registry.access.redhat.com --no-cache'
      command: build
      Dockerfile: Dockerfile.portal_lint

  - script: |
      docker run --platform=linux/amd64 -t --rm linter:$(Build.BuildId)
    displayName: Lint Admin Portal
