# Azure DevOps Pipeline running CI and E2E

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
  tags:
    include:
      - v2*

pr:
  branches:
    include:
      - '*'

variables:
  - template: vars.yml
  - name: CI
    value: true
  - name: REGISTRY
    value: registry.access.redhat.com
  - name: LOCAL_ARO_RP_IMAGE
    value: arosvcdev.azurecr.io/aro
  - name: LOCAL_ARO_AZEXT_IMAGE
    value: arosvcdev.azurecr.io/azext-aro
  - name: LOCAL_VPN_IMAGE
    value: arosvcdev.azurecr.io/vpn
  - name: LOCAL_E2E_IMAGE
    value: arosvcdev.azurecr.io/e2e
  - name: VERSION
    value: $(Build.BuildId)
  - name: ARO_IMAGE
    value: arosvcdev.azurecr.io/aro:$(Build.BuildId)
  - name: ARO_SELENIUM_HOSTNAME
    value: localhost
  - name: E2E_LABEL
    value: "!smoke&&!regressiontest"
  - name: KUBECONFIG
    value: aks.kubeconfig

stages:
  - stage: Set_Tag_Variable
    jobs:
      - job: Set_Tag
        pool:
          name: 1es-aro-ci-pool
        steps:
          - script: |
              echo "Build Reason: $(Build.Reason)"
              echo "Pull Request ID: ${{ variables['System.PullRequest.PullRequestId'] }}"
              if [ "$(Build.Reason)" == "PullRequest" ]; then
                TAG="pr-${{ variables['System.PullRequest.PullRequestId'] }}"
              else
                TAG="$(Build.BuildId)"
              fi
              echo "Setting TAG to $TAG"
              echo "##vso[task.setvariable variable=TAG;isOutput=true]$TAG"
            displayName: "Set TAG Variable Globally"

  - stage: Containerized_CI
    dependsOn: Set_Tag_Variable
    variables:
      TAG: $[ dependencies.Set_Tag_Variable.outputs['Set_Tag.TAG'] ]
    jobs:
      - job: Build_Test_And_Push_Az_ARO_Extension
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml

          # Build and test the Az ARO Extension
          - script: |
              set -xe
              DOCKER_BUILD_CI_ARGS="--load" make ci-azext-aro VERSION=${TAG:-latest}
            displayName: üõ† Build & Test Az ARO Extension

          # Push the image to ACR
          - template: ./templates/template-acr-push.yml
            parameters:
              acrFQDN: 'arosvcdev.azurecr.io'
              repository: 'azext-aro'
              pushLatest: true

      - job: Build_And_Test_RP_And_Portal
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml

          # Build and test RP and Portal
          - script: |
              set -xe
              DOCKER_BUILD_CI_ARGS="--load" make ci-rp VERSION=${TAG:-latest}
            displayName: üõ† Build & Test RP and Portal

          # Publish test results
          - task: PublishTestResults@2
            displayName: üìä Publish tests results
            inputs:
              testResultsFiles: $(System.DefaultWorkingDirectory)/report.xml
            condition: succeededOrFailed()

          # Publish code coverage results
          - task: PublishCodeCoverageResults@2
            displayName: üìà Publish code coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml
              failIfCoverageEmpty: false
            condition: succeededOrFailed()

          # Push the RP image to ACR
          - template: ./templates/template-acr-push.yml
            parameters:
              acrFQDN: 'arosvcdev.azurecr.io'
              repository: 'aro'
              pushLatest: true

      - job: Build_And_Push_E2E_Image
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml

          # Build the E2E image
          - script: |
              set -xe
              DOCKER_BUILD_CI_ARGS="--load" make aro-e2e VERSION=${TAG:-latest}
            displayName: üõ† Build the E2E image

          # Push the E2E image to ACR
          - template: ./templates/template-acr-push.yml
            parameters:
              acrFQDN: 'arosvcdev.azurecr.io'
              repository: 'e2e'
              pushLatest: true

  - stage: E2E  # E2E Stage using Docker Compose
    dependsOn: Containerized_CI
    jobs:
      - job: Run_E2E_Tests
        timeoutInMinutes: 0
        pool:
          name: 1es-aro-ci-pool
        steps:
          # Checkout the code
          - template: ./templates/template-checkout.yml

          # Install Docker, Docker Compose, and dependencies
          - bash: |
              . ./hack/e2e/utils.sh
              install_docker_dependencies
            displayName: Install Docker and Docker Compose

          # AZ CLI Login
          - template: ./templates/template-az-cli-login.yml
            parameters:
              azureDevOpsJSONSPN: $(aro-v4-e2e-devops-spn)

          # Get Kubeconfig for AKS Cluster with corrected Key Vault configuration
          - bash: |
              az account set -s $AZURE_SUBSCRIPTION_ID
              SECRET_SA_ACCOUNT_NAME=$(SECRET_SA_ACCOUNT_NAME) make secrets
              . secrets/env
              export KEYVAULT_PREFIX="e2e-classic-eastus-cls"

              # Retrieve the kubeconfig
              hack/get-admin-aks-kubeconfig.sh > aks.kubeconfig

              if [ -f aks.kubeconfig ]; then
                echo "Kubeconfig retrieved successfully."
              else
                echo "Failed to retrieve Kubeconfig."
                exit 1
              fi
            displayName: Get Kubeconfig for AKS Cluster

          # Deploy Hive Operator
          - bash: |
              az account set -s $AZURE_SUBSCRIPTION_ID
              SECRET_SA_ACCOUNT_NAME=$(SECRET_SA_ACCOUNT_NAME) make secrets
              . secrets/env
              docker compose -f docker-compose.yml up -d vpn
              while [ "$(docker inspect --format '{{.State.Health.Status}}' vpn)" != "healthy" ]; do
                echo "Waiting for VPN to be healthy..."
                sleep 10
              done
              docker ps
              kubectl get nodes
              ./hack/hive/hive-dev-install.sh
            displayName: Deploy Hive Operator

          # Run the E2E test suite
          - bash: |
              az account set -s $AZURE_SUBSCRIPTION_ID
              az acr login --name arosvcdev
              SECRET_SA_ACCOUNT_NAME=$(SECRET_SA_ACCOUNT_NAME) make secrets
              . ./hack/e2e/run-rp-and-e2e.sh
              deploy_e2e_db
              register_sub
              docker compose up e2e
              # Check if the E2E tests failed
              if [ $E2E_EXIT_CODE -ne 0 ]; then
                echo "##vso[task.logissue type=error] E2E tests failed. Check the logs for more details."
                exit 1
              else
                echo "E2E tests passed."
              fi
            displayName: ‚öôÔ∏è  Run E2E Test Suite

          # Log the output from the services in case of failure
          - bash: |
              docker compose logs vpn
              docker compose logs selenium
              docker compose logs rp
              docker compose logs portal
              docker compose logs e2e
            displayName: Log Service Output
            condition: always()

          # Collect must-gather logs
          - bash: |
              wget -nv https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/$(OpenShiftCLIVersion)/openshift-client-linux-$(OpenShiftCLIVersion).tar.gz
              tar xf openshift-client-linux-$(OpenShiftCLIVersion).tar.gz
              ./oc adm must-gather --image quay.io/cmarches/aro-must-gather:20231030.00
              tar cf must-gather.tar.gz must-gather.local.*
            displayName: Collect must-gather
            condition: Failed()
          # Publish the must-gather result to the pipeline
          - publish: must-gather.tar.gz
            artifact: must-gather
            displayName: Append must-gather to Pipeline
            condition: Failed()

          # Clean up Docker Compose services
          - bash: |
              docker compose down
              rm -f aks.kubeconfig
            displayName: Cleanup Docker Compose Services and Kubeconfig
            condition: always()

          # Clean Up Database
          - bash: |
              az cosmosdb sql database delete --name "$DATABASE_NAME" --yes --account-name "$DATABASE_ACCOUNT_NAME" --resource-group "$RESOURCEGROUP"
            displayName: Clean Up Database
            condition: always()

          # Cleanup Hive Operator
          - bash: |
              echo "Cleaning up Hive Operator..."
              kubectl delete namespace hive || echo "Namespace already deleted or does not exist."
            displayName: Cleanup Hive Operator
            condition: always()

          # AZ CLI Logout
          - template: ./templates/template-az-cli-logout.yml
