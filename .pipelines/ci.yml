# Azure DevOps Pipeline running CI and E2E with Docker Compose

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
  tags:
    include:
      - v2*

resources:
  containers:
    - container: golang
      image: mcr.microsoft.com/onebranch/cbl-mariner/build:2.0
      options: --user=0
    - container: python
      image: registry.access.redhat.com/ubi8/python-39:latest
      options: --user=0
    - container: ubi8
      image: registry.access.redhat.com/ubi8/toolbox:8.8
      options: --user=0 --privileged -v /dev/shm:/dev/shm --device /dev/net/tun --name vpn

variables:
  - template: vars.yml

stages:
  - stage: NotContainerized
    dependsOn: Containerized
    jobs:
      - job: Golang_Unit_Tests
        pool:
          name: 1es-aro-ci-pool
        variables:
          GOCACHE: /tmp/gocache
        steps:
          - template: ./templates/template-checkout.yml

          - script: |
              echo "##vso[task.prependpath]$(go env GOPATH)/bin"
            displayName: Add GOBIN to path
            target: golang

          - script: |
              set -xe
              sudo tdnf install -y gpgme-devel lvm2-devel btrfs-progs-devel golang-1.21.11-1.cm2
              make generate
              [[ -z "$(git status -s)" ]]
            displayName: ‚öôÔ∏è Run Golang code generate
            target: golang

      - job: Lint_Az_ARO_Extension
        pool:
          name: 1es-aro-ci-pool
        variables:
          HOME: $(Agent.BuildDirectory)
        steps:
          - template: ./templates/template-checkout.yml
          - script: |
              set -xe
              export AZDEV_CONFIG_DIR=$(Agent.BuildDirectory)/azdev-config
              make test-python
              [[ -z "$(git status -s)" ]]
            displayName: üß™ Lint Az ARO Extension
            target: python

  - stage: Containerized
    dependsOn: []
    jobs:
      - job: Build_Test_And_Push_Az_ARO_Extension
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml

          # Build and test the Az ARO Extension
          - script: |
              set -xe
              DOCKER_BUILD_CI_ARGS="--load" make ci-azext-aro VERSION=$(Build.BuildId)
            displayName: üõ† Build & Test Az ARO Extension

          # Push the image to ACR
          - template: ./templates/template-acr-push.yml
            parameters:
              acrFQDN: 'arosvcdev.azurecr.io'
              repository: 'azext-aro'
              pushLatest: true

      - job: Build_Lint_Test_RP_And_Portal
        pool:
          name: 1es-aro-ci-pool
        steps:
          - template: ./templates/template-checkout.yml

          # Build and test RP and Portal
          - script: |
              set -xe
              DOCKER_BUILD_CI_ARGS="--load" make ci-rp VERSION=$(Build.BuildId)
            displayName: üõ† Build & Test RP and Portal

          # Publish test results
          - task: PublishTestResults@2
            displayName: üìä Publish tests results
            inputs:
              testResultsFiles: $(System.DefaultWorkingDirectory)/report.xml
            condition: succeededOrFailed()

          # Publish code coverage results
          - task: PublishCodeCoverageResults@2
            displayName: üìà Publish code coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage.xml
              failIfCoverageEmpty: false
            condition: succeededOrFailed()

          # Push the image to ACR
          - template: ./templates/template-acr-push.yml
            parameters:
              acrFQDN: 'arosvcdev.azurecr.io'
              repository: 'aro'
              pushLatest: true

  # New E2E Stage with Docker Compose
  - stage: E2E
    dependsOn: Containerized
    jobs:
      - job: Run_E2E_Tests
        pool:
          name: 1es-aro-ci-pool
        steps:
          # Checkout the code
          - template: ./templates/template-checkout.yml

          # Use the E2E pipeline template for Docker Compose installation
          - template: ./templates/e2e-pipeline-template.yml
            parameters:
              rpImageACR: $(RP_IMAGE_ACR)
              acrCredentialsJSON: $(acr-credentials)

          # Set the RP Image ACR and Version
          - script: |
              export RP_IMAGE_ACR=arosvcdev.azurecr.io
              export VERSION=$(Build.BuildId)
            displayName: Set RP_IMAGE_ACR and VERSION

          # Run Docker Compose to bring up services
          - script: |
              docker-compose -f docker-compose.yml up -d
            displayName: Run Docker Compose for E2E Services

          # Run E2E Tests using Docker Compose
          - script: |
              docker-compose exec e2e make run-e2e
            displayName: Execute E2E Tests in Docker Compose

          # Clean up Docker Compose
          - script: |
              docker-compose down
            displayName: Cleanup Docker Compose
            condition: always()

          # Publish test results
          - task: PublishTestResults@2
            displayName: üìä Publish E2E Test Results
            inputs:
              testResultsFiles: $(System.DefaultWorkingDirectory)/e2e-report.xml
            condition: succeededOrFailed()

          # Publish any additional test artifacts
          - task: PublishBuildArtifacts@1
            displayName: Publish E2E Test Artifacts
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: e2e-artifacts
            condition: succeededOrFailed()
