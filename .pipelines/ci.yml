# Azure DevOps Pipeline running CI

trigger:
  branches:
    include:
      - master
      - loki/pipeline-swarm
      - loki/pipeline-swarm
  paths:
    exclude:
      - docs/*
  tags:
    include:
      - v2*

pr:
  branches:
    include:
      - loki/pipeline-swarm
  branches:
    include:
      - loki/pipeline-swarm
  paths:
    exclude:
      - docs/*


resources:
  containers:
    - container: golang
      image: registry.access.redhat.com/ubi8/go-toolset:1.20.12-5
      options: --user=0
    - container: python
      image: registry.access.redhat.com/ubi8/python-39:latest
      options: --user=0

variables:
  - template: vars.yml

resources:
  containers:
    - container: golang
      image: registry.access.redhat.com/ubi8/go-toolset:1.21.11-1.1720406008
      options: --user=0

stages:
- stage: NEW_HOTNESS
  jobs:
    - job: Build_Lint_Test_RP_And_Portal
      pool:
        name: 1es-aro-ci-pool
      steps:
        - template: ./templates/template-checkout.yml
        - script: |
            set -xe
            export NO_CACHE=true
            make ci-rp

    - job: Build_and_Test_Az_ARO_Extension
      pool:
        name: 1es-aro-ci-pool
      steps:
        - template: ./templates/template-checkout.yml
        - script: |
            set -xe
            export NO_CACHE=true
            make azext-aro

    - job: Lint_Az_ARO_Extension
      pool:
        name: 1es-aro-ci-pool
      steps:
        - template: ./templates/template-checkout.yml
        - script: |
            set -xe
            make test-python

    - job: Pull_And_Push_Image_To_ACR
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        ob_outputDirectory: '$(Build.SourcesDirectory)/out'
        IMAGE_TAG: $(Build.SourceBranchName)
        REPOSITORY: 'my-image-repo'
        ACRFQDN: 'myregistry.azurecr.io'
      steps:
        - checkout: self

        # Pull the Docker image using crane
        - script: |
            set -eux
            sudo apt-get update
            sudo apt-get install -y golang
            export PATH=$PATH:~/go/bin/
            go install github.com/google/go-containerregistry/cmd/crane@latest
            mkdir -p $(ob_outputDirectory)
            crane pull $(ACRFQDN)/$(REPOSITORY):$(IMAGE_TAG) $(ob_outputDirectory)/image.tar
          displayName: 'Pulling Docker Image using Crane'

        # Push the Docker image to ACR
        - script: |
            set -eux
            az login --service-principal -u $(SP_APP_ID) -p $(SP_SECRET) --tenant $(TENANT_ID)
            ACRName=$(echo "$(ACRFQDN)" | cut -f1 -d'.')
            export token=$(az acr login --name ${ACRName} --expose-token --output tsv --query accessToken)
            crane auth login "$(ACRFQDN)" -u "00000000-0000-0000-0000-000000000000" -p "${token}"
            crane push $(ob_outputDirectory)/image.tar "$(ACRFQDN)/$(REPOSITORY):$(IMAGE_TAG)"
            crane push $(ob_outputDirectory)/image.tar "$(ACRFQDN)/$(REPOSITORY):latest"
          displayName: 'Pushing Docker Image to ACR'
      
    - job: Extract_Coverage_Report
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - script: |
            set -eux
            # Create a container from the build cache and copy the coverage file
            podman create --name coverage-container my-image:latest
            podman cp coverage-container:/go/src/ARO-RP/cover.out $(Build.SourcesDirectory)/cover.out
            podman rm coverage-container
          displayName: 'Extract Coverage Report from Container'

        # Publish the coverage report to Azure DevOps
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: $(Build.SourcesDirectory)/cover.out
          displayName: 'Publish Code Coverage Results'

- stage: Golang_Code_Generation
  jobs:
    - job: Run_Golang_Code_Generate
      displayName: "⚙️ Run Golang code generate"
      pool:
        name: 1es-aro-ci-pool
      container: golang
      variables:
        GOCACHE: /tmp/gocache # Set the Go build cache to a writable directory
      steps:
        - template: ./templates/template-checkout.yml
        - script: |
            set -xe
            make generate
            [[ -z "$(git status -s)" ]]
          displayName: "Run Golang Code Generate"
