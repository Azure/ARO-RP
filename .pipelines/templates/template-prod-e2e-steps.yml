parameters:
  aroVersionStorageAccount: ''
  azureDevOpsE2EJSONSPN: ''
  location: ''
  rpMode: ''
  subscription: ''

steps:
- script: |
    set -e
    export LOCATION=${{ parameters.location }}
    export AZURE_SUBSCRIPTION_ID=${{ parameters.subscription }}

    trap 'set +e; rm -f devops-spn.json ; for c in $(docker ps -aq); do docker rm -f $c; done; docker image prune -af; rm -rf ~/.docker/config.json' EXIT
    base64 -d >devops-spn.json <<<${{ parameters.azureDevOpsE2EJSONSPN }}
    export AZURE_CLIENT_ID=$(jq -r .clientId <devops-spn.json)
    export AZURE_CLIENT_SECRET=$(jq -r .clientSecret <devops-spn.json)
    export AZURE_TENANT_ID=$(jq -r .tenantId <devops-spn.json)


    # TODO: read RP config and derive $IMAGE from it. This would also need the
    # AZURE_CLIENT_ID identity to be able to pull from non-INT ACR.
    export IMAGE=arointsvc.azurecr.io/aro
    docker login $IMAGE -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET

    set -x

    VERSION=$(curl -sf "https://${{ parameters.aroVersionStorageAccount }}.blob.core.windows.net/rpversion/$LOCATION")

    # TODO: get these into ADO variables, then remove rpMode
    if [[ "${{ parameters.rpMode }}" = "int" ]]; then
      export AZURE_FP_CLIENT_ID=71cfb175-ea3a-444e-8c03-b119b2752ce4
      export AZURE_FP_SERVICE_PRINCIPAL_ID=fe9d206f-a6af-46db-8bda-303aae45e469
    else
      export AZURE_FP_CLIENT_ID=f1dd0a37-89c6-4e07-bcd1-ffd3d43d8875
      export AZURE_FP_SERVICE_PRINCIPAL_ID=50c17c64-bc11-4fdd-a339-0ecd396bf911
    fi
    # TODO: remove --env RESOURCEGROUP after next RP deployment.

    # TODO: e2e.test arguments need to move inside the container somehow.  Maybe
    # a short script inside the container?  :-|
    docker run \
      --rm \
      --env CI=true \
      --env AZURE_CLIENT_ID \
      --env AZURE_CLIENT_SECRET \
      --env AZURE_FP_CLIENT_ID \
      --env AZURE_FP_SERVICE_PRINCIPAL_ID \
      --env AZURE_TENANT_ID \
      --env AZURE_SUBSCRIPTION_ID \
      --env LOCATION \
      --env RESOURCEGROUP="v4-e2e-V$BUILD_BUILDID-$LOCATION" \
      --env CLUSTER="v4-e2e-V$BUILD_BUILDID-$LOCATION" \
      --entrypoint e2e.test \
      "$IMAGE:$VERSION" \
      -test.timeout 180m -test.v -ginkgo.v

  displayName: ðŸš€ Run ${{ parameters.location }} E2E
