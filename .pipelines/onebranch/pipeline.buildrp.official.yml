#################################################################################
#                               OneBranch Pipelines                             #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none
pr: none

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  LinuxContainerImage: cdpxlinux.azurecr.io/global/ubuntu-1804-all:5.0   # Docker image which is used to build the project https://aka.ms/obpipelines/containers
  DEBIAN_FRONTEND: noninteractive

resources:
  repositories:
  - repository: templates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main
  - repository: rhado
    type: git
    name: ARO.Pipelines

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      # tsa:
      #  enabled: true # SDL results of non-official builds aren't uploaded to TSA by default.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      policheck:
        break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\.gdn\.gdnsuppress
        suppressionSet: default

    stages:
    - stage: Build_Ev2_Artifacts
      jobs:
      - job: Build_Ev2_Artifacts
        pool:
          type: linux

        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: $(Build.SourcesDirectory)/out   # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts

        steps:
        - checkout: rhado
        - task: GoTool@0
          displayName: Use Go 1.16.2
          inputs:
            version: 1.16.2
        - task: Go@0
          inputs:
            command: custom
            customCommand: run
            arguments: . --config-path ./config/
            workingDirectory: $(Build.SourcesDirectory)/ARO.Pipelines/ev2/generator/
          displayName: ⚙️ Generate Ev2 Deployment Manifests
        - task: Bash@3
          displayName: ⚙️ Copy to ob_outputDirectory
          inputs:
            targetType: filePath
            filePath: .pipelines/onebranch/scripts/deploymentpipeline.sh

# https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4605/Artifacts

    - stage: Build_Docker_Image
      jobs:
      - job: Build_Docker_Image
        pool:
          type: docker
          os: linux
        variables:
          ob_git_checkout: true
        steps:
        - task: onebranch.pipeline.imagebuildinfo@1
          displayName: Build Multi Stage Dockerfile
          inputs:
            repositoryName: aro-rp
            dockerFileRelPath: ./Dockerfile.aro-multistage
            dockerFileContextPath: ./
            registry: cdpxlinux.azurecr.io
            saveImageToPath: aro-rp.tar
            buildkit: 1
            enable_network: true
            build_tag: $(Build.BuildNumber)


    - stage: Build_ARO
      jobs:
      - job: Build_ARO
        pool:
          type: linux

        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: $(Build.SourcesDirectory)/out   # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts

        steps:
        - task: GoTool@0
          displayName: Use Go 1.14
          inputs:
            version: '1.14'
            GOPATH: $(Agent.TempDirectory)
        - task: Bash@3
          displayName: ⚙️ Make ARO
          inputs:
            targetType: inline
            script: |
              mkdir -p $(Agent.TempDirectory)/src/github.com/Azure/
              cp -rd $(Build.SourcesDirectory) $(Agent.TempDirectory)/src/github.com/Azure/ARO-RP
              cd $(Agent.TempDirectory)/src/github.com/Azure/ARO-RP
              ls
              git rev-parse --short HEAD
              git status --porcelain
              make aro
              mkdir -p $(ob_outputDirectory) 
              cp aro $(ob_outputDirectory)/aro
            workingDirectory: $(Build.SourcesDirectory)
