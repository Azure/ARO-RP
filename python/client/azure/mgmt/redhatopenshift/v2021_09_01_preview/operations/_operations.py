# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_operations_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/providers/Microsoft.RedHatOpenShift/operations"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_list_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.RedHatOpenShift/openShiftClusters"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_list_by_resource_group_request(
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1, pattern=r"^[-\w\._\(\)]+$"
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_get_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1, pattern=r"^[-\w\._\(\)]+$"
        ),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_create_or_update_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1, pattern=r"^[-\w\._\(\)]+$"
        ),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_delete_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1, pattern=r"^[-\w\._\(\)]+$"
        ),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_update_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters/{resourceName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1, pattern=r"^[-\w\._\(\)]+$"
        ),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_list_admin_credentials_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters/{resourceName}/listAdminCredentials"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1, pattern=r"^[-\w\._\(\)]+$"
        ),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_open_shift_clusters_list_credentials_request(
    resource_group_name: str, resource_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-01-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2021-09-01-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RedHatOpenShift/openShiftClusters/{resourceName}/listCredentials"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "resourceGroupName": _SERIALIZER.url(
            "resource_group_name", resource_group_name, "str", max_length=90, min_length=1, pattern=r"^[-\w\._\(\)]+$"
        ),
        "resourceName": _SERIALIZER.url("resource_name", resource_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class Operations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.redhatopenshift.v2021_09_01_preview.AzureRedHatOpenShiftClient`'s
        :attr:`operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSON]:
        """Lists all of the available RP operations.

        The operation returns the RP operations.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "display": {
                        "description": "str",  # Optional. Friendly name of the operation.
                        "operation": "str",  # Optional. Operation type: read, write, delete,
                          listKeys/action, etc.
                        "provider": "str",  # Optional. Friendly name of the resource
                          provider.
                        "resource": "str"  # Optional. Resource type on which the operation
                          is performed.
                    },
                    "name": "str",  # Optional. Operation name:
                      {provider}/{resource}/{operation}.
                    "origin": "str"  # Optional. Sources of requests to this operation.  Comma
                      separated list with valid values user or system, e.g. "user,system".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_operations_list_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class OpenShiftClustersOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.redhatopenshift.v2021_09_01_preview.AzureRedHatOpenShiftClient`'s
        :attr:`open_shift_clusters` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSON]:
        """Lists OpenShift clusters in the specified subscription.

        The operation returns properties of each OpenShift cluster.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_open_shift_clusters_list_request(
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSON]:
        """Lists OpenShift clusters in the specified subscription and resource group.

        The operation returns properties of each OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_open_shift_clusters_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> JSON:
        """Gets a OpenShift cluster with the specified subscription, resource group and resource name.

        The operation returns properties of a OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_open_shift_clusters_get_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _create_or_update_initial(
        self, resource_group_name: str, resource_name: str, parameters: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IO, bytes)):
            _content = parameters
        else:
            _json = parameters

        request = build_open_shift_clusters_create_or_update_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates a OpenShift cluster with the specified subscription, resource group and
        resource name.

        The operation returns properties of a OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :param parameters: The OpenShift cluster resource. Required.
        :type parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_create_or_update(
        self,
        resource_group_name: str,
        resource_name: str,
        parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates a OpenShift cluster with the specified subscription, resource group and
        resource name.

        The operation returns properties of a OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :param parameters: The OpenShift cluster resource. Required.
        :type parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_create_or_update(
        self, resource_group_name: str, resource_name: str, parameters: Union[JSON, IO], **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates a OpenShift cluster with the specified subscription, resource group and
        resource name.

        The operation returns properties of a OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :param parameters: The OpenShift cluster resource. Is either a JSON type or a IO type.
         Required.
        :type parameters: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_or_update_initial(
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                parameters=parameters,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _delete_initial(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, resource_name: str, **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_open_shift_clusters_delete_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def begin_delete(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> LROPoller[None]:
        """Deletes a OpenShift cluster with the specified subscription, resource group and resource name.

        The operation returns nothing.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns None
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_initial(  # type: ignore
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _update_initial(
        self, resource_group_name: str, resource_name: str, parameters: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IO, bytes)):
            _content = parameters
        else:
            _json = parameters

        request = build_open_shift_clusters_update_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        resource_name: str,
        parameters: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates a OpenShift cluster with the specified subscription, resource group and
        resource name.

        The operation returns properties of a OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :param parameters: The OpenShift cluster resource. Required.
        :type parameters: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @overload
    def begin_update(
        self,
        resource_group_name: str,
        resource_name: str,
        parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates a OpenShift cluster with the specified subscription, resource group and
        resource name.

        The operation returns properties of a OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :param parameters: The OpenShift cluster resource. Required.
        :type parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """

    @distributed_trace
    def begin_update(
        self, resource_group_name: str, resource_name: str, parameters: Union[JSON, IO], **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates a OpenShift cluster with the specified subscription, resource group and
        resource name.

        The operation returns properties of a OpenShift cluster.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :param parameters: The OpenShift cluster resource. Is either a JSON type or a IO type.
         Required.
        :type parameters: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. The resource tags.
                    }
                }

                # response body for status code(s): 200, 201
                response == {
                    "location": "str",  # The geo-location where the resource lives. Required.
                    "id": "str",  # Optional. Fully qualified resource ID for the resource. Ex -
                      /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
                    "name": "str",  # Optional. The name of the resource.
                    "properties": {
                        "apiserverProfile": {
                            "ip": "str",  # Optional. The IP of the cluster API server.
                            "url": "str",  # Optional. The URL to access the cluster API
                              server.
                            "visibility": "str"  # Optional. API server visibility. Known
                              values are: "Private" and "Public".
                        },
                        "clusterProfile": {
                            "domain": "str",  # Optional. The domain for the cluster.
                            "pullSecret": "str",  # Optional. The pull secret for the
                              cluster.
                            "resourceGroupId": "str",  # Optional. The ID of the cluster
                              resource group.
                            "version": "str"  # Optional. The version of the cluster.
                        },
                        "consoleProfile": {
                            "url": "str"  # Optional. The URL to access the cluster
                              console.
                        },
                        "ingressProfiles": [
                            {
                                "ip": "str",  # Optional. The IP of the ingress.
                                "name": "str",  # Optional. The ingress profile name.
                                "visibility": "str"  # Optional. Ingress visibility.
                                  Known values are: "Private" and "Public".
                            }
                        ],
                        "masterProfile": {
                            "diskEncryptionSetId": "str",  # Optional. The resource ID of
                              an associated DiskEncryptionSet, if applicable.
                            "encryptionAtHost": "str",  # Optional. Whether master
                              virtual machines are encrypted at host. Known values are: "Disabled" and
                              "Enabled".
                            "subnetId": "str",  # Optional. The Azure resource ID of the
                              master subnet.
                            "vmSize": "str"  # Optional. The size of the master VMs.
                              Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                              "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                              "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                              "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                              "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                              "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                              "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5",
                              "Standard_GS5", and "Standard_M128ms".
                        },
                        "networkProfile": {
                            "podCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Pods.
                            "serviceCidr": "str",  # Optional. The CIDR used for
                              OpenShift/Kubernetes Services.
                            "softwareDefinedNetwork": "str"  # Optional. The software
                              defined network (SDN) to use when installing the cluster. Known values
                              are: "OVNKubernetes" and "OpenShiftSDN".
                        },
                        "provisioningState": "str",  # Optional. The cluster provisioning
                          state. Known values are: "AdminUpdating", "Creating", "Deleting", "Failed",
                          "Succeeded", and "Updating".
                        "servicePrincipalProfile": {
                            "clientId": "str",  # Optional. The client ID used for the
                              cluster.
                            "clientSecret": "str"  # Optional. The client secret used for
                              the cluster.
                        },
                        "workerProfiles": [
                            {
                                "count": 0,  # Optional. The number of worker VMs.
                                "diskEncryptionSetId": "str",  # Optional. The
                                  resource ID of an associated DiskEncryptionSet, if applicable.
                                "diskSizeGB": 0,  # Optional. The disk size of the
                                  worker VMs.
                                "encryptionAtHost": "str",  # Optional. Whether
                                  master virtual machines are encrypted at host. Known values are:
                                  "Disabled" and "Enabled".
                                "name": "str",  # Optional. The worker profile name.
                                "subnetId": "str",  # Optional. The Azure resource ID
                                  of the worker subnet.
                                "vmSize": "str"  # Optional. The size of the worker
                                  VMs. Known values are: "Standard_D16as_v4", "Standard_D16s_v3",
                                  "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
                                  "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4",
                                  "Standard_D8s_v3", "Standard_E16s_v3", "Standard_E32s_v3",
                                  "Standard_E4s_v3", "Standard_E64i_v3", "Standard_E64is_v3",
                                  "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
                                  "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2",
                                  "Standard_G5", "Standard_GS5", and "Standard_M128ms".
                            }
                        ]
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",  # Optional. The timestamp of
                          resource creation (UTC).
                        "createdBy": "str",  # Optional. The identity that created the
                          resource.
                        "createdByType": "str",  # Optional. The type of identity that
                          created the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                        "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. The type of
                          identity that last modified the resource.
                        "lastModifiedBy": "str",  # Optional. The identity that last modified
                          the resource.
                        "lastModifiedByType": "str"  # Optional. The type of identity that
                          last modified the resource. Known values are: "User", "Application",
                          "ManagedIdentity", and "Key".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. The type of the resource. E.g.
                      "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts".
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                resource_name=resource_name,
                parameters=parameters,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        if polling is True:
            polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_admin_credentials(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> JSON:
        """Lists admin kubeconfig of an OpenShift cluster with the specified subscription, resource group
        and resource name.

        The operation returns the admin kubeconfig.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "kubeconfig": "str"  # Optional. The base64-encoded kubeconfig file.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_open_shift_clusters_list_admin_credentials_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_credentials(self, resource_group_name: str, resource_name: str, **kwargs: Any) -> JSON:
        """Lists credentials of an OpenShift cluster with the specified subscription, resource group and
        resource name.

        The operation returns the credentials.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param resource_name: The name of the OpenShift cluster resource. Required.
        :type resource_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "kubeadminPassword": "str",  # Optional. The password for the kubeadmin user.
                    "kubeadminUsername": "str"  # Optional. The username for the kubeadmin user.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_open_shift_clusters_list_credentials_request(
            resource_group_name=resource_group_name,
            resource_name=resource_name,
            subscription_id=self._config.subscription_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
