# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class APIServerProfile(msrest.serialization.Model):
    """APIServerProfile represents an API server profile.

    :param visibility: API server visibility. Possible values include: "Private", "Public".
    :type visibility: str or ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.Visibility
    :param url: The URL to access the cluster API server.
    :type url: str
    :param ip: The IP of the cluster API server.
    :type ip: str
    """

    _attribute_map = {
        'visibility': {'key': 'visibility', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'ip': {'key': 'ip', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(APIServerProfile, self).__init__(**kwargs)
        self.visibility = kwargs.get('visibility', None)
        self.url = kwargs.get('url', None)
        self.ip = kwargs.get('ip', None)


class CloudErrorBody(msrest.serialization.Model):
    """CloudErrorBody represents the body of a cloud error.

    :param code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable for display in a user
     interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class ClusterProfile(msrest.serialization.Model):
    """ClusterProfile represents a cluster profile.

    :param pull_secret: The pull secret for the cluster.
    :type pull_secret: str
    :param domain: The domain for the cluster.
    :type domain: str
    :param version: The version of the cluster.
    :type version: str
    :param resource_group_id: The ID of the cluster resource group.
    :type resource_group_id: str
    """

    _attribute_map = {
        'pull_secret': {'key': 'pullSecret', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'resource_group_id': {'key': 'resourceGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ClusterProfile, self).__init__(**kwargs)
        self.pull_secret = kwargs.get('pull_secret', None)
        self.domain = kwargs.get('domain', None)
        self.version = kwargs.get('version', None)
        self.resource_group_id = kwargs.get('resource_group_id', None)


class ConsoleProfile(msrest.serialization.Model):
    """ConsoleProfile represents a console profile.

    :param url: The URL to access the cluster console.
    :type url: str
    """

    _attribute_map = {
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConsoleProfile, self).__init__(**kwargs)
        self.url = kwargs.get('url', None)


class Display(msrest.serialization.Model):
    """Display represents the display details of an operation.

    :param provider: Friendly name of the resource provider.
    :type provider: str
    :param resource: Resource type on which the operation is performed.
    :type resource: str
    :param operation: Operation type: read, write, delete, listKeys/action, etc.
    :type operation: str
    :param description: Friendly name of the operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Display, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class IngressProfile(msrest.serialization.Model):
    """IngressProfile represents an ingress profile.

    :param name: The ingress profile name.
    :type name: str
    :param visibility: Ingress visibility. Possible values include: "Private", "Public".
    :type visibility: str or ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.Visibility
    :param ip: The IP of the ingress.
    :type ip: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'visibility': {'key': 'visibility', 'type': 'str'},
        'ip': {'key': 'ip', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IngressProfile, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.visibility = kwargs.get('visibility', None)
        self.ip = kwargs.get('ip', None)


class MasterProfile(msrest.serialization.Model):
    """MasterProfile represents a master profile.

    :param vm_size: The size of the master VMs. Possible values include: "Standard_D16as_v4",
     "Standard_D16s_v3", "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
     "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4", "Standard_D8s_v3",
     "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E4s_v3", "Standard_E64i_v3",
     "Standard_E64is_v3", "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
     "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5", "Standard_GS5",
     "Standard_M128ms".
    :type vm_size: str or ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.VMSize
    :param subnet_id: The Azure resource ID of the master subnet.
    :type subnet_id: str
    :param encryption_at_host: Whether master virtual machines are encrypted at host. Possible
     values include: "Disabled", "Enabled".
    :type encryption_at_host: str or
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.EncryptionAtHost
    :param disk_encryption_set_id: The resource ID of an associated DiskEncryptionSet, if
     applicable.
    :type disk_encryption_set_id: str
    """

    _attribute_map = {
        'vm_size': {'key': 'vmSize', 'type': 'str'},
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'encryption_at_host': {'key': 'encryptionAtHost', 'type': 'str'},
        'disk_encryption_set_id': {'key': 'diskEncryptionSetId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MasterProfile, self).__init__(**kwargs)
        self.vm_size = kwargs.get('vm_size', None)
        self.subnet_id = kwargs.get('subnet_id', None)
        self.encryption_at_host = kwargs.get('encryption_at_host', None)
        self.disk_encryption_set_id = kwargs.get('disk_encryption_set_id', None)


class NetworkProfile(msrest.serialization.Model):
    """NetworkProfile represents a network profile.

    :param software_defined_network: The software defined network (SDN) to use when installing the
     cluster. Possible values include: "OVNKubernetes", "OpenShiftSDN".
    :type software_defined_network: str or
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.SoftwareDefinedNetwork
    :param pod_cidr: The CIDR used for OpenShift/Kubernetes Pods.
    :type pod_cidr: str
    :param service_cidr: The CIDR used for OpenShift/Kubernetes Services.
    :type service_cidr: str
    """

    _attribute_map = {
        'software_defined_network': {'key': 'softwareDefinedNetwork', 'type': 'str'},
        'pod_cidr': {'key': 'podCidr', 'type': 'str'},
        'service_cidr': {'key': 'serviceCidr', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkProfile, self).__init__(**kwargs)
        self.software_defined_network = kwargs.get('software_defined_network', None)
        self.pod_cidr = kwargs.get('pod_cidr', None)
        self.service_cidr = kwargs.get('service_cidr', None)


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs['location']


class OpenShiftCluster(TrackedResource):
    """OpenShiftCluster represents an Azure Red Hat OpenShift cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: The system meta data relating to this resource.
    :vartype system_data: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.SystemData
    :param provisioning_state: The cluster provisioning state. Possible values include:
     "AdminUpdating", "Creating", "Deleting", "Failed", "Succeeded", "Updating".
    :type provisioning_state: str or
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ProvisioningState
    :param cluster_profile: The cluster profile.
    :type cluster_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ClusterProfile
    :param console_profile: The console profile.
    :type console_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ConsoleProfile
    :param service_principal_profile: The cluster service principal profile.
    :type service_principal_profile:
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ServicePrincipalProfile
    :param network_profile: The cluster network profile.
    :type network_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.NetworkProfile
    :param master_profile: The cluster master profile.
    :type master_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.MasterProfile
    :param worker_profiles: The cluster worker profiles.
    :type worker_profiles:
     list[~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.WorkerProfile]
    :param apiserver_profile: The cluster API server profile.
    :type apiserver_profile:
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.APIServerProfile
    :param ingress_profiles: The cluster ingress profiles.
    :type ingress_profiles:
     list[~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.IngressProfile]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'cluster_profile': {'key': 'properties.clusterProfile', 'type': 'ClusterProfile'},
        'console_profile': {'key': 'properties.consoleProfile', 'type': 'ConsoleProfile'},
        'service_principal_profile': {'key': 'properties.servicePrincipalProfile', 'type': 'ServicePrincipalProfile'},
        'network_profile': {'key': 'properties.networkProfile', 'type': 'NetworkProfile'},
        'master_profile': {'key': 'properties.masterProfile', 'type': 'MasterProfile'},
        'worker_profiles': {'key': 'properties.workerProfiles', 'type': '[WorkerProfile]'},
        'apiserver_profile': {'key': 'properties.apiserverProfile', 'type': 'APIServerProfile'},
        'ingress_profiles': {'key': 'properties.ingressProfiles', 'type': '[IngressProfile]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OpenShiftCluster, self).__init__(**kwargs)
        self.system_data = None
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.cluster_profile = kwargs.get('cluster_profile', None)
        self.console_profile = kwargs.get('console_profile', None)
        self.service_principal_profile = kwargs.get('service_principal_profile', None)
        self.network_profile = kwargs.get('network_profile', None)
        self.master_profile = kwargs.get('master_profile', None)
        self.worker_profiles = kwargs.get('worker_profiles', None)
        self.apiserver_profile = kwargs.get('apiserver_profile', None)
        self.ingress_profiles = kwargs.get('ingress_profiles', None)


class OpenShiftClusterAdminKubeconfig(msrest.serialization.Model):
    """OpenShiftClusterAdminKubeconfig represents an OpenShift cluster's admin kubeconfig.

    :param kubeconfig: The base64-encoded kubeconfig file.
    :type kubeconfig: str
    """

    _attribute_map = {
        'kubeconfig': {'key': 'kubeconfig', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OpenShiftClusterAdminKubeconfig, self).__init__(**kwargs)
        self.kubeconfig = kwargs.get('kubeconfig', None)


class OpenShiftClusterCredentials(msrest.serialization.Model):
    """OpenShiftClusterCredentials represents an OpenShift cluster's credentials.

    :param kubeadmin_username: The username for the kubeadmin user.
    :type kubeadmin_username: str
    :param kubeadmin_password: The password for the kubeadmin user.
    :type kubeadmin_password: str
    """

    _attribute_map = {
        'kubeadmin_username': {'key': 'kubeadminUsername', 'type': 'str'},
        'kubeadmin_password': {'key': 'kubeadminPassword', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OpenShiftClusterCredentials, self).__init__(**kwargs)
        self.kubeadmin_username = kwargs.get('kubeadmin_username', None)
        self.kubeadmin_password = kwargs.get('kubeadmin_password', None)


class OpenShiftClusterList(msrest.serialization.Model):
    """OpenShiftClusterList represents a list of OpenShift clusters.

    :param value: The list of OpenShift clusters.
    :type value: list[~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.OpenShiftCluster]
    :param next_link: The link used to get the next page of operations.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OpenShiftCluster]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OpenShiftClusterList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class OpenShiftClusterUpdate(msrest.serialization.Model):
    """OpenShiftCluster represents an Azure Red Hat OpenShift cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param tags: A set of tags. The resource tags.
    :type tags: dict[str, str]
    :ivar system_data: The system meta data relating to this resource.
    :vartype system_data: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.SystemData
    :param provisioning_state: The cluster provisioning state. Possible values include:
     "AdminUpdating", "Creating", "Deleting", "Failed", "Succeeded", "Updating".
    :type provisioning_state: str or
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ProvisioningState
    :param cluster_profile: The cluster profile.
    :type cluster_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ClusterProfile
    :param console_profile: The console profile.
    :type console_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ConsoleProfile
    :param service_principal_profile: The cluster service principal profile.
    :type service_principal_profile:
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.ServicePrincipalProfile
    :param network_profile: The cluster network profile.
    :type network_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.NetworkProfile
    :param master_profile: The cluster master profile.
    :type master_profile: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.MasterProfile
    :param worker_profiles: The cluster worker profiles.
    :type worker_profiles:
     list[~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.WorkerProfile]
    :param apiserver_profile: The cluster API server profile.
    :type apiserver_profile:
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.APIServerProfile
    :param ingress_profiles: The cluster ingress profiles.
    :type ingress_profiles:
     list[~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.IngressProfile]
    """

    _validation = {
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'cluster_profile': {'key': 'properties.clusterProfile', 'type': 'ClusterProfile'},
        'console_profile': {'key': 'properties.consoleProfile', 'type': 'ConsoleProfile'},
        'service_principal_profile': {'key': 'properties.servicePrincipalProfile', 'type': 'ServicePrincipalProfile'},
        'network_profile': {'key': 'properties.networkProfile', 'type': 'NetworkProfile'},
        'master_profile': {'key': 'properties.masterProfile', 'type': 'MasterProfile'},
        'worker_profiles': {'key': 'properties.workerProfiles', 'type': '[WorkerProfile]'},
        'apiserver_profile': {'key': 'properties.apiserverProfile', 'type': 'APIServerProfile'},
        'ingress_profiles': {'key': 'properties.ingressProfiles', 'type': '[IngressProfile]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OpenShiftClusterUpdate, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.system_data = None
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.cluster_profile = kwargs.get('cluster_profile', None)
        self.console_profile = kwargs.get('console_profile', None)
        self.service_principal_profile = kwargs.get('service_principal_profile', None)
        self.network_profile = kwargs.get('network_profile', None)
        self.master_profile = kwargs.get('master_profile', None)
        self.worker_profiles = kwargs.get('worker_profiles', None)
        self.apiserver_profile = kwargs.get('apiserver_profile', None)
        self.ingress_profiles = kwargs.get('ingress_profiles', None)


class Operation(msrest.serialization.Model):
    """Operation represents an RP operation.

    :param name: Operation name: {provider}/{resource}/{operation}.
    :type name: str
    :param display: The object that describes the operation.
    :type display: ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.Display
    :param origin: Sources of requests to this operation.  Comma separated list with valid values
     user or system, e.g. "user,system".
    :type origin: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'Display'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)


class OperationList(msrest.serialization.Model):
    """OperationList represents an RP operation list.

    :param value: List of operations supported by the resource provider.
    :type value: list[~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.Operation]
    :param next_link: The link used to get the next page of operations.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ServicePrincipalProfile(msrest.serialization.Model):
    """ServicePrincipalProfile represents a service principal profile.

    :param client_id: The client ID used for the cluster.
    :type client_id: str
    :param client_secret: The client secret used for the cluster.
    :type client_secret: str
    """

    _attribute_map = {
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServicePrincipalProfile, self).__init__(**kwargs)
        self.client_id = kwargs.get('client_id', None)
        self.client_secret = kwargs.get('client_secret', None)


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.CreatedByType
    :param last_modified_at: The type of identity that last modified the resource.
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class WorkerProfile(msrest.serialization.Model):
    """WorkerProfile represents a worker profile.

    :param name: The worker profile name.
    :type name: str
    :param vm_size: The size of the worker VMs. Possible values include: "Standard_D16as_v4",
     "Standard_D16s_v3", "Standard_D2s_v3", "Standard_D32as_v4", "Standard_D32s_v3",
     "Standard_D4as_v4", "Standard_D4s_v3", "Standard_D8as_v4", "Standard_D8s_v3",
     "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E4s_v3", "Standard_E64i_v3",
     "Standard_E64is_v3", "Standard_E8s_v3", "Standard_F16s_v2", "Standard_F32s_v2",
     "Standard_F4s_v2", "Standard_F72s_v2", "Standard_F8s_v2", "Standard_G5", "Standard_GS5",
     "Standard_M128ms".
    :type vm_size: str or ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.VMSize
    :param disk_size_gb: The disk size of the worker VMs.
    :type disk_size_gb: int
    :param subnet_id: The Azure resource ID of the worker subnet.
    :type subnet_id: str
    :param count: The number of worker VMs.
    :type count: int
    :param encryption_at_host: Whether master virtual machines are encrypted at host. Possible
     values include: "Disabled", "Enabled".
    :type encryption_at_host: str or
     ~azure.mgmt.redhatopenshift.v2021_09_01_preview.models.EncryptionAtHost
    :param disk_encryption_set_id: The resource ID of an associated DiskEncryptionSet, if
     applicable.
    :type disk_encryption_set_id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'vm_size': {'key': 'vmSize', 'type': 'str'},
        'disk_size_gb': {'key': 'diskSizeGB', 'type': 'int'},
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'encryption_at_host': {'key': 'encryptionAtHost', 'type': 'str'},
        'disk_encryption_set_id': {'key': 'diskEncryptionSetId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WorkerProfile, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.vm_size = kwargs.get('vm_size', None)
        self.disk_size_gb = kwargs.get('disk_size_gb', None)
        self.subnet_id = kwargs.get('subnet_id', None)
        self.count = kwargs.get('count', None)
        self.encryption_at_host = kwargs.get('encryption_at_host', None)
        self.disk_encryption_set_id = kwargs.get('disk_encryption_set_id', None)
