# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import APIServerProfile
from ._models_py3 import CloudErrorBody
from ._models_py3 import ClusterProfile
from ._models_py3 import ConsoleProfile
from ._models_py3 import Display
from ._models_py3 import EffectiveOutboundIP
from ._models_py3 import IngressProfile
from ._models_py3 import LoadBalancerProfile
from ._models_py3 import ManagedOutboundIPs
from ._models_py3 import ManagedServiceIdentity
from ._models_py3 import MasterProfile
from ._models_py3 import NetworkProfile
from ._models_py3 import OpenShiftCluster
from ._models_py3 import OpenShiftClusterAdminKubeconfig
from ._models_py3 import OpenShiftClusterCredentials
from ._models_py3 import OpenShiftClusterList
from ._models_py3 import OpenShiftClusterUpdate
from ._models_py3 import OpenShiftVersion
from ._models_py3 import OpenShiftVersionList
from ._models_py3 import Operation
from ._models_py3 import OperationList
from ._models_py3 import PlatformWorkloadIdentity
from ._models_py3 import PlatformWorkloadIdentityProfile
from ._models_py3 import PlatformWorkloadIdentityRole
from ._models_py3 import PlatformWorkloadIdentityRoleSet
from ._models_py3 import PlatformWorkloadIdentityRoleSetList
from ._models_py3 import ProxyResource
from ._models_py3 import Resource
from ._models_py3 import ServicePrincipalProfile
from ._models_py3 import SystemData
from ._models_py3 import TrackedResource
from ._models_py3 import UserAssignedIdentity
from ._models_py3 import WorkerProfile

from ._azure_red_hat_open_shift_client_enums import CreatedByType
from ._azure_red_hat_open_shift_client_enums import EncryptionAtHost
from ._azure_red_hat_open_shift_client_enums import FipsValidatedModules
from ._azure_red_hat_open_shift_client_enums import ManagedServiceIdentityType
from ._azure_red_hat_open_shift_client_enums import OutboundType
from ._azure_red_hat_open_shift_client_enums import PreconfiguredNSG
from ._azure_red_hat_open_shift_client_enums import ProvisioningState
from ._azure_red_hat_open_shift_client_enums import Visibility
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "APIServerProfile",
    "CloudErrorBody",
    "ClusterProfile",
    "ConsoleProfile",
    "Display",
    "EffectiveOutboundIP",
    "IngressProfile",
    "LoadBalancerProfile",
    "ManagedOutboundIPs",
    "ManagedServiceIdentity",
    "MasterProfile",
    "NetworkProfile",
    "OpenShiftCluster",
    "OpenShiftClusterAdminKubeconfig",
    "OpenShiftClusterCredentials",
    "OpenShiftClusterList",
    "OpenShiftClusterUpdate",
    "OpenShiftVersion",
    "OpenShiftVersionList",
    "Operation",
    "OperationList",
    "PlatformWorkloadIdentity",
    "PlatformWorkloadIdentityProfile",
    "PlatformWorkloadIdentityRole",
    "PlatformWorkloadIdentityRoleSet",
    "PlatformWorkloadIdentityRoleSetList",
    "ProxyResource",
    "Resource",
    "ServicePrincipalProfile",
    "SystemData",
    "TrackedResource",
    "UserAssignedIdentity",
    "WorkerProfile",
    "CreatedByType",
    "EncryptionAtHost",
    "FipsValidatedModules",
    "ManagedServiceIdentityType",
    "OutboundType",
    "PreconfiguredNSG",
    "ProvisioningState",
    "Visibility",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
