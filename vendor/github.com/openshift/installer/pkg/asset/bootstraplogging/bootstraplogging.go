package bootstraplogging

import (
	"os"

	"github.com/ghodss/yaml"
	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/types"
)

const (
	genevaCredentialsFilename = "bootstraplogging.yaml"
)

// BootstrapLoggingConfig generates the bootstraplogging.yaml file.
type BootstrapLoggingConfig struct {
	Credentials       *types.GenevaClusterLoggingCredentials
	Environment       string
	ConfigVersion     string
	ResourceID        string
	SubscriptionID    string
	ResourceName      string
	ResourceGroupName string
	File              *asset.File
}

var _ asset.WritableAsset = (*BootstrapLoggingConfig)(nil)

// Dependencies returns all of the dependencies directly needed by an
// BootstrapLoggingConfig asset.
func (a *BootstrapLoggingConfig) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the bootstraplogging.yaml file.
func (a *BootstrapLoggingConfig) Generate(parents asset.Parents) error {
	data, err := yaml.Marshal(a.Credentials)
	if err != nil {
		return errors.Wrap(err, "failed to Marshal BootstrapLoggingConfig")
	}
	a.File = &asset.File{
		Filename: genevaCredentialsFilename,
		Data:     data,
	}
	return nil
}

// Name returns the human-friendly name of the asset.
func (a *BootstrapLoggingConfig) Name() string {
	return "Geneva Credentials"
}

// Files returns the files generated by the asset.
func (a *BootstrapLoggingConfig) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns the installconfig from disk.
func (a *BootstrapLoggingConfig) Load(f asset.FileFetcher) (found bool, err error) {
	file, err := f.FetchByName(genevaCredentialsFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	creds := &types.GenevaClusterLoggingCredentials{}
	if err := yaml.Unmarshal(file.Data, creds); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", genevaCredentialsFilename)
	}
	a.Credentials = creds
	return true, nil
}
