package genevacredentials

import (
	"os"

	"github.com/ghodss/yaml"
	"github.com/pkg/errors"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/types"
)

const (
	genevaCredentialsFilename = "genevacredentials.yaml"
)

// GenevaCredentials generates the genevacredentials.yaml file.
type GenevaCredentials struct {
	ClusterLoggingCredentials *types.GenevaClusterLoggingCredentials
	File                      *asset.File
}

var _ asset.WritableAsset = (*GenevaCredentials)(nil)

// Dependencies returns all of the dependencies directly needed by an
// GenevaCredentials asset.
func (a *GenevaCredentials) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the genevacredentials.yaml file.
func (a *GenevaCredentials) Generate(parents asset.Parents) error {
	data, err := yaml.Marshal(a.ClusterLoggingCredentials)
	if err != nil {
		return errors.Wrap(err, "failed to Marshal GenevaCredentials")
	}
	a.File = &asset.File{
		Filename: genevaCredentialsFilename,
		Data:     data,
	}
	return nil
}

// Name returns the human-friendly name of the asset.
func (a *GenevaCredentials) Name() string {
	return "Geneva Credentials"
}

// Files returns the files generated by the asset.
func (a *GenevaCredentials) Files() []*asset.File {
	if a.File != nil {
		return []*asset.File{a.File}
	}
	return []*asset.File{}
}

// Load returns the genevacredentials from disk.
func (a *GenevaCredentials) Load(f asset.FileFetcher) (found bool, err error) {
	file, err := f.FetchByName(genevaCredentialsFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	creds := &types.GenevaClusterLoggingCredentials{}
	if err := yaml.Unmarshal(file.Data, creds); err != nil {
		return false, errors.Wrapf(err, "failed to unmarshal %s", genevaCredentialsFilename)
	}
	a.ClusterLoggingCredentials = creds
	return true, nil
}
