package bootkube

import (
	"os"
	"path/filepath"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/templates/content"
)

const (
	aroImageRegistryFileName = "aro-imageregistry.yaml.template"
)

var _ asset.WritableAsset = (*AROImageRegistry)(nil)

// AROImageRegistry is an asset for the openshift-apiserver namespace
type AROImageRegistry struct {
	FileList []*asset.File
}

// Dependencies returns all of the dependencies directly needed by the asset
func (t *AROImageRegistry) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Name returns the human-friendly name of the asset.
func (t *AROImageRegistry) Name() string {
	return "AROImageRegistry"
}

// Generate generates the actual files by this asset
func (t *AROImageRegistry) Generate(parents asset.Parents) error {
	b, err := content.GetBootkubeTemplate(aroImageRegistryFileName)
	if err != nil {
		return err
	}

	t.FileList = []*asset.File{
		{
			Filename: filepath.Join(content.TemplateDir, aroImageRegistryFileName),
			Data:     b,
		},
	}

	return nil
}

// Files returns the files generated by the asset.
func (t *AROImageRegistry) Files() []*asset.File {
	return t.FileList
}

// Load returns the asset from disk.
func (t *AROImageRegistry) Load(f asset.FileFetcher) (bool, error) {
	b, err := f.FetchByName(filepath.Join(content.TemplateDir, aroImageRegistryFileName))
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}

	t.FileList = []*asset.File{b}

	return true, nil
}
