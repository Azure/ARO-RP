// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	consolev1 "github.com/openshift/api/console/v1"
	applyconfigurationsconsolev1 "github.com/openshift/client-go/console/applyconfigurations/console/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeConsolePlugins implements ConsolePluginInterface
type FakeConsolePlugins struct {
	Fake *FakeConsoleV1
}

var consolepluginsResource = schema.GroupVersionResource{Group: "console.openshift.io", Version: "v1", Resource: "consoleplugins"}

var consolepluginsKind = schema.GroupVersionKind{Group: "console.openshift.io", Version: "v1", Kind: "ConsolePlugin"}

// Get takes name of the consolePlugin, and returns the corresponding consolePlugin object, and an error if there is any.
func (c *FakeConsolePlugins) Get(ctx context.Context, name string, options v1.GetOptions) (result *consolev1.ConsolePlugin, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(consolepluginsResource, name), &consolev1.ConsolePlugin{})
	if obj == nil {
		return nil, err
	}
	return obj.(*consolev1.ConsolePlugin), err
}

// List takes label and field selectors, and returns the list of ConsolePlugins that match those selectors.
func (c *FakeConsolePlugins) List(ctx context.Context, opts v1.ListOptions) (result *consolev1.ConsolePluginList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(consolepluginsResource, consolepluginsKind, opts), &consolev1.ConsolePluginList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &consolev1.ConsolePluginList{ListMeta: obj.(*consolev1.ConsolePluginList).ListMeta}
	for _, item := range obj.(*consolev1.ConsolePluginList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested consolePlugins.
func (c *FakeConsolePlugins) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(consolepluginsResource, opts))
}

// Create takes the representation of a consolePlugin and creates it.  Returns the server's representation of the consolePlugin, and an error, if there is any.
func (c *FakeConsolePlugins) Create(ctx context.Context, consolePlugin *consolev1.ConsolePlugin, opts v1.CreateOptions) (result *consolev1.ConsolePlugin, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(consolepluginsResource, consolePlugin), &consolev1.ConsolePlugin{})
	if obj == nil {
		return nil, err
	}
	return obj.(*consolev1.ConsolePlugin), err
}

// Update takes the representation of a consolePlugin and updates it. Returns the server's representation of the consolePlugin, and an error, if there is any.
func (c *FakeConsolePlugins) Update(ctx context.Context, consolePlugin *consolev1.ConsolePlugin, opts v1.UpdateOptions) (result *consolev1.ConsolePlugin, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(consolepluginsResource, consolePlugin), &consolev1.ConsolePlugin{})
	if obj == nil {
		return nil, err
	}
	return obj.(*consolev1.ConsolePlugin), err
}

// Delete takes name of the consolePlugin and deletes it. Returns an error if one occurs.
func (c *FakeConsolePlugins) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(consolepluginsResource, name, opts), &consolev1.ConsolePlugin{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeConsolePlugins) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(consolepluginsResource, listOpts)

	_, err := c.Fake.Invokes(action, &consolev1.ConsolePluginList{})
	return err
}

// Patch applies the patch and returns the patched consolePlugin.
func (c *FakeConsolePlugins) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *consolev1.ConsolePlugin, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(consolepluginsResource, name, pt, data, subresources...), &consolev1.ConsolePlugin{})
	if obj == nil {
		return nil, err
	}
	return obj.(*consolev1.ConsolePlugin), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied consolePlugin.
func (c *FakeConsolePlugins) Apply(ctx context.Context, consolePlugin *applyconfigurationsconsolev1.ConsolePluginApplyConfiguration, opts v1.ApplyOptions) (result *consolev1.ConsolePlugin, err error) {
	if consolePlugin == nil {
		return nil, fmt.Errorf("consolePlugin provided to Apply must not be nil")
	}
	data, err := json.Marshal(consolePlugin)
	if err != nil {
		return nil, err
	}
	name := consolePlugin.Name
	if name == nil {
		return nil, fmt.Errorf("consolePlugin.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(consolepluginsResource, *name, types.ApplyPatchType, data), &consolev1.ConsolePlugin{})
	if obj == nil {
		return nil, err
	}
	return obj.(*consolev1.ConsolePlugin), err
}
