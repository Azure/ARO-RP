package main

import (
	"flag"
	"log"
	"os"
	"regexp"
	"strings"
	"unicode"

	"github.com/jewzaam/go-cosmosdb/pkg/gencosmosdb"
)

var (
	pkg = flag.String("package", "cosmosdb", "package")

	packageRegexp          = regexp.MustCompile(`^package .*`)
	importRegexp           = regexp.MustCompile(`(?m)^\tpkg "[^"]+"$`)
	pluralRegexp           = regexp.MustCompile(`templates`)
	pluralExportedRegexp   = regexp.MustCompile(`Templates`)
	singularRegexp         = regexp.MustCompile(`template`)
	singularExportedRegexp = regexp.MustCompile(`Template`)
)

func writeFile(filename string, data []byte) error {
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()

	data = packageRegexp.ReplaceAll(data, []byte("// Code generated by github.com/jewzaam/go-cosmosdb, DO NOT EDIT.\n\npackage "+*pkg))

	_, err = f.Write(data)
	return err
}

func unexport(s string) string {
	rs := []rune(s)
	rs[0] = unicode.ToLower(rs[0])
	return string(rs)
}

func run() error {
	for _, name := range gencosmosdb.AssetNames() {
		if name == "template.go" || name == "template_fake.go" {
			continue
		}

		err := writeFile("zz_generated_"+name, gencosmosdb.MustAsset(name))
		if err != nil {
			return err
		}
	}

	for _, arg := range flag.Args() {
		filesToGenerate := []string{"template.go", "template_fake.go"}
		args := strings.Split(arg, ",")

		importpkg := args[0]
		singularExported := args[1]
		pluralExported := singularExported + "s"
		if len(args) == 3 {
			pluralExported = args[2]
		}
		singular := unexport(singularExported)
		plural := unexport(pluralExported)

		for _, filename := range filesToGenerate {
			data := gencosmosdb.MustAsset(filename)
			data = importRegexp.ReplaceAll(data, []byte("\tpkg \""+importpkg+"\""))

			// plural must be done before singular ("template" is a sub-string of "templates")
			data = pluralRegexp.ReplaceAll(data, []byte(plural))
			data = pluralExportedRegexp.ReplaceAll(data, []byte(pluralExported))
			data = singularRegexp.ReplaceAll(data, []byte(singular))
			data = singularExportedRegexp.ReplaceAll(data, []byte(singularExported))

			generatedFilename := strings.Replace(filename, "template", strings.ToLower(singularExported), 1)
			err := writeFile("zz_generated_"+generatedFilename, data)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func main() {
	flag.Parse()

	if err := run(); err != nil {
		log.Fatal(err)
	}
}
