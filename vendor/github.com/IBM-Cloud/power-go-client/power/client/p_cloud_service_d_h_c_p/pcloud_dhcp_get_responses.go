// Code generated by go-swagger; DO NOT EDIT.

package p_cloud_service_d_h_c_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// PcloudDhcpGetReader is a Reader for the PcloudDhcpGet structure.
type PcloudDhcpGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PcloudDhcpGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPcloudDhcpGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPcloudDhcpGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPcloudDhcpGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPcloudDhcpGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPcloudDhcpGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPcloudDhcpGetOK creates a PcloudDhcpGetOK with default headers values
func NewPcloudDhcpGetOK() *PcloudDhcpGetOK {
	return &PcloudDhcpGetOK{}
}

/* PcloudDhcpGetOK describes a response with status code 200, with default header values.

OK
*/
type PcloudDhcpGetOK struct {
	Payload *models.DHCPServerDetail
}

func (o *PcloudDhcpGetOK) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpGetOK  %+v", 200, o.Payload)
}
func (o *PcloudDhcpGetOK) GetPayload() *models.DHCPServerDetail {
	return o.Payload
}

func (o *PcloudDhcpGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DHCPServerDetail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpGetBadRequest creates a PcloudDhcpGetBadRequest with default headers values
func NewPcloudDhcpGetBadRequest() *PcloudDhcpGetBadRequest {
	return &PcloudDhcpGetBadRequest{}
}

/* PcloudDhcpGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PcloudDhcpGetBadRequest struct {
	Payload *models.Error
}

func (o *PcloudDhcpGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpGetBadRequest  %+v", 400, o.Payload)
}
func (o *PcloudDhcpGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudDhcpGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpGetForbidden creates a PcloudDhcpGetForbidden with default headers values
func NewPcloudDhcpGetForbidden() *PcloudDhcpGetForbidden {
	return &PcloudDhcpGetForbidden{}
}

/* PcloudDhcpGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PcloudDhcpGetForbidden struct {
	Payload *models.Error
}

func (o *PcloudDhcpGetForbidden) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpGetForbidden  %+v", 403, o.Payload)
}
func (o *PcloudDhcpGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudDhcpGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpGetNotFound creates a PcloudDhcpGetNotFound with default headers values
func NewPcloudDhcpGetNotFound() *PcloudDhcpGetNotFound {
	return &PcloudDhcpGetNotFound{}
}

/* PcloudDhcpGetNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PcloudDhcpGetNotFound struct {
	Payload *models.Error
}

func (o *PcloudDhcpGetNotFound) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpGetNotFound  %+v", 404, o.Payload)
}
func (o *PcloudDhcpGetNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudDhcpGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpGetInternalServerError creates a PcloudDhcpGetInternalServerError with default headers values
func NewPcloudDhcpGetInternalServerError() *PcloudDhcpGetInternalServerError {
	return &PcloudDhcpGetInternalServerError{}
}

/* PcloudDhcpGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PcloudDhcpGetInternalServerError struct {
	Payload *models.Error
}

func (o *PcloudDhcpGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpGetInternalServerError  %+v", 500, o.Payload)
}
func (o *PcloudDhcpGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudDhcpGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
