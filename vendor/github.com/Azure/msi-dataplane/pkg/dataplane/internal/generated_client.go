// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internal

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for DeleteidentityParamsApiVersion.
const (
	DeleteidentityParamsApiVersionN20240101T000000Z DeleteidentityParamsApiVersion = "2024-01-01T00:00:00Z"
)

// Defines values for GetcredParamsApiVersion.
const (
	GetcredParamsApiVersionN20240101T000000Z GetcredParamsApiVersion = "2024-01-01T00:00:00Z"
)

// Defines values for GetcredsParamsApiVersion.
const (
	GetcredsParamsApiVersionN20240101T000000Z GetcredsParamsApiVersion = "2024-01-01T00:00:00Z"
)

// Defines values for MoveidentityParamsApiVersion.
const (
	MoveidentityParamsApiVersionN20240101T000000Z MoveidentityParamsApiVersion = "2024-01-01T00:00:00Z"
)

// CredRequestDefinition defines model for CredRequestDefinition.
type CredRequestDefinition struct {
	// CustomClaims The custom claims to include into X509 Certificate
	CustomClaims *CustomClaims `json:"customClaims,omitempty"`

	// DelegatedResources The source resource identities.
	DelegatedResources *[]string `json:"delegatedResources,omitempty"`

	// IdentityIds The identities to retrieve.
	IdentityIds *[]string `json:"identityIds,omitempty"`
}

// CustomClaims The custom claims to include into X509 Certificate
type CustomClaims struct {
	// XmsAzNwperimid The list of network perimeter ids. Maximum 5 network perimeter ids are supported
	XmsAzNwperimid *[]string `json:"xms_az_nwperimid,omitempty"`

	// XmsAzTm The trust mode of the azure resource asserted by RP. The value can either be 'azureinfra' or 'user'
	XmsAzTm *string `json:"xms_az_tm,omitempty"`
}

// DelegatedResource A delegated resource credentials object
type DelegatedResource struct {
	// DelegationId MIRP delegationRecord persistent id.
	DelegationId *string `json:"delegation_id,omitempty"`

	// DelegationUrl URL to perform RP-to-RP delegation for non-ARM resources, requiring manual onboarding via MIRP team.
	DelegationUrl *string `json:"delegation_url,omitempty"`

	// ExplicitIdentities The identities requested by the caller.
	ExplicitIdentities *[]UserAssignedIdentityCredentials `json:"explicit_identities,omitempty"`

	// ImplicitIdentity A managed identity credentials object.
	ImplicitIdentity *UserAssignedIdentityCredentials `json:"implicit_identity,omitempty"`

	// InternalId Source resource Azure resource internal id.
	InternalId *string `json:"internal_id,omitempty"`

	// ResourceId Source resource Azure resource id.
	ResourceId *string `json:"resource_id,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *struct {
		// Code The error code.
		Code *string `json:"code,omitempty"`

		// Message A message describing the error.
		Message *string `json:"message,omitempty"`
	} `json:"error,omitempty"`
}

// ManagedIdentityCredentials A system assigned managed identity + user assigned managed identity array.
type ManagedIdentityCredentials struct {
	// AuthenticationEndpoint The AAD authentication endpoint for the identity system assigned identity. You can make token request toward this authentication endpoint.
	AuthenticationEndpoint *string `json:"authentication_endpoint,omitempty"`

	// CannotRenewAfter The time after which the system assigned client_secret cannot be used to call client_secret_url for a refreshed credential in the formate 2017-03-01T14:11:00Z.
	CannotRenewAfter *string `json:"cannot_renew_after,omitempty"`

	// ClientId The AAD client id for the system assigned identity.
	ClientId *string `json:"client_id,omitempty"`

	// ClientSecret The base64 encoded private key X509 certificate for the system assigned identity, encrypted via AES256+SHA256.
	ClientSecret *string `json:"client_secret,omitempty"`

	// ClientSecretUrl A refreshed version of the URL used to retrieve credentials for the system assigned identity.
	ClientSecretUrl *string `json:"client_secret_url,omitempty"`

	// CustomClaims The custom claims to include into X509 Certificate
	CustomClaims *CustomClaims `json:"custom_claims,omitempty"`

	// DelegatedResources The delegated resources' credentials requested by the caller.
	DelegatedResources *[]DelegatedResource `json:"delegated_resources,omitempty"`

	// DelegationUrl URL to perform RP-to-RP delegation for non-ARM resources, requiring manual onboarding via MIRP team.
	DelegationUrl *string `json:"delegation_url,omitempty"`

	// ExplicitIdentities The user assigned identities requested by the caller. This array will be empty for system assigned credential only requests.
	ExplicitIdentities *[]UserAssignedIdentityCredentials `json:"explicit_identities,omitempty"`

	// InternalId An internal identifier for the resource in managed identity RP.
	InternalId *string `json:"internal_id,omitempty"`

	// MtlsAuthenticationEndpoint The AAD mTLS authentication endpoint for the system assigned identity. You can make a token request with a short-lived credential toward this authentication endpoint.
	MtlsAuthenticationEndpoint *string `json:"mtls_authentication_endpoint,omitempty"`

	// NotAfter The time at which the system assigned credential becomes invalid for retireving AAD tokens in the format 2017-03-01T14:11:00Z.
	NotAfter *string `json:"not_after,omitempty"`

	// NotBefore The time at which the system assigned credential becomes valid for retireving AAD tokens in the format 2017-03-01T14:11:00Z.
	NotBefore *string `json:"not_before,omitempty"`

	// ObjectId The AAD object id for the system assigned identity.
	ObjectId *string `json:"object_id,omitempty"`

	// RenewAfter The time after which a call to the system assigned client_secret_url will return a new credential in the format 2017-03-01T14:11:00Z.
	RenewAfter *string `json:"renew_after,omitempty"`

	// TenantId The AAD tenant id for the system assigned identity.
	TenantId *string `json:"tenant_id,omitempty"`
}

// MoveIdentityResponse defines model for MoveIdentityResponse.
type MoveIdentityResponse struct {
	// IdentityUrl the new identity url of the resource.
	IdentityUrl *string `json:"identityUrl,omitempty"`
}

// MoveRequestBodyDefinition defines model for MoveRequestBodyDefinition.
type MoveRequestBodyDefinition struct {
	// TargetResourceId New Resource Id of the resource that will be moved to.
	TargetResourceId *string `json:"targetResourceId,omitempty"`
}

// UserAssignedIdentityCredentials A managed identity credentials object.
type UserAssignedIdentityCredentials struct {
	// AuthenticationEndpoint The AAD authentication endpoint for the user assigned identity. You can make token request toward this authentication endpoint.
	AuthenticationEndpoint *string `json:"authentication_endpoint,omitempty"`

	// CannotRenewAfter The time after which the user assigned client_secret cannot be used to call client_secret_url for a refreshed credential in the formate 2017-03-01T14:11:00Z.
	CannotRenewAfter *string `json:"cannot_renew_after,omitempty"`

	// ClientId The AAD client id for the user assigned identity.
	ClientId *string `json:"client_id,omitempty"`

	// ClientSecret The base64 encoded private key X509 certificate for the user assigned identity, encrypted via AES256+SHA256.
	ClientSecret *string `json:"client_secret,omitempty"`

	// ClientSecretUrl A refreshed version of the URL used to retrieve credentials for the user assigned identity.
	ClientSecretUrl *string `json:"client_secret_url,omitempty"`

	// CustomClaims The custom claims to include into X509 Certificate
	CustomClaims *CustomClaims `json:"custom_claims,omitempty"`

	// MtlsAuthenticationEndpoint The AAD mTLS authentication endpoint for the system assigned identity. You can make a token request with a short-lived credential toward this authentication endpoint.
	MtlsAuthenticationEndpoint *string `json:"mtls_authentication_endpoint,omitempty"`

	// NotAfter The time at which the user assigned credential becomes invalid for retireving AAD tokens in the format 2017-03-01T14:11:00Z.
	NotAfter *string `json:"not_after,omitempty"`

	// NotBefore The time at which the user assigned credential becomes valid for retireving AAD tokens in the format 2017-03-01T14:11:00Z.
	NotBefore *string `json:"not_before,omitempty"`

	// ObjectId The AAD object id for the user assigned identity.
	ObjectId *string `json:"object_id,omitempty"`

	// RenewAfter The time after which a call to the user assigned client_secret_url will return a new credential in the format 2017-03-01T14:11:00Z.
	RenewAfter *string `json:"renew_after,omitempty"`

	// ResourceId The ARM resource id for the user assigned identity.
	ResourceId *string `json:"resource_id,omitempty"`

	// TenantId The AAD tenant id for the user assigned identity.
	TenantId *string `json:"tenant_id,omitempty"`
}

// DeleteidentityParams defines parameters for Deleteidentity.
type DeleteidentityParams struct {
	// ApiVersion The api version to use in the call. The caller must add this, it isn't included in the x-ms-identity-url header from ARM.
	ApiVersion DeleteidentityParamsApiVersion `form:"api-version" json:"api-version"`
}

// DeleteidentityParamsApiVersion defines parameters for Deleteidentity.
type DeleteidentityParamsApiVersion string

// GetcredParams defines parameters for Getcred.
type GetcredParams struct {
	// ApiVersion The api version to use in the call. The caller must add this, it isn't included in the x-ms-identity-url header from ARM.
	ApiVersion GetcredParamsApiVersion `form:"api-version" json:"api-version"`
}

// GetcredParamsApiVersion defines parameters for Getcred.
type GetcredParamsApiVersion string

// GetcredsParams defines parameters for Getcreds.
type GetcredsParams struct {
	// ApiVersion The api version to use in the call. The caller must add this, it isn't included in the x-ms-identity-url header from ARM.
	ApiVersion GetcredsParamsApiVersion `form:"api-version" json:"api-version"`
}

// GetcredsParamsApiVersion defines parameters for Getcreds.
type GetcredsParamsApiVersion string

// MoveidentityParams defines parameters for Moveidentity.
type MoveidentityParams struct {
	// ApiVersion The api version to use in the call. The caller must add this, it isn't included in the x-ms-identity-url header from ARM.
	ApiVersion MoveidentityParamsApiVersion `form:"api-version" json:"api-version"`
}

// MoveidentityParamsApiVersion defines parameters for Moveidentity.
type MoveidentityParamsApiVersion string

// GetcredsJSONRequestBody defines body for Getcreds for application/json ContentType.
type GetcredsJSONRequestBody = CredRequestDefinition

// MoveidentityJSONRequestBody defines body for Moveidentity for application/json ContentType.
type MoveidentityJSONRequestBody = MoveRequestBodyDefinition

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Deleteidentity request
	Deleteidentity(ctx context.Context, params *DeleteidentityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcred request
	Getcred(ctx context.Context, params *GetcredParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetcredsWithBody request with any body
	GetcredsWithBody(ctx context.Context, params *GetcredsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Getcreds(ctx context.Context, params *GetcredsParams, body GetcredsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MoveidentityWithBody request with any body
	MoveidentityWithBody(ctx context.Context, params *MoveidentityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Moveidentity(ctx context.Context, params *MoveidentityParams, body MoveidentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Deleteidentity(ctx context.Context, params *DeleteidentityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteidentityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcred(ctx context.Context, params *GetcredParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcredRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetcredsWithBody(ctx context.Context, params *GetcredsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcredsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcreds(ctx context.Context, params *GetcredsParams, body GetcredsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcredsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MoveidentityWithBody(ctx context.Context, params *MoveidentityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveidentityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Moveidentity(ctx context.Context, params *MoveidentityParams, body MoveidentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveidentityRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteidentityRequest generates requests for Deleteidentity
func NewDeleteidentityRequest(server string, params *DeleteidentityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, params.ApiVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcredRequest generates requests for Getcred
func NewGetcredRequest(server string, params *GetcredParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, params.ApiVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcredsRequest calls the generic Getcreds builder with application/json body
func NewGetcredsRequest(server string, params *GetcredsParams, body GetcredsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetcredsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetcredsRequestWithBody generates requests for Getcreds with any type of body
func NewGetcredsRequestWithBody(server string, params *GetcredsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, params.ApiVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMoveidentityRequest calls the generic Moveidentity builder with application/json body
func NewMoveidentityRequest(server string, params *MoveidentityParams, body MoveidentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMoveidentityRequestWithBody(server, params, "application/json", bodyReader)
}

// NewMoveidentityRequestWithBody generates requests for Moveidentity with any type of body
func NewMoveidentityRequestWithBody(server string, params *MoveidentityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proxy/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, params.ApiVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteidentityWithResponse request
	DeleteidentityWithResponse(ctx context.Context, params *DeleteidentityParams, reqEditors ...RequestEditorFn) (*DeleteidentityResponse, error)

	// GetcredWithResponse request
	GetcredWithResponse(ctx context.Context, params *GetcredParams, reqEditors ...RequestEditorFn) (*GetcredResponse, error)

	// GetcredsWithBodyWithResponse request with any body
	GetcredsWithBodyWithResponse(ctx context.Context, params *GetcredsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetcredsResponse, error)

	GetcredsWithResponse(ctx context.Context, params *GetcredsParams, body GetcredsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetcredsResponse, error)

	// MoveidentityWithBodyWithResponse request with any body
	MoveidentityWithBodyWithResponse(ctx context.Context, params *MoveidentityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveidentityResponse, error)

	MoveidentityWithResponse(ctx context.Context, params *MoveidentityParams, body MoveidentityJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveidentityResponse, error)
}

type DeleteidentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON405      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteidentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteidentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetcredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagedIdentityCredentials
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetcredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetcredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetcredsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagedIdentityCredentials
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON405      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetcredsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetcredsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveidentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MoveIdentityResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON405      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MoveidentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveidentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteidentityWithResponse request returning *DeleteidentityResponse
func (c *ClientWithResponses) DeleteidentityWithResponse(ctx context.Context, params *DeleteidentityParams, reqEditors ...RequestEditorFn) (*DeleteidentityResponse, error) {
	rsp, err := c.Deleteidentity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteidentityResponse(rsp)
}

// GetcredWithResponse request returning *GetcredResponse
func (c *ClientWithResponses) GetcredWithResponse(ctx context.Context, params *GetcredParams, reqEditors ...RequestEditorFn) (*GetcredResponse, error) {
	rsp, err := c.Getcred(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcredResponse(rsp)
}

// GetcredsWithBodyWithResponse request with arbitrary body returning *GetcredsResponse
func (c *ClientWithResponses) GetcredsWithBodyWithResponse(ctx context.Context, params *GetcredsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetcredsResponse, error) {
	rsp, err := c.GetcredsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcredsResponse(rsp)
}

func (c *ClientWithResponses) GetcredsWithResponse(ctx context.Context, params *GetcredsParams, body GetcredsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetcredsResponse, error) {
	rsp, err := c.Getcreds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcredsResponse(rsp)
}

// MoveidentityWithBodyWithResponse request with arbitrary body returning *MoveidentityResponse
func (c *ClientWithResponses) MoveidentityWithBodyWithResponse(ctx context.Context, params *MoveidentityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MoveidentityResponse, error) {
	rsp, err := c.MoveidentityWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveidentityResponse(rsp)
}

func (c *ClientWithResponses) MoveidentityWithResponse(ctx context.Context, params *MoveidentityParams, body MoveidentityJSONRequestBody, reqEditors ...RequestEditorFn) (*MoveidentityResponse, error) {
	rsp, err := c.Moveidentity(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveidentityResponse(rsp)
}

// ParseDeleteidentityResponse parses an HTTP response from a DeleteidentityWithResponse call
func ParseDeleteidentityResponse(rsp *http.Response) (*DeleteidentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteidentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetcredResponse parses an HTTP response from a GetcredWithResponse call
func ParseGetcredResponse(rsp *http.Response) (*GetcredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetcredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagedIdentityCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetcredsResponse parses an HTTP response from a GetcredsWithResponse call
func ParseGetcredsResponse(rsp *http.Response) (*GetcredsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetcredsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagedIdentityCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseMoveidentityResponse parses an HTTP response from a MoveidentityWithResponse call
func ParseMoveidentityResponse(rsp *http.Response) (*MoveidentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveidentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MoveIdentityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
