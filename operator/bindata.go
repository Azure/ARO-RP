// Package operator Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config/output/crd.yaml
// config/output/resources.yaml
package operator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _outputCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdf\x73\xdb\xb8\xf1\x7f\xf7\x5f\xb1\xa3\x7b\xf0\xf7\x66\x2c\xea\x9b\x74\x3a\xd3\xd1\x5b\x26\xb9\xbb\x51\x7b\x4d\x32\xb6\x9b\x97\x38\x0f\x2b\x60\x45\x6e\x0d\x02\x2c\x00\x4a\x56\x3a\xfd\xdf\x3b\x0b\x90\x12\x25\x93\xb1\xe3\x9b\xbb\xf2\xc5\x26\x08\xec\x2f\x7c\xf6\xb3\x0b\x08\x1b\xfe\x44\x3e\xb0\xb3\x4b\xc0\x86\xe9\x21\x92\x95\xb7\x50\xdc\xff\x25\x14\xec\x16\xdb\x57\x6b\x8a\xf8\xea\xe2\x9e\xad\x5e\xc2\xdb\x36\x44\x57\x5f\x53\x70\xad\x57\xf4\x8e\x36\x6c\x39\xb2\xb3\x17\x35\x45\xd4\x18\x71\x79\x01\x80\xd6\xba\x88\x32\x1c\xe4\x15\x40\x39\x1b\xbd\x33\x86\xfc\xbc\x24\x5b\xdc\xb7\x6b\x5a\xb7\x6c\x34\xf9\xa4\xa1\xd7\xbf\xfd\xff\xe2\x75\xf1\xe7\x0b\x00\xe5\x29\x2d\xbf\xe5\x9a\x42\xc4\xba\x59\x82\x6d\x8d\xb9\x00\xb0\x58\xd3\x12\x94\x69\x43\x24\x1f\x0a\xf4\xae\x70\x0d\xd9\x50\xf1\x26\x16\xec\x2e\x42\x43\x4a\x74\x96\xde\xb5\xcd\x12\x1e\x7d\xcf\x12\x3a\xb3\x3a\x97\xb2\xb0\x34\x62\x38\xc4\xbf\x0d\x47\x7f\xe5\x10\xd3\x97\xc6\xb4\x1e\xcd\x51\x75\x1a\x0c\x6c\xcb\xd6\xa0\x3f\x0c\x5f\x00\x04\xe5\x1a\x5a\xc2\x7b\x51\xd3\xa0\x22\x7d\x01\xb0\x45\xc3\x3a\x79\x94\x15\x8b\x49\x6f\x3e\xae\x3e\xfd\xe9\x46\x55\x54\x63\x1e\x04\xd0\x14\x94\xe7\x26\xcd\xeb\x0d\x00\x0e\x10\x2b\x82\x3c\x13\x36\xce\xa7\xd7\xde\x0c\x78\xf3\x71\xd5\xad\x6e\xbc\x6b\xc8\x47\xee\xbd\x93\x67\xb0\xbb\x87\xb1\x33\x3d\x97\x62\x48\x9e\x03\x5a\xf6\x93\xb2\xc2\x6e\x57\x48\x43\xc8\xaa\xdd\x06\x62\xc5\x01\x3c\x35\x9e\x02\xd9\xbc\xc3\x03\xb1\x20\x53\xd0\x82\x5b\xff\x93\x54\x2c\xe0\x86\xbc\x08\x81\x50\xb9\xd6\x68\x01\xc1\x96\x7c\x04\x4f\xca\x95\x96\xbf\x1e\x24\x07\x88\x2e\xa9\x34\x18\xa9\x0b\x77\xff\xb0\x8d\xe4\x2d\x1a\x09\x61\x4b\x57\x80\x56\x43\x8d\x7b\xf0\x24\x3a\xa0\xb5\x03\x69\x69\x4a\x28\xe0\xef\xce\x13\xb0\xdd\xb8\x25\x54\x31\x36\x61\xb9\x58\x94\x1c\x7b\x3c\x2b\x57\xd7\xad\xe5\xb8\x5f\x24\x54\xf2\xba\x8d\xce\x87\x85\xa6\x2d\x99\x45\xe0\x72\x8e\x5e\x55\x1c\x49\xc5\xd6\xd3\x02\x1b\x9e\x27\xc3\x6d\x82\x73\x51\xeb\x1f\x7c\x07\xfe\x70\x39\xb0\x34\xee\x65\xd3\x43\xf4\x6c\xcb\xc3\x70\xc2\xd7\x64\xdc\x05\x67\xb2\xbb\xd8\x2d\xcb\xf6\x1f\xc3\x2b\x43\x12\x95\xeb\x9f\x6e\x6e\xa1\x57\x9a\xb6\xe0\x34\xe6\x29\xda\xc7\x65\xe1\x18\x78\x09\x14\xdb\x0d\xf9\xbc\x71\x1b\xef\xea\x24\x91\xac\x6e\x1c\xdb\xd8\x21\x89\xc9\x9e\x06\x3d\xb4\xeb\x9a\xa3\xec\xf4\xbf\x5a\x0a\x51\xf6\xa7\x80\xb7\x29\xab\x61\x4d\xd0\x36\x1a\x23\xe9\x02\x56\x16\xde\x62\x4d\xe6\x2d\x06\xfa\xdd\xc3\x2e\x11\x0e\x73\x09\xe9\xd3\x81\x1f\x92\xd1\xe9\xc4\x1c\xad\xc3\x70\x4f\x17\xa3\x3b\xd4\x65\xe0\x4d\x43\xea\x24\x33\x34\x05\xf6\x82\xde\x88\x91\x04\xf3\x43\x06\x99\xce\xc5\x94\x8f\xca\x0b\x31\x9c\x0e\x4e\x38\x21\x4f\x49\x96\xb6\xf8\xab\x2b\x4b\xb6\xe5\xf9\xaa\x29\x25\x90\x19\x77\xc3\xe5\x48\xee\x3f\xa9\x32\xc5\xcf\x59\x8e\x4e\x3e\xfd\xf2\xf6\xe6\x27\xbb\x65\xef\x6c\x4d\x36\xfe\x36\x41\xd7\x54\xfe\x36\x63\x6e\xc9\xe2\x0b\x8c\xb0\x3d\x15\x7f\xe7\xca\x51\xc4\xc8\xd3\x27\xe3\x4a\x9f\x4b\x3c\xc1\x4f\x5f\x25\x57\xef\x7a\x12\x7f\xf3\xb5\xf5\x34\x58\x9e\x39\x95\x06\xd5\xe3\x19\xa6\x8d\x03\x39\x62\x6c\xc3\x93\x50\x4e\xb3\x4e\xc0\xec\xd6\x41\xd8\xe2\x45\x68\x56\xce\x6a\x1e\x94\xf9\x29\xe5\x87\x69\x1d\xdd\x51\x4c\x7a\xfa\x61\x60\x1b\x22\x5a\x45\xa1\x38\x13\xc3\x91\xea\x11\x70\x9f\x48\x9f\x1d\xe5\x1c\x39\x30\x97\x21\xf1\x2c\x15\xa9\x93\xc2\x74\x19\xb2\xaf\xe7\xca\xe4\x19\x98\x8a\x9e\x64\xcd\xa1\x21\x82\x9a\x54\x85\x96\x43\x9d\x8a\x92\xd5\xa4\xa5\x6e\x09\x1f\x06\xd2\xb0\xab\xc8\x4a\x40\x47\x84\x6a\x8a\xc8\x26\x1c\x8c\x38\x9a\x25\x3a\x84\x54\x11\x1a\xcf\xce\x33\xdc\x5b\xb7\xb3\xe0\x3c\xec\x52\xc9\x4c\xdf\x9a\xc6\xec\xc7\x80\xeb\x00\x8d\x39\xc6\x2e\x89\x87\x92\xb7\x64\x41\x4a\x4b\x01\x77\x76\xe8\x4f\x57\x85\xd7\x04\xa8\x75\xea\x4a\x46\x24\xd2\x43\x63\x58\x71\x34\xfb\x5c\xae\xf7\x83\xbd\x87\x58\x61\x14\x67\x7d\x48\x65\x58\xb9\xba\x71\x36\x45\x5b\xa5\x60\xad\x5d\x1b\x47\xc4\x7a\x8c\x55\x2a\x41\x68\x53\x45\x61\x9f\x2b\x9b\x0b\x74\x22\x3d\xc5\x32\x95\x2b\x21\xd7\x54\xac\x9c\xac\x1c\x11\x39\x88\x61\x28\xe0\x83\x55\xd4\x61\x5a\x5f\x25\x50\xd7\x84\x56\x94\xa4\x90\x1c\xf1\xa1\xd0\x42\xae\x61\x23\x32\x65\x73\x4b\xd2\x80\x7e\xcd\xd1\xa3\x67\xb3\x87\x39\xb0\xcc\x56\xae\xa6\x00\x0d\xfa\xd8\x27\xec\x9b\x8f\xab\xdc\x8b\x54\x98\xd3\x28\x60\x3d\x26\x74\x8d\xea\x7e\x87\x5e\x87\x79\x9a\xbd\x71\x3e\xbf\x49\xec\x30\xf2\x9a\x0d\xc7\x14\x6a\x45\xde\x76\x08\xd9\x67\xb7\x93\xbe\x31\xdf\x0f\x16\x14\xb3\x47\x9f\xbf\x55\x12\x00\x0c\x86\x78\xeb\xd1\x06\xee\x9b\xeb\xb1\x59\x20\x66\xd6\x18\x97\x20\x65\x7e\x1e\x79\xd4\xb3\x27\x38\x57\x6a\x70\x08\x58\x4e\x68\x78\x62\xad\x27\x0c\xe3\x95\x62\x8a\x5a\xae\xd3\x0a\xe1\x97\xb3\xe4\x44\x70\x96\xe6\x3b\xe7\xf5\xd5\xb1\x59\x19\x15\x0c\x67\x9d\xed\x81\x9c\x31\x52\xe9\xfc\x5e\xde\x15\xb6\x81\x0e\x1f\x5a\xef\xc9\xc6\x8e\x7b\xc7\xe8\x44\x9e\x55\x1c\xb1\x2a\x51\x06\xdb\xb4\xf3\x2c\x12\xdb\xd8\xb4\xf1\x0a\x42\xab\x2a\xc0\x90\x6c\x36\x6c\xa7\x0c\x95\x03\x94\x8a\x06\x4a\x61\xd2\x6e\xa9\xe0\x8b\x2d\x84\xb6\xae\xd1\xf3\xd7\x04\x7f\x95\x4d\xec\xd8\x21\x19\x3f\x61\xe7\x13\x1b\xf2\xb8\xbc\x3c\x7b\x69\xfa\xfc\xf4\x4e\x1e\x69\xfc\x76\xdf\x50\x5f\x30\x65\xf1\x21\xdc\x87\x3c\x4e\xae\x86\x89\xd8\xc4\x7d\xc3\x0a\x8d\xd9\x4b\xea\xf7\x1b\xae\x41\x10\x20\xc4\x1a\x2a\xe7\x23\x34\x95\x4f\x3d\xeb\x90\x22\x93\xb2\x29\xa9\x1d\x7b\xb2\xd5\x2c\x78\xe8\xaa\x25\x27\xca\x87\xbb\x19\xae\xad\xe4\x8c\x99\x47\xdf\xd2\xdd\x0c\x1a\x67\xd0\x73\xdc\x17\xf0\xb3\x1b\x23\x30\x79\xe8\x01\xeb\xc6\xd0\x15\xf0\xb9\x7f\xbd\x96\x90\xab\x0a\x8a\x38\x56\xfb\x8c\xa3\x74\x96\xbc\x9a\x72\x3e\x59\xc3\x21\x9f\x38\xef\x66\xa0\x30\xa4\x60\x36\xde\xad\x71\x6d\xf6\x69\x86\xd8\x7a\x05\xc1\x9d\xaa\xfd\xb6\xe7\x6b\x49\x04\x63\x48\xc3\xdd\x6c\x65\x3b\xf1\x23\x0c\x04\x4f\x21\x22\x97\x00\x7a\xd4\x3a\x01\xcc\x3b\x98\x8d\x7c\x10\x89\x8f\x86\x27\xfb\xb3\xfe\x13\x7a\x8f\xfb\xb3\xce\x4d\xce\x98\xfa\x43\x5a\xf3\x08\xcf\xcf\x69\x37\xf2\xd2\x6b\xda\x50\x4a\xac\x74\xb5\x81\x6c\x03\x90\x75\x6d\x59\xa5\x03\x90\xb0\x67\x02\x94\x03\x43\x11\xf6\xae\x1d\x09\x13\x5b\x39\x7c\x44\xc1\x64\xed\x34\x6f\xf2\xd6\x78\xea\xea\x5f\x77\x88\xfe\x4e\x86\x1f\x3f\xef\x4f\xb8\xf2\xe6\xe3\xaa\x3f\xe5\xf7\x39\xe6\xb3\x5f\x23\x7a\xe1\xe9\x4c\xdf\x30\x19\xfd\x11\x63\xf5\x0c\xdd\x97\xab\x4d\xe7\x6b\x6a\x06\x9c\x80\x9c\x49\xd1\x49\xa7\x96\x9a\x1b\x42\x69\x93\x27\xc0\x29\x0d\x9a\x8d\xec\xa9\x5b\x71\x95\x4f\xba\xdd\x81\xfa\x78\xf1\x20\x5b\x04\x98\xb3\x02\xfe\x7a\xf3\xe1\xfd\xe2\x17\x37\x21\x32\x79\x01\xa8\x14\x85\xae\x51\x94\x93\xcf\x91\x9a\xbb\xd3\xdf\x4d\x6a\x21\x6b\xb4\xbc\xa1\x10\x8b\x4e\x07\xf9\xf0\xf9\xf5\x97\xa9\x52\xf0\xb3\xf3\x8f\xb2\xfe\x70\x7c\xef\x01\xc5\x21\x87\xe3\x20\x11\x76\x1c\x2b\x9e\x4a\x4f\x21\x07\xdd\xb9\x9d\x9b\xc6\x88\xf7\x04\xae\x73\xb7\x25\x30\x7c\x4f\x4b\x98\x09\xda\x06\x66\xfe\x5b\x4e\x45\xff\x19\xcf\x5f\x80\xff\xdb\x55\xe4\x09\x66\x32\x69\x96\x8d\x3b\xdc\xd2\xc8\xd8\x80\x93\x3b\x23\x53\x73\x18\x3d\x97\x25\xf9\xd1\xee\x12\x3a\x7a\x22\x39\xd4\xff\x28\xb0\xe7\x0d\x58\x37\x10\x91\x04\xcb\xee\x35\xa4\x78\xc3\xa4\x1f\x19\xfd\xf9\xf5\x97\x49\x8b\x4f\xe3\x25\x1c\x4a\x0f\xf0\x3a\x53\xb4\x10\xa0\xd3\x3f\x16\x70\x9b\xd0\xb1\xb7\x11\x1f\x44\x93\x92\x26\x74\x2a\xb2\xce\x0a\x5d\x3a\xa8\x70\x4b\x10\x5c\x4d\xb0\x23\x63\xe6\x5d\xa3\x09\x3b\x4c\x1d\x41\xbf\x71\x82\x37\xec\x7b\xc4\x69\xb4\xf6\x77\x63\xb7\x1f\xde\x7d\x58\x66\xcb\x04\x50\x65\x6a\x5d\xa4\x37\xdd\xb0\x45\x93\x2a\x5c\xbe\xb3\x49\x68\x9c\x2c\x76\xa1\xcd\xf0\x89\xae\xeb\x5f\xfb\x92\xb4\x69\x63\xeb\xa9\xb8\x7c\x49\x1e\x9f\x5f\x5b\x1d\x9f\x91\x0b\xac\x73\xe2\xf8\x1f\x5d\x03\x3d\xdb\x39\x3b\x72\xfd\x32\xe6\xdc\xfb\x01\xca\xbf\xe9\x9c\xf4\x62\xde\x52\xa4\xe4\x9f\x76\x2a\x2c\x52\x3f\xdf\xc4\xb0\x70\x5b\xf2\x5b\xa6\xdd\x62\xe7\xfc\x3d\xdb\x72\x2e\xd0\x9c\x67\x0c\x84\x45\xba\x97\x58\xfc\x90\xfe\xbc\xd8\x97\xc9\x8b\x8d\x31\x87\xd2\xe4\x3f\xc2\x2b\xd1\x13\x16\x2f\x72\xaa\xbf\x1d\x79\x7e\x1d\xbb\xbc\xc9\x84\xa1\xce\xd7\x4a\x5a\xec\x2a\x56\x55\x7f\x71\xdd\x71\xec\x44\x32\x71\x80\x1a\x75\xa6\x66\xb4\xfb\xdf\x1d\xca\x12\xd0\xdc\x9f\xef\xe7\xdd\x2f\x24\x73\xb4\x5a\xfe\x0f\x1c\xa2\x8c\xbf\x28\x82\x2d\x3f\x2b\x7d\xff\xb1\x7a\xf7\xc7\x00\xbc\xe5\x17\xe5\xea\x77\xb7\x77\x23\x0b\xce\x86\x8e\xbf\x34\xbd\x42\xd3\x54\xf8\xea\x38\x96\xda\xa9\x79\xf7\xfb\xd2\xe0\x33\x40\xbe\x1f\x5b\x82\xb4\xf6\x79\x20\x3a\x2f\x27\xdb\x3c\x72\x3c\x1a\x49\xcf\xd0\x44\xd2\xef\xcf\x7f\x61\x9a\xcd\x4e\x7e\x42\x4a\xaf\x83\xbb\x33\xf8\xfc\xe5\x22\x4b\x25\xfd\xa9\xb7\x46\x06\xff\x1b\x00\x00\xff\xff\xd0\xdd\x24\x35\x9c\x1b\x00\x00")

func outputCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_outputCrdYaml,
		"output/crd.yaml",
	)
}

func outputCrdYaml() (*asset, error) {
	bytes, err := outputCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "output/crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _outputResourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xcd\x73\x1b\x37\xb2\xbf\xeb\xaf\xe8\x52\x0e\x7e\xa9\xd2\x90\x92\x63\xd7\x73\xb1\xca\x07\x3f\x3b\x71\xe9\xad\x63\xab\x24\x25\x97\x38\x87\x26\xa6\x39\xc4\x0a\x03\xcc\x36\x30\xa4\xe9\xad\xfd\xdf\xb7\x1a\x98\x2f\x92\x43\x89\x52\xe2\x6c\xed\xe8\x20\x12\x03\xf4\xc7\xaf\x3f\x01\x10\x2b\xfd\x2b\xb1\xd7\xce\xce\x60\x75\x71\x72\xa7\x6d\x3e\x83\x8f\x58\x92\xaf\x50\xd1\x49\x49\x01\x73\x0c\x38\x3b\x01\x30\x38\x27\xe3\xe5\x13\x80\x72\x36\xb0\x33\x59\x65\xd0\xd2\xac\xfd\x6a\x88\xb3\x12\x2d\x16\xc4\x27\x00\x16\x4b\x9a\x81\xab\x88\x31\x38\xce\xfc\xc6\x07\x2a\x4f\xb2\x2c\x3b\x19\x32\xc5\x4a\xd3\x97\x40\x56\xbe\xf9\xc9\xdd\x2b\x3f\xd1\x6e\xba\xba\x98\x53\xc0\x56\x9c\xb7\xb5\x0f\xae\xbc\x26\xef\x6a\x56\xf4\x8e\x16\xda\xea\xa0\x9d\xdd\x92\x0e\xad\x75\x01\x65\x78\x5b\x44\x91\xa9\x20\x3b\xb9\xab\xe7\x34\xaf\xb5\xc9\x89\x23\x87\x4e\xe9\xf3\xc9\xf3\xc9\xcb\x13\x00\xc5\x14\x97\xdf\xea\x92\x7c\xc0\xb2\x9a\x81\xad\x8d\xe9\x14\x51\xa6\xf6\x81\xd8\x4f\x90\xdd\xc4\x55\x64\xfd\x52\x2f\xc2\x44\xbb\x13\x5f\x91\x12\x9e\x05\xbb\xba\x9a\xc1\xde\xfb\x44\xa1\x11\xab\x51\x29\x11\x8b\x23\x46\xfb\xf0\xb7\xe1\xe8\x07\xed\x43\x7c\x53\x99\x9a\xd1\xf4\xac\xe3\xa0\xd7\xb6\xa8\x0d\x72\x37\x7c\x02\xe0\x95\xab\x68\x60\xb7\xfc\x04\x60\x85\x46\xe7\x51\xa3\xc4\x58\x44\x7a\x73\x75\xf9\xeb\x0f\x37\x6a\x49\x25\xa6\x41\x80\x9c\xbc\x62\x5d\xc5\x79\xad\x00\xa0\x3d\x84\x25\x41\x9a\x09\x0b\xc7\xf1\x6b\x2b\x06\xbc\xb9\xba\x6c\x56\x57\x2c\xf6\x0d\xba\xd5\x4e\x9e\x81\x75\xbb\xb1\x1d\x3e\xcf\x44\x90\x34\x07\x72\xb1\x27\x25\x86\x8d\x55\x28\x07\x9f\x58\xbb\x05\x84\xa5\xf6\xc0\x54\x31\x79\xb2\xc9\xc2\x03\xb2\x20\x53\xd0\x82\x9b\xff\x9d\x54\x98\xc0\x0d\xb1\x10\x01\xbf\x74\xb5\xc9\xc5\x09\x56\xc4\x01\x98\x94\x2b\xac\xfe\xda\x51\xf6\x10\x5c\x64\x69\x30\x50\x03\x77\xfb\x68\x1b\x88\x2d\x1a\x81\xb0\xa6\x33\x40\x9b\x43\x89\x1b\x60\x12\x1e\x50\xdb\x01\xb5\x38\xc5\x4f\xe0\x67\xc7\x04\xda\x2e\xdc\x0c\x96\x21\x54\x7e\x36\x9d\x16\x3a\xb4\xfe\xac\x5c\x59\xd6\x56\x87\xcd\x34\x7a\xa5\x9e\xd7\xc1\xb1\x9f\xe6\xb4\x22\x33\xf5\xba\xc8\x90\xd5\x52\x07\x52\xa1\x66\x9a\x62\xa5\xb3\x28\xb8\x8d\xee\x3c\x29\xf3\xef\xb8\x71\x7e\xff\x6c\x20\x69\xd8\x88\xd1\x7d\x60\x6d\x8b\x6e\x38\xfa\xd7\x41\xdc\xc5\xcf\xc4\xba\xd8\x2c\x4b\xf2\xf7\xf0\xca\x90\xa0\x72\xfd\xe3\xcd\x2d\xb4\x4c\xa3\x09\xb6\x31\x8f\x68\xf7\xcb\x7c\x0f\xbc\x00\xa5\xed\x82\x38\x19\x6e\xc1\xae\x8c\x14\xc9\xe6\x95\xd3\x36\x34\x9e\xa4\xc9\x6e\x83\xee\xeb\x79\xa9\x83\x58\xfa\x1f\x35\xf9\x20\xf6\x99\xc0\xdb\x18\xd5\x30\x27\xa8\xab\x1c\x03\xe5\x13\xb8\xb4\xf0\x16\x4b\x32\x6f\xd1\xd3\x37\x87\x5d\x10\xf6\x99\x40\xfa\x30\xf0\xc3\x64\xb4\x3d\x31\xa1\xd5\x0d\xb7\xe9\x62\xd4\x42\x4d\x04\xde\x54\xa4\xb6\x22\x23\x27\xaf\x59\xbc\x37\x60\x20\xf1\xf9\x61\x06\x39\x1c\x8b\x31\x1e\x15\x4b\x62\xd8\x1e\x3c\xa0\x84\x3c\x05\x59\x5a\xe1\x07\x57\x14\xda\x16\xbb\xab\x0e\x31\x81\x94\x71\x17\xba\x18\x89\xfd\x07\x59\x46\xfc\x9c\xd5\xc1\xc9\xab\xf7\x6f\x6f\x7e\xb4\x2b\xcd\xce\x96\x64\xc3\x1f\x23\x74\x4d\xc5\x1f\x13\xe6\x96\x2c\x3e\x41\x08\xdb\xa6\xe2\x47\xae\x1c\xf5\x18\x79\xda\x60\xbc\xcc\x77\x29\x6e\xf9\x4f\x5b\x25\x2f\xdf\xb5\x49\xfc\xcd\xd7\x9a\x69\xb0\x3c\xe5\x54\x1a\x54\x8f\x23\x44\x1b\x77\xe4\x80\xa1\xf6\x0f\xba\x72\x9c\xb5\xe5\xcc\x6e\xee\x25\x5b\x3c\xc9\x9b\x95\xb3\xb9\x1e\x94\xf9\x43\xcc\xbb\x69\x4d\xba\xa3\x10\xf9\xb4\xc3\xa0\xad\x0f\x68\x15\xf9\xc9\x0e\x19\x1d\xa8\x1c\x71\xee\x2d\xea\xa7\x3d\x9d\x3e\x07\xa6\x32\x24\x9a\xc5\x22\xb5\x55\x98\x9e\xf9\xa4\xeb\x2e\x33\x79\x06\xa2\x22\x93\xac\xe9\x1a\x22\x28\x49\x2d\xd1\x6a\x5f\xc6\xa2\x64\x73\xca\xa5\x6e\x49\x3e\xf4\x94\xc3\x7a\x49\x56\x00\x1d\x21\x9a\x53\x40\x6d\x7c\x27\x44\x2f\x96\xf0\x90\xa4\x8a\x50\xb1\x76\xac\xe1\xce\xba\xb5\x05\xc7\xb0\x8e\x25\x33\xbe\xab\x2a\xb3\x19\x73\x5c\x07\x68\x4c\x8f\x5d\x24\x0f\x85\x5e\x91\x05\x29\x2d\x13\xf8\x6c\x87\xfa\x34\x55\x78\x4e\x80\x79\x1e\xbb\x92\x11\x8a\xf4\xa5\x32\x5a\xe9\x60\x36\xa9\x5c\x6f\x06\xb6\x87\xb0\xc4\x20\xca\xb2\x8f\x65\x58\xb9\xb2\x72\x36\xa2\xad\x22\x58\x73\x57\x87\x11\xb2\x8c\x61\x19\x4b\x10\xda\x58\x51\x34\xa7\xca\xe6\x3c\x6d\x51\x8f\x58\xc6\x72\x25\xc9\x35\x16\x2b\x27\x2b\x47\x48\x0e\x30\xf4\x13\xf8\x64\x15\x35\x3e\x9d\x9f\x45\xa7\x2e\x09\xad\x30\x89\x90\xf4\xfe\xa1\xd0\x42\xaa\x61\x23\x34\xc5\xb8\x05\xe5\x80\x3c\xd7\x81\x91\xb5\xd9\x40\x06\x5a\x66\x2b\x57\x92\x87\x0a\x39\xb4\x01\xfb\xe6\xea\x32\xf5\x22\x4b\x4c\x61\xe4\xb1\x1c\x23\x3a\x47\x75\xb7\x46\xce\x7d\x16\x67\x2f\x1c\xa7\x6f\x82\x1d\x06\x3d\xd7\x46\x87\x08\xb5\x22\xb6\x8d\x87\x6c\x92\xda\x91\xdf\x98\xee\x9d\x04\x93\xd3\xbd\xd7\xf7\x95\x04\xd9\x35\xf8\x70\xcb\x68\xbd\x6e\x9b\xeb\xb1\x59\x20\x62\x96\x18\x66\x20\x65\x3e\x0b\x7a\x54\xb3\x07\x72\xae\xd4\x60\xef\xb1\x38\xc0\xe1\x81\xb5\x4c\xe8\xc7\x2b\xc5\xa1\xd4\x72\x1d\x57\x48\x7e\xd9\x09\x4e\x04\x67\x29\x5b\x3b\xce\xcf\xfa\x66\x65\x94\x30\xec\x74\xb6\x5d\x72\xc6\x40\x85\xe3\x8d\x7c\x57\x58\x7b\xea\x5e\xd4\xcc\x64\x43\x93\x7b\xc7\xd2\x89\x3c\x97\x61\x44\xaa\x98\x32\xb4\x8d\x96\xd7\x42\xb1\x0e\x55\x1d\xce\xc0\xd7\x6a\x09\xe8\xa3\xcc\x46\xdb\x43\x82\xca\x06\x4a\x05\x03\x85\x64\xd2\x66\xa9\xf8\x97\xb6\xe0\xeb\xb2\x44\xd6\x5f\xa3\xfb\xab\x24\x62\x93\x1d\xa2\xf0\x07\xe4\x7c\xc0\x20\xfb\xe5\xe5\xe8\xa5\xf1\xf5\xc3\x96\xec\xd3\xf8\xed\xa6\xa2\xb6\x60\xca\xe2\x0e\xee\x2e\x8e\xa3\xaa\xfe\x00\x36\x61\x53\x69\x85\xc6\x6c\x24\xf4\x5b\x83\xe7\x20\x1e\x20\x89\xd5\x2f\x1d\x07\xa8\x96\x1c\x7b\xd6\x61\x8a\x8c\xcc\x0e\x51\x6d\xb2\xa7\xb6\xb9\x16\x7f\x68\xaa\xa5\x8e\x29\x1f\x3e\x9f\xe2\xdc\x4a\xcc\x98\x2c\x70\x4d\x9f\x4f\xa1\x72\x06\x59\x87\xcd\x04\x7e\x72\x63\x09\x4c\x1e\xfa\x82\x65\x65\xe8\x0c\xf4\xae\x7e\x2d\x17\x9f\xaa\x0a\x0a\x39\xad\x36\xc9\x8f\xe2\x5e\xf2\xec\x90\xf2\x51\x1a\xed\xd3\x8e\xf3\xf3\x29\x28\xf4\x11\xcc\x8a\xdd\x1c\xe7\x66\x13\x67\x88\xac\x67\xe0\xdd\x36\xdb\xfb\x35\x9f\x4b\x20\x18\x43\x39\x7c\x3e\xbd\xb4\x0d\xf9\x91\x0c\x04\x0f\x79\x44\x2a\x01\xb4\xd7\x3a\x01\x64\x8d\x9b\x8d\xbc\x10\x8a\x7b\xc3\x07\xfb\xb3\xf6\x15\x32\xe3\x66\xa7\x73\x93\x3d\x66\xfe\x29\xae\xd9\xf3\xe7\x63\xda\x8d\xb4\xf4\x9a\x16\x14\x03\x2b\x1e\x6d\xa0\xb6\x1e\xc8\xba\xba\x58\xc6\x0d\x90\x64\xcf\xe8\x50\x0e\x0c\x05\xd8\xb8\x7a\x04\x26\x6d\x65\xf3\x11\xc4\x27\x4b\x97\xeb\x45\x32\x0d\x53\x53\xff\x9a\x4d\xf4\x23\x33\xfc\xf8\x7e\xff\x80\x2a\x6f\xae\x2e\xdb\x5d\x7e\x1b\x63\x9c\xf4\x1a\xe1\x0b\x0f\x47\xfa\x42\x93\xc9\xaf\x30\x2c\x8f\xe0\xfd\xec\x72\xd1\xe8\x1a\x9b\x01\x27\x4e\xae\x49\xd1\x56\xa7\x16\x9b\x1b\x42\x69\x93\x0f\x38\xa7\x34\x68\x36\x68\xa6\x66\xc5\x59\xda\xe9\x36\x1b\xea\xfe\xe0\x41\x4c\x04\x98\xa2\x02\xfe\xff\xe6\xd3\xc7\xe9\x7b\x77\x80\x64\xd4\x02\x50\x29\xf2\x4d\xa3\x28\x3b\x9f\x3e\x35\x37\xbb\xbf\x9b\xd8\x42\x96\x68\xf5\x82\x7c\x98\x34\x3c\x88\xfd\x6f\xcf\x7f\x3f\x54\x0a\x7e\x72\xbc\x17\xf5\xdd\xf6\xbd\x75\x28\xed\x13\x1c\x1d\x45\x58\xeb\xb0\xd4\x87\xc2\x53\x92\x43\xde\xa8\x9d\x9a\xc6\x80\x77\x04\xae\x51\xb7\x26\x30\xfa\x8e\x66\x70\x2a\xde\x36\x10\xf3\x9f\xb2\x2b\xfa\xd7\x78\xfc\x02\xfc\xcf\x7a\x49\x4c\x70\x2a\x93\x4e\x93\x70\xdd\x29\x8d\x8c\x0d\x72\x72\x23\x64\x6c\x0e\x03\xeb\xa2\x20\x1e\xed\x2e\xa1\x49\x4f\x24\x9b\xfa\xef\xc5\xed\xf5\x02\xac\x1b\x90\x88\x84\xc5\x7a\x15\x29\xbd\xd0\x94\xef\x09\xfd\xdb\xf3\xdf\x0f\x4a\xbc\x8d\x97\xe4\x50\xfa\x02\xcf\x53\x8a\x96\x04\xe8\xf2\xef\x27\x70\x1b\xbd\x63\x63\x03\x7e\x11\x4e\x4a\x9a\xd0\x43\xc8\x3a\x2b\xe9\xd2\xc1\x12\x57\x04\xde\x95\x04\x6b\x32\x26\x6b\x1a\x4d\x58\x63\xec\x08\x5a\xc3\x89\xbf\x61\xdb\x23\x1e\xf6\xd6\xf6\x6c\xec\xf6\xd3\xbb\x4f\xb3\x24\x99\x38\x54\x11\x5b\x17\xe9\x4d\x17\xda\xa2\x89\x15\x2e\x9d\xd9\x44\x6f\x3c\x58\xec\x7c\x9d\xdc\x27\xb8\xa6\x7f\x6d\x4b\xd2\xa2\x0e\x35\xd3\xe4\xd9\x53\xe2\x78\xf7\xd8\xaa\x7f\x46\x0e\xb0\x76\x13\xc7\x7f\xe8\x18\xe8\x68\xe5\xec\xc8\xf1\xcb\x98\x72\x1f\x07\x5e\x7e\xaf\x72\xd2\x8b\xb1\xa5\x40\x51\xbf\xdc\x29\x3f\x8d\xfd\x7c\x15\xfc\xd4\xad\x88\x57\x9a\xd6\xd3\xb5\xe3\x3b\x6d\x8b\x4c\x5c\x33\x4b\x3e\xe0\xa7\xf1\x5c\x62\xfa\x5d\xfc\xf7\x64\x5d\x0e\x1e\x6c\x8c\x29\x14\x27\xff\x15\x5a\x09\x1f\x3f\x7d\x92\x52\xed\xe9\xc8\xf1\x75\xec\xd9\x4d\x4a\x18\x6a\x77\xad\x84\xc5\x7a\xa9\xd5\xb2\x3d\xb8\x6e\x72\xec\x81\x60\xd2\x1e\x4a\xcc\x53\x6a\x46\xbb\xf9\xe6\xae\x2c\x80\xa6\xfe\x7c\x93\xb5\x97\x38\x68\x73\xf9\xec\xb5\x0f\x32\xfe\x24\x04\x6b\x7d\x54\xf8\xfe\x72\xf9\xee\xaf\x71\xf0\x5a\x3f\x29\x56\x1f\xdd\xde\x8d\x2c\xd8\x19\xea\x6f\x9a\x2e\xd0\x54\x4b\xbc\xe8\xc7\x62\x3b\x95\x35\xf7\x4b\x83\xd7\x00\xe9\x7c\x6c\x06\xd2\xda\xa7\x81\xe0\x58\x76\xb6\x69\xa4\xdf\x1a\x49\xcf\x50\x05\xca\x3f\xee\xde\x30\x9d\x9e\x6e\x5d\x21\xc5\xaf\x83\xb3\x33\xf8\xed\xf7\x93\x44\x95\xf2\x5f\x5b\x69\x64\x70\xf7\x7e\x8e\xe7\xa8\x26\x58\x87\xa5\x63\xfd\x35\xb6\x98\xfd\x25\x5d\x73\x3f\x77\xed\xcc\xf6\x4d\xe1\xce\xcd\x9f\x21\xcc\x89\x33\x32\xa4\x64\x7d\xc6\x32\x7f\x98\x49\xf6\x2e\x09\xb9\x36\xa2\x4d\x26\xbd\xe5\x7b\x76\x75\xd5\x20\x15\xb5\xe8\xee\x42\xd2\x58\x3a\x75\x2e\xb1\xf2\x09\xd8\x79\x33\x5e\x50\x88\xff\x4d\xba\x4d\xcb\x60\x8d\x41\x2d\xd3\x12\x26\x0c\x14\x3f\xa6\x7b\x85\xf8\xb1\xea\xde\xe7\x64\x28\xd0\x63\xd9\x4f\xbb\x9d\xc4\x88\x14\x7b\x7c\x8e\x22\x1e\xfb\x96\x1d\x8a\x8d\xf0\x4f\xb0\x53\x73\xc8\xba\x67\xae\x87\x6e\x3e\x3b\xeb\x34\x77\xbb\xc9\x80\x87\x6c\x34\x72\xfd\xb9\x0b\x59\x7f\x9d\xb9\xaf\xd7\x00\xff\x51\x2b\xf6\x56\x1a\x40\xba\x1e\x87\xf4\x78\x51\xee\xb5\xdd\x1e\xcb\x3f\x11\xfb\x1d\x84\x2b\x76\x5f\x36\x0f\xe0\x5b\x87\xa5\x24\x74\x35\x64\xb4\xaf\x59\x70\x77\x64\x99\x24\x51\x1e\x70\xa0\x31\xc2\xbb\x0a\xec\xd3\x6d\xba\xbf\xb4\x57\xb9\x97\xfe\x23\x40\xda\xba\xed\x3f\x0e\xa9\x92\x02\x6b\xe5\x33\x8e\xc9\xa5\x47\xcb\x3a\xdb\xde\x81\xfc\x72\xfd\xa1\x11\x69\xda\xcc\xde\xb7\xef\x13\xd3\xdd\xff\x69\x9b\x4b\xfd\x78\x64\xd6\x9b\x37\xcb\xee\x4f\x7e\xce\xd0\x35\x2d\x62\x76\x6f\x2c\x74\x8f\x5c\x27\x6d\xc2\xbf\xee\xb3\xea\x43\xb9\xb7\xb1\x61\xc4\x2b\x2d\xbe\x91\x92\xaa\xe8\x8d\x52\xae\x8e\x17\xb3\x89\x4c\x4e\x0b\xac\x4d\xb8\x5f\xde\x3f\x16\x0d\x47\x20\x39\x4c\x3b\x2d\x82\x4f\x04\x69\xe8\x5c\xf7\xa7\xb7\xff\x32\x8c\xfa\xc4\xf1\x2d\x11\x1a\xa4\xa7\x6f\x8b\x4f\x87\x42\x43\xf4\xcf\xfc\x21\xd2\xfe\x9c\x2e\x99\xf8\x86\xdb\xbd\xb2\xb6\xf7\xf7\x95\xe3\xb0\xd5\xc1\xc5\xe6\x35\x75\x5d\x8e\xc3\x0c\x5e\xbd\x78\xf1\x43\xfc\x1a\x90\x0b\x0a\x57\x71\xb0\x9d\xe4\x63\x48\x3a\x3e\x56\x8d\xfd\xdf\x4d\x55\xbe\x77\x96\x77\x54\x19\xb7\x29\xc9\x86\x6f\x8b\xd4\x71\xc8\x30\x55\x46\x2b\xf4\x33\xb8\xd8\xd3\xb4\x94\x62\xfa\x61\x20\xd7\x71\x92\x05\x2a\x2b\x83\xa1\xd9\x75\xee\xfe\xd6\xc2\x6c\xd1\x3b\x8e\xe2\xf6\x0f\x31\xfa\xf3\x9e\x76\x44\xda\x87\x62\x40\x33\x83\x2c\xf3\xa4\x6a\xa6\xcc\xc4\x9d\x52\x86\x79\xce\xe4\xfd\xeb\xf3\x49\xfc\x9b\x75\xf6\x6e\xa7\xd7\x95\x0f\x4c\x58\xbe\x16\xa3\xcf\xa6\xd3\x8b\xe7\xff\x1b\xa7\x5e\xcc\x5e\x9d\xbf\x3a\x9f\x6e\xcd\x35\xae\x08\xce\x87\x9c\x98\x5f\x77\x5d\x7f\xfb\x72\xf5\xfa\xe2\xbc\x1b\xd0\x65\xdc\x08\x14\x2a\xfe\x90\x6d\xf0\xbb\xb6\xf8\x39\x93\x10\x4f\x81\x3a\x5b\x9d\x4f\x5e\x4e\xfa\x85\xc9\xba\x3b\x93\xba\xb7\x9d\x3b\xb7\x6c\x3b\x48\xae\xb6\xbd\x79\x48\xac\x77\xf9\x71\xc0\xda\xc0\x12\xa8\x5e\x6f\xab\xbf\x35\x8f\x2c\xce\x0d\xed\x56\xab\x81\x3d\xcb\x12\x87\x07\x44\x52\xd2\x07\x96\x1c\xc0\x82\xec\xfc\x4a\x4d\xf0\x6b\xcd\x94\x10\x42\x76\x59\xeb\xa9\xb3\x17\xcf\x17\x2f\x5e\xbe\xc4\x79\x96\x6b\x0e\x9b\x1d\x68\x76\x49\x6e\xb5\x3e\xed\x63\x74\xa9\x77\x8f\xf1\x55\x55\xcf\xe0\xe2\xfc\xbc\xdc\x1a\x2d\xa9\x74\xbc\x99\xc1\x0f\xe7\x3f\xeb\xc1\x8b\xf6\x17\x4e\x8f\x21\xf1\xbc\x27\x11\x88\x4b\x6d\x63\xee\x7e\xcf\xa8\xe8\x8a\x58\xbb\xfc\x86\x64\x73\x27\x11\x77\x7e\xf2\xef\x00\x00\x00\xff\xff\x44\xc6\x29\x57\xd4\x29\x00\x00")

func outputResourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_outputResourcesYaml,
		"output/resources.yaml",
	)
}

func outputResourcesYaml() (*asset, error) {
	bytes, err := outputResourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "output/resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"output/crd.yaml":       outputCrdYaml,
	"output/resources.yaml": outputResourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"output": {nil, map[string]*bintree{
		"crd.yaml":       {outputCrdYaml, map[string]*bintree{}},
		"resources.yaml": {outputResourcesYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
