// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x93\xdb\xb6\x11\x7f\xbf\x4f\xb1\x73\x79\xb8\x66\x7a\xa4\x62\x77\x3a\xd3\xea\xcd\xb5\x93\xcc\xb5\xa9\x7d\x73\x77\xf5\x8b\xed\x87\x15\xb8\x22\xb7\x07\x02\x2c\x00\x4a\x96\x33\xf9\xee\x9d\x05\x48\x8a\x92\x48\x9f\xec\x34\x29\x5f\x24\x82\xc0\xfe\xdf\xdf\x2e\x00\x6c\xf8\x2d\x39\xcf\xd6\x2c\x61\xf3\xec\xe2\x91\x4d\xb1\x84\xd7\x58\x93\x6f\x50\xd1\x45\x4d\x01\x0b\x0c\xb8\xbc\x00\x30\x58\xd3\x12\x6c\x43\xc6\x57\xbc\x0e\x19\x7e\x6a\x1d\x65\xb6\x21\x87\xc1\xba\x8b\x2c\xcb\x2e\xc6\xd4\xb0\x61\xfa\x18\xc8\xc8\x9b\xcf\x1f\xff\xe2\x73\xb6\x8b\xcd\xb3\x15\x05\xec\xf9\xbc\x6c\x7d\xb0\xf5\x1d\x79\xdb\x3a\x45\xaf\x68\xcd\x86\x03\x5b\x73\xc0\x16\x8d\xb1\x01\x65\xd8\xcb\x2b\x80\xb2\x26\x38\xab\x35\xb9\xac\x24\x93\x3f\xb6\x2b\x5a\xb5\xac\x0b\x72\x91\xc3\xa0\xcd\x77\xf9\xf3\xfc\xcf\x17\x00\xca\x51\x5c\xfe\xc0\x35\xf9\x80\x75\xb3\x04\xd3\x6a\x3d\x68\xa4\x74\xeb\x03\x39\x9f\xa3\xb3\xf9\xa0\x5e\xce\xf6\xc2\x37\xa4\x84\x67\xe9\x6c\xdb\x2c\xe1\xe4\x7b\xa2\xd0\x89\xd5\xa9\x94\x88\xc5\x11\xcd\x3e\xfc\x63\x3c\xfa\x13\xfb\x10\xbf\x34\xba\x75\xa8\xf7\xac\xe3\xa0\x67\x53\xb6\x1a\xdd\x30\x7c\x01\xe0\x95\x6d\x68\x4c\xd5\xb7\x2b\xd7\xd9\xab\xe3\xeb\x03\x86\xd6\x2f\xe1\xe7\x5f\x2e\x00\x36\xa8\xb9\x88\xda\xa6\x8f\x22\xee\x8b\xdb\x9b\xb7\x7f\xba\x57\x15\xd5\x98\x06\x01\x0a\xf2\xca\x71\x13\xe7\xf5\xc4\x81\x3d\x84\x8a\x20\xcd\x84\xb5\x75\xf1\xb5\x17\x11\x5e\xdc\xde\x74\xab\x1b\x27\x4e\x0f\xdc\x4b\x20\xcf\xc8\xf3\xc3\xd8\x11\x9f\x2b\x11\x24\xcd\x81\x42\x7c\x4d\x89\x61\xe7\x31\x2a\xc0\x27\xd6\x76\x0d\xa1\x62\x0f\x8e\x1a\x47\x9e\x4c\xf2\xfe\x88\x2c\xc8\x14\x34\x60\x57\xff\x26\x15\x72\xb8\x27\x27\x44\xc0\x57\xb6\xd5\x85\x04\xc8\x86\x5c\x00\x47\xca\x96\x86\x3f\x0d\x94\x3d\x04\x1b\x59\x6a\x0c\xd4\xb9\xa2\x7f\xd8\x04\x72\x06\xb5\x98\xb0\xa5\x6b\x40\x53\x40\x8d\x3b\x70\x24\x3c\xa0\x35\x23\x6a\x71\x8a\xcf\xe1\x9f\xd6\x11\xb0\x59\xdb\x25\x54\x21\x34\x7e\xb9\x58\x94\x1c\xfa\x58\x57\xb6\xae\x5b\xc3\x61\xb7\x88\x11\xcb\xab\x36\x58\xe7\x17\x05\x6d\x48\x2f\x3c\x97\x19\x3a\x55\x71\x20\x15\x5a\x47\x0b\x6c\x38\x8b\x82\x9b\x18\xea\x79\x5d\x7c\x33\x38\xfa\x6a\x24\x69\xd8\x49\x40\xf8\xe0\xd8\x94\xc3\x70\x8c\xbd\x59\xbb\x4b\x0c\x8a\x77\xb1\x5b\x96\xe4\xdf\x9b\x57\x86\xc4\x2a\x77\xdf\xdf\x3f\x40\xcf\x34\xba\xe0\xd0\xe6\xd1\xda\xfb\x65\x7e\x6f\x78\x31\x14\x9b\x35\xb9\xe4\xb8\xb5\xb3\x75\xa4\x48\xa6\x68\x2c\x9b\xd0\x45\x12\x93\x39\x34\xba\x6f\x57\x35\x07\xf1\xf4\x7f\x5a\xf2\x41\xfc\x93\xc3\xcb\x98\xf1\xb0\x22\x68\x9b\x02\x03\x15\x39\xdc\x18\x78\x89\x35\xe9\x97\xe8\xe9\x37\x37\xbb\x58\xd8\x67\x62\xd2\xa7\x0d\x3f\x06\xaa\xc3\x89\xc9\x5a\xc3\x70\x0f\x25\x93\x1e\xea\x32\xf0\xbe\x21\x75\x90\x19\x05\x79\x76\x12\xbd\x01\x03\x49\xcc\x8f\xd1\x65\x3e\x17\x63\x3e\x2a\x27\x28\x7e\x38\x38\xa3\x84\x3c\x25\x19\xda\xe0\x4f\xb6\x2c\xd9\x94\xc7\xab\xe6\x98\x40\x42\xe3\x35\x97\x13\xb9\x3f\x2c\xc6\x20\x99\xb5\x84\xab\x77\xdf\x65\x7f\xfd\xf0\xc7\x3c\xfd\x5c\x4d\x4c\x9d\x95\x2e\x9a\xda\x1a\x0e\x56\x3e\xfd\xf8\xf2\xfe\x7b\xb3\x61\x67\x4d\x4d\x26\x4c\xf1\x24\xd3\xd6\x53\xe3\x19\xbc\x62\x2c\x8d\xf5\x81\x95\xbf\x75\xb6\x98\x9c\xf3\x70\x8c\x0d\x5f\x2a\xdd\x1d\x95\x33\xc6\x38\x93\xc6\x03\x19\x9c\xd6\xec\xb3\x04\x4c\x5f\xb7\xbf\x70\xe5\x64\xc4\xca\xd3\x83\xc1\x4d\x71\x4c\xf1\x20\x7e\xfb\x0a\x7e\xf3\xaa\x2f\x22\x2f\xa4\x37\x18\x2d\x4f\x98\x4e\xa3\xca\x76\x86\x68\xd3\x89\x94\xca\xdd\x53\xa9\x14\x67\x1d\x24\x93\x5d\x79\x41\xab\xaf\xca\x26\x65\x4d\xc1\xa3\x16\x64\x8e\xf9\x30\xad\x83\x5b\x0a\x91\x4f\x3f\x0c\x6c\x7c\x40\xa3\xc8\xe7\x47\x64\x38\x50\x3d\x91\x5c\x07\xd4\x2f\xf7\x74\xf6\x18\x9c\xca\xa0\x68\x16\x8b\xe4\x41\x61\xbc\xf2\x49\xd7\x63\x66\xf2\x8c\x44\x45\x47\xb2\x66\x68\xd6\xa0\x26\x55\xa1\x61\x5f\xc7\xa2\x68\x0a\x2a\xa4\x6e\x0a\x1e\x7b\x2a\x60\x5b\x91\x11\x83\x4e\x10\x2d\x28\x20\x6b\x3f\x08\xb1\x17\x4b\x78\x08\xa8\x23\x34\x8e\xad\x63\x78\x34\x76\x6b\xc0\x3a\xd8\xc6\x92\x1d\xbf\x35\x8d\xde\x4d\x05\xae\x05\xd4\x7a\x6f\xbb\x48\x1e\x4a\xde\x90\x01\x29\x6d\x39\xbc\x37\x63\x7d\xba\x2e\x60\x45\x80\x45\x41\x53\x29\x1e\x2c\xd0\xc7\x46\xb3\xe2\xa0\x77\xa9\x5d\xd8\x8d\x7c\x0f\xa1\xc2\x20\xca\x3a\x1f\xdb\x00\x65\xeb\xc6\x9a\x68\x6d\x15\x8d\xb5\xb2\xed\x14\x40\x38\x0c\x55\x2c\x81\x68\x62\x45\x63\x97\x2a\xab\xf5\x74\x40\x3d\xda\x32\x96\x4b\x01\xf7\x58\x2c\xad\xac\x9c\x20\x39\xb2\xa1\xcf\xe1\x8d\x51\xd4\xc5\x74\x71\x1d\x83\xba\x26\x34\xc2\x24\x9a\x64\x1f\x1f\x0a\x0d\xa4\x1a\x3a\x41\x53\x9c\x5b\x52\x01\xe8\x56\x1c\x1c\x3a\xd6\x3b\xc8\x80\x65\xb6\xb2\x35\x79\x68\xd0\x85\x3e\x61\x5f\xdc\xde\xa4\x5e\xa8\xc2\x94\x46\x1e\xeb\x29\xa2\x2b\x54\x8f\x5b\x74\x85\xcf\xe2\xec\xb5\x75\xe9\x4d\x6c\x87\x81\x57\xac\x39\x44\x53\x2b\x72\xa6\x8b\x90\x5d\x52\x3b\xf2\x9b\xd2\x7d\x90\x20\xbf\x3c\xf9\xfc\xb9\x92\x04\xa0\xd1\x87\x07\x87\xc6\x73\xdf\xf8\x4f\xcd\x02\x11\xb3\xc6\xb0\x04\x69\x33\xb2\xc0\x93\x9a\x3d\x81\xb9\xd2\x03\x78\x8f\xe5\x0c\x87\x27\xd6\x3a\x42\x3f\x5d\x29\xe6\xa0\xe5\x2e\xae\x10\x7c\x39\x4a\x4e\x04\x6b\x28\xdb\x5a\x57\x5c\xef\x9b\xa5\x49\xc2\x70\xd4\x59\x0f\xe0\x8c\x81\x4a\xeb\x76\xf2\xae\xb0\xf5\x34\x7c\x68\x9d\x23\x13\x3a\xec\x9d\x82\x13\x79\x6e\xc2\x84\x54\x11\x32\xd8\x44\xcf\xb3\x50\x6c\x43\xd3\x86\x6b\xf0\xad\xaa\x00\x7d\x94\x59\xb3\x99\x13\x54\x36\x77\x2a\x68\x28\x05\x49\xbb\xa5\x12\x5f\x6c\xc0\xb7\x75\x8d\x8e\x3f\xc5\xf0\x57\x49\xc4\x0e\x1d\xa2\xf0\x33\x72\x3e\xe1\x90\xd3\xf2\x72\xf6\xd2\xf8\xf9\x69\x4f\xee\x61\xfc\x61\xd7\x50\x5f\x30\x65\xf1\x60\xee\x21\x8f\xa3\xaa\x7e\xc6\x36\x61\xd7\xb0\x42\xad\x77\x92\xfa\xbd\xc3\x0b\x90\x08\x10\x60\xf5\x95\x75\x01\x9a\xca\xc5\x9e\x79\x0c\x91\x91\xd9\x1c\xd5\x0e\x3d\xd9\x14\x2c\xf1\xd0\x55\x4b\x8e\x90\x0f\xef\x2f\x71\x65\x24\x67\x74\x16\x5c\x4b\xef\x2f\xa1\xb1\x1a\x1d\x87\x5d\x0e\x3f\xd8\x29\x00\x93\x87\x3e\x62\xdd\x68\xba\x06\x3e\xd6\xaf\xe7\xe2\x53\x55\x41\x21\xc7\x6a\x97\xe2\x28\xee\x65\xaf\xe7\x94\x8f\xd2\xb0\x4f\x3b\xde\xf7\x97\xa0\xd0\x47\x63\x36\xce\xae\x70\xa5\x77\x71\x86\xc8\x7a\x0d\xde\x1e\xb2\xfd\xbc\xe6\x2b\x49\x04\xad\xa9\x80\xf7\x97\x37\xa6\x23\x3f\x81\x40\xf0\x54\x44\xa4\x12\x40\x27\xad\x93\xb4\x98\x29\xcc\x26\x3e\x08\xc5\x93\xe1\xd9\xfe\xac\xff\x84\xce\xe1\xee\xa8\x73\x93\x3d\x6e\xf1\x26\xae\x39\x89\xe7\x73\xda\x8d\xb4\xf4\x8e\xd6\x14\x13\x2b\x1e\xbb\x20\x1b\x0f\x64\x6c\x5b\x56\x71\x03\x26\xe8\x19\x03\xca\x82\xa6\x00\x3b\xdb\x4e\x98\x89\x8d\x6c\x7e\x82\xc4\x64\x6d\x0b\x5e\x27\xd7\x38\xea\xea\x5f\xb7\x89\xff\x42\x84\x9f\x3e\x6f\x98\x51\xe5\xc5\xed\x4d\x7f\xca\xd0\xe7\x98\x4b\x7a\x4d\xf0\x85\xa7\x33\x7d\xcd\xa4\x8b\x5b\x0c\xd5\x19\xbc\xaf\x6e\xd6\x9d\xae\xb1\x19\xb0\x12\xe4\x4c\x8a\x0e\x3a\xb5\xd8\xdc\x10\x4a\x9b\x3c\x13\x9c\xd2\xa0\x99\xc0\x8e\xba\x15\xd7\x69\xa7\xdd\x6d\xe8\xf7\x07\x1f\xe2\x22\xc0\x94\x15\xf0\xf7\xfb\x37\xaf\x17\x3f\xda\x19\x92\x51\x0b\x40\xa5\xc8\x77\x8d\xa2\x6c\xa7\xf6\xd0\xdc\xed\x3e\xef\x63\x0b\x59\xa3\xe1\x35\xf9\x90\x77\x3c\xc8\xf9\x77\xcf\x3f\xcc\x95\x82\x1f\xac\x3b\xc9\xfa\xe1\xf8\xa0\x0f\x28\xf6\xc9\x1c\x03\x45\xd8\x72\xa8\x78\x2e\x3d\x05\x1c\x8a\x4e\xed\xd4\x34\x06\x7c\x24\xb0\x9d\xba\x2d\x81\xe6\x47\x5a\xc2\xa5\x44\xdb\x48\xcc\x9f\x65\x57\xf4\xcb\x74\xfe\x02\xfc\x61\x5b\x91\x23\xb8\x94\x49\x97\x49\xb8\xe1\x94\x48\xc6\x46\x98\xdc\x09\x19\x9b\xc3\xe0\xb8\x2c\xc9\x4d\x76\x97\xd0\xc1\x13\x6d\xc8\x84\x6f\x25\xec\x79\x0d\xc6\x8e\x48\x44\xc2\xe2\xbd\x86\x14\xaf\x99\x8a\x13\xa1\xdf\x3d\xff\x30\x2b\xf1\xa1\xbd\x04\x43\xe9\x23\x3c\x4f\x10\x2d\x00\x68\x8b\x6f\x73\x78\x88\xd1\xb1\x33\x01\x3f\x0a\x27\x25\x4d\xe8\x9c\x65\xad\x11\xb8\xb4\x50\xe1\x86\xc0\xdb\x9a\x60\x4b\x5a\x67\x5d\xa3\x09\x5b\x8c\x1d\x41\xef\x38\x89\x37\xec\x7b\xc4\xf9\x68\xed\xcf\xe6\x1e\xde\xbc\x7a\xb3\x4c\x92\x49\x40\x95\xb1\x75\x91\xde\x74\xcd\x06\x75\xac\x70\xe9\xcc\x28\x46\xe3\x6c\xb1\xf3\x6d\x0a\x9f\x60\xbb\xfe\xb5\x2f\x49\xeb\x36\xb4\x8e\xf2\xa9\xe3\x84\x27\xf3\xf8\xf8\xd8\x6c\xff\x4c\x1c\xa0\x1d\x03\xc7\xff\xe9\x18\xea\x6c\xe5\xcc\xc4\xf1\xcf\x94\x72\xaf\x47\x51\xfe\x59\xe5\xa4\x17\x73\x86\x02\x45\xfd\x0a\xab\xfc\x22\xf6\xf3\x4d\xf0\x0b\xbb\x21\xb7\x61\xda\x2e\xb6\xd6\x3d\xb2\x29\x33\x09\xcd\x2c\xc5\x80\x5f\xc4\x73\x89\xc5\x37\xf1\xe7\xab\x75\x99\x3d\xd8\x98\x52\x28\x4e\xfe\x3d\xb4\x12\x3e\x7e\xf1\x55\x4a\xf5\xa7\x23\xe7\xd7\xb1\xab\xfb\x04\x18\xea\x78\xad\xa4\xc5\xb6\x62\x55\xf5\x07\xe7\x1d\xc6\xce\x24\x13\x7b\xa8\xb1\x48\xd0\x8c\x66\xf7\x9b\x87\xb2\x18\x34\xf5\xe7\xbb\xac\xbb\xbd\xc9\xd0\x14\xf2\xdf\xb3\x0f\x32\xfe\x55\x16\x6c\xf9\xac\xf4\xfd\xd7\xcd\xab\xdf\x27\xc0\x5b\xfe\xaa\x5c\xfd\xe2\xf6\x6e\x62\xc1\xd1\xd0\xfe\x16\xec\x19\xea\xa6\xc2\x67\xfb\xb1\xd8\x4e\x65\xdd\xdd\xd7\xe8\x33\x40\x3a\x1f\x5b\x82\xb4\xf6\xdd\xd5\x92\x75\xb2\xb3\x4d\x23\xfb\xad\x91\xf4\x0c\x4d\xa0\xe2\xf5\xf1\xed\xd7\x65\x2a\x5a\xfd\xf5\x56\x7c\x1d\x9d\x9d\xc1\xbb\x0f\x17\x89\x2a\x15\x6f\x7b\x69\x64\xf0\xf8\xee\x70\xb8\x89\xbc\x17\xab\x2b\x7a\xa1\x94\x6d\x4d\x98\xb8\x8e\x44\x67\xf7\x57\x90\x63\xa0\x38\xff\xa2\xd2\xad\x50\xe5\xd8\x86\xca\x3a\xfe\x14\xfb\xd9\xfd\x6d\xe5\xc5\xc1\xad\xde\x9d\xd5\x87\x57\xa2\x4f\x5d\x2d\xd6\x68\xb0\x24\x97\x39\x59\xe8\x5a\x2d\xd6\xca\xa4\x77\xfd\xd1\xd9\xb6\xe9\x3c\x11\xad\x74\x70\xa9\x97\x75\xa7\xea\x35\x36\x7e\x70\x56\x82\x9a\xf8\xea\x93\x55\x30\x59\xc5\x27\xdf\xae\xfa\xa5\x22\x13\xc5\xbf\x25\x85\xf8\x9b\xee\x51\xce\xe3\xec\x49\x39\x3a\x83\xa6\x4e\x77\x99\x19\x34\x18\x54\x35\x66\x23\x7f\xb7\x71\xf0\x84\x21\x36\x8d\xcf\x37\xcf\x4e\xb9\x16\x48\xb5\x35\xfe\x1c\xc6\x27\xfc\x4e\xb9\x9c\xde\xd3\x1e\x9b\x77\x7f\xef\x3a\xcd\xac\x20\x4d\xff\x13\x85\xcf\x16\x65\x31\x6c\x09\x47\x12\xcd\xeb\xfc\xab\x62\xf8\x6f\xb2\xef\x36\xe5\x44\x3a\x8d\x03\x76\xd5\xcd\x92\xff\x77\xb4\x8e\x89\xdf\x69\xf7\x19\x86\x17\x47\x37\xe1\x31\x67\x26\xf3\xa1\x6b\xe9\x62\x4a\x4c\x66\xfb\xaf\xc8\xf1\xff\x06\x00\x00\xff\xff\xef\x6f\x4d\x26\xd7\x20\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
