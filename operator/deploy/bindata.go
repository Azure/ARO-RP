// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdf\x93\xdb\xb6\xf1\x7f\xd7\x5f\xb1\x73\x79\xb8\x6f\xe6\x7b\xa4\x62\x77\x3a\xd3\xea\xcd\xb5\x93\xcc\xb5\xa9\x7d\x73\x77\xf1\x8b\xed\x87\x15\xb8\x22\xb7\x07\x02\x2c\x00\x4a\x96\x33\xf9\xdf\x3b\x0b\x90\x14\x25\x91\xbe\xb3\xd3\xa4\x7c\x91\x08\x02\xfb\x0b\xbb\x9f\x5d\x60\xb1\xe1\xb7\xe4\x3c\x5b\xb3\x82\xed\xb3\xc5\x03\x9b\x62\x05\xaf\xb1\x26\xdf\xa0\xa2\x45\x4d\x01\x0b\x0c\xb8\x5a\x00\x18\xac\x69\x05\xb6\x21\xe3\x2b\xde\x84\x0c\x3f\xb5\x8e\x32\xdb\x90\xc3\x60\xdd\xc2\x37\xa4\x64\xda\x86\x0d\x6a\xfe\x44\xce\xcb\x5b\x06\x0f\xed\x9a\x9c\xa1\x40\x7e\x91\x65\xd9\x62\xcc\x10\x1b\xa6\x8f\x81\x8c\xbc\xf9\xfc\xe1\x2f\x3e\x67\xbb\xdc\x3e\x5b\x53\xc0\x5e\x94\x97\xad\x0f\xb6\xbe\x25\x6f\x5b\xa7\xe8\x15\x6d\xd8\x70\x60\x6b\x8e\x24\x43\x63\x6c\x40\x19\x8e\x3c\x01\x94\x35\xc1\x59\xad\xc9\x65\x25\x99\x5c\x44\x58\xb7\xac\x0b\x72\x91\xc3\xa0\xf0\x77\xf9\xf3\xfc\xcf\x0b\x00\xe5\x28\x2e\xbf\xe7\x9a\x7c\xc0\xba\x59\x81\x69\xb5\x1e\x94\x56\xba\xf5\x81\x9c\xcf\xd1\xd9\x7c\xb0\x40\xce\x76\xd0\x5a\x59\xd3\x93\x8d\x12\xf8\xe0\x30\x50\xb9\x5f\xc1\x6b\x6b\x68\x01\x50\x3a\xdb\x36\x2b\x38\x23\x90\x58\x74\x72\x77\x3a\x27\x6e\x71\x44\xb3\x0f\xff\x18\x8f\xfe\xc4\x3e\xc4\x2f\x8d\x6e\x1d\xea\x83\x6c\x89\x2d\x9b\xb2\xd5\xe8\x86\xe1\x05\x40\xe3\xc8\x93\xdb\xd2\xcf\xe6\xc1\xd8\x9d\xf9\x81\x49\x17\x7e\x05\xc1\xb5\x22\x97\x57\xb6\xa1\x31\x4f\xdf\xae\x5d\x67\x6e\xdf\xeb\x82\xa1\xf5\x2b\xf8\xe5\xd7\x05\xc0\x16\x35\x17\xd1\x58\xe9\xa3\x28\xf3\xe2\xe6\xfa\xed\x9f\xee\x54\x45\x35\xa6\x41\x80\x82\xbc\x72\xdc\xc4\x79\x3d\x71\x60\x0f\xa1\x22\x48\x33\x61\x63\x5d\x7c\xed\x15\x80\x17\x37\xd7\xdd\xea\xc6\x89\x5b\x05\xee\x25\x90\x67\xe4\x38\xc3\xd8\x09\x9f\x4b\x11\x24\xcd\x81\x42\x5c\x85\x12\xc3\x6e\x67\xa8\x00\x9f\x58\xdb\x0d\x84\x8a\x3d\x38\x8a\xc6\x31\xc9\x79\x46\x64\x41\xa6\xa0\x01\xbb\xfe\x17\xa9\x90\xc3\x9d\x18\xd0\x79\xf0\x95\x6d\x75\xd1\xed\x76\x00\x47\xca\x96\x86\x3f\x0d\x94\x3d\x04\x1b\x59\x6a\x0c\xd4\x6d\x54\xff\xb0\x09\xe4\x0c\x6a\x31\x61\x4b\x57\x80\xa6\x80\x1a\xf7\xe0\x48\x78\x40\x6b\x46\xd4\xe2\x14\x9f\xc3\x3f\xad\x23\x60\xb3\xb1\x2b\xa8\x42\x68\xfc\x6a\xb9\x2c\x39\xf4\xa1\xa2\x6c\x5d\xb7\x86\xc3\x7e\x19\x1d\x9e\xd7\x6d\xb0\xce\x2f\x0b\xda\x92\x5e\x7a\x2e\x33\x74\xaa\xe2\x40\x2a\xb4\x8e\x96\xd8\x70\x16\x05\x37\x31\x52\xf2\xba\xf8\x66\xd8\xe8\xcb\x91\xa4\x61\x2f\x0e\xe1\x83\x63\x53\x0e\xc3\xd1\x33\x67\xed\x2e\x1e\x2a\xbb\x8b\xdd\xb2\x24\xff\xc1\xbc\x32\x24\x56\xb9\xfd\xfe\xee\x1e\x7a\xa6\x71\x0b\x8e\x6d\x1e\xad\x7d\x58\xe6\x0f\x86\x17\x43\xb1\xd9\x90\x4b\x1b\xb7\x71\xb6\x8e\x14\xc9\x14\x8d\x65\x13\x3a\x4f\x62\x32\xc7\x46\xf7\xed\xba\xe6\x20\x3b\xfd\xef\x96\x7c\x90\xfd\xc9\xe1\x65\x04\x0c\x58\x13\xb4\x4d\x81\x81\x8a\x1c\xae\x0d\xbc\xc4\x9a\xf4\x4b\xf4\xf4\xbb\x9b\x5d\x2c\xec\x33\x31\xe9\xe3\x86\x1f\xe3\xdc\xf1\xc4\x64\xad\x61\xb8\x47\xa2\xc9\x1d\xea\x22\xf0\xae\x21\x75\x14\x19\x05\x79\x76\xe2\xbd\x01\x03\x89\xcf\x8f\xb1\x67\x3e\x16\x63\x3c\x2a\x27\x79\xe2\x78\x70\x46\x09\x79\x4a\x32\xb4\xc5\x9f\x6c\x59\xb2\x29\x4f\x57\xcd\x31\x81\x04\xe6\x1b\x2e\x27\x62\x7f\x58\x8c\x41\x22\x6b\x05\x97\xef\xbe\xcb\xfe\xfa\xe1\xff\xf3\xf4\x73\x39\x31\x75\x56\xba\x68\x6a\x6b\x38\x58\xf9\xf4\xe3\xcb\xbb\xef\xcd\x96\x9d\x35\x35\x99\x30\xc5\x93\x4c\x5b\x4f\x8d\x67\xf0\x8a\xb1\x34\xd6\x07\x56\xfe\xc6\xd9\x62\x72\xce\xfd\x29\x36\x7c\xa9\x74\xb7\x54\xce\x18\xe3\x89\x34\xee\xc9\xe0\xb4\x66\x9f\x25\x60\xfa\xca\xe0\x0b\x57\x4e\x7a\xac\x3c\x3d\x18\x5c\x17\xa7\x14\x8f\xfc\xb7\x2f\x00\xae\x5f\xf5\x49\xe4\x85\x54\x1f\xa3\xe5\x09\xd3\x69\x94\xf7\x9e\x20\xda\x74\x20\xa5\x74\xf7\x58\x28\xc5\x59\x47\xc1\x64\xd7\x31\xcf\x7e\x55\x34\x29\x6b\x0a\x1e\x55\x30\x73\xcc\x87\x69\x1d\xdc\x52\x88\x7c\xfa\x61\x60\xe3\x03\x1a\x45\x3e\x3f\x21\xc3\x81\xea\x89\xe0\x3a\xa2\x7e\x71\xa0\x73\xc0\xe0\x94\x06\x45\xb3\x98\x24\x8f\x12\xe3\xa5\x4f\xba\x9e\x32\x93\x67\x24\x2a\x3a\x92\x35\x43\xad\x07\x35\xa9\x0a\x0d\xfb\x3a\x26\x45\x53\x50\x21\x79\x53\xf0\xd8\x53\x01\xbb\x8a\x8c\x18\x74\x82\x68\x41\x01\x59\xfb\x41\x88\x83\x58\xc2\x43\x40\x1d\xa1\x71\x6c\x1d\x43\x2c\x76\xc0\x3a\xd8\xc5\x94\x1d\xbf\x35\x8d\xde\x4f\x39\xae\x05\xd4\xfa\x60\xbb\x48\x1e\x4a\xde\x92\x01\x49\x6d\x39\xbc\x37\x63\x7d\xba\x2a\x60\x4d\x80\x45\x41\x53\x21\x1e\x2c\xd0\xc7\x46\xb3\xe2\xa0\xf7\xa9\x5c\xd8\x8f\xf6\x1e\x42\x85\x41\x94\x75\x3e\x96\x01\xca\xd6\x8d\x35\xd1\xda\x2a\x1a\x6b\x6d\xdb\x29\x80\x70\x18\xaa\x98\x02\xd1\xc4\x8c\xc6\x2e\x65\x56\xeb\xe9\x88\x7a\xb4\x65\x4c\x97\x02\xee\x31\x59\x5a\x59\x39\x41\x72\x64\x43\x9f\xc3\x1b\xa3\xa8\xf3\xe9\xe2\x2a\x3a\x75\x4d\x68\x84\x49\x34\xc9\xc1\x3f\x14\x1a\x48\x39\x74\x82\xa6\x6c\x6e\x49\x05\xa0\x5b\x73\x70\xe8\x58\xef\x21\x03\x96\xd9\xca\xd6\xe4\xa1\x41\x17\xfa\x80\x7d\x71\x73\x9d\x6a\xa1\x0a\x53\x18\x79\xac\xa7\x88\xae\x51\x3d\xec\xd0\x15\x3e\x8b\xb3\x37\xd6\xa5\x37\xb1\x1d\x06\x5e\xb3\xe6\x10\x4d\xad\xc8\x99\xce\x43\xf6\x49\xed\xc8\x6f\x4a\xf7\x41\x82\xfc\xe2\xec\xf3\xe7\x52\x12\x80\x46\x1f\xee\x1d\x1a\xcf\xfd\xb9\x61\x6a\x16\x88\x98\x35\x86\x15\x48\x99\x91\x05\x9e\xd4\xec\x11\xcc\x95\x1a\xc0\x7b\x2c\x67\x38\x3c\xb2\xd6\x11\xfa\xe9\x4c\x31\x07\x2d\xb7\x71\x85\xe0\xcb\x49\x70\x22\x58\x43\xd9\xce\xba\xe2\xea\x50\x2c\x4d\x12\x86\x93\xca\x7a\x00\x67\x39\x13\x59\xb7\x97\x77\x85\xad\xa7\xe1\x43\xeb\x1c\x99\xd0\x61\xef\x14\x9c\xc8\x73\x1d\x26\xa4\x8a\x90\xc1\x26\xee\x3c\x0b\xc5\x36\x34\x6d\xb8\x02\xdf\xaa\x0a\xd0\x47\x99\x35\x9b\x39\x41\xe5\x6c\xa8\x82\x86\x52\x90\xb4\x5b\x2a\xfe\xc5\x06\x7c\x5b\xd7\xe8\xf8\x53\x74\x7f\x95\x44\xec\xd0\x21\x0a\x3f\x23\xe7\x23\x1b\x72\x9e\x5e\x9e\xbc\x34\x7e\x7e\x7c\x27\x0f\x30\x7e\xbf\x6f\xa8\x4f\x98\xb2\x78\x30\xf7\x10\xc7\x51\x55\x3f\x63\x9b\xb0\x6f\x58\xa1\xd6\x7b\x09\xfd\x7e\xc3\x0b\x10\x0f\x10\x60\xf5\x95\x75\x01\x9a\xca\xc5\x9a\x79\x0c\x91\x91\xd9\x1c\xd5\x0e\x3d\xd9\x14\x2c\xfe\xd0\x65\x4b\x8e\x90\x0f\xef\x2f\x70\x6d\x24\x66\x74\x26\x07\xd4\xf7\x17\xd0\x58\x8d\x8e\xc3\x3e\x87\x1f\xec\x14\x80\xc9\x43\x1f\xb1\x6e\x34\x5d\x01\x9f\xea\xd7\x73\xf1\x29\xab\xa0\x90\x63\xb5\x4f\x7e\x14\xcf\xb2\x57\x73\xca\x47\x69\xd8\xa7\x13\xef\xfb\x0b\x50\xe8\xa3\x31\x1b\x67\xd7\xb8\xd6\xfb\x38\x43\x64\xbd\x02\x6f\x8f\xd9\x7e\x5e\xf3\xb5\x04\x82\xd6\x54\xc0\xfb\x8b\x6b\xd3\x91\x9f\x40\x20\x78\xcc\x23\x52\x0a\xa0\xb3\xd2\x49\x4a\xcc\xe4\x66\x13\x1f\x84\xe2\xd9\xf0\x6c\x7d\xd6\x7f\x42\xe7\x70\x7f\x52\xb9\xc9\x19\xb7\x78\x13\xd7\x9c\xf9\xf3\x53\xca\x8d\xb4\xf4\x96\x36\x14\x03\x2b\xde\xda\x20\x1b\x0f\x64\x6c\x5b\x56\xf1\x00\x26\xe8\x19\x1d\xca\x82\xa6\x00\x7b\xdb\x4e\x98\x89\x8d\x1c\x7e\x82\xf8\x64\x6d\x0b\xde\xa4\xad\x71\xd4\xe5\xbf\xee\x10\xff\x85\x08\x3f\x7d\xdf\x30\xa3\xca\x8b\x9b\xeb\xfe\x96\xa1\x8f\x31\x97\xf4\x9a\xe0\x0b\x8f\x47\xfa\x86\x49\x17\x37\x18\xaa\x27\xf0\xbe\xbc\xde\x74\xba\xc6\x62\xc0\x8a\x93\x33\x29\x3a\xaa\xd4\x62\x71\x43\x28\x65\xf2\x8c\x73\x4a\x81\x66\x02\x3b\xea\x56\x5c\xa5\x93\x76\x77\xa0\x3f\x5c\x7c\xc8\x16\x01\xa6\xa8\x80\xbf\xdf\xbd\x79\xbd\xfc\xd1\xce\x90\x8c\x5a\x00\x2a\x45\xbe\x2b\x14\xe5\x38\x75\x80\xe6\xee\xf4\x79\x17\x4b\xc8\x1a\x0d\x6f\xc8\x87\xbc\xe3\x41\xce\xbf\x7b\xfe\x61\x2e\x15\xfc\x60\xdd\x59\xd4\x0f\xd7\x07\xbd\x43\xb1\x4f\xe6\x18\x28\xc2\x8e\x43\xc5\x73\xe1\x29\xe0\x50\x74\x6a\xa7\xa2\x31\xe0\x03\x81\xed\xd4\x6d\x09\x34\x3f\xd0\x0a\x2e\xc4\xdb\x46\x62\xfe\x22\xa7\xa2\x5f\xa7\xe3\x17\xe0\xff\x76\x15\x39\x82\x0b\x99\x74\x91\x84\x1b\x6e\x89\x64\x6c\x84\xc9\x9d\x90\xb1\x38\x0c\x8e\xcb\x92\xdc\x64\x75\x09\x1d\x3c\xd1\x96\x4c\xf8\x56\xdc\x9e\x37\x60\xec\x88\x44\x24\x2c\xbb\xd7\x90\xe2\x0d\x53\x71\x26\xf4\xbb\xe7\x1f\x66\x25\x3e\xb6\x97\x60\x28\x7d\x84\xe7\x09\xa2\x05\x00\x6d\xf1\x6d\x0e\xf7\xd1\x3b\xf6\x26\xe0\x47\xe1\xa4\xa4\x08\x9d\xb3\xac\x35\x02\x97\x16\x2a\xdc\x12\x78\x5b\x13\xec\x48\xeb\xac\x2b\x34\x61\x87\xb1\x22\xe8\x37\x4e\xfc\x0d\xfb\x1a\x71\xde\x5b\xfb\xbb\xb9\xfb\x37\xaf\xde\xac\x92\x64\xe2\x50\x65\x2c\x5d\xa4\x36\x8d\x37\xd1\x31\xc3\xa5\x3b\xa3\xe8\x8d\xb3\xc9\xce\xb7\xc9\x7d\x82\xed\xea\xd7\x3e\x25\x6d\xda\xd0\x3a\xca\xa7\xae\x13\x1e\x8d\xe3\xd3\x6b\xb3\xc3\x33\x71\x81\x76\x0a\x1c\xff\xa3\x6b\xa8\x27\x2b\x67\x26\xae\x7f\xa6\x94\x7b\x3d\xf2\xf2\xcf\x2a\x77\x68\x15\x88\x7e\x85\x55\x7e\x19\xeb\xf9\x26\xf8\xa5\xdd\x92\xdb\x32\xed\x96\x3b\xeb\x1e\xd8\x94\x99\xb8\x66\x96\x7c\xc0\x2f\xe3\xbd\xc4\xf2\x9b\xf8\xf3\xd5\xba\xcc\x5e\x6c\x4c\x29\x14\x27\xff\x11\x5a\x09\x1f\xbf\xfc\x2a\xa5\xfa\xdb\x91\xa7\xe7\xb1\xcb\xbb\x04\x18\xea\x74\xad\x84\xc5\xae\x62\x55\xf5\x17\xe7\x1d\xc6\xce\x04\x13\x7b\xa8\xb1\x48\xd0\x8c\x66\xff\xbb\xbb\xb2\x18\x34\xd5\xe7\xfb\xac\x6b\xfe\x64\x68\x0a\xf9\xef\xd9\x07\x19\xff\x2a\x0b\xb6\xfc\xa4\xf0\xfd\xf9\xfa\xd5\x1f\xe3\xe0\x2d\x7f\x55\xac\x7e\x71\x79\x37\xb1\xe0\x64\xe8\xd0\x44\x7b\x86\xba\xa9\xf0\xd9\x61\xac\x6b\xfc\xa5\xd6\xd9\xe8\x33\x40\xba\x1f\x1b\x7a\x4f\x72\x18\xb2\x4e\x4e\xb6\x69\xe4\x70\x34\x92\x9a\xa1\x09\x54\xbc\x3e\xed\x8d\x5d\xa4\xa4\xd5\x37\xbf\xe2\xeb\xe8\xee\x0c\xde\x7d\x58\x24\xaa\x54\xbc\xed\xa5\x91\xc1\xd3\xd6\xe3\xd0\xeb\xbc\x13\xab\x2b\x7a\xa1\x94\x6d\x4d\x98\x68\x78\xa2\xb3\x87\x26\xe7\x18\x28\xe6\x5b\xa1\xa7\xcc\xdc\x1a\x55\x8e\x6d\xa8\xac\xe3\x4f\xb1\x9e\x3d\x34\x3b\x17\x47\x3d\xbf\x5b\xab\x8f\x9b\xae\x8f\x75\x26\x6b\x34\x58\x92\xcb\x9c\x2c\x74\xad\x16\x6b\x65\x52\xbb\xfe\xe8\x6c\xdb\x74\x3b\x11\xad\x74\xd4\xd4\xcb\xba\x5b\xf5\x1a\x1b\x3f\x6c\x56\x82\x9a\xf8\xea\x93\x55\x30\x59\xc5\xa7\xbd\x5d\xf7\x4b\x45\x26\x8a\x7f\x4b\x0a\xf1\x37\xf5\x51\x9e\xc6\xd9\x93\x72\xf4\x04\x9a\x3a\x75\x3a\x33\x68\x30\xa8\x6a\xcc\x46\xfe\xee\xe2\xe0\x19\x43\x6c\x1a\x9f\x6f\x9f\x9d\x73\x2d\x90\x6a\x6b\xfc\x53\x18\x9f\xf1\x3b\xe7\x72\xde\xc5\x3d\x35\xef\xa1\x2b\x3b\xcd\xac\x20\x4d\xff\x15\x85\x9f\x2c\xca\x72\x38\x12\x8e\x24\x9a\xd7\xf9\x37\xf9\xf0\xdf\xe4\xdc\x6d\xca\x89\x70\x1a\x3b\xec\xba\x9b\x25\xff\x6f\x69\x13\x03\xbf\xd3\xee\x33\x0c\x17\x27\x7d\xf2\x18\x33\x93\xf1\xd0\x95\x74\x31\x24\x26\xa3\xfd\x37\xc4\xf8\x7f\x02\x00\x00\xff\xff\x85\x41\xfc\x97\x39\x21\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
