// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x4d\x93\xdb\xb8\xd1\xbe\xeb\x57\x74\xcd\x1e\xe6\xdd\xaa\x21\xf5\xda\xa9\x54\xa5\x74\x9b\xd8\xbb\x5b\x4a\x36\xb6\x6b\x66\xe2\x8b\xed\x43\x0b\x6c\x91\x9d\x01\x01\x06\x00\x25\xcb\xa9\xfc\xf7\x54\x03\x24\x45\x69\x48\xcf\x78\x9c\xdd\xf0\x22\x11\x04\xfa\xf3\xe9\x0f\x00\xd8\xf0\x7b\x72\x9e\xad\x59\xc1\xee\xc5\xe2\x9e\x4d\xb1\x82\x37\x58\x93\x6f\x50\xd1\xa2\xa6\x80\x05\x06\x5c\x2d\x00\x0c\xd6\xb4\x02\xdb\x90\xf1\x15\x6f\x43\x86\x5f\x5a\x47\x99\x6d\xc8\x61\xb0\x6e\x91\x65\xd9\x62\x4c\x0d\x1b\xa6\xcf\x81\x8c\xbc\xf9\xfc\xfe\x4f\x3e\x67\xbb\xdc\xbd\xd8\x50\xc0\x9e\xcf\xab\xd6\x07\x5b\xdf\x90\xb7\xad\x53\xf4\x9a\xb6\x6c\x38\xb0\x35\x27\x6c\xd1\x18\x1b\x50\x86\xbd\xbc\x02\x28\x6b\x82\xb3\x5a\x93\xcb\x4a\x32\xf9\x7d\xbb\xa1\x4d\xcb\xba\x20\x17\x39\x0c\xda\xfc\x7f\xfe\x32\xff\xe3\x02\x40\x39\x8a\xcb\xef\xb8\x26\x1f\xb0\x6e\x56\x60\x5a\xad\x07\x8d\x94\x6e\x7d\x20\xe7\x73\x74\x36\x1f\xd4\xcb\xd9\x2e\x7c\x43\x4a\x78\x96\xce\xb6\xcd\x0a\x1e\x7c\x4f\x14\x3a\xb1\x3a\x95\x12\xb1\x38\xa2\xd9\x87\xbf\x8e\x47\x7f\x65\x1f\xe2\x97\x46\xb7\x0e\xf5\x91\x75\x1c\xf4\x6c\xca\x56\xa3\x1b\x86\x17\x00\x5e\xd9\x86\x46\x0e\x29\x16\x00\x3b\xd4\x5c\x44\x8d\x12\x63\x11\xe9\xfa\xdd\xfa\xfd\x1f\x6e\x55\x45\x35\xa6\x41\x80\x82\xbc\x72\xdc\xc4\x79\xbd\x00\xc0\x1e\x42\x45\x90\x66\xc2\xd6\xba\xf8\xda\x8b\x01\xd7\xef\xd6\xdd\xea\xc6\x89\x63\x03\xf7\xda\xc9\x33\xf2\xee\x30\x76\xc6\xe7\x52\x04\x49\x73\xa0\x10\x7f\x52\x62\xd8\x79\x85\x0a\xf0\x89\xb5\xdd\x42\xa8\xd8\x83\xa3\xc6\x91\x27\x93\x3c\x3c\x22\x0b\x32\x05\x0d\xd8\xcd\x3f\x48\x85\x1c\x6e\xc9\x09\x11\xf0\x95\x6d\x75\x21\x20\xd8\x91\x0b\xe0\x48\xd9\xd2\xf0\x97\x81\xb2\x87\x60\x23\x4b\x8d\x81\x3a\x73\xf7\x0f\x9b\x40\xce\xa0\x16\x13\xb6\x74\x05\x68\x0a\xa8\xf1\x00\x8e\x84\x07\xb4\x66\x44\x2d\x4e\xf1\x39\xfc\xcd\x3a\x02\x36\x5b\xbb\x82\x2a\x84\xc6\xaf\x96\xcb\x92\x43\x8f\x67\x65\xeb\xba\x35\x1c\x0e\xcb\x88\x4a\xde\xb4\xc1\x3a\xbf\x2c\x68\x47\x7a\xe9\xb9\xcc\xd0\xa9\x8a\x03\xa9\xd0\x3a\x5a\x62\xc3\x59\x14\xdc\x44\x38\xe7\x75\xf1\x83\xeb\xc0\xef\x2f\x47\x92\x86\x83\x38\xdd\x07\xc7\xa6\x1c\x86\x23\xbe\x66\xed\x2e\x38\x13\xef\x62\xb7\x2c\xc9\x7f\x34\xaf\x0c\x89\x55\x6e\x7e\xba\xbd\x83\x9e\x69\x74\xc1\xa9\xcd\xa3\xb5\x8f\xcb\xfc\xd1\xf0\x62\x28\x36\x5b\x72\xc9\x71\x5b\x67\xeb\x48\x91\x4c\xd1\x58\x36\xa1\x43\x12\x93\x39\x35\xba\x6f\x37\x35\x07\xf1\xf4\x3f\x5b\xf2\x41\xfc\x93\xc3\xab\x18\xd5\xb0\x21\x68\x9b\x02\x03\x15\x39\xac\x0d\xbc\xc2\x9a\xf4\x2b\xf4\xf4\x9b\x9b\x5d\x2c\xec\x33\x31\xe9\xe3\x86\x1f\x27\xa3\xd3\x89\xc9\x5a\xc3\x70\x9f\x2e\x26\x3d\xd4\x45\xe0\x6d\x43\xea\x24\x32\x0a\xf2\xec\x04\xbd\x01\x03\x09\xe6\xc7\x19\x64\x3e\x16\x63\x3c\x2a\x27\x89\xe1\x74\x70\x46\x09\x79\x4a\x32\xb4\xc3\x5f\x6d\x59\xb2\x29\xcf\x57\xcd\x31\x81\x94\x71\xb7\x5c\x4e\xc4\xfe\xa3\x2c\xa3\xfd\xac\xe1\x60\xe5\xd3\x2f\xaf\x6e\x7f\x32\x3b\x76\xd6\xd4\x64\xc2\xf7\x11\xba\xa1\xf2\xfb\x84\xb9\x23\x83\xcf\x10\xc2\xf4\xa9\xf8\x1b\x57\x4e\x22\x46\x9e\x3e\x18\xd7\xc5\x39\xc5\x13\xfc\xf4\x55\x72\xfd\xba\x4f\xe2\xd7\x52\x7f\x47\xcb\x53\x4e\xa5\x51\xf5\x78\x82\x68\xd3\x40\x0e\x18\x5a\xff\x28\x94\xe3\xac\x13\x30\xdb\x8d\x97\x6c\xf1\x2c\x34\x2b\x6b\x0a\x1e\x95\xf9\x39\xe6\xc3\xb4\x2e\xdd\x51\x88\x7c\xfa\x61\x60\xe3\x03\x1a\x45\x3e\x3f\x23\xc3\x81\xea\x09\x70\x9f\x50\xbf\x38\xd2\x39\xe6\xc0\x54\x86\x44\xb3\x58\xa4\x4e\x0a\xd3\xa5\x4f\xba\x9e\x33\x93\x67\x24\x2a\x3a\x92\x35\x43\x43\x04\x35\xa9\x0a\x0d\xfb\x3a\x16\x25\x53\x50\x21\x75\x4b\xf2\xa1\xa7\x02\xf6\x15\x19\x31\xe8\x04\xd1\x82\x02\xb2\xf6\x83\x10\x47\xb1\x84\x87\x24\x55\x84\xc6\xb1\x75\x0c\xf7\xc6\xee\x0d\x58\x07\xfb\x58\x32\xe3\xb7\xa6\xd1\x87\x29\xe0\x5a\x40\xad\x8f\xb6\x8b\xe4\xa1\xe4\x1d\x19\x90\xd2\x92\xc3\x47\x33\xd6\xa7\xab\xc2\x1b\x02\x2c\x8a\xd8\x95\x4c\x50\xa4\xcf\x8d\x66\xc5\x41\x1f\x52\xb9\x3e\x8c\x7c\x0f\xa1\xc2\x20\xca\x3a\x1f\xcb\xb0\xb2\x75\x63\x4d\xb4\xb6\x8a\xc6\xda\xd8\x36\x4c\x90\x75\x18\xaa\x58\x82\xd0\xc4\x8a\xc2\x2e\x55\x36\xeb\xe9\x84\x7a\xb4\x65\x2c\x57\x92\x5c\x63\xb1\xb2\xb2\x72\x82\xe4\xc8\x86\x3e\x87\xb7\x46\x51\x87\xe9\xe2\x2a\x82\xba\x26\x34\xc2\x24\x9a\xe4\x88\x0f\x85\x06\x52\x0d\x9b\xa0\x29\xce\x2d\xa9\x00\x74\x1b\x0e\x0e\x1d\xeb\x03\x64\xc0\x32\x5b\xd9\x9a\x3c\x34\xe8\x42\x1f\xb0\xd7\xef\xd6\xa9\x17\xa9\x30\x85\x91\xc7\x7a\x8a\xe8\x06\xd5\xfd\x1e\x5d\xe1\xb3\x38\x7b\x6b\x5d\x7a\x13\xdb\x61\xe0\x0d\x6b\x0e\xd1\xd4\x8a\x9c\xe9\x10\x72\x48\x6a\x47\x7e\x53\xba\x0f\x12\xe4\x17\x0f\x3e\x7f\xad\x24\x00\x68\xf4\xe1\xce\xa1\xf1\xdc\x37\xd7\x53\xb3\x40\xc4\xac\x31\xac\x40\xca\x7c\x16\x78\x52\xb3\x47\x72\xae\xd4\x60\xef\xb1\x9c\xe1\xf0\xc8\x5a\x47\xe8\xa7\x2b\xc5\x5c\x6a\xb9\x89\x2b\x24\xbf\x9c\x05\x27\x82\x35\x94\xed\xad\x2b\xae\x8e\xcd\xca\x24\x61\x38\xeb\x6c\x87\xe4\x8c\x81\x4a\xeb\x0e\xf2\xae\xb0\xf5\x34\x7c\x68\x9d\x23\x13\xba\xdc\x3b\x95\x4e\xe4\x59\x87\x09\xa9\x62\xca\x60\x13\x3d\xcf\x42\xb1\x0d\x4d\x1b\xae\xc0\xb7\xaa\x02\xf4\x51\x66\xcd\x66\x4e\x50\xd9\x40\xa9\xa0\xa1\x94\x4c\xda\x2d\x15\x7c\xb1\x01\xdf\xd6\x35\x3a\xfe\x12\xe1\xaf\x92\x88\x5d\x76\x88\xc2\xcf\xc8\xf9\x88\x43\x1e\x96\x97\x27\x2f\x8d\x9f\x1f\xf7\xe4\x31\x8d\xdf\x1d\x1a\xea\x0b\xa6\x2c\x1e\xcc\x3d\xc4\x71\x54\xd5\xcf\xd8\x26\x1c\x1a\x56\xa8\xf5\x41\x42\xbf\x77\x78\x01\x82\x00\x49\xac\xbe\xb2\x2e\x40\x53\xb9\xd8\xb3\x8e\x53\x64\x64\x36\x47\xb5\xcb\x9e\x6c\x0a\x16\x3c\x74\xd5\x92\x63\xca\x87\x8f\x17\xb8\x31\x12\x33\x3a\x0b\xae\xa5\x8f\x17\xd0\x58\x8d\x8e\xc3\x21\x87\x9f\xed\x54\x02\x93\x87\x3e\x63\xdd\x68\xba\x02\x3e\xd7\xaf\xe7\xe2\x53\x55\x41\x21\xc7\xea\x90\x70\x14\xf7\x92\x57\x73\xca\x47\x69\xd8\xa7\x1d\xe7\xc7\x0b\x50\xe8\xa3\x31\x1b\x67\x37\xb8\xd1\x87\x38\x43\x64\xbd\x02\x6f\x4f\xd9\x7e\x5d\xf3\x8d\x04\x82\xd6\x54\xc0\xc7\x8b\xb5\xe9\xc8\x4f\x64\x20\x78\x0c\x11\xa9\x04\xd0\x83\xd6\x09\x20\xeb\x60\x36\xf1\x41\x28\x3e\x18\x9e\xed\xcf\xfa\x4f\xe8\x1c\x1e\xce\x3a\x37\xd9\x63\x16\x6f\xe3\x9a\x07\x78\x7e\x4a\xbb\x91\x96\xde\xd0\x96\x62\x60\xc5\xa3\x0d\x64\xe3\x81\x8c\x6d\xcb\x2a\x6e\x80\x24\x7b\x46\x40\x59\xd0\x14\xe0\x60\xdb\x09\x33\xb1\x91\xcd\x47\x10\x4c\xd6\xb6\xe0\x6d\x72\x8d\xa3\xae\xfe\x75\x9b\xe8\x6f\xcc\xf0\xd3\xfb\xfd\x19\x55\xae\xdf\xad\xfb\x5d\x7e\x1f\x63\x2e\xe9\x35\xc1\x17\x1e\x8f\xf4\x2d\x93\x2e\xde\x61\xa8\x9e\xc0\xfb\x72\xbd\xed\x74\x8d\xcd\x80\x15\x90\x33\x29\x3a\xe9\xd4\x62\x73\x43\x28\x6d\xf2\x0c\x38\xa5\x41\x33\x81\x1d\x75\x2b\xae\xd2\x4e\xb7\xdb\x50\x1f\x0f\x1e\xc4\x45\x80\x29\x2a\xe0\x2f\xb7\x6f\xdf\x2c\x7f\xb1\x33\x24\xa3\x16\x80\x4a\x91\xef\x1a\x45\xd9\xf9\x1c\x53\x73\xb7\xfb\xbb\x8d\x2d\x64\x8d\x86\xb7\xe4\x43\xde\xf1\x20\xe7\x3f\xbc\xfc\x34\x57\x0a\x7e\xb6\xee\x41\xd4\x0f\xdb\xf7\x1e\x50\xec\x93\x39\x06\x8a\xb0\xe7\x50\xf1\x5c\x78\x4a\x72\x28\x3a\xb5\x53\xd3\x18\xf0\x9e\xc0\x76\xea\xb6\x04\x9a\xef\x69\x05\x17\x82\xb6\x91\x98\xff\x92\x5d\xd1\xbf\xa7\xe3\x17\xe0\xff\xf6\x15\x39\x82\x0b\x99\x74\x91\x84\x1b\x4e\x69\x64\x6c\x94\x93\x3b\x21\x63\x73\x18\x1c\x97\x25\xb9\xc9\xee\x12\xba\xf4\x44\xb2\xa9\xff\x51\x60\xcf\x5b\x30\x76\x44\x22\x12\x16\xef\x35\xa4\x78\xcb\x54\x3c\x10\xfa\xc3\xcb\x4f\xb3\x12\x9f\xda\x4b\x72\x28\x7d\x86\x97\x29\x45\x4b\x02\xb4\xc5\x8f\x39\xdc\x45\x74\x1c\x4c\xc0\xcf\xc2\x49\x49\x13\x3a\x67\x59\x6b\x24\x5d\x5a\xa8\x70\x47\xe0\x6d\x4d\xb0\x27\xad\xb3\xae\xd1\x84\x3d\xc6\x8e\xa0\x77\x9c\xe0\x0d\xfb\x1e\x71\x1e\xad\xfd\xd9\xd8\xdd\xdb\xd7\x6f\x57\x49\x32\x01\x54\x19\x5b\x17\xe9\x4d\xb7\x6c\x50\xc7\x0a\x97\xce\x6c\x22\x1a\x67\x8b\x9d\x6f\x13\x7c\x82\xed\xfa\xd7\xbe\x24\x6d\xdb\xd0\x3a\xca\x2f\x9f\x13\xc7\xe7\xc7\x56\xc7\x67\xe2\x00\xeb\x3c\x71\xfc\x8f\x8e\x81\x9e\xac\x9c\x99\x38\x7e\x99\x52\xee\xcd\x08\xe5\x5f\x55\x4e\x7a\x31\x67\x28\x50\xd4\xaf\xb0\xca\x2f\x63\x3f\xdf\x04\xbf\xb4\x3b\x72\x3b\xa6\xfd\x72\x6f\xdd\x3d\x9b\x32\x13\x68\x66\x09\x03\x7e\x19\xcf\x25\x96\x3f\xc4\x9f\x67\xeb\x32\x7b\xb0\x31\xa5\x50\x9c\xfc\x7b\x68\x25\x7c\xfc\xf2\x59\x4a\xf5\xa7\x23\x4f\xaf\x63\x97\xb7\x29\x61\xa8\xf3\xb5\x12\x16\xfb\x8a\x55\xd5\x1f\x5c\x77\x39\x76\x26\x98\xd8\x43\x8d\x45\x4a\xcd\x68\x0e\xbf\x39\x94\xc5\xa0\xa9\x3f\x3f\x64\xdd\x0d\x49\x86\xa6\x90\xff\x9e\x7d\x90\xf1\x67\x59\xb0\xe5\x27\x85\xef\xdf\xd7\xaf\x7f\x1f\x80\xb7\xfc\xac\x58\xfd\xe6\xf6\x6e\x62\xc1\xd9\xd0\xf1\xa6\xe9\x05\xea\xa6\xc2\x17\xc7\xb1\xd8\x4e\x65\xdd\xfd\xd2\xe8\x33\x40\x3a\x1f\x5b\x81\xb4\xf6\x69\x20\x58\x27\x3b\xdb\x34\x72\xdc\x1a\x49\xcf\xd0\x04\x2a\xde\x9c\xdf\x30\x5d\x5c\x9c\x5c\x21\xc5\xd7\xd1\xd9\x19\x7c\xf8\xb4\x48\x54\xa9\x78\xdf\x4b\x23\x83\xe7\xf7\x73\xc3\x6d\xdf\xad\x58\x5d\xd1\xb5\x52\xb6\x35\x61\xe2\xca\x0f\x9d\x3d\x5e\xf3\x8d\x13\xc5\xd3\x2f\x03\xdd\x06\x55\x8e\x6d\xa8\xac\xe3\x2f\xb1\x9f\x3d\xde\x08\x2e\x4e\x6e\xce\x6e\xac\x3e\xbd\x76\x7c\xec\xfa\xae\x46\x83\x25\xb9\xcc\xc9\x42\xd7\x6a\xb1\x56\x26\xbd\xeb\x2f\xce\xb6\x4d\xe7\x89\x68\xa5\xe1\xae\x25\x8d\xa5\x53\xed\x1a\x1b\x3f\x38\x2b\xa5\x9a\xf8\xea\x93\x55\x30\x59\xc5\x27\xdf\x6e\xfa\xa5\x22\x13\xc5\xbf\x25\x85\xf8\x9b\xee\x31\x9e\xc6\xd9\x93\x72\xf4\x04\x9a\x0d\x06\x55\x7d\x95\x3a\x36\x8d\xcf\x77\x2f\x1e\xb2\x28\x90\x6a\x6b\xfc\x7f\x89\xcb\xc3\x8b\xcf\x73\x5b\x1e\x2f\x32\xa7\x99\x15\xa4\xe9\x8c\xaf\x4e\xb7\xa1\x13\x02\xc8\xdf\x7d\x1c\xfc\x0e\x51\x96\xc3\xfe\x6f\x24\xd1\xbc\xce\xdf\x05\xd8\x3f\xcb\x26\xdb\x94\x13\xb1\x33\x46\xe7\xa6\x9b\x25\xff\x6f\x68\x1b\xa3\xbc\xd3\xee\x2b\x0c\x17\x67\x57\xcb\x31\x40\x26\xc1\xdf\xf5\x6f\x11\xff\x93\xa1\xfd\x1d\x01\xfd\x9f\x00\x00\x00\xff\xff\x51\x13\x4b\x88\x28\x20\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
