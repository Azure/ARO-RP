// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x93\xdb\xb6\x11\x7f\xd7\xa7\xd8\xb9\x3c\xb8\x99\x39\x52\xb5\x3b\x9d\xe9\xe8\xed\x6a\x27\x99\x6b\x53\xdb\x73\x77\xc9\x4b\x9c\x87\x15\xb8\x22\xb7\x07\x02\x2c\x00\x4a\x96\x3b\xfd\xee\x9d\x05\x48\x8a\x92\x48\x9f\x7c\x6e\x52\xbe\x48\x04\x81\xfd\x87\xdf\xfe\x03\xb0\xe1\x9f\xc9\x79\xb6\x66\x05\xdb\x97\x8b\x47\x36\xc5\x0a\xde\x62\x4d\xbe\x41\x45\x8b\x9a\x02\x16\x18\x70\xb5\x00\x30\x58\xd3\x0a\x6c\x43\xc6\x57\xbc\x09\x19\x7e\x6a\x1d\x65\xb6\x21\x87\xc1\xba\x45\x96\x65\x8b\x31\x35\x6c\x98\x3e\x06\x32\xf2\xe6\xf3\xc7\xbf\xf8\x9c\xed\x72\xfb\x72\x4d\x01\x7b\x3e\xaf\x5b\x1f\x6c\x7d\x47\xde\xb6\x4e\xd1\x1b\xda\xb0\xe1\xc0\xd6\x1c\xb1\x45\x63\x6c\x40\x19\xf6\xf2\x0a\xa0\xac\x09\xce\x6a\x4d\x2e\x2b\xc9\xe4\x8f\xed\x9a\xd6\x2d\xeb\x82\x5c\xe4\x30\x68\xf3\xc7\xfc\x55\xfe\xe7\x05\x80\x72\x14\x97\x3f\x70\x4d\x3e\x60\xdd\xac\xc0\xb4\x5a\x0f\x1a\x29\xdd\xfa\x40\xce\xe7\xe8\x6c\x3e\xa8\x97\xb3\x5d\xf8\x86\x94\xf0\x54\xd6\xf4\x64\xa3\x04\x3e\x38\x0c\x54\xee\x57\xf0\xd6\x1a\x5a\x00\x94\xce\xb6\xcd\x0a\xce\x08\x24\x16\x9d\xdc\x9d\xce\x89\x5b\x1c\xd1\xec\xc3\xdf\xc7\xa3\x3f\xb2\x0f\xf1\x4b\xa3\x5b\x87\xfa\x20\x5b\x62\xcb\xa6\x6c\x35\xba\x61\x78\x01\xd0\x38\xf2\xe4\xb6\xf4\x93\x79\x34\x76\x67\xbe\x67\xd2\x85\x5f\x41\x70\xad\xc8\xe5\x95\x6d\x68\xb4\x9f\xc5\x02\x60\x8b\x9a\x8b\x68\x90\x24\x96\x08\x7c\xf3\xfe\xf6\xe7\x3f\xdd\xab\x8a\x6a\x4c\x83\x00\x05\x79\xe5\xb8\x89\xf3\x7a\xf1\x80\x3d\x84\x8a\x20\xcd\x84\x8d\x75\xf1\xb5\x17\x12\x6e\xde\xdf\x76\xab\x1b\x27\xb8\x08\xdc\xeb\x2e\xcf\x08\x1c\xc3\xd8\x09\x9f\x17\x22\x48\x9a\x03\x85\xc0\x81\x12\xc3\xce\xfa\x54\x80\x4f\xac\xed\x06\x42\xc5\x1e\x1c\x45\x03\x98\x04\x90\x11\x59\x90\x29\x68\xc0\xae\xff\x49\x2a\xe4\x70\x2f\x46\x72\x1e\x7c\x65\x5b\x5d\x74\x3b\x1a\xc0\x91\xb2\xa5\xe1\x4f\x03\x65\x0f\xc1\x46\x96\x1a\x03\x75\x9b\xd1\x3f\x6c\x02\x39\x83\x5a\x4c\xd8\xd2\x35\xa0\x29\xa0\xc6\x3d\x38\x12\x1e\xd0\x9a\x11\xb5\x38\xc5\xe7\xf0\x0f\xeb\x08\xd8\x6c\xec\x0a\xaa\x10\x1a\xbf\x5a\x2e\x4b\x0e\xbd\x3b\x28\x5b\xd7\xad\xe1\xb0\x5f\x46\x50\xf3\xba\x0d\xd6\xf9\x65\x41\x5b\xd2\x4b\xcf\x65\x86\x4e\x55\x1c\x48\x85\xd6\xd1\x12\x1b\xce\xa2\xe0\x26\x7a\x43\x5e\x17\xdf\xb8\xce\x77\xfc\x8b\x91\xa4\x61\x2f\x9b\xee\x83\x63\x53\x0e\xc3\x11\x7d\xb3\x76\x17\x14\xca\xee\x62\xb7\x2c\xc9\x7f\x30\xaf\x0c\x89\x55\xee\xbe\xbb\x7f\x80\x9e\x69\xdc\x82\x63\x9b\x47\x6b\x1f\x96\xf9\x83\xe1\xc5\x50\x6c\x36\xe4\xd2\xc6\x6d\x9c\xad\x23\x45\x32\x45\x63\xd9\x84\x0e\x49\x4c\xe6\xd8\xe8\xbe\x5d\xd7\x1c\x64\xa7\xff\xd5\x92\x0f\xb2\x3f\x39\xbc\x8e\x41\x01\xd6\x04\x6d\x53\x60\xa0\x22\x87\x5b\x03\xaf\xb1\x26\xfd\x1a\x3d\xfd\xe6\x66\x17\x0b\xfb\x4c\x4c\xfa\xb4\xe1\xc7\xb1\xec\x78\x62\xb2\xd6\x30\xdc\x47\x9b\xc9\x1d\xea\x3c\xf0\xbe\x21\x75\xe4\x19\x05\x79\x76\x82\xde\x80\x81\x04\xf3\xe3\xf8\x32\xef\x8b\xd1\x1f\x95\x93\xc0\x70\x3c\x38\xa3\x84\x3c\x25\x19\xda\xe2\x8f\xb6\x2c\xd9\x94\xa7\xab\xe6\x98\x40\x0a\xd8\x1b\x2e\x27\x7c\xff\x49\x96\xd1\x7e\xd6\x70\xb0\xf2\xe9\x87\xd7\xf7\xdf\x99\x2d\x3b\x6b\x6a\x32\xe1\xeb\x08\xdd\x51\xf9\x75\xc2\x3c\x90\xc1\x67\x08\x61\xfa\x50\xfc\x85\x2b\x27\x11\x23\x4f\xef\x8c\xb7\xc5\x29\xc5\x23\xfc\xf4\x49\xf6\xf6\x4d\x1f\xc4\x6f\x24\x7d\x8f\x96\xa7\x98\x4a\xa3\xdc\x72\x81\x68\xd3\x40\x0e\x18\x5a\xff\x24\x94\xe3\xac\x23\x30\xdb\x75\xcc\x65\xcf\x42\xb3\xb2\xa6\xe0\x51\x95\x30\xc7\x7c\x98\xd6\x85\x3b\x0a\x91\x4f\x3f\x0c\x6c\x7c\x40\xa3\xc8\xe7\x27\x64\x38\x50\x3d\x01\xee\x23\xea\x57\x07\x3a\x87\x18\x98\xd2\x90\x68\x16\x93\xd4\x51\x62\x7a\xe1\x93\xae\xa7\xcc\xe4\x19\x89\x8a\x8e\x64\xcd\x50\x4f\x41\x4d\xaa\x42\xc3\xbe\x8e\x49\xc9\x14\x54\x48\xde\x92\x78\xe8\xa9\x80\x5d\x45\x46\x0c\x3a\x41\xb4\xa0\x80\xac\xfd\x20\xc4\x41\x2c\xe1\x21\x41\x15\xa1\x71\x6c\x1d\x43\x2c\x28\xc0\x3a\xd8\xc5\x94\x19\xbf\x35\x8d\xde\x4f\x01\xd7\x02\x6a\x7d\xb0\x5d\x24\x0f\x25\x6f\xc9\x80\xa4\x96\x1c\x3e\x98\xb1\x3e\x5d\x16\x5e\x13\x60\x51\xc4\xaa\x64\x82\x22\x7d\x6c\x34\x2b\x0e\x7a\x9f\xd2\xf5\x7e\xb4\xf7\x10\x2a\x0c\xa2\xac\xf3\x31\x0d\x2b\x5b\x37\xd6\x44\x6b\xab\x68\xac\xb5\x6d\xc3\x04\x59\x87\xa1\x8a\x29\x08\x4d\xcc\x28\xec\x52\x66\xb3\x9e\x8e\xa8\x47\x5b\xc6\x74\x25\xc1\x35\x26\x2b\x2b\x2b\x27\x48\x8e\x6c\xe8\x73\x78\x67\x14\x75\x98\x2e\xae\x23\xa8\x6b\x42\x23\x4c\xa2\x49\x0e\xf8\x50\x68\x20\xe5\xb0\x09\x9a\xb2\xb9\x25\x15\x80\x6e\xcd\xc1\xa1\x63\xbd\x87\x0c\x58\x66\x2b\x5b\x93\x87\x06\x5d\xe8\x1d\xf6\xe6\xfd\x6d\xaa\x45\x2a\x4c\x6e\xe4\xb1\x9e\x22\xba\x46\xf5\xb8\x43\x57\xf8\x2c\xce\xde\x58\x97\xde\xc4\x76\x18\x78\xcd\x9a\x43\x34\xb5\x22\x67\x3a\x84\xec\x93\xda\x91\xdf\x94\xee\x83\x04\xf9\xd5\xd9\xe7\xcf\xa5\x04\x00\x8d\x3e\x3c\x38\x34\x9e\xfb\xda\x7c\x6a\x16\x88\x98\x35\x86\x15\x48\x9a\xcf\x02\x4f\x6a\xf6\x44\xcc\x95\x1c\xec\x3d\x96\x33\x1c\x9e\x58\xeb\x08\xfd\x74\xa6\x98\x0b\x2d\x77\x71\x85\xc4\x97\x13\xe7\x44\xb0\x86\xb2\x9d\x75\xc5\xf5\xa1\x58\x99\x24\x0c\x27\x95\xed\x10\x9c\xa5\xef\xb0\x6e\x2f\xef\x0a\x5b\x4f\xc3\x87\xd6\x39\x32\xa1\x8b\xbd\x53\xe1\x44\x9e\xdb\x30\x21\x55\x0c\x19\x6c\xe2\xce\xb3\x50\x6c\x43\xd3\x86\x6b\xf0\xad\xaa\x00\x7d\x94\x59\xb3\x99\x13\x54\xfa\x2f\x15\x34\x94\x12\x49\xbb\xa5\x82\x2f\x36\xe0\xdb\xba\x46\xc7\x9f\x22\xfc\x55\x12\xb1\x8b\x0e\x51\xf8\x19\x39\x9f\xd8\x90\xf3\xf4\x72\xf1\xd2\xf8\xf9\xe9\x9d\x3c\x84\xf1\x87\x7d\x43\x7d\xc2\x94\xc5\x83\xb9\x07\x3f\x8e\xaa\xfa\x19\xdb\x84\x7d\xc3\x0a\xb5\xde\x8b\xeb\xf7\x1b\x5e\x80\x20\x40\x02\xab\xaf\xac\x0b\xd0\x54\x2e\xd6\xac\xe3\x10\x19\x99\xcd\x51\xed\xa2\x27\x9b\x82\x05\x0f\x5d\xb6\xe4\x18\xf2\xe1\xc3\x15\xae\x8d\xf8\x8c\xce\xa4\x09\xfc\x70\x05\x8d\xd5\xe8\x38\xec\x73\xf8\xde\x4e\x05\x30\x79\xe8\x23\xd6\x8d\xa6\x6b\xe0\x53\xfd\x7a\x2e\x3e\x65\x15\x14\x72\xac\xf6\x09\x47\xb1\x97\xbc\x9e\x53\x3e\x4a\xc3\x3e\x75\x9c\x1f\xae\x40\xa1\x8f\xc6\x6c\x9c\x5d\xe3\x5a\xef\xe3\x0c\x91\xf5\x1a\xbc\x3d\x66\xfb\x79\xcd\xd7\xe2\x08\x5a\x53\x01\x1f\xae\x6e\x4d\x47\x7e\x22\x02\xc1\x53\x88\x48\x29\x80\xce\x4a\x27\x80\xac\x83\xd9\xc4\x07\xa1\x78\x36\x3c\x5b\x9f\xf5\x9f\xd0\x39\xdc\x9f\x54\x6e\xd2\x63\x16\xef\xe2\x9a\x33\x3c\x5f\x52\x6e\xa4\xa5\x77\xb4\xa1\xe8\x58\xf1\x64\x04\xd9\x78\x20\x63\xdb\xb2\x8a\x0d\x90\x44\xcf\x08\x28\x0b\x9a\x02\xec\x6d\x3b\x61\x26\x36\xd2\x7c\x04\xc1\x64\x6d\x0b\xde\xa4\xad\x71\xd4\xe5\xbf\xae\x89\xfe\xc2\x08\x3f\xdd\xef\xcf\xa8\x72\xf3\xfe\xb6\xef\xf2\x7b\x1f\x73\x49\xaf\x09\xbe\xf0\xb4\xa7\x6f\x98\x74\xf1\x1e\x43\x75\x01\xef\x17\xb7\x9b\x4e\xd7\x58\x0c\x58\x01\x39\x93\xa2\xa3\x4a\x2d\x16\x37\x84\x52\x26\xcf\x80\x53\x0a\x34\x13\xd8\x51\xb7\xe2\x3a\x75\xba\x5d\x43\x7d\x38\x78\x90\x2d\x02\x4c\x5e\x01\x7f\xbb\x7f\xf7\x76\xf9\x83\x9d\x21\x19\xb5\x00\x54\x8a\x7c\x57\x28\x4a\xe7\x73\x08\xcd\x5d\xf7\x77\x1f\x4b\xc8\x1a\x0d\x6f\xc8\x87\xbc\xe3\x41\xce\xff\xf2\xea\xd7\xb9\x54\xf0\xbd\x75\x67\x5e\x3f\xb4\xef\x3d\xa0\xd8\x27\x73\x0c\x14\x61\xc7\xa1\xe2\x39\xf7\x94\xe0\x50\x74\x6a\xa7\xa2\x31\xe0\x23\x81\xed\xd4\x6d\x09\x34\x3f\xd2\x0a\xae\x04\x6d\x23\x31\xff\x2d\x5d\xd1\x7f\xa6\xfd\x17\xe0\x0f\xbb\x8a\x1c\xc1\x95\x4c\xba\x4a\xc2\x0d\xa7\x34\x32\x36\x8a\xc9\x9d\x90\xb1\x38\x0c\x8e\xcb\x92\xdc\x64\x75\x09\x5d\x78\x22\x69\xea\xbf\x15\xd8\xf3\x06\x8c\x1d\x91\x88\x84\x65\xf7\x1a\x52\xbc\x61\x2a\xce\x84\xfe\xe5\xd5\xaf\xb3\x12\x1f\xdb\x4b\x62\x28\x7d\x84\x57\x29\x44\x4b\x00\xb4\xc5\xb7\x39\x3c\x44\x74\xec\x4d\xc0\x8f\xc2\x49\x49\x11\x3a\x67\x59\x6b\x24\x5c\x5a\xa8\x70\x4b\xe0\x6d\x4d\xb0\x23\xad\xb3\xae\xd0\x84\x1d\xc6\x8a\xa0\xdf\x38\xc1\x1b\xf6\x35\xe2\x3c\x5a\xfb\xb3\xb1\x87\x77\x6f\xde\xad\x92\x64\x02\xa8\x32\x96\x2e\x52\x9b\x6e\xd8\xa0\x8e\x19\x2e\x9d\xd9\x44\x34\xce\x26\x3b\xdf\x26\xf8\x04\xdb\xd5\xaf\x7d\x4a\xda\xb4\xa1\x75\x94\xbf\x78\x8e\x1f\x9f\x1e\x5b\x1d\x9e\x89\x03\xac\xd3\xc0\xf1\x7f\x3a\x06\xba\x58\x39\x33\x71\xfc\x32\xa5\xdc\xdb\x11\xca\x3f\xab\x9c\xd4\x62\xce\x50\xa0\xa8\x5f\x61\x95\x5f\xc6\x7a\xbe\x09\x7e\x69\xb7\xe4\xb6\x4c\xbb\xe5\xce\xba\x47\x36\x65\x26\xd0\xcc\x12\x06\xfc\x32\x9e\x4b\x2c\xbf\x89\x3f\xcf\xd6\x65\xf6\x60\x63\x4a\xa1\x38\xf9\xf7\xd0\x4a\xf8\xf8\xe5\xb3\x94\xea\x4f\x47\x2e\xcf\x63\x2f\xee\x53\xc0\x50\xa7\x6b\xc5\x2d\x76\x15\xab\xaa\x3f\xb8\xee\x62\xec\x8c\x33\xb1\x87\x1a\x8b\x14\x9a\xd1\xec\x7f\x73\x28\x8b\x41\x53\x7d\xbe\xcf\xba\x0b\x96\x0c\x4d\x21\xff\x3d\xfb\x20\xe3\xcf\xb2\x60\xcb\x17\xb9\xef\x4f\xb7\x6f\x7e\x1f\x80\xb7\xfc\x2c\x5f\xfd\xe2\xf2\x6e\x62\xc1\xc9\xd0\xe1\xa2\xea\x25\xea\xa6\xc2\x97\x87\xb1\x58\x4e\x65\xdd\xf5\xd4\xe8\x33\x40\x3a\x1f\x1b\xee\x77\xa4\x19\xb2\x4e\x3a\xdb\x34\x72\x68\x8d\xa4\x66\x68\x02\x15\x6f\x4f\xef\x9f\xae\xae\x8e\x2e\x98\xe2\xeb\xe8\xec\x0c\x7e\xf9\x75\x91\xa8\x52\xf1\x73\x2f\x8d\x0c\x9e\x5e\xef\x0d\x97\x85\xf7\x62\x75\x45\x37\x4a\xd9\xd6\x84\x89\x1b\x43\x74\xf6\x70\x4b\x38\x0e\x14\x97\xdf\x25\xba\x35\xaa\x1c\xdb\x50\x59\xc7\x9f\x62\x3d\x7b\xb8\x50\x5c\x1c\xdd\xab\xdd\x59\x7d\x7c\x6b\xf9\xd4\xed\x5f\x8d\x06\x4b\x72\x99\x93\x85\xae\xd5\x62\xad\x4c\x6a\xd7\x1f\x9c\x6d\x9b\x6e\x27\xa2\x95\x86\xbb\x96\x34\x96\x4e\xb5\x6b\x6c\xfc\xb0\x59\x29\xd4\xc4\x57\x9f\xac\x82\xc9\x2a\x3e\xed\xed\xba\x5f\x2a\x32\x51\xfc\x5b\x52\x88\xbf\xe9\x1e\xe3\x32\xce\x9e\x94\xa3\x0b\x68\xea\x74\x9b\x98\x41\x83\x41\x55\x63\x36\xf2\x77\x17\x07\xcf\x18\x62\xd3\xf8\x7c\xfb\xf2\x9c\x6b\x81\x54\x5b\xe3\x2f\x61\x7c\xc6\xef\x9c\xcb\xf9\x4d\xe9\xa9\x79\x0f\x37\x9f\xd3\xcc\x0a\xd2\xf4\x3f\x51\xf8\x62\x51\x96\x43\x4b\x38\x92\x68\x5e\xe7\xaf\xc2\xf0\x5f\xa5\xef\x36\xe5\x84\x3b\x8d\x01\xbb\xee\x66\xc9\xff\x3b\xda\x44\xc7\xef\xb4\xfb\x0c\xc3\xc5\xc9\x5d\x74\xf4\x99\x49\x7f\xe8\x4a\xba\xe8\x12\x93\xde\xfe\x15\x3e\xfe\xdf\x00\x00\x00\xff\xff\x52\xa8\xa2\xf1\x7a\x20\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
