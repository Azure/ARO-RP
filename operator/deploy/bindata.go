// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x4d\x93\xe3\xb6\xd1\xbe\xeb\x57\x74\x8d\x0f\xf3\xba\x6a\x48\xbd\xbb\xa9\x54\xa5\x74\x9b\xec\xda\xae\x49\x9c\xdd\xad\x99\x89\x2f\x5e\x1f\x5a\x60\x8b\xec\x0c\x08\x30\x00\x28\xad\x36\x95\xff\x9e\x6a\x80\xa4\x28\x89\xdc\x91\x67\x63\x87\x17\x89\x20\xd0\x9f\x4f\x7f\x00\xc0\x86\x7f\x22\xe7\xd9\x9a\x15\x6c\x5f\x2d\x9e\xd8\x14\x2b\x78\x87\x35\xf9\x06\x15\x2d\x6a\x0a\x58\x60\xc0\xd5\x02\xc0\x60\x4d\x2b\xb0\x0d\x19\x5f\xf1\x26\x64\xf8\xb9\x75\x94\xd9\x86\x1c\x06\xeb\x16\x59\x96\x2d\xc6\xd4\xb0\x61\xfa\x14\xc8\xc8\x9b\xcf\x9f\xfe\xe4\x73\xb6\xcb\xed\xab\x35\x05\xec\xf9\xbc\x69\x7d\xb0\xf5\x3d\x79\xdb\x3a\x45\x6f\x69\xc3\x86\x03\x5b\x73\xc4\x16\x8d\xb1\x01\x65\xd8\xcb\x2b\x80\xb2\x26\x38\xab\x35\xb9\xac\x24\x93\x3f\xb5\x6b\x5a\xb7\xac\x0b\x72\x91\xc3\xa0\xcd\xff\xe7\xaf\xf3\x3f\x2e\x00\x94\xa3\xb8\xfc\x91\x6b\xf2\x01\xeb\x66\x05\xa6\xd5\x7a\xd0\x48\xe9\xd6\x07\x72\x3e\x47\x67\xf3\x41\xbd\x9c\xed\xc2\x37\xa4\x84\x67\xe9\x6c\xdb\xac\xe0\xec\x7b\xa2\xd0\x89\xd5\xa9\x94\x88\xc5\x11\xcd\x3e\xfc\x75\x3c\xfa\x23\xfb\x10\xbf\x34\xba\x75\xa8\x0f\xac\xe3\xa0\x67\x53\xb6\x1a\xdd\x30\xbc\x00\xf0\xca\x36\x34\x72\x48\xb1\x00\xd8\xa2\xe6\x22\x6a\x94\x18\x8b\x48\xb7\x1f\xee\x7e\xfa\xc3\x83\xaa\xa8\xc6\x34\x08\x50\x90\x57\x8e\x9b\x38\xaf\x17\x00\xd8\x43\xa8\x08\xd2\x4c\xd8\x58\x17\x5f\x7b\x31\xe0\xf6\xc3\x5d\xb7\xba\x71\xe2\xd8\xc0\xbd\x76\xf2\x8c\xbc\x3b\x8c\x9d\xf0\xb9\x16\x41\xd2\x1c\x28\xc4\x9f\x94\x18\x76\x5e\xa1\x02\x7c\x62\x6d\x37\x10\x2a\xf6\xe0\xa8\x71\xe4\xc9\x24\x0f\x8f\xc8\x82\x4c\x41\x03\x76\xfd\x0f\x52\x21\x87\x07\x72\x42\x04\x7c\x65\x5b\x5d\x08\x08\xb6\xe4\x02\x38\x52\xb6\x34\xfc\x79\xa0\xec\x21\xd8\xc8\x52\x63\xa0\xce\xdc\xfd\xc3\x26\x90\x33\xa8\xc5\x84\x2d\xdd\x00\x9a\x02\x6a\xdc\x83\x23\xe1\x01\xad\x19\x51\x8b\x53\x7c\x0e\x7f\xb3\x8e\x80\xcd\xc6\xae\xa0\x0a\xa1\xf1\xab\xe5\xb2\xe4\xd0\xe3\x59\xd9\xba\x6e\x0d\x87\xfd\x32\xa2\x92\xd7\x6d\xb0\xce\x2f\x0b\xda\x92\x5e\x7a\x2e\x33\x74\xaa\xe2\x40\x2a\xb4\x8e\x96\xd8\x70\x16\x05\x37\x11\xce\x79\x5d\x7c\xe3\x3a\xf0\xfb\xeb\x91\xa4\x61\x2f\x4e\xf7\xc1\xb1\x29\x87\xe1\x88\xaf\x59\xbb\x0b\xce\xc4\xbb\xd8\x2d\x4b\xf2\x1f\xcc\x2b\x43\x62\x95\xfb\xef\x1e\x1e\xa1\x67\x1a\x5d\x70\x6c\xf3\x68\xed\xc3\x32\x7f\x30\xbc\x18\x8a\xcd\x86\x5c\x72\xdc\xc6\xd9\x3a\x52\x24\x53\x34\x96\x4d\xe8\x90\xc4\x64\x8e\x8d\xee\xdb\x75\xcd\x41\x3c\xfd\xcf\x96\x7c\x10\xff\xe4\xf0\x26\x46\x35\xac\x09\xda\xa6\xc0\x40\x45\x0e\x77\x06\xde\x60\x4d\xfa\x0d\x7a\xfa\xcd\xcd\x2e\x16\xf6\x99\x98\xf4\x79\xc3\x8f\x93\xd1\xf1\xc4\x64\xad\x61\xb8\x4f\x17\x93\x1e\xea\x22\xf0\xa1\x21\x75\x14\x19\x05\x79\x76\x82\xde\x80\x81\x04\xf3\xe3\x0c\x32\x1f\x8b\x31\x1e\x95\x93\xc4\x70\x3c\x38\xa3\x84\x3c\x25\x19\xda\xe2\x8f\xb6\x2c\xd9\x94\xa7\xab\xe6\x98\x40\xca\xb8\x1b\x2e\x27\x62\xff\x59\x96\xd1\x7e\xd6\x70\xb0\xf2\xe9\x87\x37\x0f\xdf\x99\x2d\x3b\x6b\x6a\x32\xe1\xeb\x08\xdd\x53\xf9\x75\xc2\x3c\x92\xc1\x17\x08\x61\xfa\x54\xfc\x2b\x57\x4e\x22\x46\x9e\x3e\x18\xef\x8a\x53\x8a\x47\xf8\xe9\xab\xe4\xdd\xdb\x3e\x89\xdf\x4a\xfd\x1d\x2d\x4f\x39\x95\x46\xd5\xe3\x02\xd1\xa6\x81\x1c\x30\xb4\xfe\x59\x28\xc7\x59\x47\x60\xb6\x6b\x2f\xd9\xe2\x45\x68\x56\xd6\x14\x3c\x2a\xf3\x73\xcc\x87\x69\x5d\xba\xa3\x10\xf9\xf4\xc3\xc0\xc6\x07\x34\x8a\x7c\x7e\x42\x86\x03\xd5\x13\xe0\x3e\xa2\x7e\x75\xa0\x73\xc8\x81\xa9\x0c\x89\x66\xb1\x48\x1d\x15\xa6\x6b\x9f\x74\x3d\x65\x26\xcf\x48\x54\x74\x24\x6b\x86\x86\x08\x6a\x52\x15\x1a\xf6\x75\x2c\x4a\xa6\xa0\x42\xea\x96\xe4\x43\x4f\x05\xec\x2a\x32\x62\xd0\x09\xa2\x05\x05\x64\xed\x07\x21\x0e\x62\x09\x0f\x49\xaa\x08\x8d\x63\xeb\x18\x9e\x8c\xdd\x19\xb0\x0e\x76\xb1\x64\xc6\x6f\x4d\xa3\xf7\x53\xc0\xb5\x80\x5a\x1f\x6c\x17\xc9\x43\xc9\x5b\x32\x20\xa5\x25\x87\x8f\x66\xac\x4f\x57\x85\xd7\x04\x58\x14\xb1\x2b\x99\xa0\x48\x9f\x1a\xcd\x8a\x83\xde\xa7\x72\xbd\x1f\xf9\x1e\x42\x85\x41\x94\x75\x3e\x96\x61\x65\xeb\xc6\x9a\x68\x6d\x15\x8d\xb5\xb6\x6d\x98\x20\xeb\x30\x54\xb1\x04\xa1\x89\x15\x85\x5d\xaa\x6c\xd6\xd3\x11\xf5\x68\xcb\x58\xae\x24\xb9\xc6\x62\x65\x65\xe5\x04\xc9\x91\x0d\x7d\x0e\xef\x8d\xa2\x0e\xd3\xc5\x4d\x04\x75\x4d\x68\x84\x49\x34\xc9\x01\x1f\x0a\x0d\xa4\x1a\x36\x41\x53\x9c\x5b\x52\x01\xe8\xd6\x1c\x1c\x3a\xd6\x7b\xc8\x80\x65\xb6\xb2\x35\x79\x68\xd0\x85\x3e\x60\x6f\x3f\xdc\xa5\x5e\xa4\xc2\x14\x46\x1e\xeb\x29\xa2\x6b\x54\x4f\x3b\x74\x85\xcf\xe2\xec\x8d\x75\xe9\x4d\x6c\x87\x81\xd7\xac\x39\x44\x53\x2b\x72\xa6\x43\xc8\x3e\xa9\x1d\xf9\x4d\xe9\x3e\x48\x90\x5f\x9d\x7d\xfe\x52\x49\x00\xd0\xe8\xc3\xa3\x43\xe3\xb9\x6f\xae\xa7\x66\x81\x88\x59\x63\x58\x81\x94\xf9\x2c\xf0\xa4\x66\xcf\xe4\x5c\xa9\xc1\xde\x63\x39\xc3\xe1\x99\xb5\x8e\xd0\x4f\x57\x8a\xb9\xd4\x72\x1f\x57\x48\x7e\x39\x09\x4e\x04\x6b\x28\xdb\x59\x57\xdc\x1c\x9a\x95\x49\xc2\x70\xd2\xd9\x0e\xc9\x19\x03\x95\xd6\xed\xe5\x5d\x61\xeb\x69\xf8\xd0\x3a\x47\x26\x74\xb9\x77\x2a\x9d\xc8\x73\x17\x26\xa4\x8a\x29\x83\x4d\xf4\x3c\x0b\xc5\x36\x34\x6d\xb8\x01\xdf\xaa\x0a\xd0\x47\x99\x35\x9b\x39\x41\x65\x03\xa5\x82\x86\x52\x32\x69\xb7\x54\xf0\xc5\x06\x7c\x5b\xd7\xe8\xf8\x73\x84\xbf\x4a\x22\x76\xd9\x21\x0a\x3f\x23\xe7\x33\x0e\x39\x2f\x2f\x17\x2f\x8d\x9f\x9f\xf7\xe4\x21\x8d\x3f\xee\x1b\xea\x0b\xa6\x2c\x1e\xcc\x3d\xc4\x71\x54\xd5\xcf\xd8\x26\xec\x1b\x56\xa8\xf5\x5e\x42\xbf\x77\x78\x01\x82\x00\x49\xac\xbe\xb2\x2e\x40\x53\xb9\xd8\xb3\x8e\x53\x64\x64\x36\x47\xb5\xcb\x9e\x6c\x0a\x16\x3c\x74\xd5\x92\x63\xca\x87\x8f\x57\xb8\x36\x12\x33\x3a\x0b\xae\xa5\x8f\x57\xd0\x58\x8d\x8e\xc3\x3e\x87\xef\xed\x54\x02\x93\x87\x3e\x61\xdd\x68\xba\x01\x3e\xd5\xaf\xe7\xe2\x53\x55\x41\x21\xc7\x6a\x9f\x70\x14\xf7\x92\x37\x73\xca\x47\x69\xd8\xa7\x1d\xe7\xc7\x2b\x50\xe8\xa3\x31\x1b\x67\xd7\xb8\xd6\xfb\x38\x43\x64\xbd\x01\x6f\x8f\xd9\x7e\x59\xf3\xb5\x04\x82\xd6\x54\xc0\xc7\xab\x3b\xd3\x91\x9f\xc8\x40\xf0\x1c\x22\x52\x09\xa0\xb3\xd6\x09\x20\xeb\x60\x36\xf1\x41\x28\x9e\x0d\xcf\xf6\x67\xfd\x27\x74\x0e\xf7\x27\x9d\x9b\xec\x31\x8b\xf7\x71\xcd\x19\x9e\x2f\x69\x37\xd2\xd2\x7b\xda\x50\x0c\xac\x78\xb4\x81\x6c\x3c\x90\xb1\x6d\x59\xc5\x0d\x90\x64\xcf\x08\x28\x0b\x9a\x02\xec\x6d\x3b\x61\x26\x36\xb2\xf9\x08\x82\xc9\xda\x16\xbc\x49\xae\x71\xd4\xd5\xbf\x6e\x13\xfd\x2b\x33\xfc\xf4\x7e\x7f\x46\x95\xdb\x0f\x77\xfd\x2e\xbf\x8f\x31\x97\xf4\x9a\xe0\x0b\xcf\x47\xfa\x86\x49\x17\x1f\x30\x54\x17\xf0\xbe\xbe\xdb\x74\xba\xc6\x66\xc0\x0a\xc8\x99\x14\x1d\x75\x6a\xb1\xb9\x21\x94\x36\x79\x06\x9c\xd2\xa0\x99\xc0\x8e\xba\x15\x37\x69\xa7\xdb\x6d\xa8\x0f\x07\x0f\xe2\x22\xc0\x14\x15\xf0\x97\x87\xf7\xef\x96\x3f\xd8\x19\x92\x51\x0b\x40\xa5\xc8\x77\x8d\xa2\xec\x7c\x0e\xa9\xb9\xdb\xfd\x3d\xc4\x16\xb2\x46\xc3\x1b\xf2\x21\xef\x78\x90\xf3\x3f\xbf\xfe\x65\xae\x14\x7c\x6f\xdd\x59\xd4\x0f\xdb\xf7\x1e\x50\xec\x93\x39\x06\x8a\xb0\xe3\x50\xf1\x5c\x78\x4a\x72\x28\x3a\xb5\x53\xd3\x18\xf0\x89\xc0\x76\xea\xb6\x04\x9a\x9f\x68\x05\x57\x82\xb6\x91\x98\xff\x92\x5d\xd1\xbf\xa7\xe3\x17\xe0\xff\x76\x15\x39\x82\x2b\x99\x74\x95\x84\x1b\x4e\x69\x64\x6c\x94\x93\x3b\x21\x63\x73\x18\x1c\x97\x25\xb9\xc9\xee\x12\xba\xf4\x44\xb2\xa9\xff\x56\x60\xcf\x1b\x30\x76\x44\x22\x12\x16\xef\x35\xa4\x78\xc3\x54\x9c\x09\xfd\xf3\xeb\x5f\x66\x25\x3e\xb6\x97\xe4\x50\xfa\x04\xaf\x53\x8a\x96\x04\x68\x8b\x6f\x73\x78\x8c\xe8\xd8\x9b\x80\x9f\x84\x93\x92\x26\x74\xce\xb2\xd6\x48\xba\xb4\x50\xe1\x96\xc0\xdb\x9a\x60\x47\x5a\x67\x5d\xa3\x09\x3b\x8c\x1d\x41\xef\x38\xc1\x1b\xf6\x3d\xe2\x3c\x5a\xfb\xb3\xb1\xc7\xf7\x6f\xdf\xaf\x92\x64\x02\xa8\x32\xb6\x2e\xd2\x9b\x6e\xd8\xa0\x8e\x15\x2e\x9d\xd9\x44\x34\xce\x16\x3b\xdf\x26\xf8\x04\xdb\xf5\xaf\x7d\x49\xda\xb4\xa1\x75\x94\x5f\xbf\x24\x8e\x4f\x8f\xad\x0e\xcf\xc4\x01\xd6\x69\xe2\xf8\x1f\x1d\x03\x5d\xac\x9c\x99\x38\x7e\x99\x52\xee\xdd\x08\xe5\x5f\x54\x4e\x7a\x31\x67\x28\x50\xd4\xaf\xb0\xca\x2f\x63\x3f\xdf\x04\xbf\xb4\x5b\x72\x5b\xa6\xdd\x72\x67\xdd\x13\x9b\x32\x13\x68\x66\x09\x03\x7e\x19\xcf\x25\x96\xdf\xc4\x9f\x17\xeb\x32\x7b\xb0\x31\xa5\x50\x9c\xfc\x7b\x68\x25\x7c\xfc\xf2\x45\x4a\xf5\xa7\x23\x97\xd7\xb1\xeb\x87\x94\x30\xd4\xe9\x5a\x09\x8b\x5d\xc5\xaa\xea\x0f\xae\xbb\x1c\x3b\x13\x4c\xec\xa1\xc6\x22\xa5\x66\x34\xfb\xdf\x1c\xca\x62\xd0\xd4\x9f\xef\xb3\xee\x86\x24\x43\x53\xc8\x7f\xcf\x3e\xc8\xf8\x8b\x2c\xd8\xf2\x45\xe1\xfb\xf7\xbb\xb7\xbf\x0f\xc0\x5b\x7e\x51\xac\xfe\xea\xf6\x6e\x62\xc1\xc9\xd0\xe1\xa6\xe9\x15\xea\xa6\xc2\x57\x87\xb1\xd8\x4e\x65\xdd\xfd\xd2\xe8\x33\x40\x3a\x1f\x5b\x81\xb4\xf6\x69\x20\x58\x27\x3b\xdb\x34\x72\xd8\x1a\x49\xcf\xd0\x04\x2a\xde\x9d\xde\x30\x5d\x5d\x1d\x5d\x21\xc5\xd7\xd1\xd9\x19\xfc\xfc\xcb\x22\x51\xa5\xe2\xa7\x5e\x1a\x19\x3c\xbd\x9f\x1b\x6e\xfb\x1e\xc4\xea\x8a\x6e\x95\xb2\xad\x09\x13\x57\x7e\xe8\xec\xe1\x9a\x6f\x9c\x28\x2e\xbf\x0c\x74\x6b\x54\x39\xb6\xa1\xb2\x8e\x3f\xc7\x7e\xf6\x70\x23\xb8\x38\xba\x39\xbb\xb7\xfa\xf8\xda\xf1\xb9\xeb\xbb\x1a\x0d\x96\xe4\x32\x27\x0b\x5d\xab\xc5\x5a\x99\xf4\xae\x3f\x38\xdb\x36\x9d\x27\xa2\x95\x86\xbb\x96\x34\x96\x4e\xb5\x6b\x6c\xfc\xe0\xac\x94\x6a\xe2\xab\x4f\x56\xc1\x64\x15\x9f\x7c\xbb\xee\x97\x8a\x4c\x14\xff\x96\x14\xe2\x6f\xba\xc7\xb8\x8c\xb3\x27\xe5\xe8\x02\x9a\x3a\xdd\x17\x66\xd0\x60\x50\xd5\x98\x8d\xfc\xdd\xc5\xc1\x33\x86\xd8\x34\x3e\xdf\xbe\x3a\xe7\x5a\x20\xd5\xd6\xf8\x4b\x18\x9f\xf1\x3b\xe7\x72\x7e\x17\x7a\x6a\xde\xc3\xdd\xe6\x34\xb3\x82\x34\xfd\x57\x14\xbe\x58\x94\xe5\xb0\x25\x1c\x49\x34\xaf\xf3\x57\x61\xf8\xcf\xb2\xef\x36\xe5\x44\x38\x8d\x01\xbb\xee\x66\xc9\xff\x7b\xda\xc4\xc0\xef\xb4\xfb\x02\xc3\xc5\xc9\x6d\x73\x8c\x99\xc9\x78\xe8\x5a\xba\x18\x12\x93\xd1\xfe\x15\x31\xfe\x9f\x00\x00\x00\xff\xff\x8c\x20\x7a\x23\x3b\x20\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
