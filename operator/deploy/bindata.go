// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x73\xdb\xb8\x11\x7f\xd7\xa7\xd8\xf1\x3d\xb8\x37\x63\x52\x4d\x3a\x9d\xe9\xe8\xcd\x4d\xee\x6e\xd4\x5e\x93\x8c\xed\xbb\x97\x24\x0f\x2b\x70\x45\x6e\x0d\x02\x2c\x00\x4a\x51\x3a\xfd\xee\x9d\x05\x48\x8a\x92\xc9\xd8\x71\x7a\x57\xbe\x48\x04\x81\xfd\x87\xdf\xfe\x03\xb0\xe1\x5f\xc9\x79\xb6\x66\x05\xbb\x17\x8b\x7b\x36\xc5\x0a\xde\x60\x4d\xbe\x41\x45\x8b\x9a\x02\x16\x18\x70\xb5\x00\x30\x58\xd3\x0a\x6c\x43\xc6\x57\xbc\x0d\x19\x7e\x6e\x1d\x65\xb6\x21\x87\xc1\xba\x45\x96\x65\x8b\x31\x35\x6c\x98\x3e\x05\x32\xf2\xe6\xf3\xfb\xbf\xf8\x9c\xed\x72\xf7\x62\x43\x01\x7b\x3e\xaf\x5a\x1f\x6c\x7d\x43\xde\xb6\x4e\xd1\x6b\xda\xb2\xe1\xc0\xd6\x9c\xb0\x45\x63\x6c\x40\x19\xf6\xf2\x0a\xa0\xac\x09\xce\x6a\x4d\x2e\x2b\xc9\xe4\xf7\xed\x86\x36\x2d\xeb\x82\x5c\xe4\x30\x68\xf3\xc7\xfc\x65\xfe\xe7\x05\x80\x72\x14\x97\xdf\x71\x4d\x3e\x60\xdd\xac\xc0\xb4\x5a\x0f\x1a\x29\xdd\xfa\x40\xce\xe7\xe8\x6c\x3e\xa8\x97\xb3\x5d\xf8\x86\x94\xf0\x54\xd6\xf4\x64\xa3\x04\x3e\x38\x0c\x54\x1e\x56\xf0\xc6\x1a\x5a\x00\x94\xce\xb6\xcd\x0a\x1e\x10\x48\x2c\x3a\xb9\x3b\x9d\x13\xb7\x38\xa2\xd9\x87\xbf\x8f\x47\x7f\x66\x1f\xe2\x97\x46\xb7\x0e\xf5\x51\xb6\xc4\x96\x4d\xd9\x6a\x74\xc3\xf0\x02\xa0\x71\xe4\xc9\xed\xe8\x17\x73\x6f\xec\xde\xfc\xc8\xa4\x0b\xbf\x82\xe0\x5a\x91\xcb\x2b\xdb\xd0\x68\x3f\x8b\x05\xc0\x0e\x35\x17\xd1\x20\x49\x2c\x11\xf8\xfa\xdd\xfa\xd7\x3f\xdd\xaa\x8a\x6a\x4c\x83\x00\x05\x79\xe5\xb8\x89\xf3\x7a\xf1\x80\x3d\x84\x8a\x20\xcd\x84\xad\x75\xf1\xb5\x17\x12\xae\xdf\xad\xbb\xd5\x8d\x13\x5c\x04\xee\x75\x97\x67\x04\x8e\x61\xec\x8c\xcf\xa5\x08\x92\xe6\x40\x21\x70\xa0\xc4\xb0\xb3\x3e\x15\xe0\x13\x6b\xbb\x85\x50\xb1\x07\x47\xd1\x00\x26\x01\x64\x44\x16\x64\x0a\x1a\xb0\x9b\x7f\x92\x0a\x39\xdc\x8a\x91\x9c\x07\x5f\xd9\x56\x17\xdd\x8e\x06\x70\xa4\x6c\x69\xf8\xf3\x40\xd9\x43\xb0\x91\xa5\xc6\x40\xdd\x66\xf4\x0f\x9b\x40\xce\xa0\x16\x13\xb6\x74\x05\x68\x0a\xa8\xf1\x00\x8e\x84\x07\xb4\x66\x44\x2d\x4e\xf1\x39\xfc\xc3\x3a\x02\x36\x5b\xbb\x82\x2a\x84\xc6\xaf\x96\xcb\x92\x43\xef\x0e\xca\xd6\x75\x6b\x38\x1c\x96\x11\xd4\xbc\x69\x83\x75\x7e\x59\xd0\x8e\xf4\xd2\x73\x99\xa1\x53\x15\x07\x52\xa1\x75\xb4\xc4\x86\xb3\x28\xb8\x89\xde\x90\xd7\xc5\x77\xae\xf3\x1d\x7f\x39\x92\x34\x1c\x64\xd3\x7d\x70\x6c\xca\x61\x38\xa2\x6f\xd6\xee\x82\x42\xd9\x5d\xec\x96\x25\xf9\x8f\xe6\x95\x21\xb1\xca\xcd\x0f\xb7\x77\xd0\x33\x8d\x5b\x70\x6a\xf3\x68\xed\xe3\x32\x7f\x34\xbc\x18\x8a\xcd\x96\x5c\xda\xb8\xad\xb3\x75\xa4\x48\xa6\x68\x2c\x9b\xd0\x21\x89\xc9\x9c\x1a\xdd\xb7\x9b\x9a\x83\xec\xf4\xbf\x5a\xf2\x41\xf6\x27\x87\x57\x31\x28\xc0\x86\xa0\x6d\x0a\x0c\x54\xe4\xb0\x36\xf0\x0a\x6b\xd2\xaf\xd0\xd3\x6f\x6e\x76\xb1\xb0\xcf\xc4\xa4\x8f\x1b\x7e\x1c\xcb\x4e\x27\x26\x6b\x0d\xc3\x7d\xb4\x99\xdc\xa1\xce\x03\x6f\x1b\x52\x27\x9e\x51\x90\x67\x27\xe8\x0d\x18\x48\x30\x3f\x8e\x2f\xf3\xbe\x18\xfd\x51\x39\x09\x0c\xa7\x83\x33\x4a\xc8\x53\x92\xa1\x1d\xfe\x6c\xcb\x92\x4d\x79\xbe\x6a\x8e\x09\xa4\x80\xbd\xe5\x72\xc2\xf7\x1f\x65\x19\xed\x67\x0d\x07\x2b\x9f\x7e\x7a\x75\xfb\x83\xd9\xb1\xb3\xa6\x26\x13\xbe\x8d\xd0\x0d\x95\xdf\x26\xcc\x1d\x19\x7c\x86\x10\xa6\x0f\xc5\x5f\xb9\x72\x12\x31\xf2\xf4\xce\xb8\x2e\xce\x29\x9e\xe0\xa7\x4f\xb2\xeb\xd7\x7d\x10\xbf\x96\xf4\x3d\x5a\x9e\x62\x2a\x8d\x72\xcb\x13\x44\x9b\x06\x72\xc0\xd0\xfa\x47\xa1\x1c\x67\x9d\x80\xd9\x6e\x62\x2e\x7b\x16\x9a\x95\x35\x05\x8f\xaa\x84\x39\xe6\xc3\xb4\x2e\xdc\x51\x88\x7c\xfa\x61\x60\xe3\x03\x1a\x45\x3e\x3f\x23\xc3\x81\xea\x09\x70\x9f\x50\xbf\x38\xd2\x39\xc6\xc0\x94\x86\x44\xb3\x98\xa4\x4e\x12\xd3\xa5\x4f\xba\x9e\x33\x93\x67\x24\x2a\x3a\x92\x35\x43\x3d\x05\x35\xa9\x0a\x0d\xfb\x3a\x26\x25\x53\x50\x21\x79\x4b\xe2\xa1\xa7\x02\xf6\x15\x19\x31\xe8\x04\xd1\x82\x02\xb2\xf6\x83\x10\x47\xb1\x84\x87\x04\x55\x84\xc6\xb1\x75\x0c\xb1\xa0\x00\xeb\x60\x1f\x53\x66\xfc\xd6\x34\xfa\x30\x05\x5c\x0b\xa8\xf5\xd1\x76\x91\x3c\x94\xbc\x23\x03\x92\x5a\x72\xf8\x60\xc6\xfa\x74\x59\x78\x43\x80\x45\x11\xab\x92\x09\x8a\xf4\xa9\xd1\xac\x38\xe8\x43\x4a\xd7\x87\xd1\xde\x43\xa8\x30\x88\xb2\xce\xc7\x34\xac\x6c\xdd\x58\x13\xad\xad\xa2\xb1\x36\xb6\x0d\x13\x64\x1d\x86\x2a\xa6\x20\x34\x31\xa3\xb0\x4b\x99\xcd\x7a\x3a\xa1\x1e\x6d\x19\xd3\x95\x04\xd7\x98\xac\xac\xac\x9c\x20\x39\xb2\xa1\xcf\xe1\xad\x51\xd4\x61\xba\xb8\x8a\xa0\xae\x09\x8d\x30\x89\x26\x39\xe2\x43\xa1\x81\x94\xc3\x26\x68\xca\xe6\x96\x54\x00\xba\x0d\x07\x87\x8e\xf5\x01\x32\x60\x99\xad\x6c\x4d\x1e\x1a\x74\xa1\x77\xd8\xeb\x77\xeb\x54\x8b\x54\x98\xdc\xc8\x63\x3d\x45\x74\x83\xea\x7e\x8f\xae\xf0\x59\x9c\xbd\xb5\x2e\xbd\x89\xed\x30\xf0\x86\x35\x87\x68\x6a\x45\xce\x74\x08\x39\x24\xb5\x23\xbf\x29\xdd\x07\x09\xf2\x8b\x07\x9f\xbf\x94\x12\x00\x34\xfa\x70\xe7\xd0\x78\xee\x6b\xf3\xa9\x59\x20\x62\xd6\x18\x56\x20\x69\x3e\x0b\x3c\xa9\xd9\x23\x31\x57\x72\xb0\xf7\x58\xce\x70\x78\x64\xad\x23\xf4\xd3\x99\x62\x2e\xb4\xdc\xc4\x15\x12\x5f\xce\x9c\x13\xc1\x1a\xca\xf6\xd6\x15\x57\xc7\x62\x65\x92\x30\x9c\x55\xb6\x43\x70\x96\xbe\xc3\xba\x83\xbc\x2b\x6c\x3d\x0d\x1f\x5a\xe7\xc8\x84\x2e\xf6\x4e\x85\x13\x79\xd6\x61\x42\xaa\x18\x32\xd8\xc4\x9d\x67\xa1\xd8\x86\xa6\x0d\x57\xe0\x5b\x55\x01\xfa\x28\xb3\x66\x33\x27\xa8\xf4\x5f\x2a\x68\x28\x25\x92\x76\x4b\x05\x5f\x6c\xc0\xb7\x75\x8d\x8e\x3f\x47\xf8\xab\x24\x62\x17\x1d\xa2\xf0\x33\x72\x3e\xb2\x21\x0f\xd3\xcb\x93\x97\xc6\xcf\x8f\xef\xe4\x31\x8c\xdf\x1d\x1a\xea\x13\xa6\x2c\x1e\xcc\x3d\xf8\x71\x54\xd5\xcf\xd8\x26\x1c\x1a\x56\xa8\xf5\x41\x5c\xbf\xdf\xf0\x02\x04\x01\x12\x58\x7d\x65\x5d\x80\xa6\x72\xb1\x66\x1d\x87\xc8\xc8\x6c\x8e\x6a\x17\x3d\xd9\x14\x2c\x78\xe8\xb2\x25\xc7\x90\x0f\x1f\x2e\x70\x63\xc4\x67\x74\x26\x4d\xe0\x87\x0b\x68\xac\x46\xc7\xe1\x90\xc3\x8f\x76\x2a\x80\xc9\x43\x9f\xb0\x6e\x34\x5d\x01\x9f\xeb\xd7\x73\xf1\x29\xab\xa0\x90\x63\x75\x48\x38\x8a\xbd\xe4\xd5\x9c\xf2\x51\x1a\xf6\xa9\xe3\xfc\x70\x01\x0a\x7d\x34\x66\xe3\xec\x06\x37\xfa\x10\x67\x88\xac\x57\xe0\xed\x29\xdb\x2f\x6b\xbe\x11\x47\xd0\x9a\x0a\xf8\x70\xb1\x36\x1d\xf9\x89\x08\x04\x8f\x21\x22\xa5\x00\x7a\x50\x3a\x01\x64\x1d\xcc\x26\x3e\x08\xc5\x07\xc3\xb3\xf5\x59\xff\x09\x9d\xc3\xc3\x59\xe5\x26\x3d\x66\xf1\x36\xae\x79\x80\xe7\xa7\x94\x1b\x69\xe9\x0d\x6d\x29\x3a\x56\x3c\x19\x41\x36\x1e\xc8\xd8\xb6\xac\x62\x03\x24\xd1\x33\x02\xca\x82\xa6\x00\x07\xdb\x4e\x98\x89\x8d\x34\x1f\x41\x30\x59\xdb\x82\xb7\x69\x6b\x1c\x75\xf9\xaf\x6b\xa2\xbf\x32\xc2\x4f\xf7\xfb\x33\xaa\x5c\xbf\x5b\xf7\x5d\x7e\xef\x63\x2e\xe9\x35\xc1\x17\x1e\xf7\xf4\x2d\x93\x2e\xde\x61\xa8\x9e\xc0\xfb\x72\xbd\xed\x74\x8d\xc5\x80\x15\x90\x33\x29\x3a\xa9\xd4\x62\x71\x43\x28\x65\xf2\x0c\x38\xa5\x40\x33\x81\x1d\x75\x2b\xae\x52\xa7\xdb\x35\xd4\xc7\x83\x07\xd9\x22\xc0\xe4\x15\xf0\xb7\xdb\xb7\x6f\x96\x3f\xd9\x19\x92\x51\x0b\x40\xa5\xc8\x77\x85\xa2\x74\x3e\xc7\xd0\xdc\x75\x7f\xb7\xb1\x84\xac\xd1\xf0\x96\x7c\xc8\x3b\x1e\xe4\xfc\xfb\x97\x1f\xe7\x52\xc1\x8f\xd6\x3d\xf0\xfa\xa1\x7d\xef\x01\xc5\x3e\x99\x63\xa0\x08\x7b\x0e\x15\xcf\xb9\xa7\x04\x87\xa2\x53\x3b\x15\x8d\x01\xef\x09\x6c\xa7\x6e\x4b\xa0\xf9\x9e\x56\x70\x21\x68\x1b\x89\xf9\x6f\xe9\x8a\xfe\x33\xed\xbf\x00\x7f\xd8\x57\xe4\x08\x2e\x64\xd2\x45\x12\x6e\x38\xa5\x91\xb1\x51\x4c\xee\x84\x8c\xc5\x61\x70\x5c\x96\xe4\x26\xab\x4b\xe8\xc2\x13\x49\x53\xff\xbd\xc0\x9e\xb7\x60\xec\x88\x44\x24\x2c\xbb\xd7\x90\xe2\x2d\x53\xf1\x40\xe8\xf7\x2f\x3f\xce\x4a\x7c\x6a\x2f\x89\xa1\xf4\x09\x5e\xa6\x10\x2d\x01\xd0\x16\xdf\xe7\x70\x17\xd1\x71\x30\x01\x3f\x09\x27\x25\x45\xe8\x9c\x65\xad\x91\x70\x69\xa1\xc2\x1d\x81\xb7\x35\xc1\x9e\xb4\xce\xba\x42\x13\xf6\x18\x2b\x82\x7e\xe3\x04\x6f\xd8\xd7\x88\xf3\x68\xed\xcf\xc6\xee\xde\xbe\x7e\xbb\x4a\x92\x09\xa0\xca\x58\xba\x48\x6d\xba\x65\x83\x3a\x66\xb8\x74\x66\x13\xd1\x38\x9b\xec\x7c\x9b\xe0\x13\x6c\x57\xbf\xf6\x29\x69\xdb\x86\xd6\x51\x7e\xf9\x1c\x3f\x3e\x3f\xb6\x3a\x3e\x13\x07\x58\xe7\x81\xe3\xff\x74\x0c\xf4\x64\xe5\xcc\xc4\xf1\xcb\x94\x72\x6f\x46\x28\xff\xa2\x72\x52\x8b\x39\x43\x81\xa2\x7e\x85\x55\x7e\x19\xeb\xf9\x26\xf8\xa5\xdd\x91\xdb\x31\xed\x97\x7b\xeb\xee\xd9\x94\x99\x40\x33\x4b\x18\xf0\xcb\x78\x2e\xb1\xfc\x2e\xfe\x3c\x5b\x97\xd9\x83\x8d\x29\x85\xe2\xe4\xdf\x43\x2b\xe1\xe3\x97\xcf\x52\xaa\x3f\x1d\x79\x7a\x1e\xbb\xbc\x4d\x01\x43\x9d\xaf\x15\xb7\xd8\x57\xac\xaa\xfe\xe0\xba\x8b\xb1\x33\xce\xc4\x1e\x6a\x2c\x52\x68\x46\x73\xf8\xcd\xa1\x2c\x06\x4d\xf5\xf9\x21\xeb\x2e\x58\x32\x34\x85\xfc\xf7\xec\x83\x8c\x3f\xcb\x82\x2d\x3f\xc9\x7d\x7f\x59\xbf\xfe\x7d\x00\xde\xf2\xb3\x7c\xf5\xab\xcb\xbb\x89\x05\x67\x43\xc7\x8b\xaa\x17\xa8\x9b\x0a\x5f\x1c\xc7\x62\x39\x95\x75\xd7\x53\xa3\xcf\x00\xe9\x7c\x6c\xb8\xdf\x91\x66\xc8\x3a\xe9\x6c\xd3\xc8\xb1\x35\x92\x9a\xa1\x09\x54\xbc\x39\xbf\x7f\xba\xb8\x38\xb9\x60\x8a\xaf\xa3\xb3\x33\x78\xff\x71\x91\xa8\x52\xf1\x6b\x2f\x8d\x0c\x9e\x5f\xef\x0d\x97\x85\xb7\x62\x75\x45\xd7\x4a\xd9\xd6\x84\x89\x1b\x43\x74\xf6\x78\x4b\x38\x0e\x14\x4f\xbf\x4b\x74\x1b\x54\x39\xb6\xa1\xb2\x8e\x3f\xc7\x7a\xf6\x78\xa1\xb8\x38\xb9\x57\xbb\xb1\xfa\xf4\xd6\xf2\xb1\xdb\xbf\x1a\x0d\x96\xe4\x32\x27\x0b\x5d\xab\xc5\x5a\x99\xd4\xae\x3f\x39\xdb\x36\xdd\x4e\x44\x2b\x0d\x77\x2d\x69\x2c\x9d\x6a\xd7\xd8\xf8\x61\xb3\x52\xa8\x89\xaf\x3e\x59\x05\x93\x55\x7c\xda\xdb\x4d\xbf\x54\x64\xa2\xf8\xb7\xa4\x10\x7f\xd3\x3d\xc6\xd3\x38\x7b\x52\x8e\x9e\x40\xb3\xc1\xa0\xaa\x2f\x52\xc7\xa6\xf1\xf9\xee\xc5\x43\x16\x05\x52\x6d\x8d\xff\x1f\x71\x79\x78\x2d\x7a\x6e\xcb\xe3\x35\xe7\x34\xb3\x82\x34\x9d\xf1\xd5\xe9\xae\x74\x42\x00\xf9\xbb\x8f\x83\xdf\x20\xca\x72\xe8\xff\x46\x12\xcd\xeb\xfc\x4d\x80\xfd\xab\x34\xd9\xa6\x9c\xf0\x9d\x31\x3a\x37\xdd\x2c\xf9\x7f\x43\xdb\xe8\xe5\x9d\x76\x5f\x60\xb8\x38\xbb\x78\x8e\x0e\x32\x09\xfe\xae\x7e\x8b\xf8\x9f\x74\xed\x6f\x70\xe8\xff\x06\x00\x00\xff\xff\xee\x69\x25\x3d\x67\x20\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
