// Package deploy Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// resources.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcf\x92\xdb\xb8\xd1\xbf\xeb\x29\xba\x66\x0f\xf3\x6d\x7d\x43\x69\xed\x54\xaa\x12\xdd\x26\xf6\xda\x35\xc9\xc6\x9e\x9a\x99\xf5\xc5\xf6\xa1\x05\xb6\xc8\xce\x80\x00\x03\x80\x92\xe5\xad\x7d\xf7\x54\x03\x24\x45\x49\xa4\x47\xf6\x66\x37\xbc\x48\x04\x81\xfe\xdf\xbf\x6e\x00\x58\xf3\x3b\x72\x9e\xad\x59\xc2\xe6\xd9\xec\x91\x4d\xbe\x84\x37\x58\x91\xaf\x51\xd1\xac\xa2\x80\x39\x06\x5c\xce\x00\x0c\x56\xb4\x04\x5b\x93\xf1\x25\xaf\x43\x86\x9f\x1b\x47\x99\xad\xc9\x61\xb0\x6e\x96\x65\xd9\x6c\x48\x0d\x6b\xa6\x4f\x81\x8c\xbc\xf9\xf9\xe3\x5f\xfc\x9c\xed\x62\xf3\x6c\x45\x01\x3b\x3e\x2f\x1a\x1f\x6c\x75\x47\xde\x36\x4e\xd1\x4b\x5a\xb3\xe1\xc0\xd6\x1c\xb0\x45\x63\x6c\x40\x19\xf6\xf2\x0a\xa0\xac\x09\xce\x6a\x4d\x2e\x2b\xc8\xcc\x1f\x9b\x15\xad\x1a\xd6\x39\xb9\xc8\xa1\xd7\xe6\x87\xf9\xf3\xf9\x9f\x67\x00\xca\x51\x5c\xfe\xc0\x15\xf9\x80\x55\xbd\x04\xd3\x68\xdd\x6b\xa4\x74\xe3\x03\x39\x3f\x47\x67\xe7\xbd\x7a\x73\xb6\x33\x5f\x93\x12\x9e\xca\x9a\x8e\x6c\x94\xc0\x07\x87\x81\x8a\xdd\x12\xde\x58\x43\x33\x80\xc2\xd9\xa6\x5e\xc2\x09\x81\xc4\xa2\x95\xbb\xd5\x39\x71\x8b\x23\x9a\x7d\xf8\xc7\x70\xf4\x27\xf6\x21\x7e\xa9\x75\xe3\x50\xef\x65\x4b\x6c\xd9\x14\x8d\x46\xd7\x0f\xcf\x00\x6a\x47\x9e\xdc\x86\x7e\x36\x8f\xc6\x6e\xcd\x2b\x26\x9d\xfb\x25\x04\xd7\x88\x5c\x5e\xd9\x9a\x86\x3c\x7d\xb3\x72\xad\xb9\x7d\xa7\x0b\x86\xc6\x2f\xe1\x97\x5f\x67\x00\x1b\xd4\x9c\x47\x63\xa5\x8f\xa2\xcc\xf5\xed\xcd\xbb\x3f\xdd\xab\x92\x2a\x4c\x83\x00\x39\x79\xe5\xb8\x8e\xf3\x3a\xe2\xc0\x1e\x42\x49\x90\x66\xc2\xda\xba\xf8\xda\x29\x00\xd7\xb7\x37\xed\xea\xda\x49\xcc\x04\xee\x24\x90\x67\x10\x38\xfd\xd8\x11\x9f\x4b\x11\x24\xcd\x81\x5c\x42\x85\x12\xc3\xd6\x33\x94\x83\x4f\xac\xed\x1a\x42\xc9\x1e\x1c\x45\xe3\x98\x14\x3c\x03\xb2\x20\x53\xd0\x80\x5d\xfd\x8b\x54\x98\xc3\xbd\x18\xd0\x79\xf0\xa5\x6d\x74\xde\x7a\x3b\x80\x23\x65\x0b\xc3\x9f\x7b\xca\x1e\x82\x8d\x2c\x35\x06\x6a\x1d\xd5\x3d\x6c\x02\x39\x83\x5a\x4c\xd8\xd0\x15\xa0\xc9\xa1\xc2\x1d\x38\x12\x1e\xd0\x98\x01\xb5\x38\xc5\xcf\xe1\x9f\xd6\x11\xb0\x59\xdb\x25\x94\x21\xd4\x7e\xb9\x58\x14\x1c\xba\x54\x51\xb6\xaa\x1a\xc3\x61\xb7\x88\x01\xcf\xab\x26\x58\xe7\x17\x39\x6d\x48\x2f\x3c\x17\x19\x3a\x55\x72\x20\x15\x1a\x47\x0b\xac\x39\x8b\x82\x9b\x98\x29\xf3\x2a\xff\xae\x77\xf4\xe5\x40\xd2\xb0\x93\x80\xf0\xc1\xb1\x29\xfa\xe1\x18\x99\x93\x76\x97\x08\x15\xef\x62\xbb\x2c\xc9\xbf\x37\xaf\x0c\x89\x55\xee\x7e\xbc\x7f\x80\x8e\x69\x74\xc1\xa1\xcd\xa3\xb5\xf7\xcb\xfc\xde\xf0\x62\x28\x36\x6b\x72\xc9\x71\x6b\x67\xab\x48\x91\x4c\x5e\x5b\x36\xa1\x8d\x24\x26\x73\x68\x74\xdf\xac\x2a\x0e\xe2\xe9\x7f\x37\xe4\x83\xf8\x67\x0e\x2f\x22\x60\xc0\x8a\xa0\xa9\x73\x0c\x94\xcf\xe1\xc6\xc0\x0b\xac\x48\xbf\x40\x4f\xbf\xbb\xd9\xc5\xc2\x3e\x13\x93\x3e\x6d\xf8\x21\xce\x1d\x4e\x4c\xd6\xea\x87\x3b\x24\x1a\xf5\x50\x9b\x81\xf7\x35\xa9\x83\xcc\xc8\xc9\xb3\x93\xe8\x0d\x18\x48\x62\x7e\x88\x3d\xd3\xb9\x18\xf3\x51\x39\x29\x02\x87\x83\x13\x4a\xc8\x53\x90\xa1\x0d\xfe\x64\x8b\x82\x4d\x71\xbc\x6a\x8a\x09\x24\x30\x5f\x73\x31\x92\xfb\xfd\x62\x0c\x92\x59\x4b\xb8\x7c\xff\x43\xf6\xd7\x8f\xff\x3f\x4f\x3f\x97\x23\x53\x27\xa5\x8b\xa6\xb6\x86\x83\x95\x4f\xaf\x5f\xdc\xff\x68\x36\xec\xac\xa9\xc8\x84\x31\x9e\x64\x9a\x6a\x6c\x3c\x83\x97\x8c\x85\xb1\x3e\xb0\xf2\xb7\xce\xe6\xa3\x73\x1e\x8e\xb1\xe1\x6b\xa5\xbb\xa3\x62\xc2\x18\x67\xd2\x78\x20\x83\xe3\x9a\x7d\x91\x80\xe9\xca\xfe\x57\xae\x1c\x8d\x58\x79\x3a\x30\xb8\xc9\x8f\x29\x1e\xc4\x6f\xd7\x00\xdc\xbc\xec\x8a\xc8\xb5\xb4\x16\x83\xe5\x09\xd3\x69\x50\xf7\xce\x10\x6d\x3c\x91\x52\xb9\x7b\x2a\x95\xe2\xac\x83\x64\xb2\xab\x58\x67\xbf\x29\x9b\x94\x35\x39\x0f\x3a\x98\x29\xe6\xfd\xb4\x16\x6e\x29\x44\x3e\xdd\x30\xb0\xf1\x01\x8d\x22\x3f\x3f\x22\xc3\x81\xaa\x91\xe4\x3a\xa0\x7e\xb1\xa7\xb3\xc7\xe0\x54\x06\x45\xb3\x58\x24\x0f\x0a\xe3\xa5\x4f\xba\x1e\x33\x93\x67\x20\x2a\x3a\x92\x35\x7d\xaf\x07\x15\xa9\x12\x0d\xfb\x2a\x16\x45\x93\x53\x2e\x75\x53\xf0\xd8\x53\x0e\xdb\x92\x8c\x18\x74\x84\x68\x4e\x01\x59\xfb\x5e\x88\xbd\x58\xc2\x43\x40\x1d\xa1\x76\x6c\x1d\x43\x6c\x76\xc0\x3a\xd8\xc6\x92\x1d\xbf\xd5\xb5\xde\x8d\x05\xae\x05\xd4\x7a\x6f\xbb\x48\x1e\x0a\xde\x90\x01\x29\x6d\x73\xf8\x60\x86\xfa\xb4\x5d\xc0\x8a\x00\xf3\x9c\xc6\x52\x3c\x58\xa0\x4f\xb5\x66\xc5\x41\xef\x52\xbb\xb0\x1b\xf8\x1e\x42\x89\x41\x94\x75\x3e\xb6\x01\xca\x56\xb5\x35\xd1\xda\x2a\x1a\x6b\x65\x9b\x31\x80\x70\x18\xca\x58\x02\xd1\xc4\x8a\xc6\x2e\x55\x56\xeb\xe9\x80\x7a\xb4\x65\x2c\x97\x02\xee\xb1\x58\x5a\x59\x39\x42\x72\x60\x43\x3f\x87\xb7\x46\x51\x1b\xd3\xf9\x55\x0c\xea\x8a\xd0\x08\x93\x68\x92\x7d\x7c\x28\x34\x90\x6a\xe8\x08\x4d\x71\x6e\x41\x39\xa0\x5b\x71\x70\xe8\x58\xef\x20\x03\x96\xd9\xca\x56\xe4\xa1\x46\x17\xba\x84\xbd\xbe\xbd\x49\xbd\x50\x89\x29\x8d\x3c\x56\x63\x44\x57\xa8\x1e\xb7\xe8\x72\x9f\xc5\xd9\x6b\xeb\xd2\x9b\xd8\x0e\x03\xaf\x58\x73\x88\xa6\x56\xe4\x4c\x1b\x21\xbb\xa4\x76\xe4\x37\xa6\x7b\x2f\xc1\xfc\xe2\xe4\xf3\x97\x4a\x12\x80\x46\x1f\x1e\x1c\x1a\xcf\xdd\xbe\x61\x6c\x16\x88\x98\x15\x86\x25\x48\x9b\x91\x05\x1e\xd5\xec\x09\xcc\x95\x1e\xc0\x7b\x2c\x26\x38\x3c\xb1\xd6\x11\xfa\xf1\x4a\x31\x05\x2d\x77\x71\x85\xe0\xcb\x51\x72\x22\x58\x43\xd9\xd6\xba\xfc\x6a\xdf\x2c\x8d\x12\x86\xa3\xce\xba\x07\x67\xd9\x13\x59\xb7\x93\x77\x85\x8d\xa7\xfe\x43\xe3\x1c\x99\xd0\x62\xef\x18\x9c\xc8\x73\x13\x46\xa4\x8a\x90\xc1\x26\x7a\x9e\x85\x62\x13\xea\x26\x5c\x81\x6f\x54\x09\xe8\xa3\xcc\x9a\xcd\x94\xa0\xb2\x37\x54\x41\x43\x21\x48\xda\x2e\x95\xf8\x62\x03\xbe\xa9\x2a\x74\xfc\x39\x86\xbf\x4a\x22\xb6\xe8\x10\x85\x9f\x90\xf3\x09\x87\x9c\x96\x97\xb3\x97\xc6\xcf\x4f\x7b\x72\x0f\xe3\x0f\xbb\x9a\xba\x82\x29\x8b\x7b\x73\xf7\x79\x1c\x55\xf5\x13\xb6\x09\xbb\x9a\x15\x6a\xbd\x93\xd4\xef\x1c\x9e\x83\x44\x80\x00\xab\x2f\xad\x0b\x50\x97\x2e\xf6\xcc\x43\x88\x8c\xcc\xa6\xa8\xb6\xe8\xc9\x26\x67\x89\x87\xb6\x5a\x72\x84\x7c\xf8\x70\x81\x2b\x23\x39\xa3\x33\xd9\xa0\x7e\xb8\x80\xda\x6a\x74\x1c\x76\x73\x78\x65\xc7\x00\x4c\x1e\xfa\x84\x55\xad\xe9\x0a\xf8\x58\xbf\x8e\x8b\x4f\x55\x05\x85\x1c\xab\x5d\x8a\xa3\xb8\x97\xbd\x9a\x52\x3e\x4a\xc3\x3e\xed\x78\x3f\x5c\x80\x42\x1f\x8d\x59\x3b\xbb\xc2\x95\xde\xc5\x19\x22\xeb\x15\x78\x7b\xc8\xf6\xcb\x9a\xaf\x24\x11\xb4\xa6\x1c\x3e\x5c\xdc\x98\x96\xfc\x08\x02\xc1\x53\x11\x91\x4a\x00\x9d\xb4\x4e\xd2\x62\xa6\x30\x1b\xf9\x20\x14\x4f\x86\x27\xfb\xb3\xee\x13\x3a\x87\xbb\xa3\xce\x4d\xf6\xb8\xf9\xdb\xb8\xe6\x24\x9e\xcf\x69\x37\xd2\xd2\x3b\x5a\x53\x4c\xac\x78\x6a\x83\x6c\x3c\x90\xb1\x4d\x51\xc6\x0d\x98\xa0\x67\x0c\x28\x0b\x9a\x02\xec\x6c\x33\x62\x26\x36\xb2\xf9\x09\x12\x93\x95\xcd\x79\x9d\x5c\xe3\xa8\xad\x7f\xed\x26\xfe\x2b\x11\x7e\xfc\xbc\x61\x42\x95\xeb\xdb\x9b\xee\x94\xa1\xcb\x31\x97\xf4\x1a\xe1\x0b\x4f\x67\xfa\x9a\x49\xe7\xb7\x18\xca\x33\x78\x5f\xde\xac\x5b\x5d\x63\x33\x60\x25\xc8\x99\x14\x1d\x74\x6a\xb1\xb9\x21\x94\x36\x79\x22\x38\xa5\x41\x33\x81\x1d\xb5\x2b\xae\xd2\x4e\xbb\xdd\xd0\xef\x0f\x3e\xc4\x45\x80\x29\x2b\xe0\xef\xf7\x6f\xdf\x2c\x5e\xdb\x09\x92\x51\x0b\x40\xa5\xc8\xb7\x8d\xa2\x6c\xa7\xf6\xd0\xdc\xee\x3e\xef\x63\x0b\x59\xa1\xe1\x35\xf9\x30\x6f\x79\x90\xf3\xef\x9f\x7f\x9c\x2a\x05\xaf\xac\x3b\xc9\xfa\xfe\xf8\xa0\x0b\x28\xf6\xc9\x1c\x3d\x45\xd8\x72\x28\x79\x2a\x3d\x05\x1c\xf2\x56\xed\xd4\x34\x06\x7c\x24\xb0\xad\xba\x0d\x81\xe6\x47\x5a\xc2\x85\x44\xdb\x40\xcc\x5f\x64\x57\xf4\xeb\x78\xfe\x02\xfc\xdf\xb6\x24\x47\x70\x21\x93\x2e\x92\x70\xfd\x29\x91\x8c\x0d\x30\xb9\x15\x32\x36\x87\xc1\x71\x51\x90\x1b\xed\x2e\xa1\x85\x27\xda\x90\x09\xdf\x4b\xd8\xf3\x1a\x8c\x1d\x90\x88\x84\xc5\x7b\x35\x29\x5e\x33\xe5\x27\x42\xbf\x7f\xfe\x71\x52\xe2\x43\x7b\x09\x86\xd2\x27\x78\x9e\x20\x5a\x00\xd0\xe6\xdf\xcf\xe1\x21\x46\xc7\xce\x04\xfc\x24\x9c\x94\x34\xa1\x53\x96\xb5\x46\xe0\xd2\x42\x89\x1b\x02\x6f\x2b\x82\x2d\x69\x9d\xb5\x8d\x26\x6c\x31\x76\x04\x9d\xe3\x24\xde\xb0\xeb\x11\xa7\xa3\xb5\x3b\x9b\x7b\x78\xfb\xf2\xed\x32\x49\x26\x01\x55\xc4\xd6\x45\x7a\xd3\x35\x1b\xd4\xb1\xc2\xa5\x33\xa3\x18\x8d\x93\xc5\xce\x37\x29\x7c\x82\x6d\xfb\xd7\xae\x24\xad\x9b\xd0\x38\x9a\x8f\x1d\x27\x3c\x99\xc7\xc7\xc7\x66\xfb\x67\xe4\x00\xed\x18\x38\xfe\x47\xc7\x50\x67\x2b\x67\x46\x8e\x7f\xc6\x94\x7b\x33\x88\xf2\x2f\x2a\x27\xbd\x98\x33\x14\x28\xea\x97\x5b\xe5\x17\xb1\x9f\xaf\x83\x5f\xd8\x0d\xb9\x0d\xd3\x76\xb1\xb5\xee\x91\x4d\x91\x49\x68\x66\x29\x06\xfc\x22\x9e\x4b\x2c\xbe\x8b\x3f\xdf\xac\xcb\xe4\xc1\xc6\x98\x42\x71\xf2\x1f\xa1\x95\xf0\xf1\x8b\x6f\x52\xaa\x3b\x1d\x39\xbf\x8e\x5d\xde\x27\xc0\x50\xc7\x6b\x25\x2d\xb6\x25\xab\xb2\x3b\x38\x6f\x31\x76\x22\x99\xd8\x43\x85\x79\x82\x66\x34\xbb\xdf\x3d\x94\xc5\xa0\xa9\x3f\xdf\x65\xed\xe5\x4f\x86\x26\x97\xff\x9e\x7d\x90\xf1\x6f\xb2\x60\xc3\x67\xa5\xef\xcf\x37\x2f\xff\x98\x00\x6f\xf8\x9b\x72\xf5\xab\xdb\xbb\x91\x05\x47\x43\xfb\x4b\xb4\x67\xa8\xeb\x12\x9f\xed\xc7\x62\x3b\x95\xb5\x57\x67\x83\xcf\x00\xe9\x7c\xac\xbf\x7b\x92\xcd\x90\x75\xb2\xb3\x4d\x23\xfb\xad\x91\xf4\x0c\x75\xa0\xfc\xcd\xf1\xdd\xd8\x45\x2a\x5a\xdd\xe5\x57\x7c\x1d\x9c\x9d\xc1\xfb\x8f\xb3\x44\x95\xf2\x77\x9d\x34\x32\x78\x7c\xf5\xd8\x5f\x64\xde\x8b\xd5\x15\x5d\x2b\x65\x1b\x13\x46\x6e\x33\xd1\xd9\xfd\x0d\xe6\x10\x28\xce\xbf\xe7\x74\x2b\x54\x73\x6c\x42\x69\x1d\x7f\x8e\xfd\xec\xfe\xb2\x73\x76\x70\xe7\x77\x67\xf5\xe1\x8d\xea\x53\x37\x93\x15\x1a\x2c\xc8\x65\x4e\x16\xba\x46\x8b\xb5\x32\xe9\x5d\x5f\x3b\xdb\xd4\xad\x27\xa2\x95\x0e\x2e\xf5\xb2\xf6\x54\xbd\xc2\xda\xf7\xce\x4a\x50\x13\x5f\x7d\xb2\x0a\x26\xab\xf8\xe4\xdb\x55\xb7\x54\x64\xa2\xf8\xb7\xa0\x10\x7f\xd3\x3d\xca\x79\x9c\x3d\x29\x47\x67\xd0\xd4\xe9\xa6\x33\x83\x1a\x83\x2a\x87\x6c\xe4\xef\x36\x0e\x9e\x30\xc4\xba\xf6\xf3\xcd\xb3\x53\xae\x39\x52\x65\x8d\x3f\x87\xf1\x09\xbf\x53\x2e\xa7\xb7\xb8\xc7\xe6\xdd\xdf\xca\x8e\x33\xcb\x49\xd3\x7f\x45\xe1\xb3\x45\x59\xf4\x5b\xc2\x81\x44\xd3\x3a\xff\xa6\x18\xfe\x9b\xec\xbb\x4d\x31\x92\x4e\xc3\x80\x5d\xb5\xb3\xe4\xff\x1d\xad\x63\xe2\xb7\xda\x7d\x81\xe1\xec\xe8\x9e\x3c\xe6\xcc\x68\x3e\xb4\x2d\x5d\x4c\x89\xd1\x6c\xff\x0d\x39\xfe\x9f\x00\x00\x00\xff\xff\x9c\x0c\x1a\x57\x16\x21\x00\x00")

func resourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesYaml,
		"resources.yaml",
	)
}

func resourcesYaml() (*asset, error) {
	bytes, err := resourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources.yaml": resourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources.yaml": {resourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
