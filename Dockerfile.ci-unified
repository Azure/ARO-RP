ARG REGISTRY
ARG VERSION

#Stage 1: Build the SRE Portal Assets
FROM ${REGISTRY}/ubi8/go-toolset:1.20.12-5 as portal-build
WORKDIR /build/portal/v2
USER root

# Copying package files and installing dependencies
COPY portal/v2/package*.json ./
RUN npm ci
RUN npm audit --omit=dev # Run audit without dev dependencies

# Copying the rest of the source and build
COPY portal/v2/ ./
RUN npm run lint
RUN mkdir -p /build/portal/v2/dist  # Explicitly create the directory

# Set permissions to avoid EACCES error
RUN chown -R root:root /build/portal/v2

# Run build with correct permissions
RUN npm run build || (echo "Build failed, listing current directory:" && ls -la)

# Stage 2: Compile the Golang RP code
FROM ${REGISTRY}/ubi8/go-toolset:1.20.12-5 AS builder
USER root
WORKDIR /app

# golang config and build steps
ENV GOPATH=/root/go
ENV GOFLAGS="-tags=containers_image_openpgp,exclude_graphdriver_btrfs,exclude_graphdriver_devicemapper"

# Install golangci-lint and verify
RUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /usr/local/bin v1.56.2
RUN which golangci-lint || (echo "golangci-lint not found" && exit 1)

# Add /usr/local/bin to the PATH
ENV PATH="/usr/local/bin:${PATH}"

COPY go.mod go.sum ./
COPY vendor vendor
COPY swagger swagger
COPY .golangci.yml ./
COPY hack hack
COPY cmd cmd
COPY pkg pkg
COPY test test

# Explicitly create directory for JS assets to ensure it exists
RUN mkdir -p /app/portal/dist

# Ensure JS assets are available before generating Go code
COPY --from=portal-build /build/portal/v2/dist /app/portal/dist

RUN golangci-lint run --verbose
RUN go generate ./...
RUN go build -ldflags "-X github.com/Azure/ARO-RP/pkg/util/version.GitCommit=${VERSION}" ./cmd/aro
RUN go test ./test/e2e/... -tags e2e,codec.safe -c -ldflags "-X github.com/Azure/ARO-RP/pkg/util/version.GitCommit=${VERSION}" -o e2e.test

# Stage 3: Final Image
FROM ${REGISTRY}/ubi8/ubi-minimal AS final
RUN microdnf update && microdnf clean all
COPY --from=builder /app/aro /app/e2e.test /usr/local/bin/ 
COPY --from=builder /app/cmd/aro /app/cmd/aro             
ENTRYPOINT ["aro"]
EXPOSE 2222/tcp 8080/tcp 8443/tcp 8444/tcp 8445/tcp
USER 1000
